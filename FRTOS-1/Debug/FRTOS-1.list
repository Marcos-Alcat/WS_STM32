
FRTOS-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d24  08003d24  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003d24  08003d24  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d24  08003d24  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000078  08003da4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003da4  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011153  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002796  00000000  00000000  000311f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00033990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001909c  00000000  00000000  00035588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6e0  00000000  00000000  0004e624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901c2  00000000  00000000  0005dd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc8  00000000  00000000  000edf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cc4 	.word	0x08003cc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003cc4 	.word	0x08003cc4

08000150 <ReadSw1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void ReadSw1(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	int state = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
	while(1){
		state = HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
 800015c:	2120      	movs	r1, #32
 800015e:	4803      	ldr	r0, [pc, #12]	; (800016c <ReadSw1+0x1c>)
 8000160:	f000 fcc8 	bl	8000af4 <HAL_GPIO_ReadPin>
 8000164:	4603      	mov	r3, r0
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	e7f8      	b.n	800015c <ReadSw1+0xc>
 800016a:	bf00      	nop
 800016c:	40010c00 	.word	0x40010c00

08000170 <LedOn>:
	}

}


static void LedOn(void *pvParameters){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	vTaskDelay(1000);
 8000178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017c:	f001 fcca 	bl	8001b14 <vTaskDelay>
	while(1){
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000186:	4804      	ldr	r0, [pc, #16]	; (8000198 <LedOn+0x28>)
 8000188:	f000 fccb 	bl	8000b22 <HAL_GPIO_WritePin>
		vTaskDelay(2000);
 800018c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000190:	f001 fcc0 	bl	8001b14 <vTaskDelay>
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000194:	e7f4      	b.n	8000180 <LedOn+0x10>
 8000196:	bf00      	nop
 8000198:	40011000 	.word	0x40011000

0800019c <LedOff>:
	}

}

static void LedOff(void *pvParameters){
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001aa:	4804      	ldr	r0, [pc, #16]	; (80001bc <LedOff+0x20>)
 80001ac:	f000 fcb9 	bl	8000b22 <HAL_GPIO_WritePin>
		vTaskDelay(2000);
 80001b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001b4:	f001 fcae 	bl	8001b14 <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001b8:	e7f4      	b.n	80001a4 <LedOff+0x8>
 80001ba:	bf00      	nop
 80001bc:	40011000 	.word	0x40011000

080001c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c6:	f000 f9ff 	bl	80005c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ca:	f000 f82f 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ce:	f000 f873 	bl	80002b8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(LedOn, "", 100, NULL, 1, NULL);
 80001d2:	2300      	movs	r3, #0
 80001d4:	9301      	str	r3, [sp, #4]
 80001d6:	2301      	movs	r3, #1
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	2300      	movs	r3, #0
 80001dc:	2264      	movs	r2, #100	; 0x64
 80001de:	490f      	ldr	r1, [pc, #60]	; (800021c <main+0x5c>)
 80001e0:	480f      	ldr	r0, [pc, #60]	; (8000220 <main+0x60>)
 80001e2:	f001 fb2b 	bl	800183c <xTaskCreate>
  xTaskCreate(LedOff, "", 100, NULL, 1, NULL);
 80001e6:	2300      	movs	r3, #0
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	2301      	movs	r3, #1
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2300      	movs	r3, #0
 80001f0:	2264      	movs	r2, #100	; 0x64
 80001f2:	490a      	ldr	r1, [pc, #40]	; (800021c <main+0x5c>)
 80001f4:	480b      	ldr	r0, [pc, #44]	; (8000224 <main+0x64>)
 80001f6:	f001 fb21 	bl	800183c <xTaskCreate>
  xTaskCreate(ReadSw1, "", 100, NULL, 1, NULL);
 80001fa:	2300      	movs	r3, #0
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	2301      	movs	r3, #1
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2264      	movs	r2, #100	; 0x64
 8000206:	4905      	ldr	r1, [pc, #20]	; (800021c <main+0x5c>)
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <main+0x68>)
 800020a:	f001 fb17 	bl	800183c <xTaskCreate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 800020e:	f001 fcb5 	bl	8001b7c <vTaskStartScheduler>
 8000212:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	08003cdc 	.word	0x08003cdc
 8000220:	08000171 	.word	0x08000171
 8000224:	0800019d 	.word	0x0800019d
 8000228:	08000151 	.word	0x08000151

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b090      	sub	sp, #64	; 0x40
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 fc76 	bl	8003b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024e:	2301      	movs	r3, #1
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000256:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025c:	2301      	movs	r3, #1
 800025e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000260:	2302      	movs	r3, #2
 8000262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fc6d 	bl	8000b54 <HAL_RCC_OscConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000280:	f000 f892 	bl	80003a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	230f      	movs	r3, #15
 8000286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000288:	2302      	movs	r3, #2
 800028a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2102      	movs	r1, #2
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fed8 	bl	8001054 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002aa:	f000 f87d 	bl	80003a8 <Error_Handler>
  }
}
 80002ae:	bf00      	nop
 80002b0:	3740      	adds	r7, #64	; 0x40
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b088      	sub	sp, #32
 80002bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002cc:	4b2a      	ldr	r3, [pc, #168]	; (8000378 <MX_GPIO_Init+0xc0>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a29      	ldr	r2, [pc, #164]	; (8000378 <MX_GPIO_Init+0xc0>)
 80002d2:	f043 0310 	orr.w	r3, r3, #16
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b27      	ldr	r3, [pc, #156]	; (8000378 <MX_GPIO_Init+0xc0>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0310 	and.w	r3, r3, #16
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e4:	4b24      	ldr	r3, [pc, #144]	; (8000378 <MX_GPIO_Init+0xc0>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a23      	ldr	r2, [pc, #140]	; (8000378 <MX_GPIO_Init+0xc0>)
 80002ea:	f043 0320 	orr.w	r3, r3, #32
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b21      	ldr	r3, [pc, #132]	; (8000378 <MX_GPIO_Init+0xc0>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0320 	and.w	r3, r3, #32
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0xc0>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <MX_GPIO_Init+0xc0>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_GPIO_Init+0xc0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_GPIO_Init+0xc0>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_GPIO_Init+0xc0>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_GPIO_Init+0xc0>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0308 	and.w	r3, r3, #8
 8000328:	603b      	str	r3, [r7, #0]
 800032a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4812      	ldr	r0, [pc, #72]	; (800037c <MX_GPIO_Init+0xc4>)
 8000334:	f000 fbf5 	bl	8000b22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2302      	movs	r3, #2
 8000348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	480a      	ldr	r0, [pc, #40]	; (800037c <MX_GPIO_Init+0xc4>)
 8000352:	f000 fa4b 	bl	80007ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000356:	2320      	movs	r3, #32
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035e:	2301      	movs	r3, #1
 8000360:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <MX_GPIO_Init+0xc8>)
 800036a:	f000 fa3f 	bl	80007ec <HAL_GPIO_Init>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40011000 	.word	0x40011000
 8000380:	40010c00 	.word	0x40010c00

08000384 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d101      	bne.n	800039a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000396:	f000 f92d 	bl	80005f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40012c00 	.word	0x40012c00

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
}
 80003ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <Error_Handler+0x8>
	...

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a14      	ldr	r2, [pc, #80]	; (8000410 <HAL_MspInit+0x5c>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6193      	str	r3, [r2, #24]
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <HAL_MspInit+0x5c>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <HAL_MspInit+0x5c>)
 80003d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003dc:	61d3      	str	r3, [r2, #28]
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x5c>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <HAL_MspInit+0x60>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	4a04      	ldr	r2, [pc, #16]	; (8000414 <HAL_MspInit+0x60>)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	40021000 	.word	0x40021000
 8000414:	40010000 	.word	0x40010000

08000418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08c      	sub	sp, #48	; 0x30
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000428:	2200      	movs	r2, #0
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	2019      	movs	r0, #25
 800042e:	f000 f9b2 	bl	8000796 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000432:	2019      	movs	r0, #25
 8000434:	f000 f9cb 	bl	80007ce <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <HAL_InitTick+0x9c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <HAL_InitTick+0x9c>)
 800043e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <HAL_InitTick+0x9c>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000450:	f107 0210 	add.w	r2, r7, #16
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4611      	mov	r1, r2
 800045a:	4618      	mov	r0, r3
 800045c:	f000 ff56 	bl	800130c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000460:	f000 ff40 	bl	80012e4 <HAL_RCC_GetPCLK2Freq>
 8000464:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000468:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <HAL_InitTick+0xa0>)
 800046a:	fba2 2303 	umull	r2, r3, r2, r3
 800046e:	0c9b      	lsrs	r3, r3, #18
 8000470:	3b01      	subs	r3, #1
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <HAL_InitTick+0xa4>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <HAL_InitTick+0xa8>)
 8000478:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <HAL_InitTick+0xa4>)
 800047c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000480:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_InitTick+0xa4>)
 8000484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000486:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_InitTick+0xa4>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <HAL_InitTick+0xa4>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <HAL_InitTick+0xa4>)
 8000496:	f000 ff87 	bl	80013a8 <HAL_TIM_Base_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d104      	bne.n	80004aa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <HAL_InitTick+0xa4>)
 80004a2:	f000 ffd9 	bl	8001458 <HAL_TIM_Base_Start_IT>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e000      	b.n	80004ac <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004aa:	2301      	movs	r3, #1
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3730      	adds	r7, #48	; 0x30
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	431bde83 	.word	0x431bde83
 80004bc:	200001f4 	.word	0x200001f4
 80004c0:	40012c00 	.word	0x40012c00

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <NMI_Handler+0x4>

080004ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler+0x4>

080004d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
	...

080004f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <TIM1_UP_IRQHandler+0x10>)
 80004f6:	f001 f801 	bl	80014fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200001f4 	.word	0x200001f4

08000504 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <_sbrk+0x5c>)
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <_sbrk+0x60>)
 8000510:	1ad3      	subs	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d102      	bne.n	8000526 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <_sbrk+0x64>)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <_sbrk+0x68>)
 8000524:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <_sbrk+0x64>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	693a      	ldr	r2, [r7, #16]
 8000530:	429a      	cmp	r2, r3
 8000532:	d207      	bcs.n	8000544 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000534:	f003 fab2 	bl	8003a9c <__errno>
 8000538:	4603      	mov	r3, r0
 800053a:	220c      	movs	r2, #12
 800053c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	e009      	b.n	8000558 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	4a05      	ldr	r2, [pc, #20]	; (8000568 <_sbrk+0x64>)
 8000554:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20005000 	.word	0x20005000
 8000564:	00000400 	.word	0x00000400
 8000568:	20000094 	.word	0x20000094
 800056c:	20000290 	.word	0x20000290

08000570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800057c:	f7ff fff8 	bl	8000570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000582:	490c      	ldr	r1, [pc, #48]	; (80005b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000584:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a09      	ldr	r2, [pc, #36]	; (80005bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000598:	4c09      	ldr	r4, [pc, #36]	; (80005c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a6:	f003 fa7f 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff fe09 	bl	80001c0 <main>
  bx lr
 80005ae:	4770      	bx	lr
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005b8:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 80005bc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005c0:	20000290 	.word	0x20000290

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>
	...

080005c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x28>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_Init+0x28>)
 80005d2:	f043 0310 	orr.w	r3, r3, #16
 80005d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f8d1 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ff1a 	bl	8000418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f7ff fee6 	bl	80003b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40022000 	.word	0x40022000

080005f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_IncTick+0x1c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x20>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4413      	add	r3, r2
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_IncTick+0x20>)
 8000606:	6013      	str	r3, [r2, #0]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	20000008 	.word	0x20000008
 8000614:	2000023c 	.word	0x2000023c

08000618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;
 800061c:	4b02      	ldr	r3, [pc, #8]	; (8000628 <HAL_GetTick+0x10>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	2000023c 	.word	0x2000023c

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <__NVIC_EnableIRQ+0x34>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	; (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	; 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	; 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff4f 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a8:	f7ff ff64 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f7ff ffb2 	bl	800071c <NVIC_EncodePriority>
 80007b8:	4602      	mov	r2, r0
 80007ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff81 	bl	80006c8 <__NVIC_SetPriority>
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff57 	bl	8000690 <__NVIC_EnableIRQ>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b08b      	sub	sp, #44	; 0x2c
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007fe:	e169      	b.n	8000ad4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000800:	2201      	movs	r2, #1
 8000802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	69fa      	ldr	r2, [r7, #28]
 8000810:	4013      	ands	r3, r2
 8000812:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	429a      	cmp	r2, r3
 800081a:	f040 8158 	bne.w	8000ace <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	4a9a      	ldr	r2, [pc, #616]	; (8000a8c <HAL_GPIO_Init+0x2a0>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d05e      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000828:	4a98      	ldr	r2, [pc, #608]	; (8000a8c <HAL_GPIO_Init+0x2a0>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d875      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 800082e:	4a98      	ldr	r2, [pc, #608]	; (8000a90 <HAL_GPIO_Init+0x2a4>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d058      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000834:	4a96      	ldr	r2, [pc, #600]	; (8000a90 <HAL_GPIO_Init+0x2a4>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d86f      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 800083a:	4a96      	ldr	r2, [pc, #600]	; (8000a94 <HAL_GPIO_Init+0x2a8>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d052      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000840:	4a94      	ldr	r2, [pc, #592]	; (8000a94 <HAL_GPIO_Init+0x2a8>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d869      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 8000846:	4a94      	ldr	r2, [pc, #592]	; (8000a98 <HAL_GPIO_Init+0x2ac>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d04c      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 800084c:	4a92      	ldr	r2, [pc, #584]	; (8000a98 <HAL_GPIO_Init+0x2ac>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d863      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 8000852:	4a92      	ldr	r2, [pc, #584]	; (8000a9c <HAL_GPIO_Init+0x2b0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d046      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
 8000858:	4a90      	ldr	r2, [pc, #576]	; (8000a9c <HAL_GPIO_Init+0x2b0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d85d      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 800085e:	2b12      	cmp	r3, #18
 8000860:	d82a      	bhi.n	80008b8 <HAL_GPIO_Init+0xcc>
 8000862:	2b12      	cmp	r3, #18
 8000864:	d859      	bhi.n	800091a <HAL_GPIO_Init+0x12e>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_GPIO_Init+0x80>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008e7 	.word	0x080008e7
 8000870:	080008c1 	.word	0x080008c1
 8000874:	080008d3 	.word	0x080008d3
 8000878:	08000915 	.word	0x08000915
 800087c:	0800091b 	.word	0x0800091b
 8000880:	0800091b 	.word	0x0800091b
 8000884:	0800091b 	.word	0x0800091b
 8000888:	0800091b 	.word	0x0800091b
 800088c:	0800091b 	.word	0x0800091b
 8000890:	0800091b 	.word	0x0800091b
 8000894:	0800091b 	.word	0x0800091b
 8000898:	0800091b 	.word	0x0800091b
 800089c:	0800091b 	.word	0x0800091b
 80008a0:	0800091b 	.word	0x0800091b
 80008a4:	0800091b 	.word	0x0800091b
 80008a8:	0800091b 	.word	0x0800091b
 80008ac:	0800091b 	.word	0x0800091b
 80008b0:	080008c9 	.word	0x080008c9
 80008b4:	080008dd 	.word	0x080008dd
 80008b8:	4a79      	ldr	r2, [pc, #484]	; (8000aa0 <HAL_GPIO_Init+0x2b4>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d013      	beq.n	80008e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008be:	e02c      	b.n	800091a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	623b      	str	r3, [r7, #32]
          break;
 80008c6:	e029      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	3304      	adds	r3, #4
 80008ce:	623b      	str	r3, [r7, #32]
          break;
 80008d0:	e024      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	3308      	adds	r3, #8
 80008d8:	623b      	str	r3, [r7, #32]
          break;
 80008da:	e01f      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	330c      	adds	r3, #12
 80008e2:	623b      	str	r3, [r7, #32]
          break;
 80008e4:	e01a      	b.n	800091c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d102      	bne.n	80008f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ee:	2304      	movs	r3, #4
 80008f0:	623b      	str	r3, [r7, #32]
          break;
 80008f2:	e013      	b.n	800091c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d105      	bne.n	8000908 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008fc:	2308      	movs	r3, #8
 80008fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	611a      	str	r2, [r3, #16]
          break;
 8000906:	e009      	b.n	800091c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000908:	2308      	movs	r3, #8
 800090a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	615a      	str	r2, [r3, #20]
          break;
 8000912:	e003      	b.n	800091c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
          break;
 8000918:	e000      	b.n	800091c <HAL_GPIO_Init+0x130>
          break;
 800091a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	2bff      	cmp	r3, #255	; 0xff
 8000920:	d801      	bhi.n	8000926 <HAL_GPIO_Init+0x13a>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	e001      	b.n	800092a <HAL_GPIO_Init+0x13e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3304      	adds	r3, #4
 800092a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	2bff      	cmp	r3, #255	; 0xff
 8000930:	d802      	bhi.n	8000938 <HAL_GPIO_Init+0x14c>
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	e002      	b.n	800093e <HAL_GPIO_Init+0x152>
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	3b08      	subs	r3, #8
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	210f      	movs	r1, #15
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	fa01 f303 	lsl.w	r3, r1, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	401a      	ands	r2, r3
 8000950:	6a39      	ldr	r1, [r7, #32]
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	431a      	orrs	r2, r3
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 80b1 	beq.w	8000ace <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800096c:	4b4d      	ldr	r3, [pc, #308]	; (8000aa4 <HAL_GPIO_Init+0x2b8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a4c      	ldr	r2, [pc, #304]	; (8000aa4 <HAL_GPIO_Init+0x2b8>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b4a      	ldr	r3, [pc, #296]	; (8000aa4 <HAL_GPIO_Init+0x2b8>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000984:	4a48      	ldr	r2, [pc, #288]	; (8000aa8 <HAL_GPIO_Init+0x2bc>)
 8000986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	3302      	adds	r3, #2
 800098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000990:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	220f      	movs	r2, #15
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a40      	ldr	r2, [pc, #256]	; (8000aac <HAL_GPIO_Init+0x2c0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d013      	beq.n	80009d8 <HAL_GPIO_Init+0x1ec>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <HAL_GPIO_Init+0x2c4>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d00d      	beq.n	80009d4 <HAL_GPIO_Init+0x1e8>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a3e      	ldr	r2, [pc, #248]	; (8000ab4 <HAL_GPIO_Init+0x2c8>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d007      	beq.n	80009d0 <HAL_GPIO_Init+0x1e4>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a3d      	ldr	r2, [pc, #244]	; (8000ab8 <HAL_GPIO_Init+0x2cc>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d101      	bne.n	80009cc <HAL_GPIO_Init+0x1e0>
 80009c8:	2303      	movs	r3, #3
 80009ca:	e006      	b.n	80009da <HAL_GPIO_Init+0x1ee>
 80009cc:	2304      	movs	r3, #4
 80009ce:	e004      	b.n	80009da <HAL_GPIO_Init+0x1ee>
 80009d0:	2302      	movs	r3, #2
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0x1ee>
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <HAL_GPIO_Init+0x1ee>
 80009d8:	2300      	movs	r3, #0
 80009da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009dc:	f002 0203 	and.w	r2, r2, #3
 80009e0:	0092      	lsls	r2, r2, #2
 80009e2:	4093      	lsls	r3, r2
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ea:	492f      	ldr	r1, [pc, #188]	; (8000aa8 <HAL_GPIO_Init+0x2bc>)
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	089b      	lsrs	r3, r3, #2
 80009f0:	3302      	adds	r3, #2
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a06:	689a      	ldr	r2, [r3, #8]
 8000a08:	492c      	ldr	r1, [pc, #176]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	608b      	str	r3, [r1, #8]
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	4928      	ldr	r1, [pc, #160]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a2e:	68da      	ldr	r2, [r3, #12]
 8000a30:	4922      	ldr	r1, [pc, #136]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	60cb      	str	r3, [r1, #12]
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a3c:	68da      	ldr	r2, [r3, #12]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	491e      	ldr	r1, [pc, #120]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d006      	beq.n	8000a62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	4918      	ldr	r1, [pc, #96]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	604b      	str	r3, [r1, #4]
 8000a60:	e006      	b.n	8000a70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	4914      	ldr	r1, [pc, #80]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d021      	beq.n	8000ac0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	490e      	ldr	r1, [pc, #56]	; (8000abc <HAL_GPIO_Init+0x2d0>)
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	600b      	str	r3, [r1, #0]
 8000a88:	e021      	b.n	8000ace <HAL_GPIO_Init+0x2e2>
 8000a8a:	bf00      	nop
 8000a8c:	10320000 	.word	0x10320000
 8000a90:	10310000 	.word	0x10310000
 8000a94:	10220000 	.word	0x10220000
 8000a98:	10210000 	.word	0x10210000
 8000a9c:	10120000 	.word	0x10120000
 8000aa0:	10110000 	.word	0x10110000
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	40011400 	.word	0x40011400
 8000abc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_GPIO_Init+0x304>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	4909      	ldr	r1, [pc, #36]	; (8000af0 <HAL_GPIO_Init+0x304>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	fa22 f303 	lsr.w	r3, r2, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f47f ae8e 	bne.w	8000800 <HAL_GPIO_Init+0x14>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	372c      	adds	r7, #44	; 0x2c
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	40010400 	.word	0x40010400

08000af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	4013      	ands	r3, r2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d002      	beq.n	8000b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	e001      	b.n	8000b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr

08000b22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	807b      	strh	r3, [r7, #2]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b32:	787b      	ldrb	r3, [r7, #1]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b38:	887a      	ldrh	r2, [r7, #2]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b3e:	e003      	b.n	8000b48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b40:	887b      	ldrh	r3, [r7, #2]
 8000b42:	041a      	lsls	r2, r3, #16
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	611a      	str	r2, [r3, #16]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
	...

08000b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e26c      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8087 	beq.w	8000c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b74:	4b92      	ldr	r3, [pc, #584]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 030c 	and.w	r3, r3, #12
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d00c      	beq.n	8000b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b80:	4b8f      	ldr	r3, [pc, #572]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d112      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x5e>
 8000b8c:	4b8c      	ldr	r3, [pc, #560]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b98:	d10b      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9a:	4b89      	ldr	r3, [pc, #548]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d06c      	beq.n	8000c80 <HAL_RCC_OscConfig+0x12c>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d168      	bne.n	8000c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e246      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bba:	d106      	bne.n	8000bca <HAL_RCC_OscConfig+0x76>
 8000bbc:	4b80      	ldr	r3, [pc, #512]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a7f      	ldr	r2, [pc, #508]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e02e      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0x98>
 8000bd2:	4b7b      	ldr	r3, [pc, #492]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4b78      	ldr	r3, [pc, #480]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a77      	ldr	r2, [pc, #476]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e01d      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf4:	d10c      	bne.n	8000c10 <HAL_RCC_OscConfig+0xbc>
 8000bf6:	4b72      	ldr	r3, [pc, #456]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a71      	ldr	r2, [pc, #452]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b6f      	ldr	r3, [pc, #444]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a6e      	ldr	r2, [pc, #440]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e00b      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000c10:	4b6b      	ldr	r3, [pc, #428]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a6a      	ldr	r2, [pc, #424]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b68      	ldr	r3, [pc, #416]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a67      	ldr	r2, [pc, #412]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d013      	beq.n	8000c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fcf2 	bl	8000618 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fcee 	bl	8000618 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e1fa      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	4b5d      	ldr	r3, [pc, #372]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0xe4>
 8000c56:	e014      	b.n	8000c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fcde 	bl	8000618 <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff fcda 	bl	8000618 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	; 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e1e6      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	4b53      	ldr	r3, [pc, #332]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f0      	bne.n	8000c60 <HAL_RCC_OscConfig+0x10c>
 8000c7e:	e000      	b.n	8000c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d063      	beq.n	8000d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00b      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c9a:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d11c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x18c>
 8000ca6:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d116      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb2:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d005      	beq.n	8000cca <HAL_RCC_OscConfig+0x176>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d001      	beq.n	8000cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e1ba      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4939      	ldr	r1, [pc, #228]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	e03a      	b.n	8000d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d020      	beq.n	8000d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <HAL_RCC_OscConfig+0x270>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cee:	f7ff fc93 	bl	8000618 <HAL_GetTick>
 8000cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cf6:	f7ff fc8f 	bl	8000618 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e19b      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4927      	ldr	r1, [pc, #156]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e015      	b.n	8000d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fc72 	bl	8000618 <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d38:	f7ff fc6e 	bl	8000618 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e17a      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d03a      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d019      	beq.n	8000d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_RCC_OscConfig+0x274>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d70:	f7ff fc52 	bl	8000618 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc4e 	bl	8000618 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e15a      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 fae8 	bl	800136c <RCC_Delay>
 8000d9c:	e01c      	b.n	8000dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_RCC_OscConfig+0x274>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc38 	bl	8000618 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000daa:	e00f      	b.n	8000dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc34 	bl	8000618 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d908      	bls.n	8000dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e140      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	42420000 	.word	0x42420000
 8000dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	4b9e      	ldr	r3, [pc, #632]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1e9      	bne.n	8000dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a6 	beq.w	8000f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dea:	4b97      	ldr	r3, [pc, #604]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10d      	bne.n	8000e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b94      	ldr	r3, [pc, #592]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a93      	ldr	r2, [pc, #588]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b91      	ldr	r3, [pc, #580]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e12:	4b8e      	ldr	r3, [pc, #568]	; (800104c <HAL_RCC_OscConfig+0x4f8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d118      	bne.n	8000e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e1e:	4b8b      	ldr	r3, [pc, #556]	; (800104c <HAL_RCC_OscConfig+0x4f8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a8a      	ldr	r2, [pc, #552]	; (800104c <HAL_RCC_OscConfig+0x4f8>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fbf5 	bl	8000618 <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e32:	f7ff fbf1 	bl	8000618 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b64      	cmp	r3, #100	; 0x64
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e0fd      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	4b81      	ldr	r3, [pc, #516]	; (800104c <HAL_RCC_OscConfig+0x4f8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d106      	bne.n	8000e66 <HAL_RCC_OscConfig+0x312>
 8000e58:	4b7b      	ldr	r3, [pc, #492]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	4a7a      	ldr	r2, [pc, #488]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6213      	str	r3, [r2, #32]
 8000e64:	e02d      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x334>
 8000e6e:	4b76      	ldr	r3, [pc, #472]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	4a75      	ldr	r2, [pc, #468]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	6213      	str	r3, [r2, #32]
 8000e7a:	4b73      	ldr	r3, [pc, #460]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a72      	ldr	r2, [pc, #456]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	f023 0304 	bic.w	r3, r3, #4
 8000e84:	6213      	str	r3, [r2, #32]
 8000e86:	e01c      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d10c      	bne.n	8000eaa <HAL_RCC_OscConfig+0x356>
 8000e90:	4b6d      	ldr	r3, [pc, #436]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4a6c      	ldr	r2, [pc, #432]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6213      	str	r3, [r2, #32]
 8000e9c:	4b6a      	ldr	r3, [pc, #424]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a69      	ldr	r2, [pc, #420]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6213      	str	r3, [r2, #32]
 8000ea8:	e00b      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000eaa:	4b67      	ldr	r3, [pc, #412]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a66      	ldr	r2, [pc, #408]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	4b64      	ldr	r3, [pc, #400]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a63      	ldr	r2, [pc, #396]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d015      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eca:	f7ff fba5 	bl	8000618 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed0:	e00a      	b.n	8000ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed2:	f7ff fba1 	bl	8000618 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e0ab      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee8:	4b57      	ldr	r3, [pc, #348]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0ee      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x37e>
 8000ef4:	e014      	b.n	8000f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fb8f 	bl	8000618 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efc:	e00a      	b.n	8000f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb8b 	bl	8000618 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e095      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f14:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1ee      	bne.n	8000efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d105      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f26:	4b48      	ldr	r3, [pc, #288]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a47      	ldr	r2, [pc, #284]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8081 	beq.w	800103e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f3c:	4b42      	ldr	r3, [pc, #264]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d061      	beq.n	800100c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d146      	bne.n	8000fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f50:	4b3f      	ldr	r3, [pc, #252]	; (8001050 <HAL_RCC_OscConfig+0x4fc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fb5f 	bl	8000618 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f5e:	f7ff fb5b 	bl	8000618 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e067      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f0      	bne.n	8000f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d108      	bne.n	8000f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	492d      	ldr	r1, [pc, #180]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a19      	ldr	r1, [r3, #32]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	4927      	ldr	r1, [pc, #156]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_RCC_OscConfig+0x4fc>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fb2f 	bl	8000618 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fb2b 	bl	8000618 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e037      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x46a>
 8000fdc:	e02f      	b.n	800103e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_RCC_OscConfig+0x4fc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb18 	bl	8000618 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fb14 	bl	8000618 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e020      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x498>
 800100a:	e018      	b.n	800103e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e013      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_RCC_OscConfig+0x4f4>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	429a      	cmp	r2, r3
 800102a:	d106      	bne.n	800103a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001036:	429a      	cmp	r2, r3
 8001038:	d001      	beq.n	800103e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	40007000 	.word	0x40007000
 8001050:	42420060 	.word	0x42420060

08001054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0d0      	b.n	800120a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001068:	4b6a      	ldr	r3, [pc, #424]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d910      	bls.n	8001098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001076:	4b67      	ldr	r3, [pc, #412]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 0207 	bic.w	r2, r3, #7
 800107e:	4965      	ldr	r1, [pc, #404]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	4313      	orrs	r3, r2
 8001084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001086:	4b63      	ldr	r3, [pc, #396]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d001      	beq.n	8001098 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0b8      	b.n	800120a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d020      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b0:	4b59      	ldr	r3, [pc, #356]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a58      	ldr	r2, [pc, #352]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d005      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c8:	4b53      	ldr	r3, [pc, #332]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80010ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d4:	4b50      	ldr	r3, [pc, #320]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	494d      	ldr	r1, [pc, #308]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d040      	beq.n	8001174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d107      	bne.n	800110a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fa:	4b47      	ldr	r3, [pc, #284]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d115      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e07f      	b.n	800120a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d107      	bne.n	8001122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001112:	4b41      	ldr	r3, [pc, #260]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d109      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e073      	b.n	800120a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001122:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e06b      	b.n	800120a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001132:	4b39      	ldr	r3, [pc, #228]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f023 0203 	bic.w	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	4936      	ldr	r1, [pc, #216]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001144:	f7ff fa68 	bl	8000618 <HAL_GetTick>
 8001148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114a:	e00a      	b.n	8001162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800114c:	f7ff fa64 	bl	8000618 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	f241 3288 	movw	r2, #5000	; 0x1388
 800115a:	4293      	cmp	r3, r2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e053      	b.n	800120a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 020c 	and.w	r2, r3, #12
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	429a      	cmp	r2, r3
 8001172:	d1eb      	bne.n	800114c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001174:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d210      	bcs.n	80011a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001182:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 0207 	bic.w	r2, r3, #7
 800118a:	4922      	ldr	r1, [pc, #136]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	429a      	cmp	r2, r3
 800119e:	d001      	beq.n	80011a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e032      	b.n	800120a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	4916      	ldr	r1, [pc, #88]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	490e      	ldr	r1, [pc, #56]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011e2:	f000 f821 	bl	8001228 <HAL_RCC_GetSysClockFreq>
 80011e6:	4602      	mov	r2, r0
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_RCC_ClockConfig+0x1c4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	490a      	ldr	r1, [pc, #40]	; (800121c <HAL_RCC_ClockConfig+0x1c8>)
 80011f4:	5ccb      	ldrb	r3, [r1, r3]
 80011f6:	fa22 f303 	lsr.w	r3, r2, r3
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <HAL_RCC_ClockConfig+0x1cc>)
 80011fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_RCC_ClockConfig+0x1d0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f908 	bl	8000418 <HAL_InitTick>

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000
 8001218:	40021000 	.word	0x40021000
 800121c:	08003cf8 	.word	0x08003cf8
 8001220:	20000000 	.word	0x20000000
 8001224:	20000004 	.word	0x20000004

08001228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b04      	cmp	r3, #4
 8001250:	d002      	beq.n	8001258 <HAL_RCC_GetSysClockFreq+0x30>
 8001252:	2b08      	cmp	r3, #8
 8001254:	d003      	beq.n	800125e <HAL_RCC_GetSysClockFreq+0x36>
 8001256:	e027      	b.n	80012a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800125a:	613b      	str	r3, [r7, #16]
      break;
 800125c:	e027      	b.n	80012ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	0c9b      	lsrs	r3, r3, #18
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001268:	5cd3      	ldrb	r3, [r2, r3]
 800126a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d010      	beq.n	8001298 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	0c5b      	lsrs	r3, r3, #17
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800128a:	fb02 f203 	mul.w	r2, r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e004      	b.n	80012a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	613b      	str	r3, [r7, #16]
      break;
 80012a6:	e002      	b.n	80012ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80012aa:	613b      	str	r3, [r7, #16]
      break;
 80012ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ae:	693b      	ldr	r3, [r7, #16]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	007a1200 	.word	0x007a1200
 80012c4:	08003d10 	.word	0x08003d10
 80012c8:	08003d20 	.word	0x08003d20
 80012cc:	003d0900 	.word	0x003d0900

080012d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d4:	4b02      	ldr	r3, [pc, #8]	; (80012e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000000 	.word	0x20000000

080012e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012e8:	f7ff fff2 	bl	80012d0 <HAL_RCC_GetHCLKFreq>
 80012ec:	4602      	mov	r2, r0
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	0adb      	lsrs	r3, r3, #11
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	4903      	ldr	r1, [pc, #12]	; (8001308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012fa:	5ccb      	ldrb	r3, [r1, r3]
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	08003d08 	.word	0x08003d08

0800130c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	220f      	movs	r2, #15
 800131a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_RCC_GetClockConfig+0x58>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0203 	and.w	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_RCC_GetClockConfig+0x58>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_RCC_GetClockConfig+0x58>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_RCC_GetClockConfig+0x58>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	08db      	lsrs	r3, r3, #3
 8001346:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_RCC_GetClockConfig+0x5c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0207 	and.w	r2, r3, #7
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000
 8001368:	40022000 	.word	0x40022000

0800136c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <RCC_Delay+0x34>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <RCC_Delay+0x38>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0a5b      	lsrs	r3, r3, #9
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001388:	bf00      	nop
  }
  while (Delay --);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	60fa      	str	r2, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f9      	bne.n	8001388 <RCC_Delay+0x1c>
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000000 	.word	0x20000000
 80013a4:	10624dd3 	.word	0x10624dd3

080013a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e041      	b.n	800143e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f839 	bl	8001446 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2202      	movs	r2, #2
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3304      	adds	r3, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f000 f9b4 	bl	8001754 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d001      	beq.n	8001470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e03a      	b.n	80014e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2202      	movs	r2, #2
 8001474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0201 	orr.w	r2, r2, #1
 8001486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_TIM_Base_Start_IT+0x98>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00e      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x58>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800149a:	d009      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x58>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d004      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x58>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d111      	bne.n	80014d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d010      	beq.n	80014e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014d2:	e007      	b.n	80014e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	40012c00 	.word	0x40012c00
 80014f4:	40000400 	.word	0x40000400
 80014f8:	40000800 	.word	0x40000800

080014fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b02      	cmp	r3, #2
 8001510:	d122      	bne.n	8001558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b02      	cmp	r3, #2
 800151e:	d11b      	bne.n	8001558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f06f 0202 	mvn.w	r2, #2
 8001528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f8ed 	bl	800171e <HAL_TIM_IC_CaptureCallback>
 8001544:	e005      	b.n	8001552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f8e0 	bl	800170c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f8ef 	bl	8001730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b04      	cmp	r3, #4
 8001564:	d122      	bne.n	80015ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b04      	cmp	r3, #4
 8001572:	d11b      	bne.n	80015ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f06f 0204 	mvn.w	r2, #4
 800157c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2202      	movs	r2, #2
 8001582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f8c3 	bl	800171e <HAL_TIM_IC_CaptureCallback>
 8001598:	e005      	b.n	80015a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f8b6 	bl	800170c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f8c5 	bl	8001730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d122      	bne.n	8001600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d11b      	bne.n	8001600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f06f 0208 	mvn.w	r2, #8
 80015d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2204      	movs	r2, #4
 80015d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f899 	bl	800171e <HAL_TIM_IC_CaptureCallback>
 80015ec:	e005      	b.n	80015fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f88c 	bl	800170c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f89b 	bl	8001730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f003 0310 	and.w	r3, r3, #16
 800160a:	2b10      	cmp	r3, #16
 800160c:	d122      	bne.n	8001654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b10      	cmp	r3, #16
 800161a:	d11b      	bne.n	8001654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f06f 0210 	mvn.w	r2, #16
 8001624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2208      	movs	r2, #8
 800162a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f86f 	bl	800171e <HAL_TIM_IC_CaptureCallback>
 8001640:	e005      	b.n	800164e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f862 	bl	800170c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f871 	bl	8001730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b01      	cmp	r3, #1
 8001660:	d10e      	bne.n	8001680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b01      	cmp	r3, #1
 800166e:	d107      	bne.n	8001680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0201 	mvn.w	r2, #1
 8001678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe fe82 	bl	8000384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	2b80      	cmp	r3, #128	; 0x80
 800168c:	d10e      	bne.n	80016ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001698:	2b80      	cmp	r3, #128	; 0x80
 800169a:	d107      	bne.n	80016ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f8bf 	bl	800182a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b6:	2b40      	cmp	r3, #64	; 0x40
 80016b8:	d10e      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c4:	2b40      	cmp	r3, #64	; 0x40
 80016c6:	d107      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f835 	bl	8001742 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	d10e      	bne.n	8001704 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d107      	bne.n	8001704 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f06f 0220 	mvn.w	r2, #32
 80016fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f88a 	bl	8001818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a29      	ldr	r2, [pc, #164]	; (800180c <TIM_Base_SetConfig+0xb8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00b      	beq.n	8001784 <TIM_Base_SetConfig+0x30>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001772:	d007      	beq.n	8001784 <TIM_Base_SetConfig+0x30>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <TIM_Base_SetConfig+0xbc>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d003      	beq.n	8001784 <TIM_Base_SetConfig+0x30>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a25      	ldr	r2, [pc, #148]	; (8001814 <TIM_Base_SetConfig+0xc0>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d108      	bne.n	8001796 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1c      	ldr	r2, [pc, #112]	; (800180c <TIM_Base_SetConfig+0xb8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00b      	beq.n	80017b6 <TIM_Base_SetConfig+0x62>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a4:	d007      	beq.n	80017b6 <TIM_Base_SetConfig+0x62>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <TIM_Base_SetConfig+0xbc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d003      	beq.n	80017b6 <TIM_Base_SetConfig+0x62>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <TIM_Base_SetConfig+0xc0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d108      	bne.n	80017c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <TIM_Base_SetConfig+0xb8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d103      	bne.n	80017fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	615a      	str	r2, [r3, #20]
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40012c00 	.word	0x40012c00
 8001810:	40000400 	.word	0x40000400
 8001814:	40000800 	.word	0x40000800

08001818 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <xTaskCreate>:
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af04      	add	r7, sp, #16
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fae8 	bl	8002e24 <pvPortMalloc>
 8001854:	6178      	str	r0, [r7, #20]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <xTaskCreate+0x48>
 800185c:	207c      	movs	r0, #124	; 0x7c
 800185e:	f001 fae1 	bl	8002e24 <pvPortMalloc>
 8001862:	61f8      	str	r0, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d008      	beq.n	800187c <xTaskCreate+0x40>
 800186a:	227c      	movs	r2, #124	; 0x7c
 800186c:	2100      	movs	r1, #0
 800186e:	69f8      	ldr	r0, [r7, #28]
 8001870:	f002 f95c 	bl	8003b2c <memset>
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	631a      	str	r2, [r3, #48]	; 0x30
 800187a:	e005      	b.n	8001888 <xTaskCreate+0x4c>
 800187c:	6978      	ldr	r0, [r7, #20]
 800187e:	f001 fae3 	bl	8002e48 <vPortFree>
 8001882:	e001      	b.n	8001888 <xTaskCreate+0x4c>
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d013      	beq.n	80018b6 <xTaskCreate+0x7a>
 800188e:	2300      	movs	r3, #0
 8001890:	9303      	str	r3, [sp, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	9302      	str	r3, [sp, #8]
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	68b9      	ldr	r1, [r7, #8]
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 f80e 	bl	80018c6 <prvInitialiseNewTask>
 80018aa:	69f8      	ldr	r0, [r7, #28]
 80018ac:	f000 f89a 	bl	80019e4 <prvAddNewTaskToReadyList>
 80018b0:	2301      	movs	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	e002      	b.n	80018bc <xTaskCreate+0x80>
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	4618      	mov	r0, r3
 80018c0:	3720      	adds	r7, #32
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <prvInitialiseNewTask>:
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b088      	sub	sp, #32
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	461a      	mov	r2, r3
 80018de:	21a5      	movs	r1, #165	; 0xa5
 80018e0:	f002 f924 	bl	8003b2c <memset>
 80018e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018ee:	3b01      	subs	r3, #1
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f023 0307 	bic.w	r3, r3, #7
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00a      	beq.n	800191e <prvInitialiseNewTask+0x58>
 8001908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190c:	f383 8811 	msr	BASEPRI, r3
 8001910:	f3bf 8f6f 	isb	sy
 8001914:	f3bf 8f4f 	dsb	sy
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	bf00      	nop
 800191c:	e7fe      	b.n	800191c <prvInitialiseNewTask+0x56>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d01e      	beq.n	8001962 <prvInitialiseNewTask+0x9c>
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	e012      	b.n	8001950 <prvInitialiseNewTask+0x8a>
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	4413      	add	r3, r2
 8001930:	7819      	ldrb	r1, [r3, #0]
 8001932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	4413      	add	r3, r2
 8001938:	3334      	adds	r3, #52	; 0x34
 800193a:	460a      	mov	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <prvInitialiseNewTask+0x92>
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	2b13      	cmp	r3, #19
 8001954:	d9e9      	bls.n	800192a <prvInitialiseNewTask+0x64>
 8001956:	e000      	b.n	800195a <prvInitialiseNewTask+0x94>
 8001958:	bf00      	nop
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001964:	2b04      	cmp	r3, #4
 8001966:	d90a      	bls.n	800197e <prvInitialiseNewTask+0xb8>
 8001968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196c:	f383 8811 	msr	BASEPRI, r3
 8001970:	f3bf 8f6f 	isb	sy
 8001974:	f3bf 8f4f 	dsb	sy
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	bf00      	nop
 800197c:	e7fe      	b.n	800197c <prvInitialiseNewTask+0xb6>
 800197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001980:	2b04      	cmp	r3, #4
 8001982:	d901      	bls.n	8001988 <prvInitialiseNewTask+0xc2>
 8001984:	2304      	movs	r3, #4
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
 800198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001992:	651a      	str	r2, [r3, #80]	; 0x50
 8001994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001996:	3304      	adds	r3, #4
 8001998:	4618      	mov	r0, r3
 800199a:	f001 fa86 	bl	8002eaa <vListInitialiseItem>
 800199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a0:	3318      	adds	r3, #24
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 fa81 	bl	8002eaa <vListInitialiseItem>
 80019a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ac:	611a      	str	r2, [r3, #16]
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	f1c3 0205 	rsb	r2, r3, #5
 80019b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b6:	619a      	str	r2, [r3, #24]
 80019b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	68f9      	ldr	r1, [r7, #12]
 80019c2:	69b8      	ldr	r0, [r7, #24]
 80019c4:	f001 fade 	bl	8002f84 <pxPortInitialiseStack>
 80019c8:	4602      	mov	r2, r0
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <prvInitialiseNewTask+0x114>
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	bf00      	nop
 80019dc:	3720      	adds	r7, #32
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <prvAddNewTaskToReadyList>:
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	f001 fbc0 	bl	8003170 <vPortEnterCritical>
 80019f0:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <prvAddNewTaskToReadyList+0x114>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	4a40      	ldr	r2, [pc, #256]	; (8001af8 <prvAddNewTaskToReadyList+0x114>)
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b40      	ldr	r3, [pc, #256]	; (8001afc <prvAddNewTaskToReadyList+0x118>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <prvAddNewTaskToReadyList+0x32>
 8001a02:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <prvAddNewTaskToReadyList+0x118>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <prvAddNewTaskToReadyList+0x114>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d110      	bne.n	8001a32 <prvAddNewTaskToReadyList+0x4e>
 8001a10:	f000 fe62 	bl	80026d8 <prvInitialiseTaskLists>
 8001a14:	e00d      	b.n	8001a32 <prvAddNewTaskToReadyList+0x4e>
 8001a16:	4b3a      	ldr	r3, [pc, #232]	; (8001b00 <prvAddNewTaskToReadyList+0x11c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <prvAddNewTaskToReadyList+0x4e>
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <prvAddNewTaskToReadyList+0x118>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d802      	bhi.n	8001a32 <prvAddNewTaskToReadyList+0x4e>
 8001a2c:	4a33      	ldr	r2, [pc, #204]	; (8001afc <prvAddNewTaskToReadyList+0x118>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <prvAddNewTaskToReadyList+0x120>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <prvAddNewTaskToReadyList+0x120>)
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <prvAddNewTaskToReadyList+0x120>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	649a      	str	r2, [r3, #72]	; 0x48
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <prvAddNewTaskToReadyList+0x124>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d903      	bls.n	8001a58 <prvAddNewTaskToReadyList+0x74>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	4a2c      	ldr	r2, [pc, #176]	; (8001b08 <prvAddNewTaskToReadyList+0x124>)
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5c:	492b      	ldr	r1, [pc, #172]	; (8001b0c <prvAddNewTaskToReadyList+0x128>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	3304      	adds	r3, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	3204      	adds	r2, #4
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	1d1a      	adds	r2, r3, #4
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <prvAddNewTaskToReadyList+0x128>)
 8001a9c:	441a      	add	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	615a      	str	r2, [r3, #20]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa6:	4919      	ldr	r1, [pc, #100]	; (8001b0c <prvAddNewTaskToReadyList+0x128>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	1c59      	adds	r1, r3, #1
 8001ab6:	4815      	ldr	r0, [pc, #84]	; (8001b0c <prvAddNewTaskToReadyList+0x128>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4403      	add	r3, r0
 8001ac2:	6019      	str	r1, [r3, #0]
 8001ac4:	f001 fb84 	bl	80031d0 <vPortExitCritical>
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <prvAddNewTaskToReadyList+0x11c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00e      	beq.n	8001aee <prvAddNewTaskToReadyList+0x10a>
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <prvAddNewTaskToReadyList+0x118>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d207      	bcs.n	8001aee <prvAddNewTaskToReadyList+0x10a>
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <prvAddNewTaskToReadyList+0x12c>)
 8001ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f3bf 8f4f 	dsb	sy
 8001aea:	f3bf 8f6f 	isb	sy
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000170 	.word	0x20000170
 8001afc:	20000098 	.word	0x20000098
 8001b00:	2000017c 	.word	0x2000017c
 8001b04:	2000018c 	.word	0x2000018c
 8001b08:	20000178 	.word	0x20000178
 8001b0c:	2000009c 	.word	0x2000009c
 8001b10:	e000ed04 	.word	0xe000ed04

08001b14 <vTaskDelay>:
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d017      	beq.n	8001b56 <vTaskDelay+0x42>
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <vTaskDelay+0x60>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <vTaskDelay+0x30>
 8001b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b32:	f383 8811 	msr	BASEPRI, r3
 8001b36:	f3bf 8f6f 	isb	sy
 8001b3a:	f3bf 8f4f 	dsb	sy
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	bf00      	nop
 8001b42:	e7fe      	b.n	8001b42 <vTaskDelay+0x2e>
 8001b44:	f000 f86c 	bl	8001c20 <vTaskSuspendAll>
 8001b48:	2100      	movs	r1, #0
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fe7a 	bl	8002844 <prvAddCurrentTaskToDelayedList>
 8001b50:	f000 f8aa 	bl	8001ca8 <xTaskResumeAll>
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <vTaskDelay+0x58>
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <vTaskDelay+0x64>)
 8001b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	f3bf 8f6f 	isb	sy
 8001b6c:	bf00      	nop
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000198 	.word	0x20000198
 8001b78:	e000ed04 	.word	0xe000ed04

08001b7c <vTaskStartScheduler>:
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <vTaskStartScheduler+0x88>)
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	491e      	ldr	r1, [pc, #120]	; (8001c08 <vTaskStartScheduler+0x8c>)
 8001b90:	481e      	ldr	r0, [pc, #120]	; (8001c0c <vTaskStartScheduler+0x90>)
 8001b92:	f7ff fe53 	bl	800183c <xTaskCreate>
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d102      	bne.n	8001ba4 <vTaskStartScheduler+0x28>
 8001b9e:	f000 febf 	bl	8002920 <xTimerCreateTimerTask>
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d116      	bne.n	8001bd8 <vTaskStartScheduler+0x5c>
 8001baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bae:	f383 8811 	msr	BASEPRI, r3
 8001bb2:	f3bf 8f6f 	isb	sy
 8001bb6:	f3bf 8f4f 	dsb	sy
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	bf00      	nop
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <vTaskStartScheduler+0x94>)
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <vTaskStartScheduler+0x98>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <vTaskStartScheduler+0x9c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f001 fa5b 	bl	800308c <xPortStartScheduler>
 8001bd6:	e00e      	b.n	8001bf6 <vTaskStartScheduler+0x7a>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bde:	d10a      	bne.n	8001bf6 <vTaskStartScheduler+0x7a>
 8001be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be4:	f383 8811 	msr	BASEPRI, r3
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	bf00      	nop
 8001bf4:	e7fe      	b.n	8001bf4 <vTaskStartScheduler+0x78>
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <vTaskStartScheduler+0xa0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000194 	.word	0x20000194
 8001c08:	08003ce0 	.word	0x08003ce0
 8001c0c:	080025ed 	.word	0x080025ed
 8001c10:	20000190 	.word	0x20000190
 8001c14:	2000017c 	.word	0x2000017c
 8001c18:	20000174 	.word	0x20000174
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <vTaskSuspendAll>:
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <vTaskSuspendAll+0x18>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <vTaskSuspendAll+0x18>)
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000198 	.word	0x20000198

08001c3c <prvGetExpectedIdleTime>:
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <prvGetExpectedIdleTime+0x58>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <prvGetExpectedIdleTime+0x16>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <prvGetExpectedIdleTime+0x5c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <prvGetExpectedIdleTime+0x26>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	e012      	b.n	8001c88 <prvGetExpectedIdleTime+0x4c>
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <prvGetExpectedIdleTime+0x60>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d902      	bls.n	8001c70 <prvGetExpectedIdleTime+0x34>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	e00b      	b.n	8001c88 <prvGetExpectedIdleTime+0x4c>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <prvGetExpectedIdleTime+0x40>
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	e005      	b.n	8001c88 <prvGetExpectedIdleTime+0x4c>
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <prvGetExpectedIdleTime+0x64>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <prvGetExpectedIdleTime+0x68>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000178 	.word	0x20000178
 8001c98:	20000098 	.word	0x20000098
 8001c9c:	2000009c 	.word	0x2000009c
 8001ca0:	20000190 	.word	0x20000190
 8001ca4:	20000174 	.word	0x20000174

08001ca8 <xTaskResumeAll>:
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	4b71      	ldr	r3, [pc, #452]	; (8001e7c <xTaskResumeAll+0x1d4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10a      	bne.n	8001cd4 <xTaskResumeAll+0x2c>
 8001cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	bf00      	nop
 8001cd2:	e7fe      	b.n	8001cd2 <xTaskResumeAll+0x2a>
 8001cd4:	f001 fa4c 	bl	8003170 <vPortEnterCritical>
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <xTaskResumeAll+0x1d4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <xTaskResumeAll+0x1d4>)
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b66      	ldr	r3, [pc, #408]	; (8001e7c <xTaskResumeAll+0x1d4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f040 80c1 	bne.w	8001e6e <xTaskResumeAll+0x1c6>
 8001cec:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <xTaskResumeAll+0x1d8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80bc 	beq.w	8001e6e <xTaskResumeAll+0x1c6>
 8001cf6:	e08b      	b.n	8001e10 <xTaskResumeAll+0x168>
 8001cf8:	4b62      	ldr	r3, [pc, #392]	; (8001e84 <xTaskResumeAll+0x1dc>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	6a12      	ldr	r2, [r2, #32]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	69fa      	ldr	r2, [r7, #28]
 8001d16:	69d2      	ldr	r2, [r2, #28]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3318      	adds	r3, #24
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d103      	bne.n	8001d2e <xTaskResumeAll+0x86>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	6a1a      	ldr	r2, [r3, #32]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	2200      	movs	r2, #0
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	68d2      	ldr	r2, [r2, #12]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	6892      	ldr	r2, [r2, #8]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d103      	bne.n	8001d6c <xTaskResumeAll+0xc4>
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d80:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <xTaskResumeAll+0x1e0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d903      	bls.n	8001d90 <xTaskResumeAll+0xe8>
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8c:	4a3e      	ldr	r2, [pc, #248]	; (8001e88 <xTaskResumeAll+0x1e0>)
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d94:	493d      	ldr	r1, [pc, #244]	; (8001e8c <xTaskResumeAll+0x1e4>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3304      	adds	r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	3204      	adds	r2, #4
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	1d1a      	adds	r2, r3, #4
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4a2e      	ldr	r2, [pc, #184]	; (8001e8c <xTaskResumeAll+0x1e4>)
 8001dd4:	441a      	add	r2, r3
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	615a      	str	r2, [r3, #20]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dde:	492b      	ldr	r1, [pc, #172]	; (8001e8c <xTaskResumeAll+0x1e4>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	1c59      	adds	r1, r3, #1
 8001dee:	4827      	ldr	r0, [pc, #156]	; (8001e8c <xTaskResumeAll+0x1e4>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4403      	add	r3, r0
 8001dfa:	6019      	str	r1, [r3, #0]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	4b23      	ldr	r3, [pc, #140]	; (8001e90 <xTaskResumeAll+0x1e8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <xTaskResumeAll+0x168>
 8001e0a:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <xTaskResumeAll+0x1ec>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <xTaskResumeAll+0x1dc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f47f af6f 	bne.w	8001cf8 <xTaskResumeAll+0x50>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <xTaskResumeAll+0x17c>
 8001e20:	f000 fcd8 	bl	80027d4 <prvResetNextTaskUnblockTime>
 8001e24:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <xTaskResumeAll+0x1f0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <xTaskResumeAll+0x1aa>
 8001e30:	f000 f89e 	bl	8001f70 <xTaskIncrementTick>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <xTaskResumeAll+0x198>
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <xTaskResumeAll+0x1ec>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f1      	bne.n	8001e30 <xTaskResumeAll+0x188>
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <xTaskResumeAll+0x1f0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <xTaskResumeAll+0x1ec>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d009      	beq.n	8001e6e <xTaskResumeAll+0x1c6>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <xTaskResumeAll+0x1f4>)
 8001e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	f001 f9af 	bl	80031d0 <vPortExitCritical>
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000198 	.word	0x20000198
 8001e80:	20000170 	.word	0x20000170
 8001e84:	20000130 	.word	0x20000130
 8001e88:	20000178 	.word	0x20000178
 8001e8c:	2000009c 	.word	0x2000009c
 8001e90:	20000098 	.word	0x20000098
 8001e94:	20000184 	.word	0x20000184
 8001e98:	20000180 	.word	0x20000180
 8001e9c:	e000ed04 	.word	0xe000ed04

08001ea0 <xTaskGetTickCount>:
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <xTaskGetTickCount+0x18>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	20000174 	.word	0x20000174

08001ebc <vTaskStepTick>:
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <vTaskStepTick+0xa4>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	441a      	add	r2, r3
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <vTaskStepTick+0xa8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d90a      	bls.n	8001eea <vTaskStepTick+0x2e>
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	bf00      	nop
 8001ee8:	e7fe      	b.n	8001ee8 <vTaskStepTick+0x2c>
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <vTaskStepTick+0xa4>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	441a      	add	r2, r3
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <vTaskStepTick+0xa8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d128      	bne.n	8001f4c <vTaskStepTick+0x90>
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <vTaskStepTick+0xac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10a      	bne.n	8001f18 <vTaskStepTick+0x5c>
 8001f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f06:	f383 8811 	msr	BASEPRI, r3
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	bf00      	nop
 8001f16:	e7fe      	b.n	8001f16 <vTaskStepTick+0x5a>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <vTaskStepTick+0x78>
 8001f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f22:	f383 8811 	msr	BASEPRI, r3
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	bf00      	nop
 8001f32:	e7fe      	b.n	8001f32 <vTaskStepTick+0x76>
 8001f34:	f001 f91c 	bl	8003170 <vPortEnterCritical>
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <vTaskStepTick+0xb0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <vTaskStepTick+0xb0>)
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	f001 f945 	bl	80031d0 <vPortExitCritical>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <vTaskStepTick+0xa4>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a02      	ldr	r2, [pc, #8]	; (8001f60 <vTaskStepTick+0xa4>)
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	bf00      	nop
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000174 	.word	0x20000174
 8001f64:	20000190 	.word	0x20000190
 8001f68:	20000198 	.word	0x20000198
 8001f6c:	20000180 	.word	0x20000180

08001f70 <xTaskIncrementTick>:
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	; 0x28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	4b7e      	ldr	r3, [pc, #504]	; (8002174 <xTaskIncrementTick+0x204>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 80ed 	bne.w	800215e <xTaskIncrementTick+0x1ee>
 8001f84:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <xTaskIncrementTick+0x208>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	4a7a      	ldr	r2, [pc, #488]	; (8002178 <xTaskIncrementTick+0x208>)
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d120      	bne.n	8001fda <xTaskIncrementTick+0x6a>
 8001f98:	4b78      	ldr	r3, [pc, #480]	; (800217c <xTaskIncrementTick+0x20c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <xTaskIncrementTick+0x48>
 8001fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	bf00      	nop
 8001fb6:	e7fe      	b.n	8001fb6 <xTaskIncrementTick+0x46>
 8001fb8:	4b70      	ldr	r3, [pc, #448]	; (800217c <xTaskIncrementTick+0x20c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	4b70      	ldr	r3, [pc, #448]	; (8002180 <xTaskIncrementTick+0x210>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a6e      	ldr	r2, [pc, #440]	; (800217c <xTaskIncrementTick+0x20c>)
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4a6e      	ldr	r2, [pc, #440]	; (8002180 <xTaskIncrementTick+0x210>)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <xTaskIncrementTick+0x214>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	4a6c      	ldr	r2, [pc, #432]	; (8002184 <xTaskIncrementTick+0x214>)
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	f000 fbfd 	bl	80027d4 <prvResetNextTaskUnblockTime>
 8001fda:	4b6b      	ldr	r3, [pc, #428]	; (8002188 <xTaskIncrementTick+0x218>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a3a      	ldr	r2, [r7, #32]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	f0c0 80a7 	bcc.w	8002134 <xTaskIncrementTick+0x1c4>
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <xTaskIncrementTick+0x20c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d104      	bne.n	8001ffa <xTaskIncrementTick+0x8a>
 8001ff0:	4b65      	ldr	r3, [pc, #404]	; (8002188 <xTaskIncrementTick+0x218>)
 8001ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e09c      	b.n	8002134 <xTaskIncrementTick+0x1c4>
 8001ffa:	4b60      	ldr	r3, [pc, #384]	; (800217c <xTaskIncrementTick+0x20c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	6a3a      	ldr	r2, [r7, #32]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	429a      	cmp	r2, r3
 8002010:	d203      	bcs.n	800201a <xTaskIncrementTick+0xaa>
 8002012:	4a5d      	ldr	r2, [pc, #372]	; (8002188 <xTaskIncrementTick+0x218>)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e08c      	b.n	8002134 <xTaskIncrementTick+0x1c4>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	68d2      	ldr	r2, [r2, #12]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	3304      	adds	r3, #4
 800203c:	429a      	cmp	r2, r3
 800203e:	d103      	bne.n	8002048 <xTaskIncrementTick+0xd8>
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2200      	movs	r2, #0
 800204c:	615a      	str	r2, [r3, #20]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01e      	beq.n	800209e <xTaskIncrementTick+0x12e>
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	6a12      	ldr	r2, [r2, #32]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	69d2      	ldr	r2, [r2, #28]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3318      	adds	r3, #24
 8002082:	429a      	cmp	r2, r3
 8002084:	d103      	bne.n	800208e <xTaskIncrementTick+0x11e>
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	6a1a      	ldr	r2, [r3, #32]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2200      	movs	r2, #0
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	1e5a      	subs	r2, r3, #1
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a2:	4b3a      	ldr	r3, [pc, #232]	; (800218c <xTaskIncrementTick+0x21c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d903      	bls.n	80020b2 <xTaskIncrementTick+0x142>
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	4a37      	ldr	r2, [pc, #220]	; (800218c <xTaskIncrementTick+0x21c>)
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b6:	4936      	ldr	r1, [pc, #216]	; (8002190 <xTaskIncrementTick+0x220>)
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	3304      	adds	r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	3204      	adds	r2, #4
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1d1a      	adds	r2, r3, #4
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4a26      	ldr	r2, [pc, #152]	; (8002190 <xTaskIncrementTick+0x220>)
 80020f6:	441a      	add	r2, r3
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002100:	4923      	ldr	r1, [pc, #140]	; (8002190 <xTaskIncrementTick+0x220>)
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	1c59      	adds	r1, r3, #1
 8002110:	481f      	ldr	r0, [pc, #124]	; (8002190 <xTaskIncrementTick+0x220>)
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4403      	add	r3, r0
 800211c:	6019      	str	r1, [r3, #0]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <xTaskIncrementTick+0x224>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	429a      	cmp	r2, r3
 800212a:	f67f af5c 	bls.w	8001fe6 <xTaskIncrementTick+0x76>
 800212e:	2301      	movs	r3, #1
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	e758      	b.n	8001fe6 <xTaskIncrementTick+0x76>
 8002134:	4b17      	ldr	r3, [pc, #92]	; (8002194 <xTaskIncrementTick+0x224>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213a:	4915      	ldr	r1, [pc, #84]	; (8002190 <xTaskIncrementTick+0x220>)
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d901      	bls.n	8002150 <xTaskIncrementTick+0x1e0>
 800214c:	2301      	movs	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <xTaskIncrementTick+0x228>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <xTaskIncrementTick+0x1f8>
 8002158:	2301      	movs	r3, #1
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
 800215c:	e004      	b.n	8002168 <xTaskIncrementTick+0x1f8>
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <xTaskIncrementTick+0x22c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <xTaskIncrementTick+0x22c>)
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	4618      	mov	r0, r3
 800216c:	3728      	adds	r7, #40	; 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000198 	.word	0x20000198
 8002178:	20000174 	.word	0x20000174
 800217c:	20000128 	.word	0x20000128
 8002180:	2000012c 	.word	0x2000012c
 8002184:	20000188 	.word	0x20000188
 8002188:	20000190 	.word	0x20000190
 800218c:	20000178 	.word	0x20000178
 8002190:	2000009c 	.word	0x2000009c
 8002194:	20000098 	.word	0x20000098
 8002198:	20000184 	.word	0x20000184
 800219c:	20000180 	.word	0x20000180

080021a0 <vTaskSwitchContext>:
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4b27      	ldr	r3, [pc, #156]	; (8002244 <vTaskSwitchContext+0xa4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <vTaskSwitchContext+0x16>
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <vTaskSwitchContext+0xa8>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e041      	b.n	800223a <vTaskSwitchContext+0x9a>
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <vTaskSwitchContext+0xa8>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <vTaskSwitchContext+0xac>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e010      	b.n	80021e6 <vTaskSwitchContext+0x46>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <vTaskSwitchContext+0x40>
 80021ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ce:	f383 8811 	msr	BASEPRI, r3
 80021d2:	f3bf 8f6f 	isb	sy
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	bf00      	nop
 80021de:	e7fe      	b.n	80021de <vTaskSwitchContext+0x3e>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	491a      	ldr	r1, [pc, #104]	; (8002250 <vTaskSwitchContext+0xb0>)
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0e4      	beq.n	80021c4 <vTaskSwitchContext+0x24>
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <vTaskSwitchContext+0xb0>)
 8002206:	4413      	add	r3, r2
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	3308      	adds	r3, #8
 800221c:	429a      	cmp	r2, r3
 800221e:	d104      	bne.n	800222a <vTaskSwitchContext+0x8a>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a08      	ldr	r2, [pc, #32]	; (8002254 <vTaskSwitchContext+0xb4>)
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4a05      	ldr	r2, [pc, #20]	; (800224c <vTaskSwitchContext+0xac>)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000198 	.word	0x20000198
 8002248:	20000184 	.word	0x20000184
 800224c:	20000178 	.word	0x20000178
 8002250:	2000009c 	.word	0x2000009c
 8002254:	20000098 	.word	0x20000098

08002258 <vTaskPlaceOnEventList>:
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10a      	bne.n	800227e <vTaskPlaceOnEventList+0x26>
 8002268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	bf00      	nop
 800227c:	e7fe      	b.n	800227c <vTaskPlaceOnEventList+0x24>
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <vTaskPlaceOnEventList+0x44>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3318      	adds	r3, #24
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fe1b 	bl	8002ec2 <vListInsert>
 800228c:	2101      	movs	r1, #1
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f000 fad8 	bl	8002844 <prvAddCurrentTaskToDelayedList>
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000098 	.word	0x20000098

080022a0 <vTaskPlaceOnEventListRestricted>:
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <vTaskPlaceOnEventListRestricted+0x28>
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	bf00      	nop
 80022c6:	e7fe      	b.n	80022c6 <vTaskPlaceOnEventListRestricted+0x26>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <vTaskPlaceOnEventListRestricted+0x88>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	61da      	str	r2, [r3, #28]
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <vTaskPlaceOnEventListRestricted+0x88>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	6892      	ldr	r2, [r2, #8]
 80022de:	621a      	str	r2, [r3, #32]
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <vTaskPlaceOnEventListRestricted+0x88>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	3218      	adds	r2, #24
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <vTaskPlaceOnEventListRestricted+0x88>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f103 0218 	add.w	r2, r3, #24
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <vTaskPlaceOnEventListRestricted+0x88>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <vTaskPlaceOnEventListRestricted+0x76>
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	68b8      	ldr	r0, [r7, #8]
 800231a:	f000 fa93 	bl	8002844 <prvAddCurrentTaskToDelayedList>
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000098 	.word	0x20000098

0800232c <xTaskRemoveFromEventList>:
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	623b      	str	r3, [r7, #32]
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10a      	bne.n	8002358 <xTaskRemoveFromEventList+0x2c>
 8002342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002346:	f383 8811 	msr	BASEPRI, r3
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	bf00      	nop
 8002356:	e7fe      	b.n	8002356 <xTaskRemoveFromEventList+0x2a>
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	6a3a      	ldr	r2, [r7, #32]
 8002364:	6a12      	ldr	r2, [r2, #32]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	69d2      	ldr	r2, [r2, #28]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	3318      	adds	r3, #24
 800237a:	429a      	cmp	r2, r3
 800237c:	d103      	bne.n	8002386 <xTaskRemoveFromEventList+0x5a>
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1e5a      	subs	r2, r3, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	4b4b      	ldr	r3, [pc, #300]	; (80024c4 <xTaskRemoveFromEventList+0x198>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d161      	bne.n	8002462 <xTaskRemoveFromEventList+0x136>
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	6a3a      	ldr	r2, [r7, #32]
 80023aa:	68d2      	ldr	r2, [r2, #12]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	6a3a      	ldr	r2, [r7, #32]
 80023b4:	6892      	ldr	r2, [r2, #8]
 80023b6:	605a      	str	r2, [r3, #4]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	3304      	adds	r3, #4
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d103      	bne.n	80023cc <xTaskRemoveFromEventList+0xa0>
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1e5a      	subs	r2, r3, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e0:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <xTaskRemoveFromEventList+0x19c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d903      	bls.n	80023f0 <xTaskRemoveFromEventList+0xc4>
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	4a36      	ldr	r2, [pc, #216]	; (80024c8 <xTaskRemoveFromEventList+0x19c>)
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	4935      	ldr	r1, [pc, #212]	; (80024cc <xTaskRemoveFromEventList+0x1a0>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	3304      	adds	r3, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	3204      	adds	r2, #4
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	1d1a      	adds	r2, r3, #4
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4a26      	ldr	r2, [pc, #152]	; (80024cc <xTaskRemoveFromEventList+0x1a0>)
 8002434:	441a      	add	r2, r3
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	615a      	str	r2, [r3, #20]
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800243e:	4923      	ldr	r1, [pc, #140]	; (80024cc <xTaskRemoveFromEventList+0x1a0>)
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	1c59      	adds	r1, r3, #1
 800244e:	481f      	ldr	r0, [pc, #124]	; (80024cc <xTaskRemoveFromEventList+0x1a0>)
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4403      	add	r3, r0
 800245a:	6019      	str	r1, [r3, #0]
 800245c:	f000 f9ba 	bl	80027d4 <prvResetNextTaskUnblockTime>
 8002460:	e01b      	b.n	800249a <xTaskRemoveFromEventList+0x16e>
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <xTaskRemoveFromEventList+0x1a4>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	61da      	str	r2, [r3, #28]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	621a      	str	r2, [r3, #32]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	6a3a      	ldr	r2, [r7, #32]
 800247c:	3218      	adds	r2, #24
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f103 0218 	add.w	r2, r3, #24
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <xTaskRemoveFromEventList+0x1a4>)
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <xTaskRemoveFromEventList+0x1a4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <xTaskRemoveFromEventList+0x1a4>)
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <xTaskRemoveFromEventList+0x1a8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d905      	bls.n	80024b4 <xTaskRemoveFromEventList+0x188>
 80024a8:	2301      	movs	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <xTaskRemoveFromEventList+0x1ac>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e001      	b.n	80024b8 <xTaskRemoveFromEventList+0x18c>
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	4618      	mov	r0, r3
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000198 	.word	0x20000198
 80024c8:	20000178 	.word	0x20000178
 80024cc:	2000009c 	.word	0x2000009c
 80024d0:	20000130 	.word	0x20000130
 80024d4:	20000098 	.word	0x20000098
 80024d8:	20000184 	.word	0x20000184

080024dc <vTaskInternalSetTimeOutState>:
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <vTaskInternalSetTimeOutState+0x24>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <vTaskInternalSetTimeOutState+0x28>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000188 	.word	0x20000188
 8002504:	20000174 	.word	0x20000174

08002508 <xTaskCheckForTimeOut>:
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <xTaskCheckForTimeOut+0x26>
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	bf00      	nop
 800252c:	e7fe      	b.n	800252c <xTaskCheckForTimeOut+0x24>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <xTaskCheckForTimeOut+0x42>
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <xTaskCheckForTimeOut+0x40>
 800254a:	f000 fe11 	bl	8003170 <vPortEnterCritical>
 800254e:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <xTaskCheckForTimeOut+0xc4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002566:	d102      	bne.n	800256e <xTaskCheckForTimeOut+0x66>
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e026      	b.n	80025bc <xTaskCheckForTimeOut+0xb4>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <xTaskCheckForTimeOut+0xc8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d00a      	beq.n	8002590 <xTaskCheckForTimeOut+0x88>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	429a      	cmp	r2, r3
 8002582:	d305      	bcc.n	8002590 <xTaskCheckForTimeOut+0x88>
 8002584:	2301      	movs	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e015      	b.n	80025bc <xTaskCheckForTimeOut+0xb4>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	429a      	cmp	r2, r3
 8002598:	d20b      	bcs.n	80025b2 <xTaskCheckForTimeOut+0xaa>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	1ad2      	subs	r2, r2, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ff98 	bl	80024dc <vTaskInternalSetTimeOutState>
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	e004      	b.n	80025bc <xTaskCheckForTimeOut+0xb4>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	2301      	movs	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	f000 fe08 	bl	80031d0 <vPortExitCritical>
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000174 	.word	0x20000174
 80025d0:	20000188 	.word	0x20000188

080025d4 <vTaskMissedYield>:
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <vTaskMissedYield+0x14>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000184 	.word	0x20000184

080025ec <prvIdleTask>:
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	f000 f8b0 	bl	8002758 <prvCheckTasksWaitingTermination>
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <prvIdleTask+0x70>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d907      	bls.n	8002610 <prvIdleTask+0x24>
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <prvIdleTask+0x74>)
 8002602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f7ff fb14 	bl	8001c3c <prvGetExpectedIdleTime>
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d9eb      	bls.n	80025f4 <prvIdleTask+0x8>
 800261c:	f7ff fb00 	bl	8001c20 <vTaskSuspendAll>
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <prvIdleTask+0x78>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <prvIdleTask+0x7c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d20a      	bcs.n	8002642 <prvIdleTask+0x56>
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	bf00      	nop
 8002640:	e7fe      	b.n	8002640 <prvIdleTask+0x54>
 8002642:	f7ff fafb 	bl	8001c3c <prvGetExpectedIdleTime>
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d902      	bls.n	8002654 <prvIdleTask+0x68>
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fe2c 	bl	80032ac <vPortSuppressTicksAndSleep>
 8002654:	f7ff fb28 	bl	8001ca8 <xTaskResumeAll>
 8002658:	e7cc      	b.n	80025f4 <prvIdleTask+0x8>
 800265a:	bf00      	nop
 800265c:	2000009c 	.word	0x2000009c
 8002660:	e000ed04 	.word	0xe000ed04
 8002664:	20000190 	.word	0x20000190
 8002668:	20000174 	.word	0x20000174

0800266c <eTaskConfirmSleepModeStatus>:
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	2301      	movs	r3, #1
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	2301      	movs	r3, #1
 8002678:	71fb      	strb	r3, [r7, #7]
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <eTaskConfirmSleepModeStatus+0x58>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <eTaskConfirmSleepModeStatus+0x1c>
 8002682:	2300      	movs	r3, #0
 8002684:	71fb      	strb	r3, [r7, #7]
 8002686:	e017      	b.n	80026b8 <eTaskConfirmSleepModeStatus+0x4c>
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <eTaskConfirmSleepModeStatus+0x5c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <eTaskConfirmSleepModeStatus+0x2a>
 8002690:	2300      	movs	r3, #0
 8002692:	71fb      	strb	r3, [r7, #7]
 8002694:	e010      	b.n	80026b8 <eTaskConfirmSleepModeStatus+0x4c>
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <eTaskConfirmSleepModeStatus+0x60>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <eTaskConfirmSleepModeStatus+0x38>
 800269e:	2300      	movs	r3, #0
 80026a0:	71fb      	strb	r3, [r7, #7]
 80026a2:	e009      	b.n	80026b8 <eTaskConfirmSleepModeStatus+0x4c>
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <eTaskConfirmSleepModeStatus+0x64>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <eTaskConfirmSleepModeStatus+0x68>)
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	1acb      	subs	r3, r1, r3
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d101      	bne.n	80026b8 <eTaskConfirmSleepModeStatus+0x4c>
 80026b4:	2302      	movs	r3, #2
 80026b6:	71fb      	strb	r3, [r7, #7]
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	20000130 	.word	0x20000130
 80026c8:	20000184 	.word	0x20000184
 80026cc:	20000180 	.word	0x20000180
 80026d0:	2000015c 	.word	0x2000015c
 80026d4:	20000170 	.word	0x20000170

080026d8 <prvInitialiseTaskLists>:
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	e00c      	b.n	80026fe <prvInitialiseTaskLists+0x26>
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <prvInitialiseTaskLists+0x60>)
 80026f0:	4413      	add	r3, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fbba 	bl	8002e6c <vListInitialise>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3301      	adds	r3, #1
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d9ef      	bls.n	80026e4 <prvInitialiseTaskLists+0xc>
 8002704:	480d      	ldr	r0, [pc, #52]	; (800273c <prvInitialiseTaskLists+0x64>)
 8002706:	f000 fbb1 	bl	8002e6c <vListInitialise>
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <prvInitialiseTaskLists+0x68>)
 800270c:	f000 fbae 	bl	8002e6c <vListInitialise>
 8002710:	480c      	ldr	r0, [pc, #48]	; (8002744 <prvInitialiseTaskLists+0x6c>)
 8002712:	f000 fbab 	bl	8002e6c <vListInitialise>
 8002716:	480c      	ldr	r0, [pc, #48]	; (8002748 <prvInitialiseTaskLists+0x70>)
 8002718:	f000 fba8 	bl	8002e6c <vListInitialise>
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <prvInitialiseTaskLists+0x74>)
 800271e:	f000 fba5 	bl	8002e6c <vListInitialise>
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <prvInitialiseTaskLists+0x78>)
 8002724:	4a05      	ldr	r2, [pc, #20]	; (800273c <prvInitialiseTaskLists+0x64>)
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <prvInitialiseTaskLists+0x7c>)
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <prvInitialiseTaskLists+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000009c 	.word	0x2000009c
 800273c:	20000100 	.word	0x20000100
 8002740:	20000114 	.word	0x20000114
 8002744:	20000130 	.word	0x20000130
 8002748:	20000144 	.word	0x20000144
 800274c:	2000015c 	.word	0x2000015c
 8002750:	20000128 	.word	0x20000128
 8002754:	2000012c 	.word	0x2000012c

08002758 <prvCheckTasksWaitingTermination>:
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	e019      	b.n	8002794 <prvCheckTasksWaitingTermination+0x3c>
 8002760:	f000 fd06 	bl	8003170 <vPortEnterCritical>
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <prvCheckTasksWaitingTermination+0x50>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3304      	adds	r3, #4
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fbde 	bl	8002f32 <uxListRemove>
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <prvCheckTasksWaitingTermination+0x54>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3b01      	subs	r3, #1
 800277c:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <prvCheckTasksWaitingTermination+0x54>)
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <prvCheckTasksWaitingTermination+0x58>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3b01      	subs	r3, #1
 8002786:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <prvCheckTasksWaitingTermination+0x58>)
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	f000 fd21 	bl	80031d0 <vPortExitCritical>
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f810 	bl	80027b4 <prvDeleteTCB>
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <prvCheckTasksWaitingTermination+0x58>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e1      	bne.n	8002760 <prvCheckTasksWaitingTermination+0x8>
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000144 	.word	0x20000144
 80027ac:	20000170 	.word	0x20000170
 80027b0:	20000158 	.word	0x20000158

080027b4 <prvDeleteTCB>:
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fb41 	bl	8002e48 <vPortFree>
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fb3e 	bl	8002e48 <vPortFree>
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <prvResetNextTaskUnblockTime>:
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <prvResetNextTaskUnblockTime+0x2c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <prvResetNextTaskUnblockTime+0x18>
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <prvResetNextTaskUnblockTime+0x30>)
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e005      	b.n	80027f8 <prvResetNextTaskUnblockTime+0x24>
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <prvResetNextTaskUnblockTime+0x2c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a03      	ldr	r2, [pc, #12]	; (8002804 <prvResetNextTaskUnblockTime+0x30>)
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000128 	.word	0x20000128
 8002804:	20000190 	.word	0x20000190

08002808 <xTaskGetSchedulerState>:
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <xTaskGetSchedulerState+0x34>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <xTaskGetSchedulerState+0x14>
 8002816:	2301      	movs	r3, #1
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	e008      	b.n	800282e <xTaskGetSchedulerState+0x26>
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <xTaskGetSchedulerState+0x38>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <xTaskGetSchedulerState+0x22>
 8002824:	2302      	movs	r3, #2
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	e001      	b.n	800282e <xTaskGetSchedulerState+0x26>
 800282a:	2300      	movs	r3, #0
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	2000017c 	.word	0x2000017c
 8002840:	20000198 	.word	0x20000198

08002844 <prvAddCurrentTaskToDelayedList>:
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3304      	adds	r3, #4
 800285a:	4618      	mov	r0, r3
 800285c:	f000 fb69 	bl	8002f32 <uxListRemove>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d124      	bne.n	80028b2 <prvAddCurrentTaskToDelayedList+0x6e>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d021      	beq.n	80028b2 <prvAddCurrentTaskToDelayedList+0x6e>
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	4b25      	ldr	r3, [pc, #148]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	4b23      	ldr	r3, [pc, #140]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	6892      	ldr	r2, [r2, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	4b21      	ldr	r3, [pc, #132]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	3204      	adds	r2, #4
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1d1a      	adds	r2, r3, #4
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028a2:	615a      	str	r2, [r3, #20]
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	4a19      	ldr	r2, [pc, #100]	; (8002910 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	bf00      	nop
 80028b0:	e026      	b.n	8002900 <prvAddCurrentTaskToDelayedList+0xbc>
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d209      	bcs.n	80028de <prvAddCurrentTaskToDelayedList+0x9a>
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <prvAddCurrentTaskToDelayedList+0xd0>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 faf3 	bl	8002ec2 <vListInsert>
 80028dc:	e010      	b.n	8002900 <prvAddCurrentTaskToDelayedList+0xbc>
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <prvAddCurrentTaskToDelayedList+0xd4>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <prvAddCurrentTaskToDelayedList+0xc8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3304      	adds	r3, #4
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f000 fae9 	bl	8002ec2 <vListInsert>
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <prvAddCurrentTaskToDelayedList+0xd8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d202      	bcs.n	8002900 <prvAddCurrentTaskToDelayedList+0xbc>
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <prvAddCurrentTaskToDelayedList+0xd8>)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	bf00      	nop
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000174 	.word	0x20000174
 800290c:	20000098 	.word	0x20000098
 8002910:	2000015c 	.word	0x2000015c
 8002914:	2000012c 	.word	0x2000012c
 8002918:	20000128 	.word	0x20000128
 800291c:	20000190 	.word	0x20000190

08002920 <xTimerCreateTimerTask>:
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af02      	add	r7, sp, #8
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	f000 fa45 	bl	8002db8 <prvCheckForValidListAndQueue>
 800292e:	4b11      	ldr	r3, [pc, #68]	; (8002974 <xTimerCreateTimerTask+0x54>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <xTimerCreateTimerTask+0x2c>
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <xTimerCreateTimerTask+0x58>)
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2303      	movs	r3, #3
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <xTimerCreateTimerTask+0x5c>)
 8002944:	480e      	ldr	r0, [pc, #56]	; (8002980 <xTimerCreateTimerTask+0x60>)
 8002946:	f7fe ff79 	bl	800183c <xTaskCreate>
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <xTimerCreateTimerTask+0x48>
 8002952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002956:	f383 8811 	msr	BASEPRI, r3
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	f3bf 8f4f 	dsb	sy
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	bf00      	nop
 8002966:	e7fe      	b.n	8002966 <xTimerCreateTimerTask+0x46>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200001cc 	.word	0x200001cc
 8002978:	200001d0 	.word	0x200001d0
 800297c:	08003ce8 	.word	0x08003ce8
 8002980:	08002a29 	.word	0x08002a29

08002984 <prvReloadTimer>:
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	e008      	b.n	80029a4 <prvReloadTimer+0x20>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	4413      	add	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	4798      	blx	r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	18d1      	adds	r1, r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f8db 	bl	8002b6c <prvInsertTimerInActiveList>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ea      	bne.n	8002992 <prvReloadTimer+0xe>
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <prvProcessExpiredTimer>:
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <prvProcessExpiredTimer+0x5c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3304      	adds	r3, #4
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 faa6 	bl	8002f32 <uxListRemove>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <prvProcessExpiredTimer+0x38>
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff ffc3 	bl	8002984 <prvReloadTimer>
 80029fe:	e008      	b.n	8002a12 <prvProcessExpiredTimer+0x4a>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	4798      	blx	r3
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200001c4 	.word	0x200001c4

08002a28 <prvTimerTask>:
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 f857 	bl	8002ae8 <prvGetNextExpireTime>
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f803 	bl	8002a4c <prvProcessTimerOrBlockTask>
 8002a46:	f000 f8d3 	bl	8002bf0 <prvProcessReceivedCommands>
 8002a4a:	e7f1      	b.n	8002a30 <prvTimerTask+0x8>

08002a4c <prvProcessTimerOrBlockTask>:
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	f7ff f8e3 	bl	8001c20 <vTaskSuspendAll>
 8002a5a:	f107 0308 	add.w	r3, r7, #8
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f864 	bl	8002b2c <prvSampleTimeNow>
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d130      	bne.n	8002ace <prvProcessTimerOrBlockTask+0x82>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <prvProcessTimerOrBlockTask+0x3c>
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d806      	bhi.n	8002a88 <prvProcessTimerOrBlockTask+0x3c>
 8002a7a:	f7ff f915 	bl	8001ca8 <xTaskResumeAll>
 8002a7e:	68f9      	ldr	r1, [r7, #12]
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ffa1 	bl	80029c8 <prvProcessExpiredTimer>
 8002a86:	e024      	b.n	8002ad2 <prvProcessTimerOrBlockTask+0x86>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <prvProcessTimerOrBlockTask+0x54>
 8002a8e:	4b13      	ldr	r3, [pc, #76]	; (8002adc <prvProcessTimerOrBlockTask+0x90>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <prvProcessTimerOrBlockTask+0x50>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <prvProcessTimerOrBlockTask+0x52>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <prvProcessTimerOrBlockTask+0x94>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f000 ffc1 	bl	8003a34 <vQueueWaitForMessageRestricted>
 8002ab2:	f7ff f8f9 	bl	8001ca8 <xTaskResumeAll>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <prvProcessTimerOrBlockTask+0x86>
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <prvProcessTimerOrBlockTask+0x98>)
 8002abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	e001      	b.n	8002ad2 <prvProcessTimerOrBlockTask+0x86>
 8002ace:	f7ff f8eb 	bl	8001ca8 <xTaskResumeAll>
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200001c8 	.word	0x200001c8
 8002ae0:	200001cc 	.word	0x200001cc
 8002ae4:	e000ed04 	.word	0xe000ed04

08002ae8 <prvGetNextExpireTime>:
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <prvGetNextExpireTime+0x40>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <prvGetNextExpireTime+0x16>
 8002afa:	2201      	movs	r2, #1
 8002afc:	e000      	b.n	8002b00 <prvGetNextExpireTime+0x18>
 8002afe:	2200      	movs	r2, #0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d105      	bne.n	8002b18 <prvGetNextExpireTime+0x30>
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <prvGetNextExpireTime+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	e001      	b.n	8002b1c <prvGetNextExpireTime+0x34>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	200001c4 	.word	0x200001c4

08002b2c <prvSampleTimeNow>:
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	f7ff f9b4 	bl	8001ea0 <xTaskGetTickCount>
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <prvSampleTimeNow+0x3c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d205      	bcs.n	8002b50 <prvSampleTimeNow+0x24>
 8002b44:	f000 f912 	bl	8002d6c <prvSwitchTimerLists>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e002      	b.n	8002b56 <prvSampleTimeNow+0x2a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <prvSampleTimeNow+0x3c>)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200001d4 	.word	0x200001d4

08002b6c <prvInsertTimerInActiveList>:
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	611a      	str	r2, [r3, #16]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d812      	bhi.n	8002bb8 <prvInsertTimerInActiveList+0x4c>
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	1ad2      	subs	r2, r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <prvInsertTimerInActiveList+0x3a>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e01b      	b.n	8002bde <prvInsertTimerInActiveList+0x72>
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <prvInsertTimerInActiveList+0x7c>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3304      	adds	r3, #4
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	f000 f986 	bl	8002ec2 <vListInsert>
 8002bb6:	e012      	b.n	8002bde <prvInsertTimerInActiveList+0x72>
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d206      	bcs.n	8002bce <prvInsertTimerInActiveList+0x62>
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d302      	bcc.n	8002bce <prvInsertTimerInActiveList+0x62>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e007      	b.n	8002bde <prvInsertTimerInActiveList+0x72>
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <prvInsertTimerInActiveList+0x80>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4610      	mov	r0, r2
 8002bda:	f000 f972 	bl	8002ec2 <vListInsert>
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200001c8 	.word	0x200001c8
 8002bec:	200001c4 	.word	0x200001c4

08002bf0 <prvProcessReceivedCommands>:
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	e0a6      	b.n	8002d46 <prvProcessReceivedCommands+0x156>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f2c0 80a2 	blt.w	8002d44 <prvProcessReceivedCommands+0x154>
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d004      	beq.n	8002c16 <prvProcessReceivedCommands+0x26>
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f98e 	bl	8002f32 <uxListRemove>
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff87 	bl	8002b2c <prvSampleTimeNow>
 8002c1e:	61b8      	str	r0, [r7, #24]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	f200 808e 	bhi.w	8002d46 <prvProcessReceivedCommands+0x156>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <prvProcessReceivedCommands+0x40>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c55 	.word	0x08002c55
 8002c34:	08002c55 	.word	0x08002c55
 8002c38:	08002cbd 	.word	0x08002cbd
 8002c3c:	08002cd1 	.word	0x08002cd1
 8002c40:	08002d1b 	.word	0x08002d1b
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c55 	.word	0x08002c55
 8002c4c:	08002cbd 	.word	0x08002cbd
 8002c50:	08002cd1 	.word	0x08002cd1
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	18d1      	adds	r1, r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	69f8      	ldr	r0, [r7, #28]
 8002c74:	f7ff ff7a 	bl	8002b6c <prvInsertTimerInActiveList>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d063      	beq.n	8002d46 <prvProcessReceivedCommands+0x156>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <prvProcessReceivedCommands+0xb0>
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	4413      	add	r3, r2
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4619      	mov	r1, r3
 8002c98:	69f8      	ldr	r0, [r7, #28]
 8002c9a:	f7ff fe73 	bl	8002984 <prvReloadTimer>
 8002c9e:	e008      	b.n	8002cb2 <prvProcessReceivedCommands+0xc2>
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	69f8      	ldr	r0, [r7, #28]
 8002cb8:	4798      	blx	r3
 8002cba:	e044      	b.n	8002d46 <prvProcessReceivedCommands+0x156>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cce:	e03a      	b.n	8002d46 <prvProcessReceivedCommands+0x156>
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	619a      	str	r2, [r3, #24]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10a      	bne.n	8002d06 <prvProcessReceivedCommands+0x116>
 8002cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	bf00      	nop
 8002d04:	e7fe      	b.n	8002d04 <prvProcessReceivedCommands+0x114>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	18d1      	adds	r1, r2, r3
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	69f8      	ldr	r0, [r7, #28]
 8002d14:	f7ff ff2a 	bl	8002b6c <prvInsertTimerInActiveList>
 8002d18:	e015      	b.n	8002d46 <prvProcessReceivedCommands+0x156>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d103      	bne.n	8002d30 <prvProcessReceivedCommands+0x140>
 8002d28:	69f8      	ldr	r0, [r7, #28]
 8002d2a:	f000 f88d 	bl	8002e48 <vPortFree>
 8002d2e:	e00a      	b.n	8002d46 <prvProcessReceivedCommands+0x156>
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002d42:	e000      	b.n	8002d46 <prvProcessReceivedCommands+0x156>
 8002d44:	bf00      	nop
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <prvProcessReceivedCommands+0x178>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f107 0108 	add.w	r1, r7, #8
 8002d4e:	2200      	movs	r2, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fcb3 	bl	80036bc <xQueueReceive>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f47f af4d 	bne.w	8002bf8 <prvProcessReceivedCommands+0x8>
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	200001cc 	.word	0x200001cc

08002d6c <prvSwitchTimerLists>:
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	e009      	b.n	8002d88 <prvSwitchTimerLists+0x1c>
 8002d74:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <prvSwitchTimerLists+0x44>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d82:	6838      	ldr	r0, [r7, #0]
 8002d84:	f7ff fe20 	bl	80029c8 <prvProcessExpiredTimer>
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <prvSwitchTimerLists+0x44>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <prvSwitchTimerLists+0x8>
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <prvSwitchTimerLists+0x44>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <prvSwitchTimerLists+0x48>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <prvSwitchTimerLists+0x44>)
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <prvSwitchTimerLists+0x48>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200001c4 	.word	0x200001c4
 8002db4:	200001c8 	.word	0x200001c8

08002db8 <prvCheckForValidListAndQueue>:
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	f000 f9d8 	bl	8003170 <vPortEnterCritical>
 8002dc0:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <prvCheckForValidListAndQueue+0x54>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11d      	bne.n	8002e04 <prvCheckForValidListAndQueue+0x4c>
 8002dc8:	4811      	ldr	r0, [pc, #68]	; (8002e10 <prvCheckForValidListAndQueue+0x58>)
 8002dca:	f000 f84f 	bl	8002e6c <vListInitialise>
 8002dce:	4811      	ldr	r0, [pc, #68]	; (8002e14 <prvCheckForValidListAndQueue+0x5c>)
 8002dd0:	f000 f84c 	bl	8002e6c <vListInitialise>
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <prvCheckForValidListAndQueue+0x60>)
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <prvCheckForValidListAndQueue+0x58>)
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <prvCheckForValidListAndQueue+0x64>)
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	; (8002e14 <prvCheckForValidListAndQueue+0x5c>)
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	2200      	movs	r2, #0
 8002de2:	210c      	movs	r1, #12
 8002de4:	200a      	movs	r0, #10
 8002de6:	f000 fbf7 	bl	80035d8 <xQueueGenericCreate>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a07      	ldr	r2, [pc, #28]	; (8002e0c <prvCheckForValidListAndQueue+0x54>)
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <prvCheckForValidListAndQueue+0x54>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <prvCheckForValidListAndQueue+0x4c>
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <prvCheckForValidListAndQueue+0x54>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4908      	ldr	r1, [pc, #32]	; (8002e20 <prvCheckForValidListAndQueue+0x68>)
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fdca 	bl	8003998 <vQueueAddToRegistry>
 8002e04:	f000 f9e4 	bl	80031d0 <vPortExitCritical>
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200001cc 	.word	0x200001cc
 8002e10:	2000019c 	.word	0x2000019c
 8002e14:	200001b0 	.word	0x200001b0
 8002e18:	200001c4 	.word	0x200001c4
 8002e1c:	200001c8 	.word	0x200001c8
 8002e20:	08003cf0 	.word	0x08003cf0

08002e24 <pvPortMalloc>:
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	f7fe fef8 	bl	8001c20 <vTaskSuspendAll>
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fe5d 	bl	8003af0 <malloc>
 8002e36:	4603      	mov	r3, r0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	f7fe ff35 	bl	8001ca8 <xTaskResumeAll>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <vPortFree>:
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <vPortFree+0x1c>
 8002e56:	f7fe fee3 	bl	8001c20 <vTaskSuspendAll>
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fe50 	bl	8003b00 <free>
 8002e60:	f7fe ff22 	bl	8001ca8 <xTaskResumeAll>
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <vListInitialise>:
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f103 0208 	add.w	r2, r3, #8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f103 0208 	add.w	r2, r3, #8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f103 0208 	add.w	r2, r3, #8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <vListInitialiseItem>:
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <vListInsert>:
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	6039      	str	r1, [r7, #0]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d103      	bne.n	8002ee2 <vListInsert+0x20>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e00c      	b.n	8002efc <vListInsert+0x3a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e002      	b.n	8002ef0 <vListInsert+0x2e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d2f6      	bcs.n	8002eea <vListInsert+0x28>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	611a      	str	r2, [r3, #16]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <uxListRemove>:
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6852      	ldr	r2, [r2, #4]
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d103      	bne.n	8002f66 <uxListRemove+0x34>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1e5a      	subs	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <pxPortInitialiseStack>:
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	3b04      	subs	r3, #4
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3b04      	subs	r3, #4
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f023 0201 	bic.w	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3b04      	subs	r3, #4
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <pxPortInitialiseStack+0x54>)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3b14      	subs	r3, #20
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3b20      	subs	r3, #32
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	08002fdd 	.word	0x08002fdd

08002fdc <prvTaskExitError>:
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <prvTaskExitError+0x54>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fee:	d00a      	beq.n	8003006 <prvTaskExitError+0x2a>
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <prvTaskExitError+0x28>
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0fc      	beq.n	800301c <prvTaskExitError+0x40>
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20000010 	.word	0x20000010
	...

08003040 <SVC_Handler>:
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <pxCurrentTCBConst2>)
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	6808      	ldr	r0, [r1, #0]
 8003046:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800304a:	f380 8809 	msr	PSP, r0
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f380 8811 	msr	BASEPRI, r0
 800305a:	f04e 0e0d 	orr.w	lr, lr, #13
 800305e:	4770      	bx	lr

08003060 <pxCurrentTCBConst2>:
 8003060:	20000098 	.word	0x20000098
 8003064:	bf00      	nop
 8003066:	bf00      	nop

08003068 <prvPortStartFirstTask>:
 8003068:	4806      	ldr	r0, [pc, #24]	; (8003084 <prvPortStartFirstTask+0x1c>)
 800306a:	6800      	ldr	r0, [r0, #0]
 800306c:	6800      	ldr	r0, [r0, #0]
 800306e:	f380 8808 	msr	MSP, r0
 8003072:	b662      	cpsie	i
 8003074:	b661      	cpsie	f
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	df00      	svc	0
 8003080:	bf00      	nop
 8003082:	0000      	.short	0x0000
 8003084:	e000ed08 	.word	0xe000ed08
 8003088:	bf00      	nop
 800308a:	bf00      	nop

0800308c <xPortStartScheduler>:
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	4b32      	ldr	r3, [pc, #200]	; (800315c <xPortStartScheduler+0xd0>)
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	22ff      	movs	r2, #255	; 0xff
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	70fb      	strb	r3, [r7, #3]
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <xPortStartScheduler+0xd4>)
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <xPortStartScheduler+0xd8>)
 80030bc:	2207      	movs	r2, #7
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e009      	b.n	80030d6 <xPortStartScheduler+0x4a>
 80030c2:	4b28      	ldr	r3, [pc, #160]	; (8003164 <xPortStartScheduler+0xd8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	4a26      	ldr	r2, [pc, #152]	; (8003164 <xPortStartScheduler+0xd8>)
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	70fb      	strb	r3, [r7, #3]
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b80      	cmp	r3, #128	; 0x80
 80030e0:	d0ef      	beq.n	80030c2 <xPortStartScheduler+0x36>
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <xPortStartScheduler+0xd8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1c3 0307 	rsb	r3, r3, #7
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d00a      	beq.n	8003104 <xPortStartScheduler+0x78>
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <xPortStartScheduler+0x76>
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <xPortStartScheduler+0xd8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	4a16      	ldr	r2, [pc, #88]	; (8003164 <xPortStartScheduler+0xd8>)
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <xPortStartScheduler+0xd8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003116:	4a13      	ldr	r2, [pc, #76]	; (8003164 <xPortStartScheduler+0xd8>)
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <xPortStartScheduler+0xdc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <xPortStartScheduler+0xdc>)
 8003128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <xPortStartScheduler+0xdc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <xPortStartScheduler+0xdc>)
 8003134:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	f000 f981 	bl	8003440 <vPortSetupTimerInterrupt>
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <xPortStartScheduler+0xe0>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	f7ff ff90 	bl	8003068 <prvPortStartFirstTask>
 8003148:	f7ff f82a 	bl	80021a0 <vTaskSwitchContext>
 800314c:	f7ff ff46 	bl	8002fdc <prvTaskExitError>
 8003150:	2300      	movs	r3, #0
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	e000e400 	.word	0xe000e400
 8003160:	200001e4 	.word	0x200001e4
 8003164:	200001e8 	.word	0x200001e8
 8003168:	e000ed20 	.word	0xe000ed20
 800316c:	20000010 	.word	0x20000010

08003170 <vPortEnterCritical>:
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	bf00      	nop
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <vPortEnterCritical+0x58>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <vPortEnterCritical+0x58>)
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <vPortEnterCritical+0x58>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10f      	bne.n	80031bc <vPortEnterCritical+0x4c>
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <vPortEnterCritical+0x5c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <vPortEnterCritical+0x4c>
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <vPortEnterCritical+0x4a>
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000010 	.word	0x20000010
 80031cc:	e000ed04 	.word	0xe000ed04

080031d0 <vPortExitCritical>:
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <vPortExitCritical+0x4c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <vPortExitCritical+0x24>
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <vPortExitCritical+0x22>
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <vPortExitCritical+0x4c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <vPortExitCritical+0x4c>)
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <vPortExitCritical+0x4c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <vPortExitCritical+0x42>
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	20000010 	.word	0x20000010

08003220 <PendSV_Handler>:
 8003220:	f3ef 8009 	mrs	r0, PSP
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <pxCurrentTCBConst>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003230:	6010      	str	r0, [r2, #0]
 8003232:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003236:	f04f 0050 	mov.w	r0, #80	; 0x50
 800323a:	f380 8811 	msr	BASEPRI, r0
 800323e:	f7fe ffaf 	bl	80021a0 <vTaskSwitchContext>
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f380 8811 	msr	BASEPRI, r0
 800324a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	6808      	ldr	r0, [r1, #0]
 8003252:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003256:	f380 8809 	msr	PSP, r0
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	4770      	bx	lr

08003260 <pxCurrentTCBConst>:
 8003260:	20000098 	.word	0x20000098
 8003264:	bf00      	nop
 8003266:	bf00      	nop

08003268 <SysTick_Handler>:
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	bf00      	nop
 8003282:	f7fe fe75 	bl	8001f70 <xTaskIncrementTick>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <SysTick_Handler+0x2c>
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <SysTick_Handler+0x40>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	2300      	movs	r3, #0
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	e000ed04 	.word	0xe000ed04

080032ac <vPortSuppressTicksAndSleep>:
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <vPortSuppressTicksAndSleep+0x178>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d902      	bls.n	80032c4 <vPortSuppressTicksAndSleep+0x18>
 80032be:	4b59      	ldr	r3, [pc, #356]	; (8003424 <vPortSuppressTicksAndSleep+0x178>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	b672      	cpsid	i
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f7ff f9cd 	bl	800266c <eTaskConfirmSleepModeStatus>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <vPortSuppressTicksAndSleep+0x30>
 80032d8:	b662      	cpsie	i
 80032da:	e09e      	b.n	800341a <vPortSuppressTicksAndSleep+0x16e>
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 80032de:	2206      	movs	r2, #6
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	4b52      	ldr	r3, [pc, #328]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <vPortSuppressTicksAndSleep+0x48>
 80032ee:	4b50      	ldr	r3, [pc, #320]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4413      	add	r3, r2
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <vPortSuppressTicksAndSleep+0x188>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <vPortSuppressTicksAndSleep+0x78>
 8003312:	4b48      	ldr	r3, [pc, #288]	; (8003434 <vPortSuppressTicksAndSleep+0x188>)
 8003314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	4b45      	ldr	r3, [pc, #276]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	4b44      	ldr	r3, [pc, #272]	; (8003438 <vPortSuppressTicksAndSleep+0x18c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	429a      	cmp	r2, r3
 800332c:	d904      	bls.n	8003338 <vPortSuppressTicksAndSleep+0x8c>
 800332e:	4b42      	ldr	r3, [pc, #264]	; (8003438 <vPortSuppressTicksAndSleep+0x18c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	4a40      	ldr	r2, [pc, #256]	; (800343c <vPortSuppressTicksAndSleep+0x190>)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	4b38      	ldr	r3, [pc, #224]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a37      	ldr	r2, [pc, #220]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <vPortSuppressTicksAndSleep+0xb8>
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	bf30      	wfi
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	b662      	cpsie	i
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	b672      	cpsid	i
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	4b2b      	ldr	r3, [pc, #172]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 800337a:	2206      	movs	r2, #6
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01d      	beq.n	80033c6 <vPortSuppressTicksAndSleep+0x11a>
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	1acb      	subs	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3b01      	subs	r3, #1
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	4b26      	ldr	r3, [pc, #152]	; (8003438 <vPortSuppressTicksAndSleep+0x18c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d904      	bls.n	80033b0 <vPortSuppressTicksAndSleep+0x104>
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d903      	bls.n	80033b8 <vPortSuppressTicksAndSleep+0x10c>
 80033b0:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	4a20      	ldr	r2, [pc, #128]	; (800343c <vPortSuppressTicksAndSleep+0x190>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	e01a      	b.n	80033fc <vPortSuppressTicksAndSleep+0x150>
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	4b18      	ldr	r3, [pc, #96]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	fb02 f203 	mul.w	r2, r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4a10      	ldr	r2, [pc, #64]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	fb02 f203 	mul.w	r2, r2, r3
 80033f4:	4911      	ldr	r1, [pc, #68]	; (800343c <vPortSuppressTicksAndSleep+0x190>)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	600b      	str	r3, [r1, #0]
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 8003404:	2207      	movs	r2, #7
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0b      	ldr	r2, [pc, #44]	; (800343c <vPortSuppressTicksAndSleep+0x190>)
 800340e:	3b01      	subs	r3, #1
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	69b8      	ldr	r0, [r7, #24]
 8003414:	f7fe fd52 	bl	8001ebc <vTaskStepTick>
 8003418:	b662      	cpsie	i
 800341a:	bf00      	nop
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200001dc 	.word	0x200001dc
 8003428:	e000e010 	.word	0xe000e010
 800342c:	e000e018 	.word	0xe000e018
 8003430:	200001d8 	.word	0x200001d8
 8003434:	e000ed04 	.word	0xe000ed04
 8003438:	200001e0 	.word	0x200001e0
 800343c:	e000e014 	.word	0xe000e014

08003440 <vPortSetupTimerInterrupt>:
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <vPortSetupTimerInterrupt+0x58>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a14      	ldr	r2, [pc, #80]	; (800349c <vPortSetupTimerInterrupt+0x5c>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <vPortSetupTimerInterrupt+0x60>)
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <vPortSetupTimerInterrupt+0x60>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <vPortSetupTimerInterrupt+0x64>)
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <vPortSetupTimerInterrupt+0x68>)
 8003466:	225e      	movs	r2, #94	; 0x5e
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <vPortSetupTimerInterrupt+0x6c>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <vPortSetupTimerInterrupt+0x70>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <vPortSetupTimerInterrupt+0x58>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <vPortSetupTimerInterrupt+0x5c>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <vPortSetupTimerInterrupt+0x74>)
 8003484:	3b01      	subs	r3, #1
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <vPortSetupTimerInterrupt+0x6c>)
 800348a:	2207      	movs	r2, #7
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	bf00      	nop
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000000 	.word	0x20000000
 800349c:	10624dd3 	.word	0x10624dd3
 80034a0:	200001d8 	.word	0x200001d8
 80034a4:	200001dc 	.word	0x200001dc
 80034a8:	200001e0 	.word	0x200001e0
 80034ac:	e000e010 	.word	0xe000e010
 80034b0:	e000e018 	.word	0xe000e018
 80034b4:	e000e014 	.word	0xe000e014

080034b8 <xQueueGenericReset>:
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	2301      	movs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <xQueueGenericReset+0x2e>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xQueueGenericReset+0x2c>
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05d      	beq.n	80035a8 <xQueueGenericReset+0xf0>
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d059      	beq.n	80035a8 <xQueueGenericReset+0xf0>
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	2100      	movs	r1, #0
 80034fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d000      	beq.n	8003508 <xQueueGenericReset+0x50>
 8003506:	2101      	movs	r1, #1
 8003508:	460b      	mov	r3, r1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d14c      	bne.n	80035a8 <xQueueGenericReset+0xf0>
 800350e:	f7ff fe2f 	bl	8003170 <vPortEnterCritical>
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	6939      	ldr	r1, [r7, #16]
 800351c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	441a      	add	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2200      	movs	r2, #0
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	3b01      	subs	r3, #1
 8003540:	6939      	ldr	r1, [r7, #16]
 8003542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	441a      	add	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d114      	bne.n	800358e <xQueueGenericReset+0xd6>
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01a      	beq.n	80035a2 <xQueueGenericReset+0xea>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	3310      	adds	r3, #16
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fedb 	bl	800232c <xTaskRemoveFromEventList>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d012      	beq.n	80035a2 <xQueueGenericReset+0xea>
 800357c:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <xQueueGenericReset+0x11c>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	e009      	b.n	80035a2 <xQueueGenericReset+0xea>
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	3310      	adds	r3, #16
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fc6a 	bl	8002e6c <vListInitialise>
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	3324      	adds	r3, #36	; 0x24
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fc65 	bl	8002e6c <vListInitialise>
 80035a2:	f7ff fe15 	bl	80031d0 <vPortExitCritical>
 80035a6:	e001      	b.n	80035ac <xQueueGenericReset+0xf4>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <xQueueGenericReset+0x110>
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xQueueGenericReset+0x10e>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	e000ed04 	.word	0xe000ed04

080035d8 <xQueueGenericCreate>:
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	71fb      	strb	r3, [r7, #7]
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02e      	beq.n	800364e <xQueueGenericCreate+0x76>
 80035f0:	2100      	movs	r1, #0
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	fba3 2302 	umull	r2, r3, r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d000      	beq.n	8003600 <xQueueGenericCreate+0x28>
 80035fe:	2101      	movs	r1, #1
 8003600:	460b      	mov	r3, r1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d123      	bne.n	800364e <xQueueGenericCreate+0x76>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003612:	d81c      	bhi.n	800364e <xQueueGenericCreate+0x76>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	fb02 f303 	mul.w	r3, r2, r3
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	3350      	adds	r3, #80	; 0x50
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fbfe 	bl	8002e24 <pvPortMalloc>
 8003628:	61f8      	str	r0, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01c      	beq.n	800366a <xQueueGenericCreate+0x92>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3350      	adds	r3, #80	; 0x50
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	79fa      	ldrb	r2, [r7, #7]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f814 	bl	8003674 <prvInitialiseNewQueue>
 800364c:	e00d      	b.n	800366a <xQueueGenericCreate+0x92>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xQueueGenericCreate+0x92>
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xQueueGenericCreate+0x90>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4618      	mov	r0, r3
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <prvInitialiseNewQueue>:
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	70fb      	strb	r3, [r7, #3]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <prvInitialiseNewQueue+0x1c>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e002      	b.n	8003696 <prvInitialiseNewQueue+0x22>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
 80036a2:	2101      	movs	r1, #1
 80036a4:	69b8      	ldr	r0, [r7, #24]
 80036a6:	f7ff ff07 	bl	80034b8 <xQueueGenericReset>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <xQueueReceive>:
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08c      	sub	sp, #48	; 0x30
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <xQueueReceive+0x30>
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <xQueueReceive+0x2e>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <xQueueReceive+0x3e>
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <xQueueReceive+0x42>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <xQueueReceive+0x44>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueReceive+0x5e>
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueReceive+0x5c>
 800371a:	f7ff f875 	bl	8002808 <xTaskGetSchedulerState>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <xQueueReceive+0x6e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <xQueueReceive+0x72>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <xQueueReceive+0x74>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <xQueueReceive+0x8e>
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	bf00      	nop
 8003748:	e7fe      	b.n	8003748 <xQueueReceive+0x8c>
 800374a:	f7ff fd11 	bl	8003170 <vPortEnterCritical>
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01f      	beq.n	800379a <xQueueReceive+0xde>
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800375e:	f000 f88d 	bl	800387c <prvCopyDataFromQueue>
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	1e5a      	subs	r2, r3, #1
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00f      	beq.n	8003792 <xQueueReceive+0xd6>
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	3310      	adds	r3, #16
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fdd8 	bl	800232c <xTaskRemoveFromEventList>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <xQueueReceive+0xd6>
 8003782:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <xQueueReceive+0x1bc>)
 8003784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f7ff fd1d 	bl	80031d0 <vPortExitCritical>
 8003796:	2301      	movs	r3, #1
 8003798:	e069      	b.n	800386e <xQueueReceive+0x1b2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <xQueueReceive+0xec>
 80037a0:	f7ff fd16 	bl	80031d0 <vPortExitCritical>
 80037a4:	2300      	movs	r3, #0
 80037a6:	e062      	b.n	800386e <xQueueReceive+0x1b2>
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <xQueueReceive+0x100>
 80037ae:	f107 0310 	add.w	r3, r7, #16
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fe92 	bl	80024dc <vTaskInternalSetTimeOutState>
 80037b8:	2301      	movs	r3, #1
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037bc:	f7ff fd08 	bl	80031d0 <vPortExitCritical>
 80037c0:	f7fe fa2e 	bl	8001c20 <vTaskSuspendAll>
 80037c4:	f7ff fcd4 	bl	8003170 <vPortEnterCritical>
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d103      	bne.n	80037de <xQueueReceive+0x122>
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e4:	b25b      	sxtb	r3, r3
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d103      	bne.n	80037f4 <xQueueReceive+0x138>
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f4:	f7ff fcec 	bl	80031d0 <vPortExitCritical>
 80037f8:	1d3a      	adds	r2, r7, #4
 80037fa:	f107 0310 	add.w	r3, r7, #16
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fe81 	bl	8002508 <xTaskCheckForTimeOut>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d123      	bne.n	8003854 <xQueueReceive+0x198>
 800380c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380e:	f000 f8ad 	bl	800396c <prvIsQueueEmpty>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <xQueueReceive+0x18c>
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	3324      	adds	r3, #36	; 0x24
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe fd19 	bl	8002258 <vTaskPlaceOnEventList>
 8003826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003828:	f000 f84e 	bl	80038c8 <prvUnlockQueue>
 800382c:	f7fe fa3c 	bl	8001ca8 <xTaskResumeAll>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d189      	bne.n	800374a <xQueueReceive+0x8e>
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <xQueueReceive+0x1bc>)
 8003838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	e780      	b.n	800374a <xQueueReceive+0x8e>
 8003848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800384a:	f000 f83d 	bl	80038c8 <prvUnlockQueue>
 800384e:	f7fe fa2b 	bl	8001ca8 <xTaskResumeAll>
 8003852:	e77a      	b.n	800374a <xQueueReceive+0x8e>
 8003854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003856:	f000 f837 	bl	80038c8 <prvUnlockQueue>
 800385a:	f7fe fa25 	bl	8001ca8 <xTaskResumeAll>
 800385e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003860:	f000 f884 	bl	800396c <prvIsQueueEmpty>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	f43f af6f 	beq.w	800374a <xQueueReceive+0x8e>
 800386c:	2300      	movs	r3, #0
 800386e:	4618      	mov	r0, r3
 8003870:	3730      	adds	r7, #48	; 0x30
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <prvCopyDataFromQueue>:
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <prvCopyDataFromQueue+0x44>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	441a      	add	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d303      	bcc.n	80038b0 <prvCopyDataFromQueue+0x34>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68d9      	ldr	r1, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	461a      	mov	r2, r3
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	f000 f928 	bl	8003b10 <memcpy>
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <prvUnlockQueue>:
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	f7ff fc4e 	bl	8003170 <vPortEnterCritical>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e011      	b.n	8003902 <prvUnlockQueue+0x3a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <prvUnlockQueue+0x44>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3324      	adds	r3, #36	; 0x24
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fd1e 	bl	800232c <xTaskRemoveFromEventList>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <prvUnlockQueue+0x32>
 80038f6:	f7fe fe6d 	bl	80025d4 <vTaskMissedYield>
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	dce9      	bgt.n	80038de <prvUnlockQueue+0x16>
 800390a:	e000      	b.n	800390e <prvUnlockQueue+0x46>
 800390c:	bf00      	nop
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003916:	f7ff fc5b 	bl	80031d0 <vPortExitCritical>
 800391a:	f7ff fc29 	bl	8003170 <vPortEnterCritical>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003924:	73bb      	strb	r3, [r7, #14]
 8003926:	e011      	b.n	800394c <prvUnlockQueue+0x84>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d012      	beq.n	8003956 <prvUnlockQueue+0x8e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3310      	adds	r3, #16
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fcf9 	bl	800232c <xTaskRemoveFromEventList>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <prvUnlockQueue+0x7c>
 8003940:	f7fe fe48 	bl	80025d4 <vTaskMissedYield>
 8003944:	7bbb      	ldrb	r3, [r7, #14]
 8003946:	3b01      	subs	r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	73bb      	strb	r3, [r7, #14]
 800394c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003950:	2b00      	cmp	r3, #0
 8003952:	dce9      	bgt.n	8003928 <prvUnlockQueue+0x60>
 8003954:	e000      	b.n	8003958 <prvUnlockQueue+0x90>
 8003956:	bf00      	nop
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	22ff      	movs	r2, #255	; 0xff
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003960:	f7ff fc36 	bl	80031d0 <vPortExitCritical>
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <prvIsQueueEmpty>:
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	f7ff fbfc 	bl	8003170 <vPortEnterCritical>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <prvIsQueueEmpty+0x1a>
 8003980:	2301      	movs	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e001      	b.n	800398a <prvIsQueueEmpty+0x1e>
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	f7ff fc21 	bl	80031d0 <vPortExitCritical>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <vQueueAddToRegistry>:
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <vQueueAddToRegistry+0x2a>
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <vQueueAddToRegistry+0x28>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d024      	beq.n	8003a12 <vQueueAddToRegistry+0x7a>
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e01e      	b.n	8003a0c <vQueueAddToRegistry+0x74>
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <vQueueAddToRegistry+0x98>)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4413      	add	r3, r2
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d105      	bne.n	80039ea <vQueueAddToRegistry+0x52>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <vQueueAddToRegistry+0x98>)
 80039e4:	4413      	add	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e013      	b.n	8003a12 <vQueueAddToRegistry+0x7a>
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <vQueueAddToRegistry+0x6e>
 80039f0:	4a0f      	ldr	r2, [pc, #60]	; (8003a30 <vQueueAddToRegistry+0x98>)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <vQueueAddToRegistry+0x6e>
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <vQueueAddToRegistry+0x98>)
 8003a02:	4413      	add	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b07      	cmp	r3, #7
 8003a10:	d9dd      	bls.n	80039ce <vQueueAddToRegistry+0x36>
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <vQueueAddToRegistry+0x8c>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000240 	.word	0x20000240

08003a34 <vQueueWaitForMessageRestricted>:
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	f7ff fb94 	bl	8003170 <vPortEnterCritical>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a4e:	b25b      	sxtb	r3, r3
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d103      	bne.n	8003a5e <vQueueWaitForMessageRestricted+0x2a>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a64:	b25b      	sxtb	r3, r3
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d103      	bne.n	8003a74 <vQueueWaitForMessageRestricted+0x40>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a74:	f7ff fbac 	bl	80031d0 <vPortExitCritical>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <vQueueWaitForMessageRestricted+0x5a>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	3324      	adds	r3, #36	; 0x24
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fc09 	bl	80022a0 <vTaskPlaceOnEventListRestricted>
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7ff ff1a 	bl	80038c8 <prvUnlockQueue>
 8003a94:	bf00      	nop
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <__errno>:
 8003a9c:	4b01      	ldr	r3, [pc, #4]	; (8003aa4 <__errno+0x8>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000014 	.word	0x20000014

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	2600      	movs	r6, #0
 8003aac:	4d0c      	ldr	r5, [pc, #48]	; (8003ae0 <__libc_init_array+0x38>)
 8003aae:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003ab0:	1b64      	subs	r4, r4, r5
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	f000 f904 	bl	8003cc4 <_init>
 8003abc:	2600      	movs	r6, #0
 8003abe:	4d0a      	ldr	r5, [pc, #40]	; (8003ae8 <__libc_init_array+0x40>)
 8003ac0:	4c0a      	ldr	r4, [pc, #40]	; (8003aec <__libc_init_array+0x44>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08003d24 	.word	0x08003d24
 8003ae4:	08003d24 	.word	0x08003d24
 8003ae8:	08003d24 	.word	0x08003d24
 8003aec:	08003d28 	.word	0x08003d28

08003af0 <malloc>:
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <malloc+0xc>)
 8003af2:	4601      	mov	r1, r0
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	f000 b86d 	b.w	8003bd4 <_malloc_r>
 8003afa:	bf00      	nop
 8003afc:	20000014 	.word	0x20000014

08003b00 <free>:
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <free+0xc>)
 8003b02:	4601      	mov	r1, r0
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f000 b819 	b.w	8003b3c <_free_r>
 8003b0a:	bf00      	nop
 8003b0c:	20000014 	.word	0x20000014

08003b10 <memcpy>:
 8003b10:	440a      	add	r2, r1
 8003b12:	4291      	cmp	r1, r2
 8003b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b18:	d100      	bne.n	8003b1c <memcpy+0xc>
 8003b1a:	4770      	bx	lr
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b22:	4291      	cmp	r1, r2
 8003b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b28:	d1f9      	bne.n	8003b1e <memcpy+0xe>
 8003b2a:	bd10      	pop	{r4, pc}

08003b2c <memset>:
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4402      	add	r2, r0
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d100      	bne.n	8003b36 <memset+0xa>
 8003b34:	4770      	bx	lr
 8003b36:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3a:	e7f9      	b.n	8003b30 <memset+0x4>

08003b3c <_free_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4605      	mov	r5, r0
 8003b40:	2900      	cmp	r1, #0
 8003b42:	d043      	beq.n	8003bcc <_free_r+0x90>
 8003b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b48:	1f0c      	subs	r4, r1, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfb8      	it	lt
 8003b4e:	18e4      	addlt	r4, r4, r3
 8003b50:	f000 f8aa 	bl	8003ca8 <__malloc_lock>
 8003b54:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <_free_r+0x94>)
 8003b56:	6813      	ldr	r3, [r2, #0]
 8003b58:	4610      	mov	r0, r2
 8003b5a:	b933      	cbnz	r3, 8003b6a <_free_r+0x2e>
 8003b5c:	6063      	str	r3, [r4, #4]
 8003b5e:	6014      	str	r4, [r2, #0]
 8003b60:	4628      	mov	r0, r5
 8003b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b66:	f000 b8a5 	b.w	8003cb4 <__malloc_unlock>
 8003b6a:	42a3      	cmp	r3, r4
 8003b6c:	d90a      	bls.n	8003b84 <_free_r+0x48>
 8003b6e:	6821      	ldr	r1, [r4, #0]
 8003b70:	1862      	adds	r2, r4, r1
 8003b72:	4293      	cmp	r3, r2
 8003b74:	bf01      	itttt	eq
 8003b76:	681a      	ldreq	r2, [r3, #0]
 8003b78:	685b      	ldreq	r3, [r3, #4]
 8003b7a:	1852      	addeq	r2, r2, r1
 8003b7c:	6022      	streq	r2, [r4, #0]
 8003b7e:	6063      	str	r3, [r4, #4]
 8003b80:	6004      	str	r4, [r0, #0]
 8003b82:	e7ed      	b.n	8003b60 <_free_r+0x24>
 8003b84:	461a      	mov	r2, r3
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	b10b      	cbz	r3, 8003b8e <_free_r+0x52>
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	d9fa      	bls.n	8003b84 <_free_r+0x48>
 8003b8e:	6811      	ldr	r1, [r2, #0]
 8003b90:	1850      	adds	r0, r2, r1
 8003b92:	42a0      	cmp	r0, r4
 8003b94:	d10b      	bne.n	8003bae <_free_r+0x72>
 8003b96:	6820      	ldr	r0, [r4, #0]
 8003b98:	4401      	add	r1, r0
 8003b9a:	1850      	adds	r0, r2, r1
 8003b9c:	4283      	cmp	r3, r0
 8003b9e:	6011      	str	r1, [r2, #0]
 8003ba0:	d1de      	bne.n	8003b60 <_free_r+0x24>
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4401      	add	r1, r0
 8003ba8:	6011      	str	r1, [r2, #0]
 8003baa:	6053      	str	r3, [r2, #4]
 8003bac:	e7d8      	b.n	8003b60 <_free_r+0x24>
 8003bae:	d902      	bls.n	8003bb6 <_free_r+0x7a>
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	e7d4      	b.n	8003b60 <_free_r+0x24>
 8003bb6:	6820      	ldr	r0, [r4, #0]
 8003bb8:	1821      	adds	r1, r4, r0
 8003bba:	428b      	cmp	r3, r1
 8003bbc:	bf01      	itttt	eq
 8003bbe:	6819      	ldreq	r1, [r3, #0]
 8003bc0:	685b      	ldreq	r3, [r3, #4]
 8003bc2:	1809      	addeq	r1, r1, r0
 8003bc4:	6021      	streq	r1, [r4, #0]
 8003bc6:	6063      	str	r3, [r4, #4]
 8003bc8:	6054      	str	r4, [r2, #4]
 8003bca:	e7c9      	b.n	8003b60 <_free_r+0x24>
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
 8003bce:	bf00      	nop
 8003bd0:	200001ec 	.word	0x200001ec

08003bd4 <_malloc_r>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	1ccd      	adds	r5, r1, #3
 8003bd8:	f025 0503 	bic.w	r5, r5, #3
 8003bdc:	3508      	adds	r5, #8
 8003bde:	2d0c      	cmp	r5, #12
 8003be0:	bf38      	it	cc
 8003be2:	250c      	movcc	r5, #12
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	4606      	mov	r6, r0
 8003be8:	db01      	blt.n	8003bee <_malloc_r+0x1a>
 8003bea:	42a9      	cmp	r1, r5
 8003bec:	d903      	bls.n	8003bf6 <_malloc_r+0x22>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf6:	f000 f857 	bl	8003ca8 <__malloc_lock>
 8003bfa:	4921      	ldr	r1, [pc, #132]	; (8003c80 <_malloc_r+0xac>)
 8003bfc:	680a      	ldr	r2, [r1, #0]
 8003bfe:	4614      	mov	r4, r2
 8003c00:	b99c      	cbnz	r4, 8003c2a <_malloc_r+0x56>
 8003c02:	4f20      	ldr	r7, [pc, #128]	; (8003c84 <_malloc_r+0xb0>)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b923      	cbnz	r3, 8003c12 <_malloc_r+0x3e>
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f000 f83c 	bl	8003c88 <_sbrk_r>
 8003c10:	6038      	str	r0, [r7, #0]
 8003c12:	4629      	mov	r1, r5
 8003c14:	4630      	mov	r0, r6
 8003c16:	f000 f837 	bl	8003c88 <_sbrk_r>
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	d123      	bne.n	8003c66 <_malloc_r+0x92>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	4630      	mov	r0, r6
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	f000 f846 	bl	8003cb4 <__malloc_unlock>
 8003c28:	e7e3      	b.n	8003bf2 <_malloc_r+0x1e>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	1b5b      	subs	r3, r3, r5
 8003c2e:	d417      	bmi.n	8003c60 <_malloc_r+0x8c>
 8003c30:	2b0b      	cmp	r3, #11
 8003c32:	d903      	bls.n	8003c3c <_malloc_r+0x68>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	441c      	add	r4, r3
 8003c38:	6025      	str	r5, [r4, #0]
 8003c3a:	e004      	b.n	8003c46 <_malloc_r+0x72>
 8003c3c:	6863      	ldr	r3, [r4, #4]
 8003c3e:	42a2      	cmp	r2, r4
 8003c40:	bf0c      	ite	eq
 8003c42:	600b      	streq	r3, [r1, #0]
 8003c44:	6053      	strne	r3, [r2, #4]
 8003c46:	4630      	mov	r0, r6
 8003c48:	f000 f834 	bl	8003cb4 <__malloc_unlock>
 8003c4c:	f104 000b 	add.w	r0, r4, #11
 8003c50:	1d23      	adds	r3, r4, #4
 8003c52:	f020 0007 	bic.w	r0, r0, #7
 8003c56:	1ac2      	subs	r2, r0, r3
 8003c58:	d0cc      	beq.n	8003bf4 <_malloc_r+0x20>
 8003c5a:	1a1b      	subs	r3, r3, r0
 8003c5c:	50a3      	str	r3, [r4, r2]
 8003c5e:	e7c9      	b.n	8003bf4 <_malloc_r+0x20>
 8003c60:	4622      	mov	r2, r4
 8003c62:	6864      	ldr	r4, [r4, #4]
 8003c64:	e7cc      	b.n	8003c00 <_malloc_r+0x2c>
 8003c66:	1cc4      	adds	r4, r0, #3
 8003c68:	f024 0403 	bic.w	r4, r4, #3
 8003c6c:	42a0      	cmp	r0, r4
 8003c6e:	d0e3      	beq.n	8003c38 <_malloc_r+0x64>
 8003c70:	1a21      	subs	r1, r4, r0
 8003c72:	4630      	mov	r0, r6
 8003c74:	f000 f808 	bl	8003c88 <_sbrk_r>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d1dd      	bne.n	8003c38 <_malloc_r+0x64>
 8003c7c:	e7cf      	b.n	8003c1e <_malloc_r+0x4a>
 8003c7e:	bf00      	nop
 8003c80:	200001ec 	.word	0x200001ec
 8003c84:	200001f0 	.word	0x200001f0

08003c88 <_sbrk_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4d05      	ldr	r5, [pc, #20]	; (8003ca4 <_sbrk_r+0x1c>)
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	602b      	str	r3, [r5, #0]
 8003c94:	f7fc fc36 	bl	8000504 <_sbrk>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d102      	bne.n	8003ca2 <_sbrk_r+0x1a>
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	b103      	cbz	r3, 8003ca2 <_sbrk_r+0x1a>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	20000280 	.word	0x20000280

08003ca8 <__malloc_lock>:
 8003ca8:	4801      	ldr	r0, [pc, #4]	; (8003cb0 <__malloc_lock+0x8>)
 8003caa:	f000 b809 	b.w	8003cc0 <__retarget_lock_acquire_recursive>
 8003cae:	bf00      	nop
 8003cb0:	20000288 	.word	0x20000288

08003cb4 <__malloc_unlock>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__malloc_unlock+0x8>)
 8003cb6:	f000 b804 	b.w	8003cc2 <__retarget_lock_release_recursive>
 8003cba:	bf00      	nop
 8003cbc:	20000288 	.word	0x20000288

08003cc0 <__retarget_lock_acquire_recursive>:
 8003cc0:	4770      	bx	lr

08003cc2 <__retarget_lock_release_recursive>:
 8003cc2:	4770      	bx	lr

08003cc4 <_init>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr

08003cd0 <_fini>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr
