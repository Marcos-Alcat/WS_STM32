
FRTOS-Tareas-Medir-Pantalla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005430  08005430  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005430  08005430  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005430  08005430  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000080  080054b8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080054b8  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011db1  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a70  00000000  00000000  00031e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  000348d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00035800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019298  00000000  00000000  000365f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff2f  00000000  00000000  0004f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090448  00000000  00000000  0005f7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efc07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  000efc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080053d0 	.word	0x080053d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080053d0 	.word	0x080053d0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <Medir>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void Medir(void *pvParameters){
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	uint32_t distancia = 0, pMillis, val1 = 0, val2 = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
	while(1){
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2108      	movs	r1, #8
 8000948:	4837      	ldr	r0, [pc, #220]	; (8000a28 <Medir+0xf8>)
 800094a:	f001 f860 	bl	8001a0e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 800094e:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <Medir+0xfc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 8000956:	bf00      	nop
 8000958:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <Medir+0xfc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	2b09      	cmp	r3, #9
 8000960:	d9fa      	bls.n	8000958 <Medir+0x28>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2108      	movs	r1, #8
 8000966:	4830      	ldr	r0, [pc, #192]	; (8000a28 <Medir+0xf8>)
 8000968:	f001 f851 	bl	8001a0e <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick();
 800096c:	f000 fdca 	bl	8001504 <HAL_GetTick>
 8000970:	60f8      	str	r0, [r7, #12]
		while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 8000972:	bf00      	nop
 8000974:	2110      	movs	r1, #16
 8000976:	482c      	ldr	r0, [pc, #176]	; (8000a28 <Medir+0xf8>)
 8000978:	f001 f832 	bl	80019e0 <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d107      	bne.n	8000992 <Medir+0x62>
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f103 040a 	add.w	r4, r3, #10
 8000988:	f000 fdbc 	bl	8001504 <HAL_GetTick>
 800098c:	4603      	mov	r3, r0
 800098e:	429c      	cmp	r4, r3
 8000990:	d8f0      	bhi.n	8000974 <Medir+0x44>
		val1 = __HAL_TIM_GET_COUNTER (&htim2);
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <Medir+0xfc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000998:	617b      	str	r3, [r7, #20]

		pMillis = HAL_GetTick();
 800099a:	f000 fdb3 	bl	8001504 <HAL_GetTick>
 800099e:	60f8      	str	r0, [r7, #12]
		while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 80009a0:	bf00      	nop
 80009a2:	2110      	movs	r1, #16
 80009a4:	4820      	ldr	r0, [pc, #128]	; (8000a28 <Medir+0xf8>)
 80009a6:	f001 f81b 	bl	80019e0 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <Medir+0x90>
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80009b6:	f000 fda5 	bl	8001504 <HAL_GetTick>
 80009ba:	4603      	mov	r3, r0
 80009bc:	429c      	cmp	r4, r3
 80009be:	d8f0      	bhi.n	80009a2 <Medir+0x72>
		val2 = __HAL_TIM_GET_COUNTER (&htim2);
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <Medir+0xfc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c6:	613b      	str	r3, [r7, #16]
		//distance = (val2-val1)* 0.036/2;
		distancia = (val2-val1)* 0.036/2;
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fd00 	bl	80003d4 <__aeabi_ui2d>
 80009d4:	a312      	add	r3, pc, #72	; (adr r3, 8000a20 <Medir+0xf0>)
 80009d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009da:	f7ff fd75 	bl	80004c8 <__aeabi_dmul>
 80009de:	4602      	mov	r2, r0
 80009e0:	460b      	mov	r3, r1
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 0200 	mov.w	r2, #0
 80009ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ee:	f7ff fe95 	bl	800071c <__aeabi_ddiv>
 80009f2:	4602      	mov	r2, r0
 80009f4:	460b      	mov	r3, r1
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	f7ff ff77 	bl	80008ec <__aeabi_d2uiz>
 80009fe:	4603      	mov	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
		xQueueSend(queue_AM, &distancia, portMAX_DELAY);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <Medir+0x100>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	f107 0108 	add.w	r1, r7, #8
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	f002 f98a 	bl	8002d28 <xQueueGenericSend>
		vTaskDelay(60/portTICK_PERIOD_MS);
 8000a14:	203c      	movs	r0, #60	; 0x3c
 8000a16:	f002 fe63 	bl	80036e0 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000a1a:	e793      	b.n	8000944 <Medir+0x14>
 8000a1c:	f3af 8000 	nop.w
 8000a20:	8d4fdf3b 	.word	0x8d4fdf3b
 8000a24:	3fa26e97 	.word	0x3fa26e97
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	20000218 	.word	0x20000218
 8000a30:	20000210 	.word	0x20000210

08000a34 <Display>:
	}
}

static void Display(void *pvParameters){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	uint32_t distancia = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
	while(1){
		xQueueReceive(queue_PA, &distancia, portMAX_DELAY);
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <Display+0x2c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f107 010c 	add.w	r1, r7, #12
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 fa69 	bl	8002f24 <xQueueReceive>
		tm1637_ShowNumber(distancia);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fbee 	bl	8001238 <tm1637_ShowNumber>
		xQueueReceive(queue_PA, &distancia, portMAX_DELAY);
 8000a5c:	e7f0      	b.n	8000a40 <Display+0xc>
 8000a5e:	bf00      	nop
 8000a60:	2000020c 	.word	0x2000020c

08000a64 <Alarm>:
	}
}

static void Alarm(void *pvParameters){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint32_t distancia = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
	struct datConf config;
	while(1){
		xQueueReceive(queue_AM, &distancia, portMAX_DELAY);
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <Alarm+0x74>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f107 0114 	add.w	r1, r7, #20
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f002 fa51 	bl	8002f24 <xQueueReceive>
		xQueueSend(queue_PA, &distancia, portMAX_DELAY);
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <Alarm+0x78>)
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	f107 0114 	add.w	r1, r7, #20
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	f002 f94a 	bl	8002d28 <xQueueGenericSend>
		xQueueReceive(queue_CA, &config, portMAX_DELAY);
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <Alarm+0x7c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f107 010c 	add.w	r1, r7, #12
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 fa3f 	bl	8002f24 <xQueueReceive>
		if((distancia > config.max)||(distancia < config.min)){HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);}
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d304      	bcc.n	8000aba <Alarm+0x56>
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d906      	bls.n	8000ac8 <Alarm+0x64>
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <Alarm+0x80>)
 8000ac2:	f000 ffa4 	bl	8001a0e <HAL_GPIO_WritePin>
 8000ac6:	e005      	b.n	8000ad4 <Alarm+0x70>
		else {HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);}
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <Alarm+0x80>)
 8000ad0:	f000 ff9d 	bl	8001a0e <HAL_GPIO_WritePin>
		xQueueReceive(queue_AM, &distancia, portMAX_DELAY);
 8000ad4:	e7cc      	b.n	8000a70 <Alarm+0xc>
 8000ad6:	bf00      	nop
 8000ad8:	20000210 	.word	0x20000210
 8000adc:	2000020c 	.word	0x2000020c
 8000ae0:	20000214 	.word	0x20000214
 8000ae4:	40011000 	.word	0x40011000

08000ae8 <Config>:
	}
}

static void Config(void *pvParameters){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	struct datConf config;
	while(1){
		config.max = max;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <Config+0x28>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60bb      	str	r3, [r7, #8]
		config.min = min;
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <Config+0x2c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	60fb      	str	r3, [r7, #12]
		xQueueSend(queue_CA, &config, portMAX_DELAY);
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <Config+0x30>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	f107 0108 	add.w	r1, r7, #8
 8000b04:	2300      	movs	r3, #0
 8000b06:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0a:	f002 f90d 	bl	8002d28 <xQueueGenericSend>
		config.max = max;
 8000b0e:	e7ef      	b.n	8000af0 <Config+0x8>
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000004 	.word	0x20000004
 8000b18:	20000214 	.word	0x20000214

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fcc7 	bl	80014b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 f86d 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2a:	f000 f8fd 	bl	8000d28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b2e:	f000 f8af 	bl	8000c90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000b32:	482a      	ldr	r0, [pc, #168]	; (8000bdc <main+0xc0>)
 8000b34:	f001 fbfe 	bl	8002334 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2108      	movs	r1, #8
 8000b3c:	4828      	ldr	r0, [pc, #160]	; (8000be0 <main+0xc4>)
 8000b3e:	f000 ff66 	bl	8001a0e <HAL_GPIO_WritePin>
  tm1637_SetBrightness(3);//Set max brightness
 8000b42:	2003      	movs	r0, #3
 8000b44:	f000 fa98 	bl	8001078 <tm1637_SetBrightness>
  tm1637_DisplayUpdate(0,0,0,0);//Clear display (all segments off)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f000 faa7 	bl	80010a2 <tm1637_DisplayUpdate>

  queue_PA = xQueueCreate(1,sizeof(uint32_t));
 8000b54:	2200      	movs	r2, #0
 8000b56:	2104      	movs	r1, #4
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f002 f873 	bl	8002c44 <xQueueGenericCreate>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <main+0xc8>)
 8000b62:	6013      	str	r3, [r2, #0]
  queue_AM = xQueueCreate(1,sizeof(uint32_t));
 8000b64:	2200      	movs	r2, #0
 8000b66:	2104      	movs	r1, #4
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f002 f86b 	bl	8002c44 <xQueueGenericCreate>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <main+0xcc>)
 8000b72:	6013      	str	r3, [r2, #0]
  queue_CA = xQueueCreate(1,sizeof(struct datConf));
 8000b74:	2200      	movs	r2, #0
 8000b76:	2108      	movs	r1, #8
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f002 f863 	bl	8002c44 <xQueueGenericCreate>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a1a      	ldr	r2, [pc, #104]	; (8000bec <main+0xd0>)
 8000b82:	6013      	str	r3, [r2, #0]

  xTaskCreate(Medir, "", 100, NULL, 1, NULL);
 8000b84:	2300      	movs	r3, #0
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2264      	movs	r2, #100	; 0x64
 8000b90:	4917      	ldr	r1, [pc, #92]	; (8000bf0 <main+0xd4>)
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <main+0xd8>)
 8000b94:	f002 fc38 	bl	8003408 <xTaskCreate>
  xTaskCreate(Display, "", 100, NULL, 1, NULL);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2264      	movs	r2, #100	; 0x64
 8000ba4:	4912      	ldr	r1, [pc, #72]	; (8000bf0 <main+0xd4>)
 8000ba6:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <main+0xdc>)
 8000ba8:	f002 fc2e 	bl	8003408 <xTaskCreate>
  xTaskCreate(Alarm, "", 100, NULL, 1, NULL);
 8000bac:	2300      	movs	r3, #0
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2264      	movs	r2, #100	; 0x64
 8000bb8:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <main+0xd4>)
 8000bba:	4810      	ldr	r0, [pc, #64]	; (8000bfc <main+0xe0>)
 8000bbc:	f002 fc24 	bl	8003408 <xTaskCreate>
  xTaskCreate(Config, "", 100, NULL, 1, NULL);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2264      	movs	r2, #100	; 0x64
 8000bcc:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <main+0xd4>)
 8000bce:	480c      	ldr	r0, [pc, #48]	; (8000c00 <main+0xe4>)
 8000bd0:	f002 fc1a 	bl	8003408 <xTaskCreate>
  vTaskStartScheduler();
 8000bd4:	f002 fdb8 	bl	8003748 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <main+0xbc>
 8000bda:	bf00      	nop
 8000bdc:	20000218 	.word	0x20000218
 8000be0:	40010800 	.word	0x40010800
 8000be4:	2000020c 	.word	0x2000020c
 8000be8:	20000210 	.word	0x20000210
 8000bec:	20000214 	.word	0x20000214
 8000bf0:	080053e8 	.word	0x080053e8
 8000bf4:	08000931 	.word	0x08000931
 8000bf8:	08000a35 	.word	0x08000a35
 8000bfc:	08000a65 	.word	0x08000a65
 8000c00:	08000ae9 	.word	0x08000ae9

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	; 0x40
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	2228      	movs	r2, #40	; 0x28
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 fb10 	bl	8005238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0318 	add.w	r3, r7, #24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fef7 	bl	8001a40 <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c58:	f000 f908 	bl	8000e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2102      	movs	r1, #2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f962 	bl	8001f40 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c82:	f000 f8f3 	bl	8000e6c <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3740      	adds	r7, #64	; 0x40
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cb6:	2247      	movs	r2, #71	; 0x47
 8000cb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cd4:	4813      	ldr	r0, [pc, #76]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cd6:	f001 fadd 	bl	8002294 <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ce0:	f000 f8c4 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000cf2:	f001 fcc3 	bl	800267c <HAL_TIM_ConfigClockSource>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cfc:	f000 f8b6 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_TIM2_Init+0x94>)
 8000d0e:	f001 fe99 	bl	8002a44 <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f000 f8a8 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000218 	.word	0x20000218

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3c:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d54:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a37      	ldr	r2, [pc, #220]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d5a:	f043 0320 	orr.w	r3, r3, #32
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0320 	and.w	r3, r3, #32
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a2b      	ldr	r2, [pc, #172]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <MX_GPIO_Init+0x110>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da2:	4826      	ldr	r0, [pc, #152]	; (8000e3c <MX_GPIO_Init+0x114>)
 8000da4:	f000 fe33 	bl	8001a0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2108      	movs	r1, #8
 8000dac:	4824      	ldr	r0, [pc, #144]	; (8000e40 <MX_GPIO_Init+0x118>)
 8000dae:	f000 fe2e 	bl	8001a0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TM1637_DIO_Pin|TM1637_CLK_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000db8:	4822      	ldr	r0, [pc, #136]	; (8000e44 <MX_GPIO_Init+0x11c>)
 8000dba:	f000 fe28 	bl	8001a0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4819      	ldr	r0, [pc, #100]	; (8000e3c <MX_GPIO_Init+0x114>)
 8000dd8:	f000 fc7e 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	4813      	ldr	r0, [pc, #76]	; (8000e40 <MX_GPIO_Init+0x118>)
 8000df4:	f000 fc70 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_GPIO_Init+0x118>)
 8000e0c:	f000 fc64 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TM1637_DIO_Pin TM1637_CLK_Pin */
  GPIO_InitStruct.Pin = TM1637_DIO_Pin|TM1637_CLK_Pin;
 8000e10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e16:	2311      	movs	r3, #17
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_GPIO_Init+0x11c>)
 8000e2a:	f000 fc55 	bl	80016d8 <HAL_GPIO_Init>

}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	40010800 	.word	0x40010800
 8000e44:	40010c00 	.word	0x40010c00

08000e48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d101      	bne.n	8000e5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e5a:	f000 fb41 	bl	80014e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40012c00 	.word	0x40012c00

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6193      	str	r3, [r2, #24]
 8000e8a:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_MspInit+0x5c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_MspInit+0x60>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_MspInit+0x60>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000

08000edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eec:	d10b      	bne.n	8000f06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_TIM_Base_MspInit+0x34>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_TIM_Base_MspInit+0x34>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_TIM_Base_MspInit+0x34>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000

08000f14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	2019      	movs	r0, #25
 8000f2a:	f000 fbaa 	bl	8001682 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f2e:	2019      	movs	r0, #25
 8000f30:	f000 fbc3 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_InitTick+0x9c>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <HAL_InitTick+0x9c>)
 8000f3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_InitTick+0x9c>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f4c:	f107 0210 	add.w	r2, r7, #16
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 f94e 	bl	80021f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f5c:	f001 f938 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
 8000f60:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <HAL_InitTick+0xa0>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0c9b      	lsrs	r3, r3, #18
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_InitTick+0xa4>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <HAL_InitTick+0xa8>)
 8000f74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_InitTick+0xa4>)
 8000f78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_InitTick+0xa4>)
 8000f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_InitTick+0xa4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_InitTick+0xa4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_InitTick+0xa4>)
 8000f92:	f001 f97f 	bl	8002294 <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d104      	bne.n	8000fa6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f9c:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <HAL_InitTick+0xa4>)
 8000f9e:	f001 fa13 	bl	80023c8 <HAL_TIM_Base_Start_IT>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3730      	adds	r7, #48	; 0x30
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	431bde83 	.word	0x431bde83
 8000fb8:	20000260 	.word	0x20000260
 8000fbc:	40012c00 	.word	0x40012c00

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
	...

08000fec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM1_UP_IRQHandler+0x10>)
 8000ff2:	f001 fa3b 	bl	800246c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000260 	.word	0x20000260

08001000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <_sbrk+0x5c>)
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <_sbrk+0x60>)
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_sbrk+0x64>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <_sbrk+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d207      	bcs.n	8001040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001030:	f004 f8ba 	bl	80051a8 <__errno>
 8001034:	4603      	mov	r3, r0
 8001036:	220c      	movs	r2, #12
 8001038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	e009      	b.n	8001054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <_sbrk+0x64>)
 8001050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20005000 	.word	0x20005000
 8001060:	00000400 	.word	0x00000400
 8001064:	2000009c 	.word	0x2000009c
 8001068:	20000300 	.word	0x20000300

0800106c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <tm1637_SetBrightness>:

//=================================================
//Display control functions

// Brightness values: 0 - 8
void tm1637_SetBrightness(uint8_t brightness){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	tm1637_Start();
 8001082:	f000 f939 	bl	80012f8 <tm1637_Start>
	tm1637_WriteByte(0x87 + brightness);
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	3b79      	subs	r3, #121	; 0x79
 800108a:	b2db      	uxtb	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f975 	bl	800137c <tm1637_WriteByte>
	tm1637_ReadACK();
 8001092:	f000 f953 	bl	800133c <tm1637_ReadACK>
	tm1637_Stop();
 8001096:	f000 f93c 	bl	8001312 <tm1637_Stop>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <tm1637_DisplayUpdate>:

//Send segments data into display
//d0 - ***8, d1 - **8*, d2 - *8**, d3 - 8***
void tm1637_DisplayUpdate(uint8_t d0,uint8_t d1,uint8_t d2,uint8_t d3){
 80010a2:	b590      	push	{r4, r7, lr}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4604      	mov	r4, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4611      	mov	r1, r2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4623      	mov	r3, r4
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4603      	mov	r3, r0
 80010b6:	71bb      	strb	r3, [r7, #6]
 80010b8:	460b      	mov	r3, r1
 80010ba:	717b      	strb	r3, [r7, #5]
 80010bc:	4613      	mov	r3, r2
 80010be:	713b      	strb	r3, [r7, #4]

	tm1637_Start();
 80010c0:	f000 f91a 	bl	80012f8 <tm1637_Start>
	tm1637_WriteByte(0x40);//Memory write command
 80010c4:	2040      	movs	r0, #64	; 0x40
 80010c6:	f000 f959 	bl	800137c <tm1637_WriteByte>
    tm1637_ReadACK();
 80010ca:	f000 f937 	bl	800133c <tm1637_ReadACK>
    tm1637_Stop();
 80010ce:	f000 f920 	bl	8001312 <tm1637_Stop>

    tm1637_Start();
 80010d2:	f000 f911 	bl	80012f8 <tm1637_Start>
    tm1637_WriteByte(0xc0);//Start address
 80010d6:	20c0      	movs	r0, #192	; 0xc0
 80010d8:	f000 f950 	bl	800137c <tm1637_WriteByte>
    tm1637_ReadACK();
 80010dc:	f000 f92e 	bl	800133c <tm1637_ReadACK>

	tm1637_WriteByte(d0);//Data
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f94a 	bl	800137c <tm1637_WriteByte>
    tm1637_ReadACK();
 80010e8:	f000 f928 	bl	800133c <tm1637_ReadACK>
	tm1637_WriteByte(d1);//Data
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f944 	bl	800137c <tm1637_WriteByte>
    tm1637_ReadACK();
 80010f4:	f000 f922 	bl	800133c <tm1637_ReadACK>
	tm1637_WriteByte(d2);//Data
 80010f8:	797b      	ldrb	r3, [r7, #5]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f93e 	bl	800137c <tm1637_WriteByte>
    tm1637_ReadACK();
 8001100:	f000 f91c 	bl	800133c <tm1637_ReadACK>
	tm1637_WriteByte(d3);//Data
 8001104:	793b      	ldrb	r3, [r7, #4]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f938 	bl	800137c <tm1637_WriteByte>
    tm1637_ReadACK();
 800110c:	f000 f916 	bl	800133c <tm1637_ReadACK>

    tm1637_Stop();
 8001110:	f000 f8ff 	bl	8001312 <tm1637_Stop>
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}

0800111c <tm1637_NumberToSegments>:

//Convert number to 7-segment code
uint8_t tm1637_NumberToSegments(uint8_t n){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	if (n == 0) return 0x3F;//0
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <tm1637_NumberToSegments+0x14>
 800112c:	233f      	movs	r3, #63	; 0x3f
 800112e:	e07d      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 1) return 0x06;//1
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <tm1637_NumberToSegments+0x1e>
 8001136:	2306      	movs	r3, #6
 8001138:	e078      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 2) return 0x5B;//2
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d101      	bne.n	8001144 <tm1637_NumberToSegments+0x28>
 8001140:	235b      	movs	r3, #91	; 0x5b
 8001142:	e073      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 3) return 0x4F;//3
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d101      	bne.n	800114e <tm1637_NumberToSegments+0x32>
 800114a:	234f      	movs	r3, #79	; 0x4f
 800114c:	e06e      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 4) return 0x66;//4
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b04      	cmp	r3, #4
 8001152:	d101      	bne.n	8001158 <tm1637_NumberToSegments+0x3c>
 8001154:	2366      	movs	r3, #102	; 0x66
 8001156:	e069      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 5) return 0x6D;//5
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b05      	cmp	r3, #5
 800115c:	d101      	bne.n	8001162 <tm1637_NumberToSegments+0x46>
 800115e:	236d      	movs	r3, #109	; 0x6d
 8001160:	e064      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 6) return 0x7D;//6
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b06      	cmp	r3, #6
 8001166:	d101      	bne.n	800116c <tm1637_NumberToSegments+0x50>
 8001168:	237d      	movs	r3, #125	; 0x7d
 800116a:	e05f      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 7) return 0x07;//7
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b07      	cmp	r3, #7
 8001170:	d101      	bne.n	8001176 <tm1637_NumberToSegments+0x5a>
 8001172:	2307      	movs	r3, #7
 8001174:	e05a      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 8) return 0x7F;//8
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b08      	cmp	r3, #8
 800117a:	d101      	bne.n	8001180 <tm1637_NumberToSegments+0x64>
 800117c:	237f      	movs	r3, #127	; 0x7f
 800117e:	e055      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 9) return 0x6F;//9
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b09      	cmp	r3, #9
 8001184:	d101      	bne.n	800118a <tm1637_NumberToSegments+0x6e>
 8001186:	236f      	movs	r3, #111	; 0x6f
 8001188:	e050      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 10) return 0x77;//A
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b0a      	cmp	r3, #10
 800118e:	d101      	bne.n	8001194 <tm1637_NumberToSegments+0x78>
 8001190:	2377      	movs	r3, #119	; 0x77
 8001192:	e04b      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 11) return 0x7C;//B
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b0b      	cmp	r3, #11
 8001198:	d101      	bne.n	800119e <tm1637_NumberToSegments+0x82>
 800119a:	237c      	movs	r3, #124	; 0x7c
 800119c:	e046      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 12) return 0x39;//C
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	d101      	bne.n	80011a8 <tm1637_NumberToSegments+0x8c>
 80011a4:	2339      	movs	r3, #57	; 0x39
 80011a6:	e041      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 13) return 0x5E;//D
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b0d      	cmp	r3, #13
 80011ac:	d101      	bne.n	80011b2 <tm1637_NumberToSegments+0x96>
 80011ae:	235e      	movs	r3, #94	; 0x5e
 80011b0:	e03c      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 14) return 0x79;//E
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b0e      	cmp	r3, #14
 80011b6:	d101      	bne.n	80011bc <tm1637_NumberToSegments+0xa0>
 80011b8:	2379      	movs	r3, #121	; 0x79
 80011ba:	e037      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 15) return 0x71;//F
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b0f      	cmp	r3, #15
 80011c0:	d101      	bne.n	80011c6 <tm1637_NumberToSegments+0xaa>
 80011c2:	2371      	movs	r3, #113	; 0x71
 80011c4:	e032      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 16) return 0x40;//-
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b10      	cmp	r3, #16
 80011ca:	d101      	bne.n	80011d0 <tm1637_NumberToSegments+0xb4>
 80011cc:	2340      	movs	r3, #64	; 0x40
 80011ce:	e02d      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 17) return 0x77;//A
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	2b11      	cmp	r3, #17
 80011d4:	d101      	bne.n	80011da <tm1637_NumberToSegments+0xbe>
 80011d6:	2377      	movs	r3, #119	; 0x77
 80011d8:	e028      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 18) return 0x3D;//G
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b12      	cmp	r3, #18
 80011de:	d101      	bne.n	80011e4 <tm1637_NumberToSegments+0xc8>
 80011e0:	233d      	movs	r3, #61	; 0x3d
 80011e2:	e023      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 19) return 0x76;//H
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b13      	cmp	r3, #19
 80011e8:	d101      	bne.n	80011ee <tm1637_NumberToSegments+0xd2>
 80011ea:	2376      	movs	r3, #118	; 0x76
 80011ec:	e01e      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 20) return 0x3C;//J
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b14      	cmp	r3, #20
 80011f2:	d101      	bne.n	80011f8 <tm1637_NumberToSegments+0xdc>
 80011f4:	233c      	movs	r3, #60	; 0x3c
 80011f6:	e019      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 21) return 0x73;//P
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b15      	cmp	r3, #21
 80011fc:	d101      	bne.n	8001202 <tm1637_NumberToSegments+0xe6>
 80011fe:	2373      	movs	r3, #115	; 0x73
 8001200:	e014      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 22) return 0x38;//L
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b16      	cmp	r3, #22
 8001206:	d101      	bne.n	800120c <tm1637_NumberToSegments+0xf0>
 8001208:	2338      	movs	r3, #56	; 0x38
 800120a:	e00f      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 23) return 0x6D;//S
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b17      	cmp	r3, #23
 8001210:	d101      	bne.n	8001216 <tm1637_NumberToSegments+0xfa>
 8001212:	236d      	movs	r3, #109	; 0x6d
 8001214:	e00a      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 24) return 0x3E;//U
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b18      	cmp	r3, #24
 800121a:	d101      	bne.n	8001220 <tm1637_NumberToSegments+0x104>
 800121c:	233e      	movs	r3, #62	; 0x3e
 800121e:	e005      	b.n	800122c <tm1637_NumberToSegments+0x110>
	if (n == 25) return 0x6E;//Y
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b19      	cmp	r3, #25
 8001224:	d101      	bne.n	800122a <tm1637_NumberToSegments+0x10e>
 8001226:	236e      	movs	r3, #110	; 0x6e
 8001228:	e000      	b.n	800122c <tm1637_NumberToSegments+0x110>
	return 0x00;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
	...

08001238 <tm1637_ShowNumber>:

//Send number into display; BMS a bms se modificaron.
void tm1637_ShowNumber(uint16_t num){
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	80fb      	strh	r3, [r7, #6]
	uint8_t dg0,dg1,dg2,dg3;
	dg0 = tm1637_NumberToSegments((uint8_t)(num / 1000));
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	4a29      	ldr	r2, [pc, #164]	; (80012ec <tm1637_ShowNumber+0xb4>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	099b      	lsrs	r3, r3, #6
 800124c:	b29b      	uxth	r3, r3
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff63 	bl	800111c <tm1637_NumberToSegments>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
	num = num % 1000;
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	4a23      	ldr	r2, [pc, #140]	; (80012ec <tm1637_ShowNumber+0xb4>)
 800125e:	fba2 1203 	umull	r1, r2, r2, r3
 8001262:	0992      	lsrs	r2, r2, #6
 8001264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001268:	fb01 f202 	mul.w	r2, r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	80fb      	strh	r3, [r7, #6]
	dg1 = tm1637_NumberToSegments((uint8_t)(num / 100));
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <tm1637_ShowNumber+0xb8>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	095b      	lsrs	r3, r3, #5
 800127a:	b29b      	uxth	r3, r3
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff4c 	bl	800111c <tm1637_NumberToSegments>
 8001284:	4603      	mov	r3, r0
 8001286:	73bb      	strb	r3, [r7, #14]
	num = num % 100;
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <tm1637_ShowNumber+0xb8>)
 800128c:	fba2 1203 	umull	r1, r2, r2, r3
 8001290:	0952      	lsrs	r2, r2, #5
 8001292:	2164      	movs	r1, #100	; 0x64
 8001294:	fb01 f202 	mul.w	r2, r1, r2
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	80fb      	strh	r3, [r7, #6]
	dg2 = tm1637_NumberToSegments((uint8_t)(num / 10));
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <tm1637_ShowNumber+0xbc>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff36 	bl	800111c <tm1637_NumberToSegments>
 80012b0:	4603      	mov	r3, r0
 80012b2:	737b      	strb	r3, [r7, #13]
	num = num % 10;
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <tm1637_ShowNumber+0xbc>)
 80012b8:	fba3 1302 	umull	r1, r3, r3, r2
 80012bc:	08d9      	lsrs	r1, r3, #3
 80012be:	460b      	mov	r3, r1
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	80fb      	strh	r3, [r7, #6]
	dg3 = tm1637_NumberToSegments((uint8_t)num);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff24 	bl	800111c <tm1637_NumberToSegments>
 80012d4:	4603      	mov	r3, r0
 80012d6:	733b      	strb	r3, [r7, #12]
	tm1637_DisplayUpdate(dg0,dg1,dg2,dg3);
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	7b7a      	ldrb	r2, [r7, #13]
 80012dc:	7bb9      	ldrb	r1, [r7, #14]
 80012de:	7bf8      	ldrb	r0, [r7, #15]
 80012e0:	f7ff fedf 	bl	80010a2 <tm1637_DisplayUpdate>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	10624dd3 	.word	0x10624dd3
 80012f0:	51eb851f 	.word	0x51eb851f
 80012f4:	cccccccd 	.word	0xcccccccd

080012f8 <tm1637_Start>:

//=================================================
//Protocol functions

//Start transfer signal
void tm1637_Start(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	tm1637_CLK_SetHigh();
 80012fc:	f000 f884 	bl	8001408 <tm1637_CLK_SetHigh>
	tm1637_DIO_SetHigh();
 8001300:	f000 f89a 	bl	8001438 <tm1637_DIO_SetHigh>
	SomeDelay(5);
 8001304:	2005      	movs	r0, #5
 8001306:	f000 f863 	bl	80013d0 <SomeDelay>
	tm1637_DIO_SetLow();
 800130a:	f000 f8a1 	bl	8001450 <tm1637_DIO_SetLow>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}

08001312 <tm1637_Stop>:

//Stop transfer signal
void tm1637_Stop(void){
 8001312:	b580      	push	{r7, lr}
 8001314:	af00      	add	r7, sp, #0
	tm1637_CLK_SetLow();
 8001316:	f000 f883 	bl	8001420 <tm1637_CLK_SetLow>
	SomeDelay(5);
 800131a:	2005      	movs	r0, #5
 800131c:	f000 f858 	bl	80013d0 <SomeDelay>
	tm1637_DIO_SetLow();
 8001320:	f000 f896 	bl	8001450 <tm1637_DIO_SetLow>
    SomeDelay(5);
 8001324:	2005      	movs	r0, #5
 8001326:	f000 f853 	bl	80013d0 <SomeDelay>
    tm1637_CLK_SetHigh();
 800132a:	f000 f86d 	bl	8001408 <tm1637_CLK_SetHigh>
    SomeDelay(5);
 800132e:	2005      	movs	r0, #5
 8001330:	f000 f84e 	bl	80013d0 <SomeDelay>
    tm1637_DIO_SetHigh();
 8001334:	f000 f880 	bl	8001438 <tm1637_DIO_SetHigh>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <tm1637_ReadACK>:

//Read ack signal
uint8_t tm1637_ReadACK(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	tm1637_CLK_SetLow();
 8001342:	f000 f86d 	bl	8001420 <tm1637_CLK_SetLow>
	tm1637_DIO_SetHigh();
 8001346:	f000 f877 	bl	8001438 <tm1637_DIO_SetHigh>
	SomeDelay(7);
 800134a:	2007      	movs	r0, #7
 800134c:	f000 f840 	bl	80013d0 <SomeDelay>
    uint8_t d = HAL_GPIO_ReadPin(TM1637_DIO_PORT, TM1637_DIO_PIN);
 8001350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <tm1637_ReadACK+0x3c>)
 8001356:	f000 fb43 	bl	80019e0 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	tm1637_CLK_SetHigh();
 800135e:	f000 f853 	bl	8001408 <tm1637_CLK_SetHigh>
	SomeDelay(5);
 8001362:	2005      	movs	r0, #5
 8001364:	f000 f834 	bl	80013d0 <SomeDelay>
    tm1637_CLK_SetLow();
 8001368:	f000 f85a 	bl	8001420 <tm1637_CLK_SetLow>
    return d;
 800136c:	79fb      	ldrb	r3, [r7, #7]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40010c00 	.word	0x40010c00

0800137c <tm1637_WriteByte>:

//Send command or data into display
void tm1637_WriteByte(uint8_t data){
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e019      	b.n	80013c0 <tm1637_WriteByte+0x44>
    	tm1637_CLK_SetLow();
 800138c:	f000 f848 	bl	8001420 <tm1637_CLK_SetLow>
        if (data & 0x01) {
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d002      	beq.n	80013a0 <tm1637_WriteByte+0x24>
        	tm1637_DIO_SetHigh();
 800139a:	f000 f84d 	bl	8001438 <tm1637_DIO_SetHigh>
 800139e:	e001      	b.n	80013a4 <tm1637_WriteByte+0x28>
        } else {
        	tm1637_DIO_SetLow();
 80013a0:	f000 f856 	bl	8001450 <tm1637_DIO_SetLow>
        };
        SomeDelay(7);
 80013a4:	2007      	movs	r0, #7
 80013a6:	f000 f813 	bl	80013d0 <SomeDelay>
        data >>= 1;
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	71fb      	strb	r3, [r7, #7]
        tm1637_CLK_SetHigh();
 80013b0:	f000 f82a 	bl	8001408 <tm1637_CLK_SetHigh>
        SomeDelay(7);
 80013b4:	2007      	movs	r0, #7
 80013b6:	f000 f80b 	bl	80013d0 <SomeDelay>
    for (uint8_t i = 0; i < 8; i++) {
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	3301      	adds	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d9e2      	bls.n	800138c <tm1637_WriteByte+0x10>
    };
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <SomeDelay>:

//=================================================
//We need some delay for protocol

//Delay approximately (0.95*i + 0.6) us on 72Mhz & optimization for size "-Os"
void SomeDelay(uint32_t i){
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    while (i > 0) {
 80013d8:	e00c      	b.n	80013f4 <SomeDelay+0x24>
    	for (uint32_t j = 0; j < 10; j++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e003      	b.n	80013e8 <SomeDelay+0x18>
    		__NOP();
 80013e0:	bf00      	nop
    	for (uint32_t j = 0; j < 10; j++) {
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b09      	cmp	r3, #9
 80013ec:	d9f8      	bls.n	80013e0 <SomeDelay+0x10>
    	};
    	i--;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
    while (i > 0) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ef      	bne.n	80013da <SomeDelay+0xa>
    };
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
	...

08001408 <tm1637_CLK_SetHigh>:

//=================================================
//Pins control functions

//Set 1 on CLK pin
void tm1637_CLK_SetHigh(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_CLK_PORT, TM1637_CLK_PIN, GPIO_PIN_SET);//CLK
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <tm1637_CLK_SetHigh+0x14>)
 8001414:	f000 fafb 	bl	8001a0e <HAL_GPIO_WritePin>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40010c00 	.word	0x40010c00

08001420 <tm1637_CLK_SetLow>:

//Set 0 on CLK pin
void tm1637_CLK_SetLow(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_CLK_PORT, TM1637_CLK_PIN, GPIO_PIN_RESET);//CLK
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142a:	4802      	ldr	r0, [pc, #8]	; (8001434 <tm1637_CLK_SetLow+0x14>)
 800142c:	f000 faef 	bl	8001a0e <HAL_GPIO_WritePin>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40010c00 	.word	0x40010c00

08001438 <tm1637_DIO_SetHigh>:

//Set 1 on DIO pin
void tm1637_DIO_SetHigh(void){
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_DIO_PORT, TM1637_DIO_PIN, GPIO_PIN_SET);//DIO
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001442:	4802      	ldr	r0, [pc, #8]	; (800144c <tm1637_DIO_SetHigh+0x14>)
 8001444:	f000 fae3 	bl	8001a0e <HAL_GPIO_WritePin>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010c00 	.word	0x40010c00

08001450 <tm1637_DIO_SetLow>:

//Set 0 on DIO pin
void tm1637_DIO_SetLow(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_DIO_PORT, TM1637_DIO_PIN, GPIO_PIN_RESET);//DIO
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145a:	4802      	ldr	r0, [pc, #8]	; (8001464 <tm1637_DIO_SetLow+0x14>)
 800145c:	f000 fad7 	bl	8001a0e <HAL_GPIO_WritePin>
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40010c00 	.word	0x40010c00

08001468 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001468:	f7ff fe00 	bl	800106c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480b      	ldr	r0, [pc, #44]	; (800149c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800146e:	490c      	ldr	r1, [pc, #48]	; (80014a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001470:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001484:	4c09      	ldr	r4, [pc, #36]	; (80014ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001492:	f003 fe8f 	bl	80051b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001496:	f7ff fb41 	bl	8000b1c <main>
  bx lr
 800149a:	4770      	bx	lr
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80014a4:	08005438 	.word	0x08005438
  ldr r2, =_sbss
 80014a8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80014ac:	200002fc 	.word	0x200002fc

080014b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC1_2_IRQHandler>
	...

080014b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_Init+0x28>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_Init+0x28>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f000 f8d1 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff fd22 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d0:	f7ff fcd2 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40022000 	.word	0x40022000

080014e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_IncTick+0x1c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_IncTick+0x20>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a03      	ldr	r2, [pc, #12]	; (8001500 <HAL_IncTick+0x20>)
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000010 	.word	0x20000010
 8001500:	200002a8 	.word	0x200002a8

08001504 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return uwTick;
 8001508:	4b02      	ldr	r3, [pc, #8]	; (8001514 <HAL_GetTick+0x10>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	200002a8 	.word	0x200002a8

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	db0b      	blt.n	80015a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	4906      	ldr	r1, [pc, #24]	; (80015b0 <__NVIC_EnableIRQ+0x34>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	2001      	movs	r0, #1
 800159e:	fa00 f202 	lsl.w	r2, r0, r2
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	; (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	; (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	; 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff4f 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff64 	bl	8001560 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ffb2 	bl	8001608 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff81 	bl	80015b4 <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff57 	bl	800157c <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b08b      	sub	sp, #44	; 0x2c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	e169      	b.n	80019c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016ec:	2201      	movs	r2, #1
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8158 	bne.w	80019ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4a9a      	ldr	r2, [pc, #616]	; (8001978 <HAL_GPIO_Init+0x2a0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d05e      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001714:	4a98      	ldr	r2, [pc, #608]	; (8001978 <HAL_GPIO_Init+0x2a0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d875      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 800171a:	4a98      	ldr	r2, [pc, #608]	; (800197c <HAL_GPIO_Init+0x2a4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d058      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001720:	4a96      	ldr	r2, [pc, #600]	; (800197c <HAL_GPIO_Init+0x2a4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d86f      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 8001726:	4a96      	ldr	r2, [pc, #600]	; (8001980 <HAL_GPIO_Init+0x2a8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d052      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 800172c:	4a94      	ldr	r2, [pc, #592]	; (8001980 <HAL_GPIO_Init+0x2a8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d869      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 8001732:	4a94      	ldr	r2, [pc, #592]	; (8001984 <HAL_GPIO_Init+0x2ac>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d04c      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001738:	4a92      	ldr	r2, [pc, #584]	; (8001984 <HAL_GPIO_Init+0x2ac>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d863      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 800173e:	4a92      	ldr	r2, [pc, #584]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d046      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001744:	4a90      	ldr	r2, [pc, #576]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d85d      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 800174a:	2b12      	cmp	r3, #18
 800174c:	d82a      	bhi.n	80017a4 <HAL_GPIO_Init+0xcc>
 800174e:	2b12      	cmp	r3, #18
 8001750:	d859      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <HAL_GPIO_Init+0x80>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017ad 	.word	0x080017ad
 8001760:	080017bf 	.word	0x080017bf
 8001764:	08001801 	.word	0x08001801
 8001768:	08001807 	.word	0x08001807
 800176c:	08001807 	.word	0x08001807
 8001770:	08001807 	.word	0x08001807
 8001774:	08001807 	.word	0x08001807
 8001778:	08001807 	.word	0x08001807
 800177c:	08001807 	.word	0x08001807
 8001780:	08001807 	.word	0x08001807
 8001784:	08001807 	.word	0x08001807
 8001788:	08001807 	.word	0x08001807
 800178c:	08001807 	.word	0x08001807
 8001790:	08001807 	.word	0x08001807
 8001794:	08001807 	.word	0x08001807
 8001798:	08001807 	.word	0x08001807
 800179c:	080017b5 	.word	0x080017b5
 80017a0:	080017c9 	.word	0x080017c9
 80017a4:	4a79      	ldr	r2, [pc, #484]	; (800198c <HAL_GPIO_Init+0x2b4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017aa:	e02c      	b.n	8001806 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	623b      	str	r3, [r7, #32]
          break;
 80017b2:	e029      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	3304      	adds	r3, #4
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e024      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	3308      	adds	r3, #8
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e01f      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	330c      	adds	r3, #12
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e01a      	b.n	8001808 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017da:	2304      	movs	r3, #4
 80017dc:	623b      	str	r3, [r7, #32]
          break;
 80017de:	e013      	b.n	8001808 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e8:	2308      	movs	r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	611a      	str	r2, [r3, #16]
          break;
 80017f2:	e009      	b.n	8001808 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f4:	2308      	movs	r3, #8
 80017f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	615a      	str	r2, [r3, #20]
          break;
 80017fe:	e003      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x130>
          break;
 8001806:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2bff      	cmp	r3, #255	; 0xff
 800180c:	d801      	bhi.n	8001812 <HAL_GPIO_Init+0x13a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	e001      	b.n	8001816 <HAL_GPIO_Init+0x13e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3304      	adds	r3, #4
 8001816:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2bff      	cmp	r3, #255	; 0xff
 800181c:	d802      	bhi.n	8001824 <HAL_GPIO_Init+0x14c>
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	e002      	b.n	800182a <HAL_GPIO_Init+0x152>
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3b08      	subs	r3, #8
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	210f      	movs	r1, #15
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
 800183c:	6a39      	ldr	r1, [r7, #32]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	431a      	orrs	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80b1 	beq.w	80019ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001858:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <HAL_GPIO_Init+0x2b8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <HAL_GPIO_Init+0x2b8>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_GPIO_Init+0x2b8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001870:	4a48      	ldr	r2, [pc, #288]	; (8001994 <HAL_GPIO_Init+0x2bc>)
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a40      	ldr	r2, [pc, #256]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d013      	beq.n	80018c4 <HAL_GPIO_Init+0x1ec>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a3f      	ldr	r2, [pc, #252]	; (800199c <HAL_GPIO_Init+0x2c4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d00d      	beq.n	80018c0 <HAL_GPIO_Init+0x1e8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3e      	ldr	r2, [pc, #248]	; (80019a0 <HAL_GPIO_Init+0x2c8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d007      	beq.n	80018bc <HAL_GPIO_Init+0x1e4>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3d      	ldr	r2, [pc, #244]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_GPIO_Init+0x1e0>
 80018b4:	2303      	movs	r3, #3
 80018b6:	e006      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018b8:	2304      	movs	r3, #4
 80018ba:	e004      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018bc:	2302      	movs	r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018c4:	2300      	movs	r3, #0
 80018c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c8:	f002 0203 	and.w	r2, r2, #3
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	4093      	lsls	r3, r2
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018d6:	492f      	ldr	r1, [pc, #188]	; (8001994 <HAL_GPIO_Init+0x2bc>)
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d006      	beq.n	80018fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	492c      	ldr	r1, [pc, #176]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	43db      	mvns	r3, r3
 8001906:	4928      	ldr	r1, [pc, #160]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001908:	4013      	ands	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4922      	ldr	r1, [pc, #136]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	60cb      	str	r3, [r1, #12]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	491e      	ldr	r1, [pc, #120]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001930:	4013      	ands	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4918      	ldr	r1, [pc, #96]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	4914      	ldr	r1, [pc, #80]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001958:	4013      	ands	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d021      	beq.n	80019ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	490e      	ldr	r1, [pc, #56]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e021      	b.n	80019ba <HAL_GPIO_Init+0x2e2>
 8001976:	bf00      	nop
 8001978:	10320000 	.word	0x10320000
 800197c:	10310000 	.word	0x10310000
 8001980:	10220000 	.word	0x10220000
 8001984:	10210000 	.word	0x10210000
 8001988:	10120000 	.word	0x10120000
 800198c:	10110000 	.word	0x10110000
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000
 8001998:	40010800 	.word	0x40010800
 800199c:	40010c00 	.word	0x40010c00
 80019a0:	40011000 	.word	0x40011000
 80019a4:	40011400 	.word	0x40011400
 80019a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_GPIO_Init+0x304>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <HAL_GPIO_Init+0x304>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	3301      	adds	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f47f ae8e 	bne.w	80016ec <HAL_GPIO_Init+0x14>
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	372c      	adds	r7, #44	; 0x2c
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e001      	b.n	8001a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr

08001a0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	807b      	strh	r3, [r7, #2]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a1e:	787b      	ldrb	r3, [r7, #1]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a24:	887a      	ldrh	r2, [r7, #2]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a2a:	e003      	b.n	8001a34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	041a      	lsls	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	611a      	str	r2, [r3, #16]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e26c      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8087 	beq.w	8001b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a60:	4b92      	ldr	r3, [pc, #584]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d00c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a6c:	4b8f      	ldr	r3, [pc, #572]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d112      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5e>
 8001a78:	4b8c      	ldr	r3, [pc, #560]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d10b      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a86:	4b89      	ldr	r3, [pc, #548]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d06c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x12c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d168      	bne.n	8001b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e246      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x76>
 8001aa8:	4b80      	ldr	r3, [pc, #512]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a7f      	ldr	r2, [pc, #508]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e02e      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x98>
 8001abe:	4b7b      	ldr	r3, [pc, #492]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a7a      	ldr	r2, [pc, #488]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b78      	ldr	r3, [pc, #480]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a77      	ldr	r2, [pc, #476]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e01d      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0xbc>
 8001ae2:	4b72      	ldr	r3, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a71      	ldr	r2, [pc, #452]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6e      	ldr	r2, [pc, #440]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0xd4>
 8001afc:	4b6b      	ldr	r3, [pc, #428]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6a      	ldr	r2, [pc, #424]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	4b68      	ldr	r3, [pc, #416]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a67      	ldr	r2, [pc, #412]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fcf2 	bl	8001504 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fcee 	bl	8001504 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1fa      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b36:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0xe4>
 8001b42:	e014      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fcde 	bl	8001504 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fcda 	bl	8001504 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1e6      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5e:	4b53      	ldr	r3, [pc, #332]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x10c>
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d063      	beq.n	8001c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7a:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00b      	beq.n	8001b9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d11c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x18c>
 8001b92:	4b46      	ldr	r3, [pc, #280]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d116      	bne.n	8001bcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9e:	4b43      	ldr	r3, [pc, #268]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x176>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e1ba      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4939      	ldr	r1, [pc, #228]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bca:	e03a      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd4:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff fc93 	bl	8001504 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be2:	f7ff fc8f 	bl	8001504 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e19b      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c00:	4b2a      	ldr	r3, [pc, #168]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4927      	ldr	r1, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
 8001c14:	e015      	b.n	8001c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fc72 	bl	8001504 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c24:	f7ff fc6e 	bl	8001504 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e17a      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03a      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d019      	beq.n	8001c8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff fc52 	bl	8001504 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c64:	f7ff fc4e 	bl	8001504 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e15a      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_RCC_OscConfig+0x26c>)
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f000 fae8 	bl	8002258 <RCC_Delay>
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c90:	f7ff fc38 	bl	8001504 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c96:	e00f      	b.n	8001cb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff fc34 	bl	8001504 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d908      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e140      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	42420000 	.word	0x42420000
 8001cb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	4b9e      	ldr	r3, [pc, #632]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e9      	bne.n	8001c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a6 	beq.w	8001e1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b97      	ldr	r3, [pc, #604]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10d      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b94      	ldr	r3, [pc, #592]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a93      	ldr	r2, [pc, #588]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	4b8b      	ldr	r3, [pc, #556]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a8a      	ldr	r2, [pc, #552]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fbf5 	bl	8001504 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7ff fbf1 	bl	8001504 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b64      	cmp	r3, #100	; 0x64
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0fd      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b81      	ldr	r3, [pc, #516]	; (8001f38 <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x312>
 8001d44:	4b7b      	ldr	r3, [pc, #492]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a7a      	ldr	r2, [pc, #488]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6213      	str	r3, [r2, #32]
 8001d50:	e02d      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x334>
 8001d5a:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a75      	ldr	r2, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	6213      	str	r3, [r2, #32]
 8001d66:	4b73      	ldr	r3, [pc, #460]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4a72      	ldr	r2, [pc, #456]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	6213      	str	r3, [r2, #32]
 8001d72:	e01c      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b05      	cmp	r3, #5
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0x356>
 8001d7c:	4b6d      	ldr	r3, [pc, #436]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a6c      	ldr	r2, [pc, #432]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a69      	ldr	r2, [pc, #420]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	e00b      	b.n	8001dae <HAL_RCC_OscConfig+0x36e>
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	4a66      	ldr	r2, [pc, #408]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f023 0301 	bic.w	r3, r3, #1
 8001da0:	6213      	str	r3, [r2, #32]
 8001da2:	4b64      	ldr	r3, [pc, #400]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a63      	ldr	r2, [pc, #396]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f023 0304 	bic.w	r3, r3, #4
 8001dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d015      	beq.n	8001de2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff fba5 	bl	8001504 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff fba1 	bl	8001504 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0ab      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0ee      	beq.n	8001dbe <HAL_RCC_OscConfig+0x37e>
 8001de0:	e014      	b.n	8001e0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de2:	f7ff fb8f 	bl	8001504 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff fb8b 	bl	8001504 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e095      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ee      	bne.n	8001dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d105      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e12:	4b48      	ldr	r3, [pc, #288]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a47      	ldr	r2, [pc, #284]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8081 	beq.w	8001f2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e28:	4b42      	ldr	r3, [pc, #264]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d061      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d146      	bne.n	8001eca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3c:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x4fc>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fb5f 	bl	8001504 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7ff fb5b 	bl	8001504 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e067      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e72:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	492d      	ldr	r1, [pc, #180]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a19      	ldr	r1, [r3, #32]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	430b      	orrs	r3, r1
 8001e96:	4927      	ldr	r1, [pc, #156]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x4fc>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fb2f 	bl	8001504 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7ff fb2b 	bl	8001504 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e037      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x46a>
 8001ec8:	e02f      	b.n	8001f2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_RCC_OscConfig+0x4fc>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fb18 	bl	8001504 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7ff fb14 	bl	8001504 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e020      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x498>
 8001ef6:	e018      	b.n	8001f2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e013      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	42420060 	.word	0x42420060

08001f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0d0      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f54:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d910      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0207 	bic.w	r2, r3, #7
 8001f6a:	4965      	ldr	r1, [pc, #404]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b8      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f9c:	4b59      	ldr	r3, [pc, #356]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a58      	ldr	r2, [pc, #352]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb4:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a52      	ldr	r2, [pc, #328]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	494d      	ldr	r1, [pc, #308]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d040      	beq.n	8002060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe6:	4b47      	ldr	r3, [pc, #284]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d115      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e07f      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e073      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200e:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e06b      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f023 0203 	bic.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4936      	ldr	r1, [pc, #216]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002030:	f7ff fa68 	bl	8001504 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	e00a      	b.n	800204e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7ff fa64 	bl	8001504 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e053      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 020c 	and.w	r2, r3, #12
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	429a      	cmp	r2, r3
 800205e:	d1eb      	bne.n	8002038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d210      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 0207 	bic.w	r2, r3, #7
 8002076:	4922      	ldr	r1, [pc, #136]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d001      	beq.n	8002090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e032      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800209c:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4916      	ldr	r1, [pc, #88]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	490e      	ldr	r1, [pc, #56]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ce:	f000 f821 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80020d2:	4602      	mov	r2, r0
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	490a      	ldr	r1, [pc, #40]	; (8002108 <HAL_RCC_ClockConfig+0x1c8>)
 80020e0:	5ccb      	ldrb	r3, [r1, r3]
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1cc>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1d0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe ff10 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40022000 	.word	0x40022000
 8002104:	40021000 	.word	0x40021000
 8002108:	08005404 	.word	0x08005404
 800210c:	20000008 	.word	0x20000008
 8002110:	2000000c 	.word	0x2000000c

08002114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d002      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x30>
 800213e:	2b08      	cmp	r3, #8
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x36>
 8002142:	e027      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002146:	613b      	str	r3, [r7, #16]
      break;
 8002148:	e027      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	0c9b      	lsrs	r3, r3, #18
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002154:	5cd3      	ldrb	r3, [r2, r3]
 8002156:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d010      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0c5b      	lsrs	r3, r3, #17
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002176:	fb02 f203 	mul.w	r2, r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e004      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	613b      	str	r3, [r7, #16]
      break;
 8002192:	e002      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002196:	613b      	str	r3, [r7, #16]
      break;
 8002198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800219a:	693b      	ldr	r3, [r7, #16]
}
 800219c:	4618      	mov	r0, r3
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	007a1200 	.word	0x007a1200
 80021b0:	0800541c 	.word	0x0800541c
 80021b4:	0800542c 	.word	0x0800542c
 80021b8:	003d0900 	.word	0x003d0900

080021bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c0:	4b02      	ldr	r3, [pc, #8]	; (80021cc <HAL_RCC_GetHCLKFreq+0x10>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	20000008 	.word	0x20000008

080021d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d4:	f7ff fff2 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0adb      	lsrs	r3, r3, #11
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	4903      	ldr	r1, [pc, #12]	; (80021f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08005414 	.word	0x08005414

080021f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	220f      	movs	r2, #15
 8002206:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_GetClockConfig+0x58>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_RCC_GetClockConfig+0x58>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_GetClockConfig+0x58>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_RCC_GetClockConfig+0x58>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	08db      	lsrs	r3, r3, #3
 8002232:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetClockConfig+0x5c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0207 	and.w	r2, r3, #7
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40021000 	.word	0x40021000
 8002254:	40022000 	.word	0x40022000

08002258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <RCC_Delay+0x34>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <RCC_Delay+0x38>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	0a5b      	lsrs	r3, r3, #9
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002274:	bf00      	nop
  }
  while (Delay --);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	60fa      	str	r2, [r7, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f9      	bne.n	8002274 <RCC_Delay+0x1c>
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	20000008 	.word	0x20000008
 8002290:	10624dd3 	.word	0x10624dd3

08002294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e041      	b.n	800232a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fe0e 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f000 fabe 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d001      	beq.n	800234c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e032      	b.n	80023b2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_TIM_Base_Start+0x88>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00e      	beq.n	800237c <HAL_TIM_Base_Start+0x48>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002366:	d009      	beq.n	800237c <HAL_TIM_Base_Start+0x48>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <HAL_TIM_Base_Start+0x8c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d004      	beq.n	800237c <HAL_TIM_Base_Start+0x48>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <HAL_TIM_Base_Start+0x90>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d111      	bne.n	80023a0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b06      	cmp	r3, #6
 800238c:	d010      	beq.n	80023b0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239e:	e007      	b.n	80023b0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40012c00 	.word	0x40012c00
 80023c0:	40000400 	.word	0x40000400
 80023c4:	40000800 	.word	0x40000800

080023c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d001      	beq.n	80023e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e03a      	b.n	8002456 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <HAL_TIM_Base_Start_IT+0x98>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00e      	beq.n	8002420 <HAL_TIM_Base_Start_IT+0x58>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240a:	d009      	beq.n	8002420 <HAL_TIM_Base_Start_IT+0x58>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <HAL_TIM_Base_Start_IT+0x9c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d004      	beq.n	8002420 <HAL_TIM_Base_Start_IT+0x58>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a13      	ldr	r2, [pc, #76]	; (8002468 <HAL_TIM_Base_Start_IT+0xa0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d111      	bne.n	8002444 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b06      	cmp	r3, #6
 8002430:	d010      	beq.n	8002454 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002442:	e007      	b.n	8002454 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40012c00 	.word	0x40012c00
 8002464:	40000400 	.word	0x40000400
 8002468:	40000800 	.word	0x40000800

0800246c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b02      	cmp	r3, #2
 8002480:	d122      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d11b      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0202 	mvn.w	r2, #2
 8002498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f9b4 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f9a7 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f9b6 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0204 	mvn.w	r2, #4
 80024ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2202      	movs	r2, #2
 80024f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f98a 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f97d 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f98c 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b08      	cmp	r3, #8
 8002528:	d122      	bne.n	8002570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b08      	cmp	r3, #8
 8002536:	d11b      	bne.n	8002570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0208 	mvn.w	r2, #8
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f960 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f953 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f962 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b10      	cmp	r3, #16
 800257c:	d122      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b10      	cmp	r3, #16
 800258a:	d11b      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0210 	mvn.w	r2, #16
 8002594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2208      	movs	r2, #8
 800259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f936 	bl	800281c <HAL_TIM_IC_CaptureCallback>
 80025b0:	e005      	b.n	80025be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f929 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f938 	bl	800282e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0201 	mvn.w	r2, #1
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fc2c 	bl	8000e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fa:	2b80      	cmp	r3, #128	; 0x80
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002608:	2b80      	cmp	r3, #128	; 0x80
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fa7b 	bl	8002b12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002626:	2b40      	cmp	r3, #64	; 0x40
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8fc 	bl	8002840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b20      	cmp	r3, #32
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d107      	bne.n	8002674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0220 	mvn.w	r2, #32
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa46 	bl	8002b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_TIM_ConfigClockSource+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e0b4      	b.n	8002802 <HAL_TIM_ConfigClockSource+0x186>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d0:	d03e      	beq.n	8002750 <HAL_TIM_ConfigClockSource+0xd4>
 80026d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026d6:	f200 8087 	bhi.w	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	f000 8086 	beq.w	80027ee <HAL_TIM_ConfigClockSource+0x172>
 80026e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e6:	d87f      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d01a      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0xa6>
 80026ec:	2b70      	cmp	r3, #112	; 0x70
 80026ee:	d87b      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b60      	cmp	r3, #96	; 0x60
 80026f2:	d050      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x11a>
 80026f4:	2b60      	cmp	r3, #96	; 0x60
 80026f6:	d877      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f8:	2b50      	cmp	r3, #80	; 0x50
 80026fa:	d03c      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0xfa>
 80026fc:	2b50      	cmp	r3, #80	; 0x50
 80026fe:	d873      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002700:	2b40      	cmp	r3, #64	; 0x40
 8002702:	d058      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d86f      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	2b30      	cmp	r3, #48	; 0x30
 800270a:	d064      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 800270c:	2b30      	cmp	r3, #48	; 0x30
 800270e:	d86b      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b20      	cmp	r3, #32
 8002712:	d060      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002714:	2b20      	cmp	r3, #32
 8002716:	d867      	bhi.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05c      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 800271c:	2b10      	cmp	r3, #16
 800271e:	d05a      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002720:	e062      	b.n	80027e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6899      	ldr	r1, [r3, #8]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f000 f968 	bl	8002a06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	609a      	str	r2, [r3, #8]
      break;
 800274e:	e04f      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f000 f951 	bl	8002a06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002772:	609a      	str	r2, [r3, #8]
      break;
 8002774:	e03c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	461a      	mov	r2, r3
 8002784:	f000 f8c8 	bl	8002918 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2150      	movs	r1, #80	; 0x50
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f91f 	bl	80029d2 <TIM_ITRx_SetConfig>
      break;
 8002794:	e02c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	461a      	mov	r2, r3
 80027a4:	f000 f8e6 	bl	8002974 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2160      	movs	r1, #96	; 0x60
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f90f 	bl	80029d2 <TIM_ITRx_SetConfig>
      break;
 80027b4:	e01c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6859      	ldr	r1, [r3, #4]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f000 f8a8 	bl	8002918 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f8ff 	bl	80029d2 <TIM_ITRx_SetConfig>
      break;
 80027d4:	e00c      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f000 f8f6 	bl	80029d2 <TIM_ITRx_SetConfig>
      break;
 80027e6:	e003      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e000      	b.n	80027f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
	...

08002854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a29      	ldr	r2, [pc, #164]	; (800290c <TIM_Base_SetConfig+0xb8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00b      	beq.n	8002884 <TIM_Base_SetConfig+0x30>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002872:	d007      	beq.n	8002884 <TIM_Base_SetConfig+0x30>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a26      	ldr	r2, [pc, #152]	; (8002910 <TIM_Base_SetConfig+0xbc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d003      	beq.n	8002884 <TIM_Base_SetConfig+0x30>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a25      	ldr	r2, [pc, #148]	; (8002914 <TIM_Base_SetConfig+0xc0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d108      	bne.n	8002896 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1c      	ldr	r2, [pc, #112]	; (800290c <TIM_Base_SetConfig+0xb8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_Base_SetConfig+0x62>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0x62>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <TIM_Base_SetConfig+0xbc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0x62>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <TIM_Base_SetConfig+0xc0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a07      	ldr	r2, [pc, #28]	; (800290c <TIM_Base_SetConfig+0xb8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d103      	bne.n	80028fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	615a      	str	r2, [r3, #20]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800

08002918 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f023 0201 	bic.w	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f023 030a 	bic.w	r3, r3, #10
 8002954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f023 0210 	bic.w	r2, r3, #16
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800299e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	031b      	lsls	r3, r3, #12
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	621a      	str	r2, [r3, #32]
}
 80029c8:	bf00      	nop
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f043 0307 	orr.w	r3, r3, #7
 80029f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b087      	sub	sp, #28
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	609a      	str	r2, [r3, #8]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e046      	b.n	8002aea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d009      	beq.n	8002abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10c      	bne.n	8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800

08002b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <xQueueGenericReset>:
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <xQueueGenericReset+0x2e>
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xQueueGenericReset+0x2c>
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d05d      	beq.n	8002c14 <xQueueGenericReset+0xf0>
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d059      	beq.n	8002c14 <xQueueGenericReset+0xf0>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	2100      	movs	r1, #0
 8002b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d000      	beq.n	8002b74 <xQueueGenericReset+0x50>
 8002b72:	2101      	movs	r1, #1
 8002b74:	460b      	mov	r3, r1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d14c      	bne.n	8002c14 <xQueueGenericReset+0xf0>
 8002b7a:	f002 f971 	bl	8004e60 <vPortEnterCritical>
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	6939      	ldr	r1, [r7, #16]
 8002b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	441a      	add	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	2200      	movs	r2, #0
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6939      	ldr	r1, [r7, #16]
 8002bae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	441a      	add	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	22ff      	movs	r2, #255	; 0xff
 8002bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	22ff      	movs	r2, #255	; 0xff
 8002bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d114      	bne.n	8002bfa <xQueueGenericReset+0xd6>
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01a      	beq.n	8002c0e <xQueueGenericReset+0xea>
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	3310      	adds	r3, #16
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 f98b 	bl	8003ef8 <xTaskRemoveFromEventList>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d012      	beq.n	8002c0e <xQueueGenericReset+0xea>
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <xQueueGenericReset+0x11c>)
 8002bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	e009      	b.n	8002c0e <xQueueGenericReset+0xea>
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f001 ffb0 	bl	8004b64 <vListInitialise>
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	3324      	adds	r3, #36	; 0x24
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 ffab 	bl	8004b64 <vListInitialise>
 8002c0e:	f002 f957 	bl	8004ec0 <vPortExitCritical>
 8002c12:	e001      	b.n	8002c18 <xQueueGenericReset+0xf4>
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10a      	bne.n	8002c34 <xQueueGenericReset+0x110>
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	bf00      	nop
 8002c32:	e7fe      	b.n	8002c32 <xQueueGenericReset+0x10e>
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <xQueueGenericCreate>:
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	71fb      	strb	r3, [r7, #7]
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d02e      	beq.n	8002cba <xQueueGenericCreate+0x76>
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	fba3 2302 	umull	r2, r3, r3, r2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d000      	beq.n	8002c6c <xQueueGenericCreate+0x28>
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d123      	bne.n	8002cba <xQueueGenericCreate+0x76>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002c7e:	d81c      	bhi.n	8002cba <xQueueGenericCreate+0x76>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	3350      	adds	r3, #80	; 0x50
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 ff44 	bl	8004b1c <pvPortMalloc>
 8002c94:	61f8      	str	r0, [r7, #28]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01c      	beq.n	8002cd6 <xQueueGenericCreate+0x92>
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3350      	adds	r3, #80	; 0x50
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	79fa      	ldrb	r2, [r7, #7]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f814 	bl	8002ce0 <prvInitialiseNewQueue>
 8002cb8:	e00d      	b.n	8002cd6 <xQueueGenericCreate+0x92>
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericCreate+0x92>
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericCreate+0x90>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <prvInitialiseNewQueue>:
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
 8002cec:	70fb      	strb	r3, [r7, #3]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d103      	bne.n	8002cfc <prvInitialiseNewQueue+0x1c>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e002      	b.n	8002d02 <prvInitialiseNewQueue+0x22>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d0e:	2101      	movs	r1, #1
 8002d10:	69b8      	ldr	r0, [r7, #24]
 8002d12:	f7ff ff07 	bl	8002b24 <xQueueGenericReset>
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <xQueueGenericSend>:
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08e      	sub	sp, #56	; 0x38
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <xQueueGenericSend+0x32>
 8002d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d56:	bf00      	nop
 8002d58:	e7fe      	b.n	8002d58 <xQueueGenericSend+0x30>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <xQueueGenericSend+0x40>
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <xQueueGenericSend+0x44>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <xQueueGenericSend+0x46>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <xQueueGenericSend+0x60>
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <xQueueGenericSend+0x5e>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d103      	bne.n	8002d96 <xQueueGenericSend+0x6e>
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <xQueueGenericSend+0x72>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <xQueueGenericSend+0x74>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10a      	bne.n	8002db6 <xQueueGenericSend+0x8e>
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	623b      	str	r3, [r7, #32]
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <xQueueGenericSend+0x8c>
 8002db6:	f001 fb0d 	bl	80043d4 <xTaskGetSchedulerState>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <xQueueGenericSend+0x9e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <xQueueGenericSend+0xa2>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <xQueueGenericSend+0xa4>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <xQueueGenericSend+0xbe>
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <xQueueGenericSend+0xbc>
 8002de6:	f002 f83b 	bl	8004e60 <vPortEnterCritical>
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <xQueueGenericSend+0xd4>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d129      	bne.n	8002e50 <xQueueGenericSend+0x128>
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e02:	f000 f96f 	bl	80030e4 <prvCopyDataToQueue>
 8002e06:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <xQueueGenericSend+0x10a>
 8002e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e12:	3324      	adds	r3, #36	; 0x24
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 f86f 	bl	8003ef8 <xTaskRemoveFromEventList>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <xQueueGenericSend+0x120>
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <xQueueGenericSend+0x1f8>)
 8002e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	e00a      	b.n	8002e48 <xQueueGenericSend+0x120>
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <xQueueGenericSend+0x120>
 8002e38:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <xQueueGenericSend+0x1f8>)
 8002e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	f3bf 8f6f 	isb	sy
 8002e48:	f002 f83a 	bl	8004ec0 <vPortExitCritical>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e063      	b.n	8002f18 <xQueueGenericSend+0x1f0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <xQueueGenericSend+0x136>
 8002e56:	f002 f833 	bl	8004ec0 <vPortExitCritical>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e05c      	b.n	8002f18 <xQueueGenericSend+0x1f0>
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <xQueueGenericSend+0x14a>
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 f91d 	bl	80040a8 <vTaskInternalSetTimeOutState>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
 8002e72:	f002 f825 	bl	8004ec0 <vPortExitCritical>
 8002e76:	f000 fcb9 	bl	80037ec <vTaskSuspendAll>
 8002e7a:	f001 fff1 	bl	8004e60 <vPortEnterCritical>
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8a:	d103      	bne.n	8002e94 <xQueueGenericSend+0x16c>
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d103      	bne.n	8002eaa <xQueueGenericSend+0x182>
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eaa:	f002 f809 	bl	8004ec0 <vPortExitCritical>
 8002eae:	1d3a      	adds	r2, r7, #4
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 f90c 	bl	80040d4 <xTaskCheckForTimeOut>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d124      	bne.n	8002f0c <xQueueGenericSend+0x1e4>
 8002ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec4:	f000 fa06 	bl	80032d4 <prvIsQueueFull>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d018      	beq.n	8002f00 <xQueueGenericSend+0x1d8>
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	3310      	adds	r3, #16
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 ffa4 	bl	8003e24 <vTaskPlaceOnEventList>
 8002edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ede:	f000 f991 	bl	8003204 <prvUnlockQueue>
 8002ee2:	f000 fcc7 	bl	8003874 <xTaskResumeAll>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f af7c 	bne.w	8002de6 <xQueueGenericSend+0xbe>
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <xQueueGenericSend+0x1f8>)
 8002ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	e772      	b.n	8002de6 <xQueueGenericSend+0xbe>
 8002f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f02:	f000 f97f 	bl	8003204 <prvUnlockQueue>
 8002f06:	f000 fcb5 	bl	8003874 <xTaskResumeAll>
 8002f0a:	e76c      	b.n	8002de6 <xQueueGenericSend+0xbe>
 8002f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f0e:	f000 f979 	bl	8003204 <prvUnlockQueue>
 8002f12:	f000 fcaf 	bl	8003874 <xTaskResumeAll>
 8002f16:	2300      	movs	r3, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3738      	adds	r7, #56	; 0x38
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	e000ed04 	.word	0xe000ed04

08002f24 <xQueueReceive>:
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08c      	sub	sp, #48	; 0x30
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	2300      	movs	r3, #0
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <xQueueReceive+0x30>
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	bf00      	nop
 8002f52:	e7fe      	b.n	8002f52 <xQueueReceive+0x2e>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <xQueueReceive+0x3e>
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <xQueueReceive+0x42>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <xQueueReceive+0x44>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <xQueueReceive+0x5e>
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <xQueueReceive+0x5c>
 8002f82:	f001 fa27 	bl	80043d4 <xTaskGetSchedulerState>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <xQueueReceive+0x6e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <xQueueReceive+0x72>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <xQueueReceive+0x74>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <xQueueReceive+0x8e>
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xQueueReceive+0x8c>
 8002fb2:	f001 ff55 	bl	8004e60 <vPortEnterCritical>
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d01f      	beq.n	8003002 <xQueueReceive+0xde>
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc6:	f000 f8f7 	bl	80031b8 <prvCopyDataFromQueue>
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	1e5a      	subs	r2, r3, #1
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00f      	beq.n	8002ffa <xQueueReceive+0xd6>
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	3310      	adds	r3, #16
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 ff8a 	bl	8003ef8 <xTaskRemoveFromEventList>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <xQueueReceive+0xd6>
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <xQueueReceive+0x1bc>)
 8002fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f001 ff61 	bl	8004ec0 <vPortExitCritical>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e069      	b.n	80030d6 <xQueueReceive+0x1b2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <xQueueReceive+0xec>
 8003008:	f001 ff5a 	bl	8004ec0 <vPortExitCritical>
 800300c:	2300      	movs	r3, #0
 800300e:	e062      	b.n	80030d6 <xQueueReceive+0x1b2>
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <xQueueReceive+0x100>
 8003016:	f107 0310 	add.w	r3, r7, #16
 800301a:	4618      	mov	r0, r3
 800301c:	f001 f844 	bl	80040a8 <vTaskInternalSetTimeOutState>
 8003020:	2301      	movs	r3, #1
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003024:	f001 ff4c 	bl	8004ec0 <vPortExitCritical>
 8003028:	f000 fbe0 	bl	80037ec <vTaskSuspendAll>
 800302c:	f001 ff18 	bl	8004e60 <vPortEnterCritical>
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003036:	b25b      	sxtb	r3, r3
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d103      	bne.n	8003046 <xQueueReceive+0x122>
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304c:	b25b      	sxtb	r3, r3
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d103      	bne.n	800305c <xQueueReceive+0x138>
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800305c:	f001 ff30 	bl	8004ec0 <vPortExitCritical>
 8003060:	1d3a      	adds	r2, r7, #4
 8003062:	f107 0310 	add.w	r3, r7, #16
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f001 f833 	bl	80040d4 <xTaskCheckForTimeOut>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d123      	bne.n	80030bc <xQueueReceive+0x198>
 8003074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003076:	f000 f917 	bl	80032a8 <prvIsQueueEmpty>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <xQueueReceive+0x18c>
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	3324      	adds	r3, #36	; 0x24
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fecb 	bl	8003e24 <vTaskPlaceOnEventList>
 800308e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003090:	f000 f8b8 	bl	8003204 <prvUnlockQueue>
 8003094:	f000 fbee 	bl	8003874 <xTaskResumeAll>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d189      	bne.n	8002fb2 <xQueueReceive+0x8e>
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <xQueueReceive+0x1bc>)
 80030a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	e780      	b.n	8002fb2 <xQueueReceive+0x8e>
 80030b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b2:	f000 f8a7 	bl	8003204 <prvUnlockQueue>
 80030b6:	f000 fbdd 	bl	8003874 <xTaskResumeAll>
 80030ba:	e77a      	b.n	8002fb2 <xQueueReceive+0x8e>
 80030bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030be:	f000 f8a1 	bl	8003204 <prvUnlockQueue>
 80030c2:	f000 fbd7 	bl	8003874 <xTaskResumeAll>
 80030c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030c8:	f000 f8ee 	bl	80032a8 <prvIsQueueEmpty>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f43f af6f 	beq.w	8002fb2 <xQueueReceive+0x8e>
 80030d4:	2300      	movs	r3, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	3730      	adds	r7, #48	; 0x30
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <prvCopyDataToQueue>:
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <prvCopyDataToQueue+0x3a>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d14d      	bne.n	80031a6 <prvCopyDataToQueue+0xc2>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4618      	mov	r0, r3
 8003110:	f001 f97e 	bl	8004410 <xTaskPriorityDisinherit>
 8003114:	6178      	str	r0, [r7, #20]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	e043      	b.n	80031a6 <prvCopyDataToQueue+0xc2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d119      	bne.n	8003158 <prvCopyDataToQueue+0x74>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6858      	ldr	r0, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	461a      	mov	r2, r3
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	f002 f874 	bl	800521c <memcpy>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	441a      	add	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	d32b      	bcc.n	80031a6 <prvCopyDataToQueue+0xc2>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e026      	b.n	80031a6 <prvCopyDataToQueue+0xc2>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68d8      	ldr	r0, [r3, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	461a      	mov	r2, r3
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	f002 f85a 	bl	800521c <memcpy>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	425b      	negs	r3, r3
 8003172:	441a      	add	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	60da      	str	r2, [r3, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d207      	bcs.n	8003194 <prvCopyDataToQueue+0xb0>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	425b      	negs	r3, r3
 800318e:	441a      	add	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	60da      	str	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d105      	bne.n	80031a6 <prvCopyDataToQueue+0xc2>
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <prvCopyDataToQueue+0xc2>
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <prvCopyDataFromQueue>:
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d018      	beq.n	80031fc <prvCopyDataFromQueue+0x44>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	441a      	add	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d303      	bcc.n	80031ec <prvCopyDataFromQueue+0x34>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60da      	str	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68d9      	ldr	r1, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	461a      	mov	r2, r3
 80031f6:	6838      	ldr	r0, [r7, #0]
 80031f8:	f002 f810 	bl	800521c <memcpy>
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <prvUnlockQueue>:
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	f001 fe28 	bl	8004e60 <vPortEnterCritical>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e011      	b.n	800323e <prvUnlockQueue+0x3a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <prvUnlockQueue+0x44>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3324      	adds	r3, #36	; 0x24
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fe66 	bl	8003ef8 <xTaskRemoveFromEventList>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <prvUnlockQueue+0x32>
 8003232:	f000 ffb5 	bl	80041a0 <vTaskMissedYield>
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	3b01      	subs	r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	dce9      	bgt.n	800321a <prvUnlockQueue+0x16>
 8003246:	e000      	b.n	800324a <prvUnlockQueue+0x46>
 8003248:	bf00      	nop
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	22ff      	movs	r2, #255	; 0xff
 800324e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003252:	f001 fe35 	bl	8004ec0 <vPortExitCritical>
 8003256:	f001 fe03 	bl	8004e60 <vPortEnterCritical>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003260:	73bb      	strb	r3, [r7, #14]
 8003262:	e011      	b.n	8003288 <prvUnlockQueue+0x84>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d012      	beq.n	8003292 <prvUnlockQueue+0x8e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3310      	adds	r3, #16
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fe41 	bl	8003ef8 <xTaskRemoveFromEventList>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <prvUnlockQueue+0x7c>
 800327c:	f000 ff90 	bl	80041a0 <vTaskMissedYield>
 8003280:	7bbb      	ldrb	r3, [r7, #14]
 8003282:	3b01      	subs	r3, #1
 8003284:	b2db      	uxtb	r3, r3
 8003286:	73bb      	strb	r3, [r7, #14]
 8003288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800328c:	2b00      	cmp	r3, #0
 800328e:	dce9      	bgt.n	8003264 <prvUnlockQueue+0x60>
 8003290:	e000      	b.n	8003294 <prvUnlockQueue+0x90>
 8003292:	bf00      	nop
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	22ff      	movs	r2, #255	; 0xff
 8003298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329c:	f001 fe10 	bl	8004ec0 <vPortExitCritical>
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <prvIsQueueEmpty>:
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	f001 fdd6 	bl	8004e60 <vPortEnterCritical>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <prvIsQueueEmpty+0x1a>
 80032bc:	2301      	movs	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	e001      	b.n	80032c6 <prvIsQueueEmpty+0x1e>
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	f001 fdfb 	bl	8004ec0 <vPortExitCritical>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvIsQueueFull>:
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	f001 fdc0 	bl	8004e60 <vPortEnterCritical>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d102      	bne.n	80032f2 <prvIsQueueFull+0x1e>
 80032ec:	2301      	movs	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e001      	b.n	80032f6 <prvIsQueueFull+0x22>
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	f001 fde3 	bl	8004ec0 <vPortExitCritical>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <vQueueAddToRegistry>:
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <vQueueAddToRegistry+0x2a>
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <vQueueAddToRegistry+0x28>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d024      	beq.n	800337e <vQueueAddToRegistry+0x7a>
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	e01e      	b.n	8003378 <vQueueAddToRegistry+0x74>
 800333a:	4a18      	ldr	r2, [pc, #96]	; (800339c <vQueueAddToRegistry+0x98>)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d105      	bne.n	8003356 <vQueueAddToRegistry+0x52>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4a13      	ldr	r2, [pc, #76]	; (800339c <vQueueAddToRegistry+0x98>)
 8003350:	4413      	add	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	e013      	b.n	800337e <vQueueAddToRegistry+0x7a>
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <vQueueAddToRegistry+0x6e>
 800335c:	4a0f      	ldr	r2, [pc, #60]	; (800339c <vQueueAddToRegistry+0x98>)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d104      	bne.n	8003372 <vQueueAddToRegistry+0x6e>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4a0b      	ldr	r2, [pc, #44]	; (800339c <vQueueAddToRegistry+0x98>)
 800336e:	4413      	add	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3301      	adds	r3, #1
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b07      	cmp	r3, #7
 800337c:	d9dd      	bls.n	800333a <vQueueAddToRegistry+0x36>
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <vQueueAddToRegistry+0x8c>
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	200002ac 	.word	0x200002ac

080033a0 <vQueueWaitForMessageRestricted>:
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	f001 fd56 	bl	8004e60 <vPortEnterCritical>
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ba:	b25b      	sxtb	r3, r3
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d103      	bne.n	80033ca <vQueueWaitForMessageRestricted+0x2a>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033d0:	b25b      	sxtb	r3, r3
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d103      	bne.n	80033e0 <vQueueWaitForMessageRestricted+0x40>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033e0:	f001 fd6e 	bl	8004ec0 <vPortExitCritical>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d106      	bne.n	80033fa <vQueueWaitForMessageRestricted+0x5a>
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3324      	adds	r3, #36	; 0x24
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fd39 	bl	8003e6c <vTaskPlaceOnEventListRestricted>
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff ff02 	bl	8003204 <prvUnlockQueue>
 8003400:	bf00      	nop
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <xTaskCreate>:
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	; 0x30
 800340c:	af04      	add	r7, sp, #16
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fb7e 	bl	8004b1c <pvPortMalloc>
 8003420:	6178      	str	r0, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <xTaskCreate+0x48>
 8003428:	207c      	movs	r0, #124	; 0x7c
 800342a:	f001 fb77 	bl	8004b1c <pvPortMalloc>
 800342e:	61f8      	str	r0, [r7, #28]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <xTaskCreate+0x40>
 8003436:	227c      	movs	r2, #124	; 0x7c
 8003438:	2100      	movs	r1, #0
 800343a:	69f8      	ldr	r0, [r7, #28]
 800343c:	f001 fefc 	bl	8005238 <memset>
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	631a      	str	r2, [r3, #48]	; 0x30
 8003446:	e005      	b.n	8003454 <xTaskCreate+0x4c>
 8003448:	6978      	ldr	r0, [r7, #20]
 800344a:	f001 fb79 	bl	8004b40 <vPortFree>
 800344e:	e001      	b.n	8003454 <xTaskCreate+0x4c>
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d013      	beq.n	8003482 <xTaskCreate+0x7a>
 800345a:	2300      	movs	r3, #0
 800345c:	9303      	str	r3, [sp, #12]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	9302      	str	r3, [sp, #8]
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f80e 	bl	8003492 <prvInitialiseNewTask>
 8003476:	69f8      	ldr	r0, [r7, #28]
 8003478:	f000 f89a 	bl	80035b0 <prvAddNewTaskToReadyList>
 800347c:	2301      	movs	r3, #1
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	e002      	b.n	8003488 <xTaskCreate+0x80>
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4618      	mov	r0, r3
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <prvInitialiseNewTask>:
 8003492:	b580      	push	{r7, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	461a      	mov	r2, r3
 80034aa:	21a5      	movs	r1, #165	; 0xa5
 80034ac:	f001 fec4 	bl	8005238 <memset>
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034ba:	3b01      	subs	r3, #1
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	f023 0307 	bic.w	r3, r3, #7
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <prvInitialiseNewTask+0x58>
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <prvInitialiseNewTask+0x56>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01e      	beq.n	800352e <prvInitialiseNewTask+0x9c>
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	e012      	b.n	800351c <prvInitialiseNewTask+0x8a>
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	7819      	ldrb	r1, [r3, #0]
 80034fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	3334      	adds	r3, #52	; 0x34
 8003506:	460a      	mov	r2, r1
 8003508:	701a      	strb	r2, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <prvInitialiseNewTask+0x92>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3301      	adds	r3, #1
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	2b13      	cmp	r3, #19
 8003520:	d9e9      	bls.n	80034f6 <prvInitialiseNewTask+0x64>
 8003522:	e000      	b.n	8003526 <prvInitialiseNewTask+0x94>
 8003524:	bf00      	nop
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	2b04      	cmp	r3, #4
 8003532:	d90a      	bls.n	800354a <prvInitialiseNewTask+0xb8>
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <prvInitialiseNewTask+0xb6>
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	2b04      	cmp	r3, #4
 800354e:	d901      	bls.n	8003554 <prvInitialiseNewTask+0xc2>
 8003550:	2304      	movs	r3, #4
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003558:	62da      	str	r2, [r3, #44]	; 0x2c
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355e:	651a      	str	r2, [r3, #80]	; 0x50
 8003560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003562:	3304      	adds	r3, #4
 8003564:	4618      	mov	r0, r3
 8003566:	f001 fb1c 	bl	8004ba2 <vListInitialiseItem>
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	3318      	adds	r3, #24
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fb17 	bl	8004ba2 <vListInitialiseItem>
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003578:	611a      	str	r2, [r3, #16]
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	f1c3 0205 	rsb	r2, r3, #5
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	619a      	str	r2, [r3, #24]
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003588:	625a      	str	r2, [r3, #36]	; 0x24
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	69b8      	ldr	r0, [r7, #24]
 8003590:	f001 fb74 	bl	8004c7c <pxPortInitialiseStack>
 8003594:	4602      	mov	r2, r0
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <prvInitialiseNewTask+0x114>
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	bf00      	nop
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <prvAddNewTaskToReadyList>:
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	f001 fc52 	bl	8004e60 <vPortEnterCritical>
 80035bc:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <prvAddNewTaskToReadyList+0x114>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	4a40      	ldr	r2, [pc, #256]	; (80036c4 <prvAddNewTaskToReadyList+0x114>)
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <prvAddNewTaskToReadyList+0x118>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <prvAddNewTaskToReadyList+0x32>
 80035ce:	4a3e      	ldr	r2, [pc, #248]	; (80036c8 <prvAddNewTaskToReadyList+0x118>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b3b      	ldr	r3, [pc, #236]	; (80036c4 <prvAddNewTaskToReadyList+0x114>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d110      	bne.n	80035fe <prvAddNewTaskToReadyList+0x4e>
 80035dc:	f000 fe62 	bl	80042a4 <prvInitialiseTaskLists>
 80035e0:	e00d      	b.n	80035fe <prvAddNewTaskToReadyList+0x4e>
 80035e2:	4b3a      	ldr	r3, [pc, #232]	; (80036cc <prvAddNewTaskToReadyList+0x11c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <prvAddNewTaskToReadyList+0x4e>
 80035ea:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <prvAddNewTaskToReadyList+0x118>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d802      	bhi.n	80035fe <prvAddNewTaskToReadyList+0x4e>
 80035f8:	4a33      	ldr	r2, [pc, #204]	; (80036c8 <prvAddNewTaskToReadyList+0x118>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	4b34      	ldr	r3, [pc, #208]	; (80036d0 <prvAddNewTaskToReadyList+0x120>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3301      	adds	r3, #1
 8003604:	4a32      	ldr	r2, [pc, #200]	; (80036d0 <prvAddNewTaskToReadyList+0x120>)
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <prvAddNewTaskToReadyList+0x120>)
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	649a      	str	r2, [r3, #72]	; 0x48
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003614:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <prvAddNewTaskToReadyList+0x124>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d903      	bls.n	8003624 <prvAddNewTaskToReadyList+0x74>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <prvAddNewTaskToReadyList+0x124>)
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	492b      	ldr	r1, [pc, #172]	; (80036d8 <prvAddNewTaskToReadyList+0x128>)
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3304      	adds	r3, #4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	3204      	adds	r2, #4
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	1d1a      	adds	r2, r3, #4
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <prvAddNewTaskToReadyList+0x128>)
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	615a      	str	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003672:	4919      	ldr	r1, [pc, #100]	; (80036d8 <prvAddNewTaskToReadyList+0x128>)
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	1c59      	adds	r1, r3, #1
 8003682:	4815      	ldr	r0, [pc, #84]	; (80036d8 <prvAddNewTaskToReadyList+0x128>)
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4403      	add	r3, r0
 800368e:	6019      	str	r1, [r3, #0]
 8003690:	f001 fc16 	bl	8004ec0 <vPortExitCritical>
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <prvAddNewTaskToReadyList+0x11c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <prvAddNewTaskToReadyList+0x10a>
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <prvAddNewTaskToReadyList+0x118>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d207      	bcs.n	80036ba <prvAddNewTaskToReadyList+0x10a>
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <prvAddNewTaskToReadyList+0x12c>)
 80036ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20000178 	.word	0x20000178
 80036c8:	200000a0 	.word	0x200000a0
 80036cc:	20000184 	.word	0x20000184
 80036d0:	20000194 	.word	0x20000194
 80036d4:	20000180 	.word	0x20000180
 80036d8:	200000a4 	.word	0x200000a4
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <vTaskDelay>:
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d017      	beq.n	8003722 <vTaskDelay+0x42>
 80036f2:	4b13      	ldr	r3, [pc, #76]	; (8003740 <vTaskDelay+0x60>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <vTaskDelay+0x30>
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <vTaskDelay+0x2e>
 8003710:	f000 f86c 	bl	80037ec <vTaskSuspendAll>
 8003714:	2100      	movs	r1, #0
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 ff10 	bl	800453c <prvAddCurrentTaskToDelayedList>
 800371c:	f000 f8aa 	bl	8003874 <xTaskResumeAll>
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d107      	bne.n	8003738 <vTaskDelay+0x58>
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <vTaskDelay+0x64>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	200001a0 	.word	0x200001a0
 8003744:	e000ed04 	.word	0xe000ed04

08003748 <vTaskStartScheduler>:
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	4b20      	ldr	r3, [pc, #128]	; (80037d0 <vTaskStartScheduler+0x88>)
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	2300      	movs	r3, #0
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2300      	movs	r3, #0
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	491e      	ldr	r1, [pc, #120]	; (80037d4 <vTaskStartScheduler+0x8c>)
 800375c:	481e      	ldr	r0, [pc, #120]	; (80037d8 <vTaskStartScheduler+0x90>)
 800375e:	f7ff fe53 	bl	8003408 <xTaskCreate>
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d102      	bne.n	8003770 <vTaskStartScheduler+0x28>
 800376a:	f000 ff55 	bl	8004618 <xTimerCreateTimerTask>
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d116      	bne.n	80037a4 <vTaskStartScheduler+0x5c>
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	bf00      	nop
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <vTaskStartScheduler+0x94>)
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <vTaskStartScheduler+0x98>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <vTaskStartScheduler+0x9c>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	f001 faed 	bl	8004d7c <xPortStartScheduler>
 80037a2:	e00e      	b.n	80037c2 <vTaskStartScheduler+0x7a>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d10a      	bne.n	80037c2 <vTaskStartScheduler+0x7a>
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <vTaskStartScheduler+0x78>
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <vTaskStartScheduler+0xa0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	2000019c 	.word	0x2000019c
 80037d4:	080053ec 	.word	0x080053ec
 80037d8:	080041b9 	.word	0x080041b9
 80037dc:	20000198 	.word	0x20000198
 80037e0:	20000184 	.word	0x20000184
 80037e4:	2000017c 	.word	0x2000017c
 80037e8:	20000014 	.word	0x20000014

080037ec <vTaskSuspendAll>:
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <vTaskSuspendAll+0x18>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a03      	ldr	r2, [pc, #12]	; (8003804 <vTaskSuspendAll+0x18>)
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	bf00      	nop
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	200001a0 	.word	0x200001a0

08003808 <prvGetExpectedIdleTime>:
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	2300      	movs	r3, #0
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <prvGetExpectedIdleTime+0x58>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <prvGetExpectedIdleTime+0x16>
 800381a:	2301      	movs	r3, #1
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <prvGetExpectedIdleTime+0x5c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <prvGetExpectedIdleTime+0x26>
 8003828:	2300      	movs	r3, #0
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	e012      	b.n	8003854 <prvGetExpectedIdleTime+0x4c>
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <prvGetExpectedIdleTime+0x60>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d902      	bls.n	800383c <prvGetExpectedIdleTime+0x34>
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	e00b      	b.n	8003854 <prvGetExpectedIdleTime+0x4c>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <prvGetExpectedIdleTime+0x40>
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	e005      	b.n	8003854 <prvGetExpectedIdleTime+0x4c>
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <prvGetExpectedIdleTime+0x64>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <prvGetExpectedIdleTime+0x68>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	20000180 	.word	0x20000180
 8003864:	200000a0 	.word	0x200000a0
 8003868:	200000a4 	.word	0x200000a4
 800386c:	20000198 	.word	0x20000198
 8003870:	2000017c 	.word	0x2000017c

08003874 <xTaskResumeAll>:
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	4b71      	ldr	r3, [pc, #452]	; (8003a48 <xTaskResumeAll+0x1d4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <xTaskResumeAll+0x2c>
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	bf00      	nop
 800389e:	e7fe      	b.n	800389e <xTaskResumeAll+0x2a>
 80038a0:	f001 fade 	bl	8004e60 <vPortEnterCritical>
 80038a4:	4b68      	ldr	r3, [pc, #416]	; (8003a48 <xTaskResumeAll+0x1d4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	4a67      	ldr	r2, [pc, #412]	; (8003a48 <xTaskResumeAll+0x1d4>)
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b66      	ldr	r3, [pc, #408]	; (8003a48 <xTaskResumeAll+0x1d4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 80c1 	bne.w	8003a3a <xTaskResumeAll+0x1c6>
 80038b8:	4b64      	ldr	r3, [pc, #400]	; (8003a4c <xTaskResumeAll+0x1d8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80bc 	beq.w	8003a3a <xTaskResumeAll+0x1c6>
 80038c2:	e08b      	b.n	80039dc <xTaskResumeAll+0x168>
 80038c4:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <xTaskResumeAll+0x1dc>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	6a12      	ldr	r2, [r2, #32]
 80038da:	609a      	str	r2, [r3, #8]
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	69d2      	ldr	r2, [r2, #28]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3318      	adds	r3, #24
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d103      	bne.n	80038fa <xTaskResumeAll+0x86>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	6a1a      	ldr	r2, [r3, #32]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2200      	movs	r2, #0
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	69fa      	ldr	r2, [r7, #28]
 8003916:	68d2      	ldr	r2, [r2, #12]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	3304      	adds	r3, #4
 800392c:	429a      	cmp	r2, r3
 800392e:	d103      	bne.n	8003938 <xTaskResumeAll+0xc4>
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2200      	movs	r2, #0
 800393c:	615a      	str	r2, [r3, #20]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	1e5a      	subs	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <xTaskResumeAll+0x1e0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d903      	bls.n	800395c <xTaskResumeAll+0xe8>
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a3e      	ldr	r2, [pc, #248]	; (8003a54 <xTaskResumeAll+0x1e0>)
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	493d      	ldr	r1, [pc, #244]	; (8003a58 <xTaskResumeAll+0x1e4>)
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3304      	adds	r3, #4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	3204      	adds	r2, #4
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	1d1a      	adds	r2, r3, #4
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	609a      	str	r2, [r3, #8]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <xTaskResumeAll+0x1e4>)
 80039a0:	441a      	add	r2, r3
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	615a      	str	r2, [r3, #20]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039aa:	492b      	ldr	r1, [pc, #172]	; (8003a58 <xTaskResumeAll+0x1e4>)
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	1c59      	adds	r1, r3, #1
 80039ba:	4827      	ldr	r0, [pc, #156]	; (8003a58 <xTaskResumeAll+0x1e4>)
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4403      	add	r3, r0
 80039c6:	6019      	str	r1, [r3, #0]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <xTaskResumeAll+0x1e8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d302      	bcc.n	80039dc <xTaskResumeAll+0x168>
 80039d6:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <xTaskResumeAll+0x1ec>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <xTaskResumeAll+0x1dc>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f47f af6f 	bne.w	80038c4 <xTaskResumeAll+0x50>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <xTaskResumeAll+0x17c>
 80039ec:	f000 fcd8 	bl	80043a0 <prvResetNextTaskUnblockTime>
 80039f0:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <xTaskResumeAll+0x1f0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <xTaskResumeAll+0x1aa>
 80039fc:	f000 f89e 	bl	8003b3c <xTaskIncrementTick>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <xTaskResumeAll+0x198>
 8003a06:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <xTaskResumeAll+0x1ec>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f1      	bne.n	80039fc <xTaskResumeAll+0x188>
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <xTaskResumeAll+0x1f0>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <xTaskResumeAll+0x1ec>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <xTaskResumeAll+0x1c6>
 8003a26:	2301      	movs	r3, #1
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <xTaskResumeAll+0x1f4>)
 8003a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f001 fa41 	bl	8004ec0 <vPortExitCritical>
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	4618      	mov	r0, r3
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	200001a0 	.word	0x200001a0
 8003a4c:	20000178 	.word	0x20000178
 8003a50:	20000138 	.word	0x20000138
 8003a54:	20000180 	.word	0x20000180
 8003a58:	200000a4 	.word	0x200000a4
 8003a5c:	200000a0 	.word	0x200000a0
 8003a60:	2000018c 	.word	0x2000018c
 8003a64:	20000188 	.word	0x20000188
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <xTaskGetTickCount>:
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <xTaskGetTickCount+0x18>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	2000017c 	.word	0x2000017c

08003a88 <vTaskStepTick>:
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <vTaskStepTick+0xa4>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	441a      	add	r2, r3
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <vTaskStepTick+0xa8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d90a      	bls.n	8003ab6 <vTaskStepTick+0x2e>
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <vTaskStepTick+0x2c>
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <vTaskStepTick+0xa4>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	441a      	add	r2, r3
 8003abe:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <vTaskStepTick+0xa8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d128      	bne.n	8003b18 <vTaskStepTick+0x90>
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <vTaskStepTick+0xac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <vTaskStepTick+0x5c>
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	bf00      	nop
 8003ae2:	e7fe      	b.n	8003ae2 <vTaskStepTick+0x5a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <vTaskStepTick+0x78>
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <vTaskStepTick+0x76>
 8003b00:	f001 f9ae 	bl	8004e60 <vPortEnterCritical>
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <vTaskStepTick+0xb0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	4a0b      	ldr	r2, [pc, #44]	; (8003b38 <vTaskStepTick+0xb0>)
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	f001 f9d7 	bl	8004ec0 <vPortExitCritical>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <vTaskStepTick+0xa4>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a02      	ldr	r2, [pc, #8]	; (8003b2c <vTaskStepTick+0xa4>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	bf00      	nop
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	2000017c 	.word	0x2000017c
 8003b30:	20000198 	.word	0x20000198
 8003b34:	200001a0 	.word	0x200001a0
 8003b38:	20000188 	.word	0x20000188

08003b3c <xTaskIncrementTick>:
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	4b7e      	ldr	r3, [pc, #504]	; (8003d40 <xTaskIncrementTick+0x204>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 80ed 	bne.w	8003d2a <xTaskIncrementTick+0x1ee>
 8003b50:	4b7c      	ldr	r3, [pc, #496]	; (8003d44 <xTaskIncrementTick+0x208>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	4a7a      	ldr	r2, [pc, #488]	; (8003d44 <xTaskIncrementTick+0x208>)
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d120      	bne.n	8003ba6 <xTaskIncrementTick+0x6a>
 8003b64:	4b78      	ldr	r3, [pc, #480]	; (8003d48 <xTaskIncrementTick+0x20c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <xTaskIncrementTick+0x48>
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <xTaskIncrementTick+0x46>
 8003b84:	4b70      	ldr	r3, [pc, #448]	; (8003d48 <xTaskIncrementTick+0x20c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	4b70      	ldr	r3, [pc, #448]	; (8003d4c <xTaskIncrementTick+0x210>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a6e      	ldr	r2, [pc, #440]	; (8003d48 <xTaskIncrementTick+0x20c>)
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4a6e      	ldr	r2, [pc, #440]	; (8003d4c <xTaskIncrementTick+0x210>)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	4b6d      	ldr	r3, [pc, #436]	; (8003d50 <xTaskIncrementTick+0x214>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	4a6c      	ldr	r2, [pc, #432]	; (8003d50 <xTaskIncrementTick+0x214>)
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	f000 fbfd 	bl	80043a0 <prvResetNextTaskUnblockTime>
 8003ba6:	4b6b      	ldr	r3, [pc, #428]	; (8003d54 <xTaskIncrementTick+0x218>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a3a      	ldr	r2, [r7, #32]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	f0c0 80a7 	bcc.w	8003d00 <xTaskIncrementTick+0x1c4>
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <xTaskIncrementTick+0x20c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <xTaskIncrementTick+0x8a>
 8003bbc:	4b65      	ldr	r3, [pc, #404]	; (8003d54 <xTaskIncrementTick+0x218>)
 8003bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	e09c      	b.n	8003d00 <xTaskIncrementTick+0x1c4>
 8003bc6:	4b60      	ldr	r3, [pc, #384]	; (8003d48 <xTaskIncrementTick+0x20c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d203      	bcs.n	8003be6 <xTaskIncrementTick+0xaa>
 8003bde:	4a5d      	ldr	r2, [pc, #372]	; (8003d54 <xTaskIncrementTick+0x218>)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	e08c      	b.n	8003d00 <xTaskIncrementTick+0x1c4>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	68d2      	ldr	r2, [r2, #12]
 8003bf4:	609a      	str	r2, [r3, #8]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	6892      	ldr	r2, [r2, #8]
 8003bfe:	605a      	str	r2, [r3, #4]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	3304      	adds	r3, #4
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d103      	bne.n	8003c14 <xTaskIncrementTick+0xd8>
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2200      	movs	r2, #0
 8003c18:	615a      	str	r2, [r3, #20]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	1e5a      	subs	r2, r3, #1
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01e      	beq.n	8003c6a <xTaskIncrementTick+0x12e>
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	6a12      	ldr	r2, [r2, #32]
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	69d2      	ldr	r2, [r2, #28]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	3318      	adds	r3, #24
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d103      	bne.n	8003c5a <xTaskIncrementTick+0x11e>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	6a1a      	ldr	r2, [r3, #32]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	4b3a      	ldr	r3, [pc, #232]	; (8003d58 <xTaskIncrementTick+0x21c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d903      	bls.n	8003c7e <xTaskIncrementTick+0x142>
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4a37      	ldr	r2, [pc, #220]	; (8003d58 <xTaskIncrementTick+0x21c>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	4936      	ldr	r1, [pc, #216]	; (8003d5c <xTaskIncrementTick+0x220>)
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3304      	adds	r3, #4
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	609a      	str	r2, [r3, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	3204      	adds	r2, #4
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1d1a      	adds	r2, r3, #4
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <xTaskIncrementTick+0x220>)
 8003cc2:	441a      	add	r2, r3
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	615a      	str	r2, [r3, #20]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ccc:	4923      	ldr	r1, [pc, #140]	; (8003d5c <xTaskIncrementTick+0x220>)
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	1c59      	adds	r1, r3, #1
 8003cdc:	481f      	ldr	r0, [pc, #124]	; (8003d5c <xTaskIncrementTick+0x220>)
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4403      	add	r3, r0
 8003ce8:	6019      	str	r1, [r3, #0]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <xTaskIncrementTick+0x224>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	f67f af5c 	bls.w	8003bb2 <xTaskIncrementTick+0x76>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfe:	e758      	b.n	8003bb2 <xTaskIncrementTick+0x76>
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <xTaskIncrementTick+0x224>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d06:	4915      	ldr	r1, [pc, #84]	; (8003d5c <xTaskIncrementTick+0x220>)
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d901      	bls.n	8003d1c <xTaskIncrementTick+0x1e0>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <xTaskIncrementTick+0x228>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <xTaskIncrementTick+0x1f8>
 8003d24:	2301      	movs	r3, #1
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
 8003d28:	e004      	b.n	8003d34 <xTaskIncrementTick+0x1f8>
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <xTaskIncrementTick+0x22c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <xTaskIncrementTick+0x22c>)
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	4618      	mov	r0, r3
 8003d38:	3728      	adds	r7, #40	; 0x28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	200001a0 	.word	0x200001a0
 8003d44:	2000017c 	.word	0x2000017c
 8003d48:	20000130 	.word	0x20000130
 8003d4c:	20000134 	.word	0x20000134
 8003d50:	20000190 	.word	0x20000190
 8003d54:	20000198 	.word	0x20000198
 8003d58:	20000180 	.word	0x20000180
 8003d5c:	200000a4 	.word	0x200000a4
 8003d60:	200000a0 	.word	0x200000a0
 8003d64:	2000018c 	.word	0x2000018c
 8003d68:	20000188 	.word	0x20000188

08003d6c <vTaskSwitchContext>:
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <vTaskSwitchContext+0xa4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <vTaskSwitchContext+0x16>
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <vTaskSwitchContext+0xa8>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e041      	b.n	8003e06 <vTaskSwitchContext+0x9a>
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <vTaskSwitchContext+0xa8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	4b23      	ldr	r3, [pc, #140]	; (8003e18 <vTaskSwitchContext+0xac>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e010      	b.n	8003db2 <vTaskSwitchContext+0x46>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <vTaskSwitchContext+0x40>
 8003d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	bf00      	nop
 8003daa:	e7fe      	b.n	8003daa <vTaskSwitchContext+0x3e>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	491a      	ldr	r1, [pc, #104]	; (8003e1c <vTaskSwitchContext+0xb0>)
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0e4      	beq.n	8003d90 <vTaskSwitchContext+0x24>
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <vTaskSwitchContext+0xb0>)
 8003dd2:	4413      	add	r3, r2
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	3308      	adds	r3, #8
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d104      	bne.n	8003df6 <vTaskSwitchContext+0x8a>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <vTaskSwitchContext+0xb4>)
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4a05      	ldr	r2, [pc, #20]	; (8003e18 <vTaskSwitchContext+0xac>)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	200001a0 	.word	0x200001a0
 8003e14:	2000018c 	.word	0x2000018c
 8003e18:	20000180 	.word	0x20000180
 8003e1c:	200000a4 	.word	0x200000a4
 8003e20:	200000a0 	.word	0x200000a0

08003e24 <vTaskPlaceOnEventList>:
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <vTaskPlaceOnEventList+0x26>
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	bf00      	nop
 8003e48:	e7fe      	b.n	8003e48 <vTaskPlaceOnEventList+0x24>
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <vTaskPlaceOnEventList+0x44>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3318      	adds	r3, #24
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 feb1 	bl	8004bba <vListInsert>
 8003e58:	2101      	movs	r1, #1
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f000 fb6e 	bl	800453c <prvAddCurrentTaskToDelayedList>
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	200000a0 	.word	0x200000a0

08003e6c <vTaskPlaceOnEventListRestricted>:
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <vTaskPlaceOnEventListRestricted+0x28>
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <vTaskPlaceOnEventListRestricted+0x26>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	61da      	str	r2, [r3, #28]
 8003ea2:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	6892      	ldr	r2, [r2, #8]
 8003eaa:	621a      	str	r2, [r3, #32]
 8003eac:	4b11      	ldr	r3, [pc, #68]	; (8003ef4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	3218      	adds	r2, #24
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f103 0218 	add.w	r2, r3, #24
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <vTaskPlaceOnEventListRestricted+0x76>
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f000 fb29 	bl	800453c <prvAddCurrentTaskToDelayedList>
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200000a0 	.word	0x200000a0

08003ef8 <xTaskRemoveFromEventList>:
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <xTaskRemoveFromEventList+0x2c>
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <xTaskRemoveFromEventList+0x2a>
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	6a3a      	ldr	r2, [r7, #32]
 8003f30:	6a12      	ldr	r2, [r2, #32]
 8003f32:	609a      	str	r2, [r3, #8]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	6a3a      	ldr	r2, [r7, #32]
 8003f3a:	69d2      	ldr	r2, [r2, #28]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	3318      	adds	r3, #24
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d103      	bne.n	8003f52 <xTaskRemoveFromEventList+0x5a>
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	2200      	movs	r2, #0
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	1e5a      	subs	r2, r3, #1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <xTaskRemoveFromEventList+0x198>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d161      	bne.n	800402e <xTaskRemoveFromEventList+0x136>
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	6a3a      	ldr	r2, [r7, #32]
 8003f76:	68d2      	ldr	r2, [r2, #12]
 8003f78:	609a      	str	r2, [r3, #8]
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	6892      	ldr	r2, [r2, #8]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d103      	bne.n	8003f98 <xTaskRemoveFromEventList+0xa0>
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	615a      	str	r2, [r3, #20]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	1e5a      	subs	r2, r3, #1
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	4b39      	ldr	r3, [pc, #228]	; (8004094 <xTaskRemoveFromEventList+0x19c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d903      	bls.n	8003fbc <xTaskRemoveFromEventList+0xc4>
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4a36      	ldr	r2, [pc, #216]	; (8004094 <xTaskRemoveFromEventList+0x19c>)
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	4935      	ldr	r1, [pc, #212]	; (8004098 <xTaskRemoveFromEventList+0x1a0>)
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3304      	adds	r3, #4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	3204      	adds	r2, #4
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4a26      	ldr	r2, [pc, #152]	; (8004098 <xTaskRemoveFromEventList+0x1a0>)
 8004000:	441a      	add	r2, r3
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	615a      	str	r2, [r3, #20]
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400a:	4923      	ldr	r1, [pc, #140]	; (8004098 <xTaskRemoveFromEventList+0x1a0>)
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1c59      	adds	r1, r3, #1
 800401a:	481f      	ldr	r0, [pc, #124]	; (8004098 <xTaskRemoveFromEventList+0x1a0>)
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4403      	add	r3, r0
 8004026:	6019      	str	r1, [r3, #0]
 8004028:	f000 f9ba 	bl	80043a0 <prvResetNextTaskUnblockTime>
 800402c:	e01b      	b.n	8004066 <xTaskRemoveFromEventList+0x16e>
 800402e:	4b1b      	ldr	r3, [pc, #108]	; (800409c <xTaskRemoveFromEventList+0x1a4>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	61da      	str	r2, [r3, #28]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	621a      	str	r2, [r3, #32]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	6a3a      	ldr	r2, [r7, #32]
 8004048:	3218      	adds	r2, #24
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f103 0218 	add.w	r2, r3, #24
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	609a      	str	r2, [r3, #8]
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	4a10      	ldr	r2, [pc, #64]	; (800409c <xTaskRemoveFromEventList+0x1a4>)
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <xTaskRemoveFromEventList+0x1a4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3301      	adds	r3, #1
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <xTaskRemoveFromEventList+0x1a4>)
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406a:	4b0d      	ldr	r3, [pc, #52]	; (80040a0 <xTaskRemoveFromEventList+0x1a8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	429a      	cmp	r2, r3
 8004072:	d905      	bls.n	8004080 <xTaskRemoveFromEventList+0x188>
 8004074:	2301      	movs	r3, #1
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <xTaskRemoveFromEventList+0x1ac>)
 800407a:	2201      	movs	r2, #1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e001      	b.n	8004084 <xTaskRemoveFromEventList+0x18c>
 8004080:	2300      	movs	r3, #0
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	4618      	mov	r0, r3
 8004088:	3728      	adds	r7, #40	; 0x28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200001a0 	.word	0x200001a0
 8004094:	20000180 	.word	0x20000180
 8004098:	200000a4 	.word	0x200000a4
 800409c:	20000138 	.word	0x20000138
 80040a0:	200000a0 	.word	0x200000a0
 80040a4:	2000018c 	.word	0x2000018c

080040a8 <vTaskInternalSetTimeOutState>:
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <vTaskInternalSetTimeOutState+0x24>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <vTaskInternalSetTimeOutState+0x28>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000190 	.word	0x20000190
 80040d0:	2000017c 	.word	0x2000017c

080040d4 <xTaskCheckForTimeOut>:
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <xTaskCheckForTimeOut+0x26>
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <xTaskCheckForTimeOut+0x24>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <xTaskCheckForTimeOut+0x42>
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	60fb      	str	r3, [r7, #12]
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <xTaskCheckForTimeOut+0x40>
 8004116:	f000 fea3 	bl	8004e60 <vPortEnterCritical>
 800411a:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <xTaskCheckForTimeOut+0xc4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d102      	bne.n	800413a <xTaskCheckForTimeOut+0x66>
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	e026      	b.n	8004188 <xTaskCheckForTimeOut+0xb4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <xTaskCheckForTimeOut+0xc8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d00a      	beq.n	800415c <xTaskCheckForTimeOut+0x88>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d305      	bcc.n	800415c <xTaskCheckForTimeOut+0x88>
 8004150:	2301      	movs	r3, #1
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e015      	b.n	8004188 <xTaskCheckForTimeOut+0xb4>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	429a      	cmp	r2, r3
 8004164:	d20b      	bcs.n	800417e <xTaskCheckForTimeOut+0xaa>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1ad2      	subs	r2, r2, r3
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff98 	bl	80040a8 <vTaskInternalSetTimeOutState>
 8004178:	2300      	movs	r3, #0
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	e004      	b.n	8004188 <xTaskCheckForTimeOut+0xb4>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	2301      	movs	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	f000 fe9a 	bl	8004ec0 <vPortExitCritical>
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	2000017c 	.word	0x2000017c
 800419c:	20000190 	.word	0x20000190

080041a0 <vTaskMissedYield>:
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <vTaskMissedYield+0x14>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	2000018c 	.word	0x2000018c

080041b8 <prvIdleTask>:
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	f000 f8b0 	bl	8004324 <prvCheckTasksWaitingTermination>
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <prvIdleTask+0x70>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d907      	bls.n	80041dc <prvIdleTask+0x24>
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <prvIdleTask+0x74>)
 80041ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	f3bf 8f6f 	isb	sy
 80041dc:	f7ff fb14 	bl	8003808 <prvGetExpectedIdleTime>
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d9eb      	bls.n	80041c0 <prvIdleTask+0x8>
 80041e8:	f7ff fb00 	bl	80037ec <vTaskSuspendAll>
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <prvIdleTask+0x78>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b10      	ldr	r3, [pc, #64]	; (8004234 <prvIdleTask+0x7c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d20a      	bcs.n	800420e <prvIdleTask+0x56>
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <prvIdleTask+0x54>
 800420e:	f7ff fafb 	bl	8003808 <prvGetExpectedIdleTime>
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d902      	bls.n	8004220 <prvIdleTask+0x68>
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 febe 	bl	8004f9c <vPortSuppressTicksAndSleep>
 8004220:	f7ff fb28 	bl	8003874 <xTaskResumeAll>
 8004224:	e7cc      	b.n	80041c0 <prvIdleTask+0x8>
 8004226:	bf00      	nop
 8004228:	200000a4 	.word	0x200000a4
 800422c:	e000ed04 	.word	0xe000ed04
 8004230:	20000198 	.word	0x20000198
 8004234:	2000017c 	.word	0x2000017c

08004238 <eTaskConfirmSleepModeStatus>:
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	2301      	movs	r3, #1
 8004240:	603b      	str	r3, [r7, #0]
 8004242:	2301      	movs	r3, #1
 8004244:	71fb      	strb	r3, [r7, #7]
 8004246:	4b12      	ldr	r3, [pc, #72]	; (8004290 <eTaskConfirmSleepModeStatus+0x58>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <eTaskConfirmSleepModeStatus+0x1c>
 800424e:	2300      	movs	r3, #0
 8004250:	71fb      	strb	r3, [r7, #7]
 8004252:	e017      	b.n	8004284 <eTaskConfirmSleepModeStatus+0x4c>
 8004254:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <eTaskConfirmSleepModeStatus+0x5c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <eTaskConfirmSleepModeStatus+0x2a>
 800425c:	2300      	movs	r3, #0
 800425e:	71fb      	strb	r3, [r7, #7]
 8004260:	e010      	b.n	8004284 <eTaskConfirmSleepModeStatus+0x4c>
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <eTaskConfirmSleepModeStatus+0x60>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <eTaskConfirmSleepModeStatus+0x38>
 800426a:	2300      	movs	r3, #0
 800426c:	71fb      	strb	r3, [r7, #7]
 800426e:	e009      	b.n	8004284 <eTaskConfirmSleepModeStatus+0x4c>
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <eTaskConfirmSleepModeStatus+0x64>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <eTaskConfirmSleepModeStatus+0x68>)
 8004276:	6819      	ldr	r1, [r3, #0]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	1acb      	subs	r3, r1, r3
 800427c:	429a      	cmp	r2, r3
 800427e:	d101      	bne.n	8004284 <eTaskConfirmSleepModeStatus+0x4c>
 8004280:	2302      	movs	r3, #2
 8004282:	71fb      	strb	r3, [r7, #7]
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr
 8004290:	20000138 	.word	0x20000138
 8004294:	2000018c 	.word	0x2000018c
 8004298:	20000188 	.word	0x20000188
 800429c:	20000164 	.word	0x20000164
 80042a0:	20000178 	.word	0x20000178

080042a4 <prvInitialiseTaskLists>:
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	e00c      	b.n	80042ca <prvInitialiseTaskLists+0x26>
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4a12      	ldr	r2, [pc, #72]	; (8004304 <prvInitialiseTaskLists+0x60>)
 80042bc:	4413      	add	r3, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fc50 	bl	8004b64 <vListInitialise>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3301      	adds	r3, #1
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d9ef      	bls.n	80042b0 <prvInitialiseTaskLists+0xc>
 80042d0:	480d      	ldr	r0, [pc, #52]	; (8004308 <prvInitialiseTaskLists+0x64>)
 80042d2:	f000 fc47 	bl	8004b64 <vListInitialise>
 80042d6:	480d      	ldr	r0, [pc, #52]	; (800430c <prvInitialiseTaskLists+0x68>)
 80042d8:	f000 fc44 	bl	8004b64 <vListInitialise>
 80042dc:	480c      	ldr	r0, [pc, #48]	; (8004310 <prvInitialiseTaskLists+0x6c>)
 80042de:	f000 fc41 	bl	8004b64 <vListInitialise>
 80042e2:	480c      	ldr	r0, [pc, #48]	; (8004314 <prvInitialiseTaskLists+0x70>)
 80042e4:	f000 fc3e 	bl	8004b64 <vListInitialise>
 80042e8:	480b      	ldr	r0, [pc, #44]	; (8004318 <prvInitialiseTaskLists+0x74>)
 80042ea:	f000 fc3b 	bl	8004b64 <vListInitialise>
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <prvInitialiseTaskLists+0x78>)
 80042f0:	4a05      	ldr	r2, [pc, #20]	; (8004308 <prvInitialiseTaskLists+0x64>)
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	4b0a      	ldr	r3, [pc, #40]	; (8004320 <prvInitialiseTaskLists+0x7c>)
 80042f6:	4a05      	ldr	r2, [pc, #20]	; (800430c <prvInitialiseTaskLists+0x68>)
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200000a4 	.word	0x200000a4
 8004308:	20000108 	.word	0x20000108
 800430c:	2000011c 	.word	0x2000011c
 8004310:	20000138 	.word	0x20000138
 8004314:	2000014c 	.word	0x2000014c
 8004318:	20000164 	.word	0x20000164
 800431c:	20000130 	.word	0x20000130
 8004320:	20000134 	.word	0x20000134

08004324 <prvCheckTasksWaitingTermination>:
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	e019      	b.n	8004360 <prvCheckTasksWaitingTermination+0x3c>
 800432c:	f000 fd98 	bl	8004e60 <vPortEnterCritical>
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <prvCheckTasksWaitingTermination+0x50>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	607b      	str	r3, [r7, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fc74 	bl	8004c2a <uxListRemove>
 8004342:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <prvCheckTasksWaitingTermination+0x54>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3b01      	subs	r3, #1
 8004348:	4a0b      	ldr	r2, [pc, #44]	; (8004378 <prvCheckTasksWaitingTermination+0x54>)
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <prvCheckTasksWaitingTermination+0x58>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3b01      	subs	r3, #1
 8004352:	4a0a      	ldr	r2, [pc, #40]	; (800437c <prvCheckTasksWaitingTermination+0x58>)
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	f000 fdb3 	bl	8004ec0 <vPortExitCritical>
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f810 	bl	8004380 <prvDeleteTCB>
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <prvCheckTasksWaitingTermination+0x58>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e1      	bne.n	800432c <prvCheckTasksWaitingTermination+0x8>
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	2000014c 	.word	0x2000014c
 8004378:	20000178 	.word	0x20000178
 800437c:	20000160 	.word	0x20000160

08004380 <prvDeleteTCB>:
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fbd7 	bl	8004b40 <vPortFree>
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fbd4 	bl	8004b40 <vPortFree>
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <prvResetNextTaskUnblockTime>:
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <prvResetNextTaskUnblockTime+0x2c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <prvResetNextTaskUnblockTime+0x18>
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <prvResetNextTaskUnblockTime+0x30>)
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	e005      	b.n	80043c4 <prvResetNextTaskUnblockTime+0x24>
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <prvResetNextTaskUnblockTime+0x2c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a03      	ldr	r2, [pc, #12]	; (80043d0 <prvResetNextTaskUnblockTime+0x30>)
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	20000130 	.word	0x20000130
 80043d0:	20000198 	.word	0x20000198

080043d4 <xTaskGetSchedulerState>:
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <xTaskGetSchedulerState+0x34>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <xTaskGetSchedulerState+0x14>
 80043e2:	2301      	movs	r3, #1
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	e008      	b.n	80043fa <xTaskGetSchedulerState+0x26>
 80043e8:	4b08      	ldr	r3, [pc, #32]	; (800440c <xTaskGetSchedulerState+0x38>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <xTaskGetSchedulerState+0x22>
 80043f0:	2302      	movs	r3, #2
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	e001      	b.n	80043fa <xTaskGetSchedulerState+0x26>
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000184 	.word	0x20000184
 800440c:	200001a0 	.word	0x200001a0

08004410 <xTaskPriorityDisinherit>:
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d07e      	beq.n	8004524 <xTaskPriorityDisinherit+0x114>
 8004426:	4b42      	ldr	r3, [pc, #264]	; (8004530 <xTaskPriorityDisinherit+0x120>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	429a      	cmp	r2, r3
 800442e:	d00a      	beq.n	8004446 <xTaskPriorityDisinherit+0x36>
 8004430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	bf00      	nop
 8004444:	e7fe      	b.n	8004444 <xTaskPriorityDisinherit+0x34>
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <xTaskPriorityDisinherit+0x54>
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <xTaskPriorityDisinherit+0x52>
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	1e5a      	subs	r2, r3, #1
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	655a      	str	r2, [r3, #84]	; 0x54
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	429a      	cmp	r2, r3
 8004478:	d054      	beq.n	8004524 <xTaskPriorityDisinherit+0x114>
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447e:	2b00      	cmp	r3, #0
 8004480:	d150      	bne.n	8004524 <xTaskPriorityDisinherit+0x114>
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3304      	adds	r3, #4
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fbcf 	bl	8004c2a <uxListRemove>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	f1c3 0205 	rsb	r2, r3, #5
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	619a      	str	r2, [r3, #24]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4b23      	ldr	r3, [pc, #140]	; (8004534 <xTaskPriorityDisinherit+0x124>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d903      	bls.n	80044b4 <xTaskPriorityDisinherit+0xa4>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4a20      	ldr	r2, [pc, #128]	; (8004534 <xTaskPriorityDisinherit+0x124>)
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	491f      	ldr	r1, [pc, #124]	; (8004538 <xTaskPriorityDisinherit+0x128>)
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	3304      	adds	r3, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	609a      	str	r2, [r3, #8]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	3204      	adds	r2, #4
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4a10      	ldr	r2, [pc, #64]	; (8004538 <xTaskPriorityDisinherit+0x128>)
 80044f8:	441a      	add	r2, r3
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	615a      	str	r2, [r3, #20]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004502:	490d      	ldr	r1, [pc, #52]	; (8004538 <xTaskPriorityDisinherit+0x128>)
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	1c59      	adds	r1, r3, #1
 8004512:	4809      	ldr	r0, [pc, #36]	; (8004538 <xTaskPriorityDisinherit+0x128>)
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4403      	add	r3, r0
 800451e:	6019      	str	r1, [r3, #0]
 8004520:	2301      	movs	r3, #1
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200000a0 	.word	0x200000a0
 8004534:	20000180 	.word	0x20000180
 8004538:	200000a4 	.word	0x200000a4

0800453c <prvAddCurrentTaskToDelayedList>:
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
 8004546:	4b2e      	ldr	r3, [pc, #184]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3304      	adds	r3, #4
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fb69 	bl	8004c2a <uxListRemove>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d124      	bne.n	80045aa <prvAddCurrentTaskToDelayedList+0x6e>
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d021      	beq.n	80045aa <prvAddCurrentTaskToDelayedList+0x6e>
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	4b23      	ldr	r3, [pc, #140]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	6892      	ldr	r2, [r2, #8]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	4b21      	ldr	r3, [pc, #132]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	3204      	adds	r2, #4
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	1d1a      	adds	r2, r3, #4
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1b      	ldr	r2, [pc, #108]	; (8004608 <prvAddCurrentTaskToDelayedList+0xcc>)
 800459a:	615a      	str	r2, [r3, #20]
 800459c:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <prvAddCurrentTaskToDelayedList+0xcc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a19      	ldr	r2, [pc, #100]	; (8004608 <prvAddCurrentTaskToDelayedList+0xcc>)
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	bf00      	nop
 80045a8:	e026      	b.n	80045f8 <prvAddCurrentTaskToDelayedList+0xbc>
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4413      	add	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	4b14      	ldr	r3, [pc, #80]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d209      	bcs.n	80045d6 <prvAddCurrentTaskToDelayedList+0x9a>
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <prvAddCurrentTaskToDelayedList+0xd0>)
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4619      	mov	r1, r3
 80045ce:	4610      	mov	r0, r2
 80045d0:	f000 faf3 	bl	8004bba <vListInsert>
 80045d4:	e010      	b.n	80045f8 <prvAddCurrentTaskToDelayedList+0xbc>
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <prvAddCurrentTaskToDelayedList+0xd4>)
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 fae9 	bl	8004bba <vListInsert>
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <prvAddCurrentTaskToDelayedList+0xd8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d202      	bcs.n	80045f8 <prvAddCurrentTaskToDelayedList+0xbc>
 80045f2:	4a08      	ldr	r2, [pc, #32]	; (8004614 <prvAddCurrentTaskToDelayedList+0xd8>)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	bf00      	nop
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	2000017c 	.word	0x2000017c
 8004604:	200000a0 	.word	0x200000a0
 8004608:	20000164 	.word	0x20000164
 800460c:	20000134 	.word	0x20000134
 8004610:	20000130 	.word	0x20000130
 8004614:	20000198 	.word	0x20000198

08004618 <xTimerCreateTimerTask>:
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af02      	add	r7, sp, #8
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	f000 fa45 	bl	8004ab0 <prvCheckForValidListAndQueue>
 8004626:	4b11      	ldr	r3, [pc, #68]	; (800466c <xTimerCreateTimerTask+0x54>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <xTimerCreateTimerTask+0x2c>
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <xTimerCreateTimerTask+0x58>)
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	2303      	movs	r3, #3
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	2280      	movs	r2, #128	; 0x80
 800463a:	490e      	ldr	r1, [pc, #56]	; (8004674 <xTimerCreateTimerTask+0x5c>)
 800463c:	480e      	ldr	r0, [pc, #56]	; (8004678 <xTimerCreateTimerTask+0x60>)
 800463e:	f7fe fee3 	bl	8003408 <xTaskCreate>
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <xTimerCreateTimerTask+0x48>
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <xTimerCreateTimerTask+0x46>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	200001d4 	.word	0x200001d4
 8004670:	200001d8 	.word	0x200001d8
 8004674:	080053f4 	.word	0x080053f4
 8004678:	08004721 	.word	0x08004721

0800467c <prvReloadTimer>:
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	e008      	b.n	800469c <prvReloadTimer+0x20>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4413      	add	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	4798      	blx	r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	699a      	ldr	r2, [r3, #24]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	18d1      	adds	r1, r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f8db 	bl	8004864 <prvInsertTimerInActiveList>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ea      	bne.n	800468a <prvReloadTimer+0xe>
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <prvProcessExpiredTimer>:
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <prvProcessExpiredTimer+0x5c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 faa6 	bl	8004c2a <uxListRemove>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <prvProcessExpiredTimer+0x38>
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff ffc3 	bl	800467c <prvReloadTimer>
 80046f6:	e008      	b.n	800470a <prvProcessExpiredTimer+0x4a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	b2da      	uxtb	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	4798      	blx	r3
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200001cc 	.word	0x200001cc

08004720 <prvTimerTask>:
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f857 	bl	80047e0 <prvGetNextExpireTime>
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4619      	mov	r1, r3
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f803 	bl	8004744 <prvProcessTimerOrBlockTask>
 800473e:	f000 f8d3 	bl	80048e8 <prvProcessReceivedCommands>
 8004742:	e7f1      	b.n	8004728 <prvTimerTask+0x8>

08004744 <prvProcessTimerOrBlockTask>:
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	f7ff f84d 	bl	80037ec <vTaskSuspendAll>
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f864 	bl	8004824 <prvSampleTimeNow>
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d130      	bne.n	80047c6 <prvProcessTimerOrBlockTask+0x82>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <prvProcessTimerOrBlockTask+0x3c>
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	429a      	cmp	r2, r3
 8004770:	d806      	bhi.n	8004780 <prvProcessTimerOrBlockTask+0x3c>
 8004772:	f7ff f87f 	bl	8003874 <xTaskResumeAll>
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ffa1 	bl	80046c0 <prvProcessExpiredTimer>
 800477e:	e024      	b.n	80047ca <prvProcessTimerOrBlockTask+0x86>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <prvProcessTimerOrBlockTask+0x54>
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <prvProcessTimerOrBlockTask+0x90>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <prvProcessTimerOrBlockTask+0x50>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <prvProcessTimerOrBlockTask+0x52>
 8004794:	2300      	movs	r3, #0
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <prvProcessTimerOrBlockTask+0x94>)
 800479a:	6818      	ldr	r0, [r3, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	4619      	mov	r1, r3
 80047a6:	f7fe fdfb 	bl	80033a0 <vQueueWaitForMessageRestricted>
 80047aa:	f7ff f863 	bl	8003874 <xTaskResumeAll>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <prvProcessTimerOrBlockTask+0x86>
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <prvProcessTimerOrBlockTask+0x98>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	e001      	b.n	80047ca <prvProcessTimerOrBlockTask+0x86>
 80047c6:	f7ff f855 	bl	8003874 <xTaskResumeAll>
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	200001d0 	.word	0x200001d0
 80047d8:	200001d4 	.word	0x200001d4
 80047dc:	e000ed04 	.word	0xe000ed04

080047e0 <prvGetNextExpireTime>:
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <prvGetNextExpireTime+0x40>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <prvGetNextExpireTime+0x16>
 80047f2:	2201      	movs	r2, #1
 80047f4:	e000      	b.n	80047f8 <prvGetNextExpireTime+0x18>
 80047f6:	2200      	movs	r2, #0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <prvGetNextExpireTime+0x30>
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <prvGetNextExpireTime+0x40>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e001      	b.n	8004814 <prvGetNextExpireTime+0x34>
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr
 8004820:	200001cc 	.word	0x200001cc

08004824 <prvSampleTimeNow>:
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	f7ff f91e 	bl	8003a6c <xTaskGetTickCount>
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <prvSampleTimeNow+0x3c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	429a      	cmp	r2, r3
 800483a:	d205      	bcs.n	8004848 <prvSampleTimeNow+0x24>
 800483c:	f000 f912 	bl	8004a64 <prvSwitchTimerLists>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e002      	b.n	800484e <prvSampleTimeNow+0x2a>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	4a04      	ldr	r2, [pc, #16]	; (8004860 <prvSampleTimeNow+0x3c>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	200001dc 	.word	0x200001dc

08004864 <prvInsertTimerInActiveList>:
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	605a      	str	r2, [r3, #4]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	611a      	str	r2, [r3, #16]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	d812      	bhi.n	80048b0 <prvInsertTimerInActiveList+0x4c>
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	1ad2      	subs	r2, r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	429a      	cmp	r2, r3
 8004896:	d302      	bcc.n	800489e <prvInsertTimerInActiveList+0x3a>
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e01b      	b.n	80048d6 <prvInsertTimerInActiveList+0x72>
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <prvInsertTimerInActiveList+0x7c>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f000 f986 	bl	8004bba <vListInsert>
 80048ae:	e012      	b.n	80048d6 <prvInsertTimerInActiveList+0x72>
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d206      	bcs.n	80048c6 <prvInsertTimerInActiveList+0x62>
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d302      	bcc.n	80048c6 <prvInsertTimerInActiveList+0x62>
 80048c0:	2301      	movs	r3, #1
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	e007      	b.n	80048d6 <prvInsertTimerInActiveList+0x72>
 80048c6:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <prvInsertTimerInActiveList+0x80>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f000 f972 	bl	8004bba <vListInsert>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200001d0 	.word	0x200001d0
 80048e4:	200001cc 	.word	0x200001cc

080048e8 <prvProcessReceivedCommands>:
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	e0a6      	b.n	8004a3e <prvProcessReceivedCommands+0x156>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f2c0 80a2 	blt.w	8004a3c <prvProcessReceivedCommands+0x154>
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <prvProcessReceivedCommands+0x26>
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	3304      	adds	r3, #4
 8004908:	4618      	mov	r0, r3
 800490a:	f000 f98e 	bl	8004c2a <uxListRemove>
 800490e:	1d3b      	adds	r3, r7, #4
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff ff87 	bl	8004824 <prvSampleTimeNow>
 8004916:	61b8      	str	r0, [r7, #24]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	3b01      	subs	r3, #1
 800491c:	2b08      	cmp	r3, #8
 800491e:	f200 808e 	bhi.w	8004a3e <prvProcessReceivedCommands+0x156>
 8004922:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <prvProcessReceivedCommands+0x40>)
 8004924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004928:	0800494d 	.word	0x0800494d
 800492c:	0800494d 	.word	0x0800494d
 8004930:	080049b5 	.word	0x080049b5
 8004934:	080049c9 	.word	0x080049c9
 8004938:	08004a13 	.word	0x08004a13
 800493c:	0800494d 	.word	0x0800494d
 8004940:	0800494d 	.word	0x0800494d
 8004944:	080049b5 	.word	0x080049b5
 8004948:	080049c9 	.word	0x080049c9
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	b2da      	uxtb	r2, r3
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	18d1      	adds	r1, r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	69f8      	ldr	r0, [r7, #28]
 800496c:	f7ff ff7a 	bl	8004864 <prvInsertTimerInActiveList>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d063      	beq.n	8004a3e <prvProcessReceivedCommands+0x156>
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d009      	beq.n	8004998 <prvProcessReceivedCommands+0xb0>
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	4413      	add	r3, r2
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4619      	mov	r1, r3
 8004990:	69f8      	ldr	r0, [r7, #28]
 8004992:	f7ff fe73 	bl	800467c <prvReloadTimer>
 8004996:	e008      	b.n	80049aa <prvProcessReceivedCommands+0xc2>
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	69f8      	ldr	r0, [r7, #28]
 80049b0:	4798      	blx	r3
 80049b2:	e044      	b.n	8004a3e <prvProcessReceivedCommands+0x156>
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80049c6:	e03a      	b.n	8004a3e <prvProcessReceivedCommands+0x156>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	619a      	str	r2, [r3, #24]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <prvProcessReceivedCommands+0x116>
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <prvProcessReceivedCommands+0x114>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	18d1      	adds	r1, r2, r3
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	69f8      	ldr	r0, [r7, #28]
 8004a0c:	f7ff ff2a 	bl	8004864 <prvInsertTimerInActiveList>
 8004a10:	e015      	b.n	8004a3e <prvProcessReceivedCommands+0x156>
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d103      	bne.n	8004a28 <prvProcessReceivedCommands+0x140>
 8004a20:	69f8      	ldr	r0, [r7, #28]
 8004a22:	f000 f88d 	bl	8004b40 <vPortFree>
 8004a26:	e00a      	b.n	8004a3e <prvProcessReceivedCommands+0x156>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004a3a:	e000      	b.n	8004a3e <prvProcessReceivedCommands+0x156>
 8004a3c:	bf00      	nop
 8004a3e:	4b08      	ldr	r3, [pc, #32]	; (8004a60 <prvProcessReceivedCommands+0x178>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f107 0108 	add.w	r1, r7, #8
 8004a46:	2200      	movs	r2, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe fa6b 	bl	8002f24 <xQueueReceive>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f47f af4d 	bne.w	80048f0 <prvProcessReceivedCommands+0x8>
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	200001d4 	.word	0x200001d4

08004a64 <prvSwitchTimerLists>:
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	e009      	b.n	8004a80 <prvSwitchTimerLists+0x1c>
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <prvSwitchTimerLists+0x44>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	f04f 31ff 	mov.w	r1, #4294967295
 8004a7a:	6838      	ldr	r0, [r7, #0]
 8004a7c:	f7ff fe20 	bl	80046c0 <prvProcessExpiredTimer>
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <prvSwitchTimerLists+0x44>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <prvSwitchTimerLists+0x8>
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <prvSwitchTimerLists+0x44>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <prvSwitchTimerLists+0x48>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <prvSwitchTimerLists+0x44>)
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4a04      	ldr	r2, [pc, #16]	; (8004aac <prvSwitchTimerLists+0x48>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	bf00      	nop
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200001cc 	.word	0x200001cc
 8004aac:	200001d0 	.word	0x200001d0

08004ab0 <prvCheckForValidListAndQueue>:
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	f000 f9d4 	bl	8004e60 <vPortEnterCritical>
 8004ab8:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <prvCheckForValidListAndQueue+0x54>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11d      	bne.n	8004afc <prvCheckForValidListAndQueue+0x4c>
 8004ac0:	4811      	ldr	r0, [pc, #68]	; (8004b08 <prvCheckForValidListAndQueue+0x58>)
 8004ac2:	f000 f84f 	bl	8004b64 <vListInitialise>
 8004ac6:	4811      	ldr	r0, [pc, #68]	; (8004b0c <prvCheckForValidListAndQueue+0x5c>)
 8004ac8:	f000 f84c 	bl	8004b64 <vListInitialise>
 8004acc:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <prvCheckForValidListAndQueue+0x60>)
 8004ace:	4a0e      	ldr	r2, [pc, #56]	; (8004b08 <prvCheckForValidListAndQueue+0x58>)
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <prvCheckForValidListAndQueue+0x64>)
 8004ad4:	4a0d      	ldr	r2, [pc, #52]	; (8004b0c <prvCheckForValidListAndQueue+0x5c>)
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	210c      	movs	r1, #12
 8004adc:	200a      	movs	r0, #10
 8004ade:	f7fe f8b1 	bl	8002c44 <xQueueGenericCreate>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4a07      	ldr	r2, [pc, #28]	; (8004b04 <prvCheckForValidListAndQueue+0x54>)
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <prvCheckForValidListAndQueue+0x54>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <prvCheckForValidListAndQueue+0x4c>
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <prvCheckForValidListAndQueue+0x54>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4908      	ldr	r1, [pc, #32]	; (8004b18 <prvCheckForValidListAndQueue+0x68>)
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe fc04 	bl	8003304 <vQueueAddToRegistry>
 8004afc:	f000 f9e0 	bl	8004ec0 <vPortExitCritical>
 8004b00:	bf00      	nop
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	200001d4 	.word	0x200001d4
 8004b08:	200001a4 	.word	0x200001a4
 8004b0c:	200001b8 	.word	0x200001b8
 8004b10:	200001cc 	.word	0x200001cc
 8004b14:	200001d0 	.word	0x200001d0
 8004b18:	080053fc 	.word	0x080053fc

08004b1c <pvPortMalloc>:
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	f7fe fe62 	bl	80037ec <vTaskSuspendAll>
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fb67 	bl	80051fc <malloc>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	f7fe fe9f 	bl	8003874 <xTaskResumeAll>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <vPortFree>:
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d006      	beq.n	8004b5c <vPortFree+0x1c>
 8004b4e:	f7fe fe4d 	bl	80037ec <vTaskSuspendAll>
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb5a 	bl	800520c <free>
 8004b58:	f7fe fe8c 	bl	8003874 <xTaskResumeAll>
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <vListInitialise>:
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f103 0208 	add.w	r2, r3, #8
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	605a      	str	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	609a      	str	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f103 0208 	add.w	r2, r3, #8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60da      	str	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f103 0208 	add.w	r2, r3, #8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	611a      	str	r2, [r3, #16]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <vListInitialiseItem>:
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	611a      	str	r2, [r3, #16]
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr

08004bba <vListInsert>:
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d103      	bne.n	8004bda <vListInsert+0x20>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e00c      	b.n	8004bf4 <vListInsert+0x3a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3308      	adds	r3, #8
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e002      	b.n	8004be8 <vListInsert+0x2e>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d2f6      	bcs.n	8004be2 <vListInsert+0x28>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	605a      	str	r2, [r3, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	609a      	str	r2, [r3, #8]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	611a      	str	r2, [r3, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr

08004c2a <uxListRemove>:
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6892      	ldr	r2, [r2, #8]
 8004c40:	609a      	str	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6852      	ldr	r2, [r2, #4]
 8004c4a:	605a      	str	r2, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d103      	bne.n	8004c5e <uxListRemove+0x34>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	611a      	str	r2, [r3, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	1e5a      	subs	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr

08004c7c <pxPortInitialiseStack>:
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b04      	subs	r3, #4
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f023 0201 	bic.w	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b04      	subs	r3, #4
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <pxPortInitialiseStack+0x54>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b14      	subs	r3, #20
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b20      	subs	r3, #32
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr
 8004cd0:	08004cd5 	.word	0x08004cd5

08004cd4 <prvTaskExitError>:
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	2300      	movs	r3, #0
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <prvTaskExitError+0x54>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d00a      	beq.n	8004cfe <prvTaskExitError+0x2a>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <prvTaskExitError+0x28>
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0fc      	beq.n	8004d14 <prvTaskExitError+0x40>
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	20000018 	.word	0x20000018
 8004d2c:	00000000 	.word	0x00000000

08004d30 <SVC_Handler>:
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <pxCurrentTCBConst2>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	6808      	ldr	r0, [r1, #0]
 8004d36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d3a:	f380 8809 	msr	PSP, r0
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d4e:	4770      	bx	lr

08004d50 <pxCurrentTCBConst2>:
 8004d50:	200000a0 	.word	0x200000a0
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop

08004d58 <prvPortStartFirstTask>:
 8004d58:	4806      	ldr	r0, [pc, #24]	; (8004d74 <prvPortStartFirstTask+0x1c>)
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f380 8808 	msr	MSP, r0
 8004d62:	b662      	cpsie	i
 8004d64:	b661      	cpsie	f
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	df00      	svc	0
 8004d70:	bf00      	nop
 8004d72:	0000      	.short	0x0000
 8004d74:	e000ed08 	.word	0xe000ed08
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop

08004d7c <xPortStartScheduler>:
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4b32      	ldr	r3, [pc, #200]	; (8004e4c <xPortStartScheduler+0xd0>)
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	70fb      	strb	r3, [r7, #3]
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	4b2a      	ldr	r3, [pc, #168]	; (8004e50 <xPortStartScheduler+0xd4>)
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	4b2a      	ldr	r3, [pc, #168]	; (8004e54 <xPortStartScheduler+0xd8>)
 8004dac:	2207      	movs	r2, #7
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	e009      	b.n	8004dc6 <xPortStartScheduler+0x4a>
 8004db2:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <xPortStartScheduler+0xd8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <xPortStartScheduler+0xd8>)
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	70fb      	strb	r3, [r7, #3]
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d0ef      	beq.n	8004db2 <xPortStartScheduler+0x36>
 8004dd2:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <xPortStartScheduler+0xd8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f1c3 0307 	rsb	r3, r3, #7
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d00a      	beq.n	8004df4 <xPortStartScheduler+0x78>
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <xPortStartScheduler+0x76>
 8004df4:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <xPortStartScheduler+0xd8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <xPortStartScheduler+0xd8>)
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <xPortStartScheduler+0xd8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e06:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <xPortStartScheduler+0xd8>)
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <xPortStartScheduler+0xdc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a10      	ldr	r2, [pc, #64]	; (8004e58 <xPortStartScheduler+0xdc>)
 8004e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	4b0e      	ldr	r3, [pc, #56]	; (8004e58 <xPortStartScheduler+0xdc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a0d      	ldr	r2, [pc, #52]	; (8004e58 <xPortStartScheduler+0xdc>)
 8004e24:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	f000 f981 	bl	8005130 <vPortSetupTimerInterrupt>
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <xPortStartScheduler+0xe0>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f7ff ff90 	bl	8004d58 <prvPortStartFirstTask>
 8004e38:	f7fe ff98 	bl	8003d6c <vTaskSwitchContext>
 8004e3c:	f7ff ff4a 	bl	8004cd4 <prvTaskExitError>
 8004e40:	2300      	movs	r3, #0
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	e000e400 	.word	0xe000e400
 8004e50:	200001ec 	.word	0x200001ec
 8004e54:	200001f0 	.word	0x200001f0
 8004e58:	e000ed20 	.word	0xe000ed20
 8004e5c:	20000018 	.word	0x20000018

08004e60 <vPortEnterCritical>:
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	bf00      	nop
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <vPortEnterCritical+0x58>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	4a0d      	ldr	r2, [pc, #52]	; (8004eb8 <vPortEnterCritical+0x58>)
 8004e82:	6013      	str	r3, [r2, #0]
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <vPortEnterCritical+0x58>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d10f      	bne.n	8004eac <vPortEnterCritical+0x4c>
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <vPortEnterCritical+0x5c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <vPortEnterCritical+0x4c>
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <vPortEnterCritical+0x4a>
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000018 	.word	0x20000018
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <vPortExitCritical>:
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <vPortExitCritical+0x4c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <vPortExitCritical+0x24>
 8004ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
 8004ee0:	bf00      	nop
 8004ee2:	e7fe      	b.n	8004ee2 <vPortExitCritical+0x22>
 8004ee4:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <vPortExitCritical+0x4c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <vPortExitCritical+0x4c>)
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <vPortExitCritical+0x4c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d105      	bne.n	8004f02 <vPortExitCritical+0x42>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	20000018 	.word	0x20000018

08004f10 <PendSV_Handler>:
 8004f10:	f3ef 8009 	mrs	r0, PSP
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <pxCurrentTCBConst>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f20:	6010      	str	r0, [r2, #0]
 8004f22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f2a:	f380 8811 	msr	BASEPRI, r0
 8004f2e:	f7fe ff1d 	bl	8003d6c <vTaskSwitchContext>
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8811 	msr	BASEPRI, r0
 8004f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	6808      	ldr	r0, [r1, #0]
 8004f42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f46:	f380 8809 	msr	PSP, r0
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	4770      	bx	lr

08004f50 <pxCurrentTCBConst>:
 8004f50:	200000a0 	.word	0x200000a0
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop

08004f58 <SysTick_Handler>:
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	bf00      	nop
 8004f72:	f7fe fde3 	bl	8003b3c <xTaskIncrementTick>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <SysTick_Handler+0x2c>
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <SysTick_Handler+0x40>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	2300      	movs	r3, #0
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	bf00      	nop
 8004f90:	bf00      	nop
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <vPortSuppressTicksAndSleep>:
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <vPortSuppressTicksAndSleep+0x178>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d902      	bls.n	8004fb4 <vPortSuppressTicksAndSleep+0x18>
 8004fae:	4b59      	ldr	r3, [pc, #356]	; (8005114 <vPortSuppressTicksAndSleep+0x178>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	b672      	cpsid	i
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f7ff f93b 	bl	8004238 <eTaskConfirmSleepModeStatus>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <vPortSuppressTicksAndSleep+0x30>
 8004fc8:	b662      	cpsie	i
 8004fca:	e09e      	b.n	800510a <vPortSuppressTicksAndSleep+0x16e>
 8004fcc:	4b52      	ldr	r3, [pc, #328]	; (8005118 <vPortSuppressTicksAndSleep+0x17c>)
 8004fce:	2206      	movs	r2, #6
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	4b52      	ldr	r3, [pc, #328]	; (800511c <vPortSuppressTicksAndSleep+0x180>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <vPortSuppressTicksAndSleep+0x48>
 8004fde:	4b50      	ldr	r3, [pc, #320]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	4a4d      	ldr	r2, [pc, #308]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	fb02 f303 	mul.w	r3, r2, r3
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	4b4b      	ldr	r3, [pc, #300]	; (8005124 <vPortSuppressTicksAndSleep+0x188>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <vPortSuppressTicksAndSleep+0x78>
 8005002:	4b48      	ldr	r3, [pc, #288]	; (8005124 <vPortSuppressTicksAndSleep+0x188>)
 8005004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	4b45      	ldr	r3, [pc, #276]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	4b44      	ldr	r3, [pc, #272]	; (8005128 <vPortSuppressTicksAndSleep+0x18c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	429a      	cmp	r2, r3
 800501c:	d904      	bls.n	8005028 <vPortSuppressTicksAndSleep+0x8c>
 800501e:	4b42      	ldr	r3, [pc, #264]	; (8005128 <vPortSuppressTicksAndSleep+0x18c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	4a40      	ldr	r2, [pc, #256]	; (800512c <vPortSuppressTicksAndSleep+0x190>)
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b3b      	ldr	r3, [pc, #236]	; (800511c <vPortSuppressTicksAndSleep+0x180>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	4b38      	ldr	r3, [pc, #224]	; (8005118 <vPortSuppressTicksAndSleep+0x17c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a37      	ldr	r2, [pc, #220]	; (8005118 <vPortSuppressTicksAndSleep+0x17c>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <vPortSuppressTicksAndSleep+0xb8>
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	bf30      	wfi
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	b662      	cpsie	i
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	b672      	cpsid	i
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	4b2b      	ldr	r3, [pc, #172]	; (8005118 <vPortSuppressTicksAndSleep+0x17c>)
 800506a:	2206      	movs	r2, #6
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	4b2a      	ldr	r3, [pc, #168]	; (8005118 <vPortSuppressTicksAndSleep+0x17c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d01d      	beq.n	80050b6 <vPortSuppressTicksAndSleep+0x11a>
 800507a:	4b29      	ldr	r3, [pc, #164]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b27      	ldr	r3, [pc, #156]	; (800511c <vPortSuppressTicksAndSleep+0x180>)
 8005080:	6819      	ldr	r1, [r3, #0]
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	1acb      	subs	r3, r1, r3
 8005086:	4413      	add	r3, r2
 8005088:	3b01      	subs	r3, #1
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	4b26      	ldr	r3, [pc, #152]	; (8005128 <vPortSuppressTicksAndSleep+0x18c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	429a      	cmp	r2, r3
 8005094:	d904      	bls.n	80050a0 <vPortSuppressTicksAndSleep+0x104>
 8005096:	4b22      	ldr	r3, [pc, #136]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	429a      	cmp	r2, r3
 800509e:	d903      	bls.n	80050a8 <vPortSuppressTicksAndSleep+0x10c>
 80050a0:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	4a20      	ldr	r2, [pc, #128]	; (800512c <vPortSuppressTicksAndSleep+0x190>)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e01a      	b.n	80050ec <vPortSuppressTicksAndSleep+0x150>
 80050b6:	4b19      	ldr	r3, [pc, #100]	; (800511c <vPortSuppressTicksAndSleep+0x180>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	4b18      	ldr	r3, [pc, #96]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	fb02 f203 	mul.w	r2, r2, r3
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	4b14      	ldr	r3, [pc, #80]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	3301      	adds	r3, #1
 80050dc:	4a10      	ldr	r2, [pc, #64]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	fb02 f203 	mul.w	r2, r2, r3
 80050e4:	4911      	ldr	r1, [pc, #68]	; (800512c <vPortSuppressTicksAndSleep+0x190>)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	600b      	str	r3, [r1, #0]
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <vPortSuppressTicksAndSleep+0x180>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <vPortSuppressTicksAndSleep+0x17c>)
 80050f4:	2207      	movs	r2, #7
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <vPortSuppressTicksAndSleep+0x184>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <vPortSuppressTicksAndSleep+0x190>)
 80050fe:	3b01      	subs	r3, #1
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	69b8      	ldr	r0, [r7, #24]
 8005104:	f7fe fcc0 	bl	8003a88 <vTaskStepTick>
 8005108:	b662      	cpsie	i
 800510a:	bf00      	nop
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	200001e4 	.word	0x200001e4
 8005118:	e000e010 	.word	0xe000e010
 800511c:	e000e018 	.word	0xe000e018
 8005120:	200001e0 	.word	0x200001e0
 8005124:	e000ed04 	.word	0xe000ed04
 8005128:	200001e8 	.word	0x200001e8
 800512c:	e000e014 	.word	0xe000e014

08005130 <vPortSetupTimerInterrupt>:
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
 8005134:	4b14      	ldr	r3, [pc, #80]	; (8005188 <vPortSetupTimerInterrupt+0x58>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a14      	ldr	r2, [pc, #80]	; (800518c <vPortSetupTimerInterrupt+0x5c>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	4a13      	ldr	r2, [pc, #76]	; (8005190 <vPortSetupTimerInterrupt+0x60>)
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	4b12      	ldr	r3, [pc, #72]	; (8005190 <vPortSetupTimerInterrupt+0x60>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800514c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005150:	4a10      	ldr	r2, [pc, #64]	; (8005194 <vPortSetupTimerInterrupt+0x64>)
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b10      	ldr	r3, [pc, #64]	; (8005198 <vPortSetupTimerInterrupt+0x68>)
 8005156:	225e      	movs	r2, #94	; 0x5e
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	4b10      	ldr	r3, [pc, #64]	; (800519c <vPortSetupTimerInterrupt+0x6c>)
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <vPortSetupTimerInterrupt+0x70>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <vPortSetupTimerInterrupt+0x58>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a08      	ldr	r2, [pc, #32]	; (800518c <vPortSetupTimerInterrupt+0x5c>)
 800516c:	fba2 2303 	umull	r2, r3, r2, r3
 8005170:	099b      	lsrs	r3, r3, #6
 8005172:	4a0c      	ldr	r2, [pc, #48]	; (80051a4 <vPortSetupTimerInterrupt+0x74>)
 8005174:	3b01      	subs	r3, #1
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	4b08      	ldr	r3, [pc, #32]	; (800519c <vPortSetupTimerInterrupt+0x6c>)
 800517a:	2207      	movs	r2, #7
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	bf00      	nop
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	20000008 	.word	0x20000008
 800518c:	10624dd3 	.word	0x10624dd3
 8005190:	200001e0 	.word	0x200001e0
 8005194:	200001e4 	.word	0x200001e4
 8005198:	200001e8 	.word	0x200001e8
 800519c:	e000e010 	.word	0xe000e010
 80051a0:	e000e018 	.word	0xe000e018
 80051a4:	e000e014 	.word	0xe000e014

080051a8 <__errno>:
 80051a8:	4b01      	ldr	r3, [pc, #4]	; (80051b0 <__errno+0x8>)
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	2000001c 	.word	0x2000001c

080051b4 <__libc_init_array>:
 80051b4:	b570      	push	{r4, r5, r6, lr}
 80051b6:	2600      	movs	r6, #0
 80051b8:	4d0c      	ldr	r5, [pc, #48]	; (80051ec <__libc_init_array+0x38>)
 80051ba:	4c0d      	ldr	r4, [pc, #52]	; (80051f0 <__libc_init_array+0x3c>)
 80051bc:	1b64      	subs	r4, r4, r5
 80051be:	10a4      	asrs	r4, r4, #2
 80051c0:	42a6      	cmp	r6, r4
 80051c2:	d109      	bne.n	80051d8 <__libc_init_array+0x24>
 80051c4:	f000 f904 	bl	80053d0 <_init>
 80051c8:	2600      	movs	r6, #0
 80051ca:	4d0a      	ldr	r5, [pc, #40]	; (80051f4 <__libc_init_array+0x40>)
 80051cc:	4c0a      	ldr	r4, [pc, #40]	; (80051f8 <__libc_init_array+0x44>)
 80051ce:	1b64      	subs	r4, r4, r5
 80051d0:	10a4      	asrs	r4, r4, #2
 80051d2:	42a6      	cmp	r6, r4
 80051d4:	d105      	bne.n	80051e2 <__libc_init_array+0x2e>
 80051d6:	bd70      	pop	{r4, r5, r6, pc}
 80051d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051dc:	4798      	blx	r3
 80051de:	3601      	adds	r6, #1
 80051e0:	e7ee      	b.n	80051c0 <__libc_init_array+0xc>
 80051e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e6:	4798      	blx	r3
 80051e8:	3601      	adds	r6, #1
 80051ea:	e7f2      	b.n	80051d2 <__libc_init_array+0x1e>
 80051ec:	08005430 	.word	0x08005430
 80051f0:	08005430 	.word	0x08005430
 80051f4:	08005430 	.word	0x08005430
 80051f8:	08005434 	.word	0x08005434

080051fc <malloc>:
 80051fc:	4b02      	ldr	r3, [pc, #8]	; (8005208 <malloc+0xc>)
 80051fe:	4601      	mov	r1, r0
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	f000 b86d 	b.w	80052e0 <_malloc_r>
 8005206:	bf00      	nop
 8005208:	2000001c 	.word	0x2000001c

0800520c <free>:
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <free+0xc>)
 800520e:	4601      	mov	r1, r0
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	f000 b819 	b.w	8005248 <_free_r>
 8005216:	bf00      	nop
 8005218:	2000001c 	.word	0x2000001c

0800521c <memcpy>:
 800521c:	440a      	add	r2, r1
 800521e:	4291      	cmp	r1, r2
 8005220:	f100 33ff 	add.w	r3, r0, #4294967295
 8005224:	d100      	bne.n	8005228 <memcpy+0xc>
 8005226:	4770      	bx	lr
 8005228:	b510      	push	{r4, lr}
 800522a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800522e:	4291      	cmp	r1, r2
 8005230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005234:	d1f9      	bne.n	800522a <memcpy+0xe>
 8005236:	bd10      	pop	{r4, pc}

08005238 <memset>:
 8005238:	4603      	mov	r3, r0
 800523a:	4402      	add	r2, r0
 800523c:	4293      	cmp	r3, r2
 800523e:	d100      	bne.n	8005242 <memset+0xa>
 8005240:	4770      	bx	lr
 8005242:	f803 1b01 	strb.w	r1, [r3], #1
 8005246:	e7f9      	b.n	800523c <memset+0x4>

08005248 <_free_r>:
 8005248:	b538      	push	{r3, r4, r5, lr}
 800524a:	4605      	mov	r5, r0
 800524c:	2900      	cmp	r1, #0
 800524e:	d043      	beq.n	80052d8 <_free_r+0x90>
 8005250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005254:	1f0c      	subs	r4, r1, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	bfb8      	it	lt
 800525a:	18e4      	addlt	r4, r4, r3
 800525c:	f000 f8aa 	bl	80053b4 <__malloc_lock>
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <_free_r+0x94>)
 8005262:	6813      	ldr	r3, [r2, #0]
 8005264:	4610      	mov	r0, r2
 8005266:	b933      	cbnz	r3, 8005276 <_free_r+0x2e>
 8005268:	6063      	str	r3, [r4, #4]
 800526a:	6014      	str	r4, [r2, #0]
 800526c:	4628      	mov	r0, r5
 800526e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005272:	f000 b8a5 	b.w	80053c0 <__malloc_unlock>
 8005276:	42a3      	cmp	r3, r4
 8005278:	d90a      	bls.n	8005290 <_free_r+0x48>
 800527a:	6821      	ldr	r1, [r4, #0]
 800527c:	1862      	adds	r2, r4, r1
 800527e:	4293      	cmp	r3, r2
 8005280:	bf01      	itttt	eq
 8005282:	681a      	ldreq	r2, [r3, #0]
 8005284:	685b      	ldreq	r3, [r3, #4]
 8005286:	1852      	addeq	r2, r2, r1
 8005288:	6022      	streq	r2, [r4, #0]
 800528a:	6063      	str	r3, [r4, #4]
 800528c:	6004      	str	r4, [r0, #0]
 800528e:	e7ed      	b.n	800526c <_free_r+0x24>
 8005290:	461a      	mov	r2, r3
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	b10b      	cbz	r3, 800529a <_free_r+0x52>
 8005296:	42a3      	cmp	r3, r4
 8005298:	d9fa      	bls.n	8005290 <_free_r+0x48>
 800529a:	6811      	ldr	r1, [r2, #0]
 800529c:	1850      	adds	r0, r2, r1
 800529e:	42a0      	cmp	r0, r4
 80052a0:	d10b      	bne.n	80052ba <_free_r+0x72>
 80052a2:	6820      	ldr	r0, [r4, #0]
 80052a4:	4401      	add	r1, r0
 80052a6:	1850      	adds	r0, r2, r1
 80052a8:	4283      	cmp	r3, r0
 80052aa:	6011      	str	r1, [r2, #0]
 80052ac:	d1de      	bne.n	800526c <_free_r+0x24>
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	4401      	add	r1, r0
 80052b4:	6011      	str	r1, [r2, #0]
 80052b6:	6053      	str	r3, [r2, #4]
 80052b8:	e7d8      	b.n	800526c <_free_r+0x24>
 80052ba:	d902      	bls.n	80052c2 <_free_r+0x7a>
 80052bc:	230c      	movs	r3, #12
 80052be:	602b      	str	r3, [r5, #0]
 80052c0:	e7d4      	b.n	800526c <_free_r+0x24>
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	1821      	adds	r1, r4, r0
 80052c6:	428b      	cmp	r3, r1
 80052c8:	bf01      	itttt	eq
 80052ca:	6819      	ldreq	r1, [r3, #0]
 80052cc:	685b      	ldreq	r3, [r3, #4]
 80052ce:	1809      	addeq	r1, r1, r0
 80052d0:	6021      	streq	r1, [r4, #0]
 80052d2:	6063      	str	r3, [r4, #4]
 80052d4:	6054      	str	r4, [r2, #4]
 80052d6:	e7c9      	b.n	800526c <_free_r+0x24>
 80052d8:	bd38      	pop	{r3, r4, r5, pc}
 80052da:	bf00      	nop
 80052dc:	200001f4 	.word	0x200001f4

080052e0 <_malloc_r>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	1ccd      	adds	r5, r1, #3
 80052e4:	f025 0503 	bic.w	r5, r5, #3
 80052e8:	3508      	adds	r5, #8
 80052ea:	2d0c      	cmp	r5, #12
 80052ec:	bf38      	it	cc
 80052ee:	250c      	movcc	r5, #12
 80052f0:	2d00      	cmp	r5, #0
 80052f2:	4606      	mov	r6, r0
 80052f4:	db01      	blt.n	80052fa <_malloc_r+0x1a>
 80052f6:	42a9      	cmp	r1, r5
 80052f8:	d903      	bls.n	8005302 <_malloc_r+0x22>
 80052fa:	230c      	movs	r3, #12
 80052fc:	6033      	str	r3, [r6, #0]
 80052fe:	2000      	movs	r0, #0
 8005300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005302:	f000 f857 	bl	80053b4 <__malloc_lock>
 8005306:	4921      	ldr	r1, [pc, #132]	; (800538c <_malloc_r+0xac>)
 8005308:	680a      	ldr	r2, [r1, #0]
 800530a:	4614      	mov	r4, r2
 800530c:	b99c      	cbnz	r4, 8005336 <_malloc_r+0x56>
 800530e:	4f20      	ldr	r7, [pc, #128]	; (8005390 <_malloc_r+0xb0>)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	b923      	cbnz	r3, 800531e <_malloc_r+0x3e>
 8005314:	4621      	mov	r1, r4
 8005316:	4630      	mov	r0, r6
 8005318:	f000 f83c 	bl	8005394 <_sbrk_r>
 800531c:	6038      	str	r0, [r7, #0]
 800531e:	4629      	mov	r1, r5
 8005320:	4630      	mov	r0, r6
 8005322:	f000 f837 	bl	8005394 <_sbrk_r>
 8005326:	1c43      	adds	r3, r0, #1
 8005328:	d123      	bne.n	8005372 <_malloc_r+0x92>
 800532a:	230c      	movs	r3, #12
 800532c:	4630      	mov	r0, r6
 800532e:	6033      	str	r3, [r6, #0]
 8005330:	f000 f846 	bl	80053c0 <__malloc_unlock>
 8005334:	e7e3      	b.n	80052fe <_malloc_r+0x1e>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	1b5b      	subs	r3, r3, r5
 800533a:	d417      	bmi.n	800536c <_malloc_r+0x8c>
 800533c:	2b0b      	cmp	r3, #11
 800533e:	d903      	bls.n	8005348 <_malloc_r+0x68>
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	441c      	add	r4, r3
 8005344:	6025      	str	r5, [r4, #0]
 8005346:	e004      	b.n	8005352 <_malloc_r+0x72>
 8005348:	6863      	ldr	r3, [r4, #4]
 800534a:	42a2      	cmp	r2, r4
 800534c:	bf0c      	ite	eq
 800534e:	600b      	streq	r3, [r1, #0]
 8005350:	6053      	strne	r3, [r2, #4]
 8005352:	4630      	mov	r0, r6
 8005354:	f000 f834 	bl	80053c0 <__malloc_unlock>
 8005358:	f104 000b 	add.w	r0, r4, #11
 800535c:	1d23      	adds	r3, r4, #4
 800535e:	f020 0007 	bic.w	r0, r0, #7
 8005362:	1ac2      	subs	r2, r0, r3
 8005364:	d0cc      	beq.n	8005300 <_malloc_r+0x20>
 8005366:	1a1b      	subs	r3, r3, r0
 8005368:	50a3      	str	r3, [r4, r2]
 800536a:	e7c9      	b.n	8005300 <_malloc_r+0x20>
 800536c:	4622      	mov	r2, r4
 800536e:	6864      	ldr	r4, [r4, #4]
 8005370:	e7cc      	b.n	800530c <_malloc_r+0x2c>
 8005372:	1cc4      	adds	r4, r0, #3
 8005374:	f024 0403 	bic.w	r4, r4, #3
 8005378:	42a0      	cmp	r0, r4
 800537a:	d0e3      	beq.n	8005344 <_malloc_r+0x64>
 800537c:	1a21      	subs	r1, r4, r0
 800537e:	4630      	mov	r0, r6
 8005380:	f000 f808 	bl	8005394 <_sbrk_r>
 8005384:	3001      	adds	r0, #1
 8005386:	d1dd      	bne.n	8005344 <_malloc_r+0x64>
 8005388:	e7cf      	b.n	800532a <_malloc_r+0x4a>
 800538a:	bf00      	nop
 800538c:	200001f4 	.word	0x200001f4
 8005390:	200001f8 	.word	0x200001f8

08005394 <_sbrk_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	2300      	movs	r3, #0
 8005398:	4d05      	ldr	r5, [pc, #20]	; (80053b0 <_sbrk_r+0x1c>)
 800539a:	4604      	mov	r4, r0
 800539c:	4608      	mov	r0, r1
 800539e:	602b      	str	r3, [r5, #0]
 80053a0:	f7fb fe2e 	bl	8001000 <_sbrk>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	d102      	bne.n	80053ae <_sbrk_r+0x1a>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	b103      	cbz	r3, 80053ae <_sbrk_r+0x1a>
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
 80053b0:	200002ec 	.word	0x200002ec

080053b4 <__malloc_lock>:
 80053b4:	4801      	ldr	r0, [pc, #4]	; (80053bc <__malloc_lock+0x8>)
 80053b6:	f000 b809 	b.w	80053cc <__retarget_lock_acquire_recursive>
 80053ba:	bf00      	nop
 80053bc:	200002f4 	.word	0x200002f4

080053c0 <__malloc_unlock>:
 80053c0:	4801      	ldr	r0, [pc, #4]	; (80053c8 <__malloc_unlock+0x8>)
 80053c2:	f000 b804 	b.w	80053ce <__retarget_lock_release_recursive>
 80053c6:	bf00      	nop
 80053c8:	200002f4 	.word	0x200002f4

080053cc <__retarget_lock_acquire_recursive>:
 80053cc:	4770      	bx	lr

080053ce <__retarget_lock_release_recursive>:
 80053ce:	4770      	bx	lr

080053d0 <_init>:
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	bf00      	nop
 80053d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d6:	bc08      	pop	{r3}
 80053d8:	469e      	mov	lr, r3
 80053da:	4770      	bx	lr

080053dc <_fini>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	bf00      	nop
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr
