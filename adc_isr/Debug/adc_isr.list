
adc_isr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a54  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc0  08004bc0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004bc0  08004bc0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bc0  08004bc0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000078  08004c40  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004c40  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a69  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e60  00000000  00000000  00033b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00036970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  000379c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cec  00000000  00000000  000388b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c85  00000000  00000000  000525a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095485  00000000  00000000  00064229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f96ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044e0  00000000  00000000  000f9704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b4c 	.word	0x08004b4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004b4c 	.word	0x08004b4c

08000150 <Adc>:

QueueHandle_t adc_queue;

#define THRESHOLD_VALUE 2048

static void Adc(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]

	while (1){

		// Starts conversion
		HAL_ADC_Start_IT(&hadc1);
 8000158:	4803      	ldr	r0, [pc, #12]	; (8000168 <Adc+0x18>)
 800015a:	f000 fbed 	bl	8000938 <HAL_ADC_Start_IT>

		// This delay marks the conversion rate
		vTaskDelay(100/portTICK_PERIOD_MS);
 800015e:	2064      	movs	r0, #100	; 0x64
 8000160:	f002 fe30 	bl	8002dc4 <vTaskDelay>
		HAL_ADC_Start_IT(&hadc1);
 8000164:	e7f8      	b.n	8000158 <Adc+0x8>
 8000166:	bf00      	nop
 8000168:	200001fc 	.word	0x200001fc

0800016c <Led>:
	}
}

static void Led(void *pvParameters){
 800016c:	b580      	push	{r7, lr}
 800016e:	b084      	sub	sp, #16
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	uint16_t received_value;

	while (1){

		// Reads the value from the queue
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <Led+0x40>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	f107 010e 	add.w	r1, r7, #14
 800017c:	f04f 32ff 	mov.w	r2, #4294967295
 8000180:	4618      	mov	r0, r3
 8000182:	f002 fa59 	bl	8002638 <xQueueReceive>

		if ( received_value > THRESHOLD_VALUE ) {
 8000186:	89fb      	ldrh	r3, [r7, #14]
 8000188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800018c:	d906      	bls.n	800019c <Led+0x30>

			// If the value coming from the queue is greater than the threshold, turn on the led
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800018e:	2200      	movs	r2, #0
 8000190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000194:	4806      	ldr	r0, [pc, #24]	; (80001b0 <Led+0x44>)
 8000196:	f001 f959 	bl	800144c <HAL_GPIO_WritePin>
 800019a:	e7eb      	b.n	8000174 <Led+0x8>

		}
		else {

			// Else turn it off
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800019c:	2201      	movs	r2, #1
 800019e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a2:	4803      	ldr	r0, [pc, #12]	; (80001b0 <Led+0x44>)
 80001a4:	f001 f952 	bl	800144c <HAL_GPIO_WritePin>
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 80001a8:	e7e4      	b.n	8000174 <Led+0x8>
 80001aa:	bf00      	nop
 80001ac:	2000022c 	.word	0x2000022c
 80001b0:	40011000 	.word	0x40011000

080001b4 <HAL_ADC_ConvCpltCallback>:

	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	static portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	static uint16_t adc_value = 0;

	// Obtains the conversion result
	adc_value = HAL_ADC_GetValue(hadc);
 80001bc:	6878      	ldr	r0, [r7, #4]
 80001be:	f000 fc71 	bl	8000aa4 <HAL_ADC_GetValue>
 80001c2:	4603      	mov	r3, r0
 80001c4:	b29a      	uxth	r2, r3
 80001c6:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <HAL_ADC_ConvCpltCallback+0x44>)
 80001c8:	801a      	strh	r2, [r3, #0]

	// Sends the value to the queue
	xQueueOverwriteFromISR(adc_queue, &adc_value, &xHigherPriorityTaskWoken);
 80001ca:	4b0c      	ldr	r3, [pc, #48]	; (80001fc <HAL_ADC_ConvCpltCallback+0x48>)
 80001cc:	6818      	ldr	r0, [r3, #0]
 80001ce:	2302      	movs	r3, #2
 80001d0:	4a0b      	ldr	r2, [pc, #44]	; (8000200 <HAL_ADC_ConvCpltCallback+0x4c>)
 80001d2:	4909      	ldr	r1, [pc, #36]	; (80001f8 <HAL_ADC_ConvCpltCallback+0x44>)
 80001d4:	f002 f97d 	bl	80024d2 <xQueueGenericSendFromISR>

	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <HAL_ADC_ConvCpltCallback+0x4c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d007      	beq.n	80001f0 <HAL_ADC_ConvCpltCallback+0x3c>
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <HAL_ADC_ConvCpltCallback+0x50>)
 80001e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	f3bf 8f4f 	dsb	sy
 80001ec:	f3bf 8f6f 	isb	sy

	//dos botones: max: 1981
	//boton up: 2750
	//boton min: 2574
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000094 	.word	0x20000094
 80001fc:	2000022c 	.word	0x2000022c
 8000200:	20000098 	.word	0x20000098
 8000204:	e000ed04 	.word	0xe000ed04

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020e:	f000 fa89 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000212:	f000 f831 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000216:	f000 f8c9 	bl	80003ac <MX_GPIO_Init>
  MX_ADC1_Init();
 800021a:	f000 f889 	bl	8000330 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  adc_queue = xQueueCreate(1,sizeof(uint16_t));
 800021e:	2200      	movs	r2, #0
 8000220:	2102      	movs	r1, #2
 8000222:	2001      	movs	r0, #1
 8000224:	f002 f8e4 	bl	80023f0 <xQueueGenericCreate>
 8000228:	4603      	mov	r3, r0
 800022a:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <main+0x5c>)
 800022c:	6013      	str	r3, [r2, #0]

  xTaskCreate(Adc, "ADC task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800022e:	2300      	movs	r3, #0
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	2301      	movs	r3, #1
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	2300      	movs	r3, #0
 8000238:	2280      	movs	r2, #128	; 0x80
 800023a:	490b      	ldr	r1, [pc, #44]	; (8000268 <main+0x60>)
 800023c:	480b      	ldr	r0, [pc, #44]	; (800026c <main+0x64>)
 800023e:	f002 fc55 	bl	8002aec <xTaskCreate>
  xTaskCreate(Led, "Led task", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 8000242:	2300      	movs	r3, #0
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	2301      	movs	r3, #1
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2300      	movs	r3, #0
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <main+0x68>)
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <main+0x6c>)
 8000252:	f002 fc4b 	bl	8002aec <xTaskCreate>

  vTaskStartScheduler();
 8000256:	f002 fde9 	bl	8002e2c <vTaskStartScheduler>
 800025a:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800025c:	4618      	mov	r0, r3
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	2000022c 	.word	0x2000022c
 8000268:	08004b64 	.word	0x08004b64
 800026c:	08000151 	.word	0x08000151
 8000270:	08004b70 	.word	0x08004b70
 8000274:	0800016d 	.word	0x0800016d

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b094      	sub	sp, #80	; 0x50
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f004 fb94 	bl	80049b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	f107 0314 	add.w	r3, r7, #20
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]
 8000298:	60da      	str	r2, [r3, #12]
 800029a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a8:	2301      	movs	r3, #1
 80002aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b6:	2301      	movs	r3, #1
 80002b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 f8d4 	bl	800147c <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002da:	f000 f8c5 	bl	8000468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f4:	f107 0314 	add.w	r3, r7, #20
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fb3e 	bl	800197c <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000306:	f000 f8af 	bl	8000468 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800030a:	2302      	movs	r3, #2
 800030c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800030e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000312:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fcda 	bl	8001cd0 <HAL_RCCEx_PeriphCLKConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000322:	f000 f8a1 	bl	8000468 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3750      	adds	r7, #80	; 0x50
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_ADC1_Init+0x74>)
 8000342:	4a19      	ldr	r2, [pc, #100]	; (80003a8 <MX_ADC1_Init+0x78>)
 8000344:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <MX_ADC1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_ADC1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_ADC1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_ADC1_Init+0x74>)
 800035a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800035e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000360:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_ADC1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_ADC1_Init+0x74>)
 8000368:	2201      	movs	r2, #1
 800036a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <MX_ADC1_Init+0x74>)
 800036e:	f000 fa0b 	bl	8000788 <HAL_ADC_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000378:	f000 f876 	bl	8000468 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800037c:	2305      	movs	r3, #5
 800037e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000380:	2301      	movs	r3, #1
 8000382:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000384:	2300      	movs	r3, #0
 8000386:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	4619      	mov	r1, r3
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_ADC1_Init+0x74>)
 800038e:	f000 fc5d 	bl	8000c4c <HAL_ADC_ConfigChannel>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000398:	f000 f866 	bl	8000468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200001fc 	.word	0x200001fc
 80003a8:	40012400 	.word	0x40012400

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <MX_GPIO_Init+0x90>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1d      	ldr	r2, [pc, #116]	; (800043c <MX_GPIO_Init+0x90>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b1b      	ldr	r3, [pc, #108]	; (800043c <MX_GPIO_Init+0x90>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0310 	and.w	r3, r3, #16
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <MX_GPIO_Init+0x90>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a17      	ldr	r2, [pc, #92]	; (800043c <MX_GPIO_Init+0x90>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <MX_GPIO_Init+0x90>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <MX_GPIO_Init+0x90>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a11      	ldr	r2, [pc, #68]	; (800043c <MX_GPIO_Init+0x90>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <MX_GPIO_Init+0x90>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040e:	480c      	ldr	r0, [pc, #48]	; (8000440 <MX_GPIO_Init+0x94>)
 8000410:	f001 f81c 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_GPIO_Init+0x94>)
 800042e:	f000 fe89 	bl	8001144 <HAL_GPIO_Init>

}
 8000432:	bf00      	nop
 8000434:	3720      	adds	r7, #32
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000
 8000440:	40011000 	.word	0x40011000

08000444 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d101      	bne.n	800045a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000456:	f000 f97b 	bl	8000750 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40012c00 	.word	0x40012c00

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>
	...

08000474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <HAL_MspInit+0x5c>)
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <HAL_MspInit+0x5c>)
 8000498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <HAL_MspInit+0x60>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <HAL_MspInit+0x60>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010000 	.word	0x40010000

080004d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <HAL_ADC_MspInit+0x7c>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d129      	bne.n	800054c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <HAL_ADC_MspInit+0x80>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a16      	ldr	r2, [pc, #88]	; (8000558 <HAL_ADC_MspInit+0x80>)
 80004fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <HAL_ADC_MspInit+0x80>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <HAL_ADC_MspInit+0x80>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a10      	ldr	r2, [pc, #64]	; (8000558 <HAL_ADC_MspInit+0x80>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_ADC_MspInit+0x80>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = POTE_Pin;
 8000528:	2320      	movs	r3, #32
 800052a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800052c:	2303      	movs	r3, #3
 800052e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(POTE_GPIO_Port, &GPIO_InitStruct);
 8000530:	f107 0310 	add.w	r3, r7, #16
 8000534:	4619      	mov	r1, r3
 8000536:	4809      	ldr	r0, [pc, #36]	; (800055c <HAL_ADC_MspInit+0x84>)
 8000538:	f000 fe04 	bl	8001144 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2105      	movs	r1, #5
 8000540:	2012      	movs	r0, #18
 8000542:	f000 fdd4 	bl	80010ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000546:	2012      	movs	r0, #18
 8000548:	f000 fded 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40012400 	.word	0x40012400
 8000558:	40021000 	.word	0x40021000
 800055c:	40010800 	.word	0x40010800

08000560 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000570:	2200      	movs	r2, #0
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	2019      	movs	r0, #25
 8000576:	f000 fdba 	bl	80010ee <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800057a:	2019      	movs	r0, #25
 800057c:	f000 fdd3 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <HAL_InitTick+0x9c>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <HAL_InitTick+0x9c>)
 8000586:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <HAL_InitTick+0x9c>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000598:	f107 0210 	add.w	r2, r7, #16
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4611      	mov	r1, r2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fb46 	bl	8001c34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005a8:	f001 fb30 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
 80005ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005b0:	4a13      	ldr	r2, [pc, #76]	; (8000600 <HAL_InitTick+0xa0>)
 80005b2:	fba2 2303 	umull	r2, r3, r2, r3
 80005b6:	0c9b      	lsrs	r3, r3, #18
 80005b8:	3b01      	subs	r3, #1
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_InitTick+0xa4>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <HAL_InitTick+0xa8>)
 80005c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <HAL_InitTick+0xa4>)
 80005c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <HAL_InitTick+0xa4>)
 80005cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_InitTick+0xa4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <HAL_InitTick+0xa4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <HAL_InitTick+0xa4>)
 80005de:	f001 fc2d 	bl	8001e3c <HAL_TIM_Base_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d104      	bne.n	80005f2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <HAL_InitTick+0xa4>)
 80005ea:	f001 fc7f 	bl	8001eec <HAL_TIM_Base_Start_IT>
 80005ee:	4603      	mov	r3, r0
 80005f0:	e000      	b.n	80005f4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3730      	adds	r7, #48	; 0x30
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	431bde83 	.word	0x431bde83
 8000604:	20000230 	.word	0x20000230
 8000608:	40012c00 	.word	0x40012c00

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <NMI_Handler+0x4>

08000612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <HardFault_Handler+0x4>

08000618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <MemManage_Handler+0x4>

0800061e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <BusFault_Handler+0x4>

08000624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <UsageFault_Handler+0x4>

0800062a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
	...

08000638 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <ADC1_2_IRQHandler+0x10>)
 800063e:	f000 fa3d 	bl	8000abc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200001fc 	.word	0x200001fc

0800064c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <TIM1_UP_IRQHandler+0x10>)
 8000652:	f001 fc9d 	bl	8001f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000230 	.word	0x20000230

08000660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000668:	4a14      	ldr	r2, [pc, #80]	; (80006bc <_sbrk+0x5c>)
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <_sbrk+0x60>)
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <_sbrk+0x64>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d102      	bne.n	8000682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <_sbrk+0x64>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <_sbrk+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	429a      	cmp	r2, r3
 800068e:	d207      	bcs.n	80006a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000690:	f004 f948 	bl	8004924 <__errno>
 8000694:	4603      	mov	r3, r0
 8000696:	220c      	movs	r2, #12
 8000698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	e009      	b.n	80006b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <_sbrk+0x64>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <_sbrk+0x64>)
 80006b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006b2:	68fb      	ldr	r3, [r7, #12]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20005000 	.word	0x20005000
 80006c0:	00000400 	.word	0x00000400
 80006c4:	2000009c 	.word	0x2000009c
 80006c8:	200002d0 	.word	0x200002d0

080006cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d8:	f7ff fff8 	bl	80006cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006de:	490c      	ldr	r1, [pc, #48]	; (8000710 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006e0:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a09      	ldr	r2, [pc, #36]	; (8000718 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006f4:	4c09      	ldr	r4, [pc, #36]	; (800071c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000702:	f004 f915 	bl	8004930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000706:	f7ff fd7f 	bl	8000208 <main>
  bx lr
 800070a:	4770      	bx	lr
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000714:	08004bc8 	.word	0x08004bc8
  ldr r2, =_sbss
 8000718:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800071c:	200002cc 	.word	0x200002cc

08000720 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <CAN1_RX1_IRQHandler>
	...

08000724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_Init+0x28>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_Init+0x28>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000734:	2003      	movs	r0, #3
 8000736:	f000 fccf 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff ff10 	bl	8000560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000740:	f7ff fe98 	bl	8000474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40022000 	.word	0x40022000

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4413      	add	r3, r2
 8000760:	4a03      	ldr	r2, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000008 	.word	0x20000008
 8000770:	20000278 	.word	0x20000278

08000774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000278 	.word	0x20000278

08000788 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e0be      	b.n	8000928 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d109      	bne.n	80007cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fe86 	bl	80004d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 fb8f 	bl	8000ef0 <ADC_ConversionStop_Disable>
 80007d2:	4603      	mov	r3, r0
 80007d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	2b00      	cmp	r3, #0
 80007e0:	f040 8099 	bne.w	8000916 <HAL_ADC_Init+0x18e>
 80007e4:	7dfb      	ldrb	r3, [r7, #23]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	f040 8095 	bne.w	8000916 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007f4:	f023 0302 	bic.w	r3, r3, #2
 80007f8:	f043 0202 	orr.w	r2, r3, #2
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000808:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7b1b      	ldrb	r3, [r3, #12]
 800080e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000810:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	4313      	orrs	r3, r2
 8000816:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000820:	d003      	beq.n	800082a <HAL_ADC_Init+0xa2>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d102      	bne.n	8000830 <HAL_ADC_Init+0xa8>
 800082a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082e:	e000      	b.n	8000832 <HAL_ADC_Init+0xaa>
 8000830:	2300      	movs	r3, #0
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	4313      	orrs	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7d1b      	ldrb	r3, [r3, #20]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d119      	bne.n	8000874 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7b1b      	ldrb	r3, [r3, #12]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d109      	bne.n	800085c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	3b01      	subs	r3, #1
 800084e:	035a      	lsls	r2, r3, #13
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	4313      	orrs	r3, r2
 8000854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	e00b      	b.n	8000874 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000860:	f043 0220 	orr.w	r2, r3, #32
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086c:	f043 0201 	orr.w	r2, r3, #1
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	430a      	orrs	r2, r1
 8000886:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	4b28      	ldr	r3, [pc, #160]	; (8000930 <HAL_ADC_Init+0x1a8>)
 8000890:	4013      	ands	r3, r2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	68b9      	ldr	r1, [r7, #8]
 8000898:	430b      	orrs	r3, r1
 800089a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008a4:	d003      	beq.n	80008ae <HAL_ADC_Init+0x126>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d104      	bne.n	80008b8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	051b      	lsls	r3, r3, #20
 80008b6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	430a      	orrs	r2, r1
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689a      	ldr	r2, [r3, #8]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_ADC_Init+0x1ac>)
 80008d4:	4013      	ands	r3, r2
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d10b      	bne.n	80008f4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e6:	f023 0303 	bic.w	r3, r3, #3
 80008ea:	f043 0201 	orr.w	r2, r3, #1
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008f2:	e018      	b.n	8000926 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f8:	f023 0312 	bic.w	r3, r3, #18
 80008fc:	f043 0210 	orr.w	r2, r3, #16
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000908:	f043 0201 	orr.w	r2, r3, #1
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000914:	e007      	b.n	8000926 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091a:	f043 0210 	orr.w	r2, r3, #16
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000926:	7dfb      	ldrb	r3, [r7, #23]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	ffe1f7fd 	.word	0xffe1f7fd
 8000934:	ff1f0efe 	.word	0xff1f0efe

08000938 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800094a:	2b01      	cmp	r3, #1
 800094c:	d101      	bne.n	8000952 <HAL_ADC_Start_IT+0x1a>
 800094e:	2302      	movs	r3, #2
 8000950:	e0a0      	b.n	8000a94 <HAL_ADC_Start_IT+0x15c>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 fa6e 	bl	8000e3c <ADC_Enable>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b00      	cmp	r3, #0
 8000968:	f040 808f 	bne.w	8000a8a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000970:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000974:	f023 0301 	bic.w	r3, r3, #1
 8000978:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a45      	ldr	r2, [pc, #276]	; (8000a9c <HAL_ADC_Start_IT+0x164>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d105      	bne.n	8000996 <HAL_ADC_Start_IT+0x5e>
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <HAL_ADC_Start_IT+0x168>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d115      	bne.n	80009c2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800099a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d026      	beq.n	80009fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009c0:	e01d      	b.n	80009fe <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a33      	ldr	r2, [pc, #204]	; (8000aa0 <HAL_ADC_Start_IT+0x168>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d004      	beq.n	80009e2 <HAL_ADC_Start_IT+0xaa>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <HAL_ADC_Start_IT+0x164>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d10d      	bne.n	80009fe <HAL_ADC_Start_IT+0xc6>
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <HAL_ADC_Start_IT+0x168>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d007      	beq.n	80009fe <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d006      	beq.n	8000a18 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	f023 0206 	bic.w	r2, r3, #6
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a16:	e002      	b.n	8000a1e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f06f 0202 	mvn.w	r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 0220 	orr.w	r2, r2, #32
 8000a3e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a4e:	d113      	bne.n	8000a78 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a54:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <HAL_ADC_Start_IT+0x164>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d105      	bne.n	8000a66 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_ADC_Start_IT+0x168>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d108      	bne.n	8000a78 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	689a      	ldr	r2, [r3, #8]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	e00c      	b.n	8000a92 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	e003      	b.n	8000a92 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40012800 	.word	0x40012800
 8000aa0:	40012400 	.word	0x40012400

08000aa4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	f003 0320 	and.w	r3, r3, #32
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d03e      	beq.n	8000b5c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d039      	beq.n	8000b5c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d105      	bne.n	8000b00 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b0e:	d11d      	bne.n	8000b4c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d119      	bne.n	8000b4c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 0220 	bic.w	r2, r2, #32
 8000b26:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d105      	bne.n	8000b4c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	f043 0201 	orr.w	r2, r3, #1
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fb31 	bl	80001b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f06f 0212 	mvn.w	r2, #18
 8000b5a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d04d      	beq.n	8000c02 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d048      	beq.n	8000c02 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d105      	bne.n	8000b88 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000b92:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000b96:	d012      	beq.n	8000bbe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d125      	bne.n	8000bf2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000bb0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bb4:	d11d      	bne.n	8000bf2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d119      	bne.n	8000bf2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000bcc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d105      	bne.n	8000bf2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bea:	f043 0201 	orr.w	r2, r3, #1
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f9bd 	bl	8000f72 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f06f 020c 	mvn.w	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d012      	beq.n	8000c32 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00d      	beq.n	8000c32 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f000 f809 	bl	8000c3a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f06f 0201 	mvn.w	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr

08000c4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d101      	bne.n	8000c6c <HAL_ADC_ConfigChannel+0x20>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e0dc      	b.n	8000e26 <HAL_ADC_ConfigChannel+0x1da>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b06      	cmp	r3, #6
 8000c7a:	d81c      	bhi.n	8000cb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3b05      	subs	r3, #5
 8000c8e:	221f      	movs	r2, #31
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	4019      	ands	r1, r3
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	3b05      	subs	r3, #5
 8000ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8000cb4:	e03c      	b.n	8000d30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b0c      	cmp	r3, #12
 8000cbc:	d81c      	bhi.n	8000cf8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	3b23      	subs	r3, #35	; 0x23
 8000cd0:	221f      	movs	r2, #31
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	4019      	ands	r1, r3
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	6818      	ldr	r0, [r3, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	3b23      	subs	r3, #35	; 0x23
 8000cea:	fa00 f203 	lsl.w	r2, r0, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8000cf6:	e01b      	b.n	8000d30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	3b41      	subs	r3, #65	; 0x41
 8000d0a:	221f      	movs	r2, #31
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4019      	ands	r1, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	3b41      	subs	r3, #65	; 0x41
 8000d24:	fa00 f203 	lsl.w	r2, r0, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	d91c      	bls.n	8000d72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68d9      	ldr	r1, [r3, #12]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	3b1e      	subs	r3, #30
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4019      	ands	r1, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	6898      	ldr	r0, [r3, #8]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	3b1e      	subs	r3, #30
 8000d64:	fa00 f203 	lsl.w	r2, r0, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	e019      	b.n	8000da6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6919      	ldr	r1, [r3, #16]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	2207      	movs	r2, #7
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4019      	ands	r1, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	6898      	ldr	r0, [r3, #8]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b10      	cmp	r3, #16
 8000dac:	d003      	beq.n	8000db6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000db2:	2b11      	cmp	r3, #17
 8000db4:	d132      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d125      	bne.n	8000e0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d126      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ddc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b10      	cmp	r3, #16
 8000de4:	d11a      	bne.n	8000e1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_ADC_ConfigChannel+0x1e8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_ADC_ConfigChannel+0x1ec>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	0c9a      	lsrs	r2, r3, #18
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dfc:	e002      	b.n	8000e04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f9      	bne.n	8000dfe <HAL_ADC_ConfigChannel+0x1b2>
 8000e0a:	e007      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e10:	f043 0220 	orr.w	r2, r3, #32
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40012400 	.word	0x40012400
 8000e34:	20000000 	.word	0x20000000
 8000e38:	431bde83 	.word	0x431bde83

08000e3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d040      	beq.n	8000edc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f042 0201 	orr.w	r2, r2, #1
 8000e68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <ADC_Enable+0xac>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <ADC_Enable+0xb0>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	0c9b      	lsrs	r3, r3, #18
 8000e76:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e78:	e002      	b.n	8000e80 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f9      	bne.n	8000e7a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e86:	f7ff fc75 	bl	8000774 <HAL_GetTick>
 8000e8a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e8c:	e01f      	b.n	8000ece <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e8e:	f7ff fc71 	bl	8000774 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d918      	bls.n	8000ece <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d011      	beq.n	8000ece <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eae:	f043 0210 	orr.w	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f043 0201 	orr.w	r2, r3, #1
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e007      	b.n	8000ede <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d1d8      	bne.n	8000e8e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	431bde83 	.word	0x431bde83

08000ef0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d12e      	bne.n	8000f68 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f1a:	f7ff fc2b 	bl	8000774 <HAL_GetTick>
 8000f1e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f20:	e01b      	b.n	8000f5a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f22:	f7ff fc27 	bl	8000774 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d914      	bls.n	8000f5a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10d      	bne.n	8000f5a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f42:	f043 0210 	orr.w	r2, r3, #16
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e007      	b.n	8000f6a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d0dc      	beq.n	8000f22 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	60d3      	str	r3, [r2, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	f003 0307 	and.w	r3, r3, #7
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db0b      	blt.n	8001012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f003 021f 	and.w	r2, r3, #31
 8001000:	4906      	ldr	r1, [pc, #24]	; (800101c <__NVIC_EnableIRQ+0x34>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	2001      	movs	r0, #1
 800100a:	fa00 f202 	lsl.w	r2, r0, r2
 800100e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff4f 	bl	8000f84 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff64 	bl	8000fcc <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ffb2 	bl	8001074 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff81 	bl	8001020 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff57 	bl	8000fe8 <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b08b      	sub	sp, #44	; 0x2c
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	e169      	b.n	800142c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001158:	2201      	movs	r2, #1
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8158 	bne.w	8001426 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4a9a      	ldr	r2, [pc, #616]	; (80013e4 <HAL_GPIO_Init+0x2a0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d05e      	beq.n	800123e <HAL_GPIO_Init+0xfa>
 8001180:	4a98      	ldr	r2, [pc, #608]	; (80013e4 <HAL_GPIO_Init+0x2a0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d875      	bhi.n	8001272 <HAL_GPIO_Init+0x12e>
 8001186:	4a98      	ldr	r2, [pc, #608]	; (80013e8 <HAL_GPIO_Init+0x2a4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d058      	beq.n	800123e <HAL_GPIO_Init+0xfa>
 800118c:	4a96      	ldr	r2, [pc, #600]	; (80013e8 <HAL_GPIO_Init+0x2a4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d86f      	bhi.n	8001272 <HAL_GPIO_Init+0x12e>
 8001192:	4a96      	ldr	r2, [pc, #600]	; (80013ec <HAL_GPIO_Init+0x2a8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d052      	beq.n	800123e <HAL_GPIO_Init+0xfa>
 8001198:	4a94      	ldr	r2, [pc, #592]	; (80013ec <HAL_GPIO_Init+0x2a8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d869      	bhi.n	8001272 <HAL_GPIO_Init+0x12e>
 800119e:	4a94      	ldr	r2, [pc, #592]	; (80013f0 <HAL_GPIO_Init+0x2ac>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d04c      	beq.n	800123e <HAL_GPIO_Init+0xfa>
 80011a4:	4a92      	ldr	r2, [pc, #584]	; (80013f0 <HAL_GPIO_Init+0x2ac>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d863      	bhi.n	8001272 <HAL_GPIO_Init+0x12e>
 80011aa:	4a92      	ldr	r2, [pc, #584]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d046      	beq.n	800123e <HAL_GPIO_Init+0xfa>
 80011b0:	4a90      	ldr	r2, [pc, #576]	; (80013f4 <HAL_GPIO_Init+0x2b0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d85d      	bhi.n	8001272 <HAL_GPIO_Init+0x12e>
 80011b6:	2b12      	cmp	r3, #18
 80011b8:	d82a      	bhi.n	8001210 <HAL_GPIO_Init+0xcc>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d859      	bhi.n	8001272 <HAL_GPIO_Init+0x12e>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <HAL_GPIO_Init+0x80>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	0800123f 	.word	0x0800123f
 80011c8:	08001219 	.word	0x08001219
 80011cc:	0800122b 	.word	0x0800122b
 80011d0:	0800126d 	.word	0x0800126d
 80011d4:	08001273 	.word	0x08001273
 80011d8:	08001273 	.word	0x08001273
 80011dc:	08001273 	.word	0x08001273
 80011e0:	08001273 	.word	0x08001273
 80011e4:	08001273 	.word	0x08001273
 80011e8:	08001273 	.word	0x08001273
 80011ec:	08001273 	.word	0x08001273
 80011f0:	08001273 	.word	0x08001273
 80011f4:	08001273 	.word	0x08001273
 80011f8:	08001273 	.word	0x08001273
 80011fc:	08001273 	.word	0x08001273
 8001200:	08001273 	.word	0x08001273
 8001204:	08001273 	.word	0x08001273
 8001208:	08001221 	.word	0x08001221
 800120c:	08001235 	.word	0x08001235
 8001210:	4a79      	ldr	r2, [pc, #484]	; (80013f8 <HAL_GPIO_Init+0x2b4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d013      	beq.n	800123e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001216:	e02c      	b.n	8001272 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	623b      	str	r3, [r7, #32]
          break;
 800121e:	e029      	b.n	8001274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	3304      	adds	r3, #4
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e024      	b.n	8001274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	3308      	adds	r3, #8
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e01f      	b.n	8001274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	330c      	adds	r3, #12
 800123a:	623b      	str	r3, [r7, #32]
          break;
 800123c:	e01a      	b.n	8001274 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001246:	2304      	movs	r3, #4
 8001248:	623b      	str	r3, [r7, #32]
          break;
 800124a:	e013      	b.n	8001274 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d105      	bne.n	8001260 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001254:	2308      	movs	r3, #8
 8001256:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	611a      	str	r2, [r3, #16]
          break;
 800125e:	e009      	b.n	8001274 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001260:	2308      	movs	r3, #8
 8001262:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	615a      	str	r2, [r3, #20]
          break;
 800126a:	e003      	b.n	8001274 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
          break;
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x130>
          break;
 8001272:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	2bff      	cmp	r3, #255	; 0xff
 8001278:	d801      	bhi.n	800127e <HAL_GPIO_Init+0x13a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	e001      	b.n	8001282 <HAL_GPIO_Init+0x13e>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3304      	adds	r3, #4
 8001282:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2bff      	cmp	r3, #255	; 0xff
 8001288:	d802      	bhi.n	8001290 <HAL_GPIO_Init+0x14c>
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	e002      	b.n	8001296 <HAL_GPIO_Init+0x152>
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	3b08      	subs	r3, #8
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	210f      	movs	r1, #15
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	401a      	ands	r2, r3
 80012a8:	6a39      	ldr	r1, [r7, #32]
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	431a      	orrs	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80b1 	beq.w	8001426 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c4:	4b4d      	ldr	r3, [pc, #308]	; (80013fc <HAL_GPIO_Init+0x2b8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <HAL_GPIO_Init+0x2b8>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <HAL_GPIO_Init+0x2b8>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012dc:	4a48      	ldr	r2, [pc, #288]	; (8001400 <HAL_GPIO_Init+0x2bc>)
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a40      	ldr	r2, [pc, #256]	; (8001404 <HAL_GPIO_Init+0x2c0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d013      	beq.n	8001330 <HAL_GPIO_Init+0x1ec>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <HAL_GPIO_Init+0x2c4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d00d      	beq.n	800132c <HAL_GPIO_Init+0x1e8>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a3e      	ldr	r2, [pc, #248]	; (800140c <HAL_GPIO_Init+0x2c8>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x1e4>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a3d      	ldr	r2, [pc, #244]	; (8001410 <HAL_GPIO_Init+0x2cc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <HAL_GPIO_Init+0x1e0>
 8001320:	2303      	movs	r3, #3
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001324:	2304      	movs	r3, #4
 8001326:	e004      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001328:	2302      	movs	r3, #2
 800132a:	e002      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <HAL_GPIO_Init+0x1ee>
 8001330:	2300      	movs	r3, #0
 8001332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001334:	f002 0203 	and.w	r2, r2, #3
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	4093      	lsls	r3, r2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001342:	492f      	ldr	r1, [pc, #188]	; (8001400 <HAL_GPIO_Init+0x2bc>)
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3302      	adds	r3, #2
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800135c:	4b2d      	ldr	r3, [pc, #180]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	492c      	ldr	r1, [pc, #176]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	43db      	mvns	r3, r3
 8001372:	4928      	ldr	r1, [pc, #160]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 8001374:	4013      	ands	r3, r2
 8001376:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d006      	beq.n	8001392 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	4922      	ldr	r1, [pc, #136]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	60cb      	str	r3, [r1, #12]
 8001390:	e006      	b.n	80013a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	43db      	mvns	r3, r3
 800139a:	491e      	ldr	r1, [pc, #120]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 800139c:	4013      	ands	r3, r2
 800139e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4918      	ldr	r1, [pc, #96]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4914      	ldr	r1, [pc, #80]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d021      	beq.n	8001418 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	490e      	ldr	r1, [pc, #56]	; (8001414 <HAL_GPIO_Init+0x2d0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
 80013e0:	e021      	b.n	8001426 <HAL_GPIO_Init+0x2e2>
 80013e2:	bf00      	nop
 80013e4:	10320000 	.word	0x10320000
 80013e8:	10310000 	.word	0x10310000
 80013ec:	10220000 	.word	0x10220000
 80013f0:	10210000 	.word	0x10210000
 80013f4:	10120000 	.word	0x10120000
 80013f8:	10110000 	.word	0x10110000
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010000 	.word	0x40010000
 8001404:	40010800 	.word	0x40010800
 8001408:	40010c00 	.word	0x40010c00
 800140c:	40011000 	.word	0x40011000
 8001410:	40011400 	.word	0x40011400
 8001414:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_GPIO_Init+0x304>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	43db      	mvns	r3, r3
 8001420:	4909      	ldr	r1, [pc, #36]	; (8001448 <HAL_GPIO_Init+0x304>)
 8001422:	4013      	ands	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	3301      	adds	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	fa22 f303 	lsr.w	r3, r2, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	f47f ae8e 	bne.w	8001158 <HAL_GPIO_Init+0x14>
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	372c      	adds	r7, #44	; 0x2c
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001468:	e003      	b.n	8001472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	611a      	str	r2, [r3, #16]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e26c      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8087 	beq.w	80015aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800149c:	4b92      	ldr	r3, [pc, #584]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d00c      	beq.n	80014c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a8:	4b8f      	ldr	r3, [pc, #572]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d112      	bne.n	80014da <HAL_RCC_OscConfig+0x5e>
 80014b4:	4b8c      	ldr	r3, [pc, #560]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c0:	d10b      	bne.n	80014da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c2:	4b89      	ldr	r3, [pc, #548]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d06c      	beq.n	80015a8 <HAL_RCC_OscConfig+0x12c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d168      	bne.n	80015a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e246      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x76>
 80014e4:	4b80      	ldr	r3, [pc, #512]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a7f      	ldr	r2, [pc, #508]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e02e      	b.n	8001550 <HAL_RCC_OscConfig+0xd4>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x98>
 80014fa:	4b7b      	ldr	r3, [pc, #492]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a7a      	ldr	r2, [pc, #488]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b78      	ldr	r3, [pc, #480]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a77      	ldr	r2, [pc, #476]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800150c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0xd4>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0xbc>
 800151e:	4b72      	ldr	r3, [pc, #456]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a71      	ldr	r2, [pc, #452]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b6f      	ldr	r3, [pc, #444]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6e      	ldr	r2, [pc, #440]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xd4>
 8001538:	4b6b      	ldr	r3, [pc, #428]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a6a      	ldr	r2, [pc, #424]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a67      	ldr	r2, [pc, #412]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff f90c 	bl	8000774 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff f908 	bl	8000774 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1fa      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0xe4>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff f8f8 	bl	8000774 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff f8f4 	bl	8000774 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1e6      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x10c>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d063      	beq.n	800167e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b6:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015c2:	4b49      	ldr	r3, [pc, #292]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d11c      	bne.n	8001608 <HAL_RCC_OscConfig+0x18c>
 80015ce:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d116      	bne.n	8001608 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	4b43      	ldr	r3, [pc, #268]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x176>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e1ba      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4939      	ldr	r1, [pc, #228]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	e03a      	b.n	800167e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001610:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_RCC_OscConfig+0x270>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff f8ad 	bl	8000774 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff f8a9 	bl	8000774 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e19b      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4927      	ldr	r1, [pc, #156]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_RCC_OscConfig+0x270>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff f88c 	bl	8000774 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff f888 	bl	8000774 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e17a      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d03a      	beq.n	8001700 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d019      	beq.n	80016c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <HAL_RCC_OscConfig+0x274>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff f86c 	bl	8000774 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff f868 	bl	8000774 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e15a      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 fae8 	bl	8001c94 <RCC_Delay>
 80016c4:	e01c      	b.n	8001700 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_RCC_OscConfig+0x274>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff f852 	bl	8000774 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d2:	e00f      	b.n	80016f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff f84e 	bl	8000774 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d908      	bls.n	80016f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e140      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	42420000 	.word	0x42420000
 80016f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	4b9e      	ldr	r3, [pc, #632]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1e9      	bne.n	80016d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80a6 	beq.w	800185a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001712:	4b97      	ldr	r3, [pc, #604]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10d      	bne.n	800173a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b94      	ldr	r3, [pc, #592]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a93      	ldr	r2, [pc, #588]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b91      	ldr	r3, [pc, #580]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001736:	2301      	movs	r3, #1
 8001738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b8e      	ldr	r3, [pc, #568]	; (8001974 <HAL_RCC_OscConfig+0x4f8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d118      	bne.n	8001778 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001746:	4b8b      	ldr	r3, [pc, #556]	; (8001974 <HAL_RCC_OscConfig+0x4f8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a8a      	ldr	r2, [pc, #552]	; (8001974 <HAL_RCC_OscConfig+0x4f8>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001752:	f7ff f80f 	bl	8000774 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175a:	f7ff f80b 	bl	8000774 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b64      	cmp	r3, #100	; 0x64
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0fd      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	4b81      	ldr	r3, [pc, #516]	; (8001974 <HAL_RCC_OscConfig+0x4f8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f0      	beq.n	800175a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x312>
 8001780:	4b7b      	ldr	r3, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a7a      	ldr	r2, [pc, #488]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	e02d      	b.n	80017ea <HAL_RCC_OscConfig+0x36e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x334>
 8001796:	4b76      	ldr	r3, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a75      	ldr	r2, [pc, #468]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6213      	str	r3, [r2, #32]
 80017a2:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a72      	ldr	r2, [pc, #456]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	f023 0304 	bic.w	r3, r3, #4
 80017ac:	6213      	str	r3, [r2, #32]
 80017ae:	e01c      	b.n	80017ea <HAL_RCC_OscConfig+0x36e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b05      	cmp	r3, #5
 80017b6:	d10c      	bne.n	80017d2 <HAL_RCC_OscConfig+0x356>
 80017b8:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a6c      	ldr	r2, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4a69      	ldr	r2, [pc, #420]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6213      	str	r3, [r2, #32]
 80017d0:	e00b      	b.n	80017ea <HAL_RCC_OscConfig+0x36e>
 80017d2:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a66      	ldr	r2, [pc, #408]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	6213      	str	r3, [r2, #32]
 80017de:	4b64      	ldr	r3, [pc, #400]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4a63      	ldr	r2, [pc, #396]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80017e4:	f023 0304 	bic.w	r3, r3, #4
 80017e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d015      	beq.n	800181e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7fe ffbf 	bl	8000774 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7fe ffbb 	bl	8000774 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e0ab      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001810:	4b57      	ldr	r3, [pc, #348]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0ee      	beq.n	80017fa <HAL_RCC_OscConfig+0x37e>
 800181c:	e014      	b.n	8001848 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7fe ffa9 	bl	8000774 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7fe ffa5 	bl	8000774 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e095      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	4b4c      	ldr	r3, [pc, #304]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1ee      	bne.n	8001826 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d105      	bne.n	800185a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184e:	4b48      	ldr	r3, [pc, #288]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a47      	ldr	r2, [pc, #284]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001858:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8081 	beq.w	8001966 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001864:	4b42      	ldr	r3, [pc, #264]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b08      	cmp	r3, #8
 800186e:	d061      	beq.n	8001934 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d146      	bne.n	8001906 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <HAL_RCC_OscConfig+0x4fc>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7fe ff79 	bl	8000774 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001886:	f7fe ff75 	bl	8000774 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e067      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001898:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d108      	bne.n	80018c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	492d      	ldr	r1, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a19      	ldr	r1, [r3, #32]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	430b      	orrs	r3, r1
 80018d2:	4927      	ldr	r1, [pc, #156]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_RCC_OscConfig+0x4fc>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7fe ff49 	bl	8000774 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e6:	f7fe ff45 	bl	8000774 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e037      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x46a>
 8001904:	e02f      	b.n	8001966 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_RCC_OscConfig+0x4fc>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7fe ff32 	bl	8000774 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7fe ff2e 	bl	8000774 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e020      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x498>
 8001932:	e018      	b.n	8001966 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e013      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	429a      	cmp	r2, r3
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	40007000 	.word	0x40007000
 8001978:	42420060 	.word	0x42420060

0800197c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0d0      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d910      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 0207 	bic.w	r2, r3, #7
 80019a6:	4965      	ldr	r1, [pc, #404]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0b8      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d020      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a58      	ldr	r2, [pc, #352]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f0:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fc:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	494d      	ldr	r1, [pc, #308]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d040      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d115      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e07f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e073      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e06b      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5a:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f023 0203 	bic.w	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4936      	ldr	r1, [pc, #216]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a6c:	f7fe fe82 	bl	8000774 <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a74:	f7fe fe7e 	bl	8000774 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e053      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 020c 	and.w	r2, r3, #12
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d1eb      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d210      	bcs.n	8001acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 0207 	bic.w	r2, r3, #7
 8001ab2:	4922      	ldr	r1, [pc, #136]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e032      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4916      	ldr	r1, [pc, #88]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	490e      	ldr	r1, [pc, #56]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b0a:	f000 f821 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	490a      	ldr	r1, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	5ccb      	ldrb	r3, [r1, r3]
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1cc>)
 8001b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x1d0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fd18 	bl	8000560 <HAL_InitTick>

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08004b94 	.word	0x08004b94
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x30>
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x36>
 8001b7e:	e027      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b82:	613b      	str	r3, [r7, #16]
      break;
 8001b84:	e027      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	0c9b      	lsrs	r3, r3, #18
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d010      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0c5b      	lsrs	r3, r3, #17
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb2:	fb02 f203 	mul.w	r2, r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e004      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	613b      	str	r3, [r7, #16]
      break;
 8001bce:	e002      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bd2:	613b      	str	r3, [r7, #16]
      break;
 8001bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd6:	693b      	ldr	r3, [r7, #16]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	007a1200 	.word	0x007a1200
 8001bec:	08004bac 	.word	0x08004bac
 8001bf0:	08004bbc 	.word	0x08004bbc
 8001bf4:	003d0900 	.word	0x003d0900

08001bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000000 	.word	0x20000000

08001c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c10:	f7ff fff2 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0adb      	lsrs	r3, r3, #11
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08004ba4 	.word	0x08004ba4

08001c34 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	220f      	movs	r2, #15
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_RCC_GetClockConfig+0x58>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_RCC_GetClockConfig+0x58>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_GetClockConfig+0x58>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_RCC_GetClockConfig+0x58>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	08db      	lsrs	r3, r3, #3
 8001c6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_RCC_GetClockConfig+0x5c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0207 	and.w	r2, r3, #7
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40022000 	.word	0x40022000

08001c94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <RCC_Delay+0x34>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <RCC_Delay+0x38>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0a5b      	lsrs	r3, r3, #9
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cb0:	bf00      	nop
  }
  while (Delay --);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1e5a      	subs	r2, r3, #1
 8001cb6:	60fa      	str	r2, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f9      	bne.n	8001cb0 <RCC_Delay+0x1c>
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	10624dd3 	.word	0x10624dd3

08001cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d07d      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d06:	61d3      	str	r3, [r2, #28]
 8001d08:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d118      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d24:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a42      	ldr	r2, [pc, #264]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d30:	f7fe fd20 	bl	8000774 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	e008      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7fe fd1c 	bl	8000774 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e06d      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d56:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d02e      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d027      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d84:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d8a:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d014      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7fe fceb 	bl	8000774 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7fe fce7 	bl	8000774 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e036      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ee      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4917      	ldr	r1, [pc, #92]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	490b      	ldr	r1, [pc, #44]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d008      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4904      	ldr	r1, [pc, #16]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40007000 	.word	0x40007000
 8001e38:	42420440 	.word	0x42420440

08001e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e041      	b.n	8001ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d106      	bne.n	8001e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f839 	bl	8001eda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3304      	adds	r3, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f000 f9b4 	bl	80021e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d001      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e03a      	b.n	8001f7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <HAL_TIM_Base_Start_IT+0x98>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00e      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x58>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d009      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x58>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x58>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <HAL_TIM_Base_Start_IT+0xa0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d111      	bne.n	8001f68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d010      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f66:	e007      	b.n	8001f78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40000800 	.word	0x40000800

08001f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d122      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d11b      	bne.n	8001fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0202 	mvn.w	r2, #2
 8001fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8ed 	bl	80021b2 <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8e0 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8ef 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b04      	cmp	r3, #4
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0204 	mvn.w	r2, #4
 8002010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2202      	movs	r2, #2
 8002016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8c3 	bl	80021b2 <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8b6 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f8c5 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b08      	cmp	r3, #8
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b08      	cmp	r3, #8
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0208 	mvn.w	r2, #8
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2204      	movs	r2, #4
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f899 	bl	80021b2 <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f88c 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f89b 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b10      	cmp	r3, #16
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0310 	and.w	r3, r3, #16
 80020ac:	2b10      	cmp	r3, #16
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0210 	mvn.w	r2, #16
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2208      	movs	r2, #8
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f86f 	bl	80021b2 <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f862 	bl	80021a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f871 	bl	80021c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0201 	mvn.w	r2, #1
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe f998 	bl	8000444 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b80      	cmp	r3, #128	; 0x80
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212c:	2b80      	cmp	r3, #128	; 0x80
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8bf 	bl	80022be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b40      	cmp	r3, #64	; 0x40
 800214c:	d10e      	bne.n	800216c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d107      	bne.n	800216c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f835 	bl	80021d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b20      	cmp	r3, #32
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b20      	cmp	r3, #32
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0220 	mvn.w	r2, #32
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f88a 	bl	80022ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <TIM_Base_SetConfig+0xb8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00b      	beq.n	8002218 <TIM_Base_SetConfig+0x30>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002206:	d007      	beq.n	8002218 <TIM_Base_SetConfig+0x30>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a26      	ldr	r2, [pc, #152]	; (80022a4 <TIM_Base_SetConfig+0xbc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d003      	beq.n	8002218 <TIM_Base_SetConfig+0x30>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <TIM_Base_SetConfig+0xc0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d108      	bne.n	800222a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <TIM_Base_SetConfig+0xb8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00b      	beq.n	800224a <TIM_Base_SetConfig+0x62>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002238:	d007      	beq.n	800224a <TIM_Base_SetConfig+0x62>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <TIM_Base_SetConfig+0xbc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0x62>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <TIM_Base_SetConfig+0xc0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <TIM_Base_SetConfig+0xb8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d103      	bne.n	8002290 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	615a      	str	r2, [r3, #20]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40012c00 	.word	0x40012c00
 80022a4:	40000400 	.word	0x40000400
 80022a8:	40000800 	.word	0x40000800

080022ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <xQueueGenericReset>:
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
 80022da:	2301      	movs	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <xQueueGenericReset+0x2e>
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <xQueueGenericReset+0x2c>
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d05d      	beq.n	80023c0 <xQueueGenericReset+0xf0>
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d059      	beq.n	80023c0 <xQueueGenericReset+0xf0>
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	2100      	movs	r1, #0
 8002316:	fba3 2302 	umull	r2, r3, r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d000      	beq.n	8002320 <xQueueGenericReset+0x50>
 800231e:	2101      	movs	r1, #1
 8002320:	460b      	mov	r3, r1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d14c      	bne.n	80023c0 <xQueueGenericReset+0xf0>
 8002326:	f002 f91b 	bl	8004560 <vPortEnterCritical>
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	6939      	ldr	r1, [r7, #16]
 8002334:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	441a      	add	r2, r3
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2200      	movs	r2, #0
 8002344:	639a      	str	r2, [r3, #56]	; 0x38
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	3b01      	subs	r3, #1
 8002358:	6939      	ldr	r1, [r7, #16]
 800235a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	441a      	add	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	22ff      	movs	r2, #255	; 0xff
 800236a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	22ff      	movs	r2, #255	; 0xff
 8002372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d114      	bne.n	80023a6 <xQueueGenericReset+0xd6>
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01a      	beq.n	80023ba <xQueueGenericReset+0xea>
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	3310      	adds	r3, #16
 8002388:	4618      	mov	r0, r3
 800238a:	f001 f931 	bl	80035f0 <xTaskRemoveFromEventList>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d012      	beq.n	80023ba <xQueueGenericReset+0xea>
 8002394:	4b15      	ldr	r3, [pc, #84]	; (80023ec <xQueueGenericReset+0x11c>)
 8002396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	e009      	b.n	80023ba <xQueueGenericReset+0xea>
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	3310      	adds	r3, #16
 80023aa:	4618      	mov	r0, r3
 80023ac:	f001 ff56 	bl	800425c <vListInitialise>
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	3324      	adds	r3, #36	; 0x24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f001 ff51 	bl	800425c <vListInitialise>
 80023ba:	f002 f901 	bl	80045c0 <vPortExitCritical>
 80023be:	e001      	b.n	80023c4 <xQueueGenericReset+0xf4>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <xQueueGenericReset+0x110>
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <xQueueGenericReset+0x10e>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000ed04 	.word	0xe000ed04

080023f0 <xQueueGenericCreate>:
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	4613      	mov	r3, r2
 80023fc:	71fb      	strb	r3, [r7, #7]
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d02e      	beq.n	8002466 <xQueueGenericCreate+0x76>
 8002408:	2100      	movs	r1, #0
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	fba3 2302 	umull	r2, r3, r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d000      	beq.n	8002418 <xQueueGenericCreate+0x28>
 8002416:	2101      	movs	r1, #1
 8002418:	460b      	mov	r3, r1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d123      	bne.n	8002466 <xQueueGenericCreate+0x76>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800242a:	d81c      	bhi.n	8002466 <xQueueGenericCreate+0x76>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	3350      	adds	r3, #80	; 0x50
 800243a:	4618      	mov	r0, r3
 800243c:	f001 feea 	bl	8004214 <pvPortMalloc>
 8002440:	61f8      	str	r0, [r7, #28]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01c      	beq.n	8002482 <xQueueGenericCreate+0x92>
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3350      	adds	r3, #80	; 0x50
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	79fa      	ldrb	r2, [r7, #7]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4613      	mov	r3, r2
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f814 	bl	800248c <prvInitialiseNewQueue>
 8002464:	e00d      	b.n	8002482 <xQueueGenericCreate+0x92>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <xQueueGenericCreate+0x92>
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <xQueueGenericCreate+0x90>
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4618      	mov	r0, r3
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <prvInitialiseNewQueue>:
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	70fb      	strb	r3, [r7, #3]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d103      	bne.n	80024a8 <prvInitialiseNewQueue+0x1c>
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e002      	b.n	80024ae <prvInitialiseNewQueue+0x22>
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	641a      	str	r2, [r3, #64]	; 0x40
 80024ba:	2101      	movs	r1, #1
 80024bc:	69b8      	ldr	r0, [r7, #24]
 80024be:	f7ff ff07 	bl	80022d0 <xQueueGenericReset>
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <xQueueGenericSendFromISR>:
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b092      	sub	sp, #72	; 0x48
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	643b      	str	r3, [r7, #64]	; 0x40
 80024e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10a      	bne.n	8002500 <xQueueGenericSendFromISR+0x2e>
 80024ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ee:	f383 8811 	msr	BASEPRI, r3
 80024f2:	f3bf 8f6f 	isb	sy
 80024f6:	f3bf 8f4f 	dsb	sy
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fc:	bf00      	nop
 80024fe:	e7fe      	b.n	80024fe <xQueueGenericSendFromISR+0x2c>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <xQueueGenericSendFromISR+0x3c>
 8002506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <xQueueGenericSendFromISR+0x40>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <xQueueGenericSendFromISR+0x42>
 8002512:	2300      	movs	r3, #0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <xQueueGenericSendFromISR+0x5c>
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
 800252a:	bf00      	nop
 800252c:	e7fe      	b.n	800252c <xQueueGenericSendFromISR+0x5a>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d103      	bne.n	800253c <xQueueGenericSendFromISR+0x6a>
 8002534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <xQueueGenericSendFromISR+0x6e>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <xQueueGenericSendFromISR+0x70>
 8002540:	2300      	movs	r3, #0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <xQueueGenericSendFromISR+0x8a>
 8002546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	bf00      	nop
 800255a:	e7fe      	b.n	800255a <xQueueGenericSendFromISR+0x88>
 800255c:	f002 f9a4 	bl	80048a8 <vPortValidateInterruptPriority>
 8002560:	f3ef 8211 	mrs	r2, BASEPRI
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	623a      	str	r2, [r7, #32]
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800257c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	429a      	cmp	r2, r3
 8002586:	d302      	bcc.n	800258e <xQueueGenericSendFromISR+0xbc>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d146      	bne.n	800261c <xQueueGenericSendFromISR+0x14a>
 800258e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002594:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80025a4:	f000 f928 	bl	80027f8 <prvCopyDataToQueue>
 80025a8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d112      	bne.n	80025d8 <xQueueGenericSendFromISR+0x106>
 80025b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d02d      	beq.n	8002616 <xQueueGenericSendFromISR+0x144>
 80025ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025bc:	3324      	adds	r3, #36	; 0x24
 80025be:	4618      	mov	r0, r3
 80025c0:	f001 f816 	bl	80035f0 <xTaskRemoveFromEventList>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d025      	beq.n	8002616 <xQueueGenericSendFromISR+0x144>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d022      	beq.n	8002616 <xQueueGenericSendFromISR+0x144>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e01e      	b.n	8002616 <xQueueGenericSendFromISR+0x144>
 80025d8:	f000 fdc8 	bl	800316c <uxTaskGetNumberOfTasks>
 80025dc:	6338      	str	r0, [r7, #48]	; 0x30
 80025de:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80025e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d916      	bls.n	8002616 <xQueueGenericSendFromISR+0x144>
 80025e8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80025ec:	2b7f      	cmp	r3, #127	; 0x7f
 80025ee:	d10a      	bne.n	8002606 <xQueueGenericSendFromISR+0x134>
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericSendFromISR+0x132>
 8002606:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800260a:	3301      	adds	r3, #1
 800260c:	b2db      	uxtb	r3, r3
 800260e:	b25a      	sxtb	r2, r3
 8002610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002616:	2301      	movs	r3, #1
 8002618:	647b      	str	r3, [r7, #68]	; 0x44
 800261a:	e001      	b.n	8002620 <xQueueGenericSendFromISR+0x14e>
 800261c:	2300      	movs	r3, #0
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
 8002620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f383 8811 	msr	BASEPRI, r3
 800262a:	bf00      	nop
 800262c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262e:	4618      	mov	r0, r3
 8002630:	3748      	adds	r7, #72	; 0x48
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <xQueueReceive>:
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	2300      	movs	r3, #0
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <xQueueReceive+0x30>
 8002652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	bf00      	nop
 8002666:	e7fe      	b.n	8002666 <xQueueReceive+0x2e>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <xQueueReceive+0x3e>
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <xQueueReceive+0x42>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <xQueueReceive+0x44>
 800267a:	2300      	movs	r3, #0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <xQueueReceive+0x5e>
 8002680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	bf00      	nop
 8002694:	e7fe      	b.n	8002694 <xQueueReceive+0x5c>
 8002696:	f001 fa19 	bl	8003acc <xTaskGetSchedulerState>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <xQueueReceive+0x6e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <xQueueReceive+0x72>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <xQueueReceive+0x74>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <xQueueReceive+0x8e>
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	bf00      	nop
 80026c4:	e7fe      	b.n	80026c4 <xQueueReceive+0x8c>
 80026c6:	f001 ff4b 	bl	8004560 <vPortEnterCritical>
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d01f      	beq.n	8002716 <xQueueReceive+0xde>
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026da:	f000 f8f7 	bl	80028cc <prvCopyDataFromQueue>
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	1e5a      	subs	r2, r3, #1
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00f      	beq.n	800270e <xQueueReceive+0xd6>
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	3310      	adds	r3, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 ff7c 	bl	80035f0 <xTaskRemoveFromEventList>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <xQueueReceive+0xd6>
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <xQueueReceive+0x1bc>)
 8002700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f001 ff57 	bl	80045c0 <vPortExitCritical>
 8002712:	2301      	movs	r3, #1
 8002714:	e069      	b.n	80027ea <xQueueReceive+0x1b2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d103      	bne.n	8002724 <xQueueReceive+0xec>
 800271c:	f001 ff50 	bl	80045c0 <vPortExitCritical>
 8002720:	2300      	movs	r3, #0
 8002722:	e062      	b.n	80027ea <xQueueReceive+0x1b2>
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <xQueueReceive+0x100>
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f001 f836 	bl	80037a0 <vTaskInternalSetTimeOutState>
 8002734:	2301      	movs	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002738:	f001 ff42 	bl	80045c0 <vPortExitCritical>
 800273c:	f000 fbc8 	bl	8002ed0 <vTaskSuspendAll>
 8002740:	f001 ff0e 	bl	8004560 <vPortEnterCritical>
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800274a:	b25b      	sxtb	r3, r3
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d103      	bne.n	800275a <xQueueReceive+0x122>
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002760:	b25b      	sxtb	r3, r3
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d103      	bne.n	8002770 <xQueueReceive+0x138>
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002770:	f001 ff26 	bl	80045c0 <vPortExitCritical>
 8002774:	1d3a      	adds	r2, r7, #4
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f001 f825 	bl	80037cc <xTaskCheckForTimeOut>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d123      	bne.n	80027d0 <xQueueReceive+0x198>
 8002788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800278a:	f000 f917 	bl	80029bc <prvIsQueueEmpty>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d017      	beq.n	80027c4 <xQueueReceive+0x18c>
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	3324      	adds	r3, #36	; 0x24
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f000 febd 	bl	800351c <vTaskPlaceOnEventList>
 80027a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a4:	f000 f8b8 	bl	8002918 <prvUnlockQueue>
 80027a8:	f000 fbd6 	bl	8002f58 <xTaskResumeAll>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d189      	bne.n	80026c6 <xQueueReceive+0x8e>
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <xQueueReceive+0x1bc>)
 80027b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	e780      	b.n	80026c6 <xQueueReceive+0x8e>
 80027c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c6:	f000 f8a7 	bl	8002918 <prvUnlockQueue>
 80027ca:	f000 fbc5 	bl	8002f58 <xTaskResumeAll>
 80027ce:	e77a      	b.n	80026c6 <xQueueReceive+0x8e>
 80027d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027d2:	f000 f8a1 	bl	8002918 <prvUnlockQueue>
 80027d6:	f000 fbbf 	bl	8002f58 <xTaskResumeAll>
 80027da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027dc:	f000 f8ee 	bl	80029bc <prvIsQueueEmpty>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f43f af6f 	beq.w	80026c6 <xQueueReceive+0x8e>
 80027e8:	2300      	movs	r3, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	3730      	adds	r7, #48	; 0x30
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	e000ed04 	.word	0xe000ed04

080027f8 <prvCopyDataToQueue>:
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10d      	bne.n	8002832 <prvCopyDataToQueue+0x3a>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d14d      	bne.n	80028ba <prvCopyDataToQueue+0xc2>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f001 f970 	bl	8003b08 <xTaskPriorityDisinherit>
 8002828:	6178      	str	r0, [r7, #20]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e043      	b.n	80028ba <prvCopyDataToQueue+0xc2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d119      	bne.n	800286c <prvCopyDataToQueue+0x74>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6858      	ldr	r0, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	461a      	mov	r2, r3
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	f002 f8a8 	bl	8004998 <memcpy>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	441a      	add	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	d32b      	bcc.n	80028ba <prvCopyDataToQueue+0xc2>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	e026      	b.n	80028ba <prvCopyDataToQueue+0xc2>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68d8      	ldr	r0, [r3, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	461a      	mov	r2, r3
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	f002 f88e 	bl	8004998 <memcpy>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	425b      	negs	r3, r3
 8002886:	441a      	add	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	60da      	str	r2, [r3, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <prvCopyDataToQueue+0xb0>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	425b      	negs	r3, r3
 80028a2:	441a      	add	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d105      	bne.n	80028ba <prvCopyDataToQueue+0xc2>
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <prvCopyDataToQueue+0xc2>
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	639a      	str	r2, [r3, #56]	; 0x38
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <prvCopyDataFromQueue>:
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d018      	beq.n	8002910 <prvCopyDataFromQueue+0x44>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	441a      	add	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d303      	bcc.n	8002900 <prvCopyDataFromQueue+0x34>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	60da      	str	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68d9      	ldr	r1, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	461a      	mov	r2, r3
 800290a:	6838      	ldr	r0, [r7, #0]
 800290c:	f002 f844 	bl	8004998 <memcpy>
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <prvUnlockQueue>:
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	f001 fe1e 	bl	8004560 <vPortEnterCritical>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e011      	b.n	8002952 <prvUnlockQueue+0x3a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	d012      	beq.n	800295c <prvUnlockQueue+0x44>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3324      	adds	r3, #36	; 0x24
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fe58 	bl	80035f0 <xTaskRemoveFromEventList>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <prvUnlockQueue+0x32>
 8002946:	f000 ffa7 	bl	8003898 <vTaskMissedYield>
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	3b01      	subs	r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	dce9      	bgt.n	800292e <prvUnlockQueue+0x16>
 800295a:	e000      	b.n	800295e <prvUnlockQueue+0x46>
 800295c:	bf00      	nop
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	22ff      	movs	r2, #255	; 0xff
 8002962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002966:	f001 fe2b 	bl	80045c0 <vPortExitCritical>
 800296a:	f001 fdf9 	bl	8004560 <vPortEnterCritical>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002974:	73bb      	strb	r3, [r7, #14]
 8002976:	e011      	b.n	800299c <prvUnlockQueue+0x84>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d012      	beq.n	80029a6 <prvUnlockQueue+0x8e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3310      	adds	r3, #16
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fe33 	bl	80035f0 <xTaskRemoveFromEventList>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <prvUnlockQueue+0x7c>
 8002990:	f000 ff82 	bl	8003898 <vTaskMissedYield>
 8002994:	7bbb      	ldrb	r3, [r7, #14]
 8002996:	3b01      	subs	r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	73bb      	strb	r3, [r7, #14]
 800299c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	dce9      	bgt.n	8002978 <prvUnlockQueue+0x60>
 80029a4:	e000      	b.n	80029a8 <prvUnlockQueue+0x90>
 80029a6:	bf00      	nop
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	22ff      	movs	r2, #255	; 0xff
 80029ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b0:	f001 fe06 	bl	80045c0 <vPortExitCritical>
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <prvIsQueueEmpty>:
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	f001 fdcc 	bl	8004560 <vPortEnterCritical>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <prvIsQueueEmpty+0x1a>
 80029d0:	2301      	movs	r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	e001      	b.n	80029da <prvIsQueueEmpty+0x1e>
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	f001 fdf1 	bl	80045c0 <vPortExitCritical>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <vQueueAddToRegistry>:
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <vQueueAddToRegistry+0x2a>
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	bf00      	nop
 8002a10:	e7fe      	b.n	8002a10 <vQueueAddToRegistry+0x28>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d024      	beq.n	8002a62 <vQueueAddToRegistry+0x7a>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e01e      	b.n	8002a5c <vQueueAddToRegistry+0x74>
 8002a1e:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <vQueueAddToRegistry+0x98>)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d105      	bne.n	8002a3a <vQueueAddToRegistry+0x52>
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <vQueueAddToRegistry+0x98>)
 8002a34:	4413      	add	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	e013      	b.n	8002a62 <vQueueAddToRegistry+0x7a>
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <vQueueAddToRegistry+0x6e>
 8002a40:	4a0f      	ldr	r2, [pc, #60]	; (8002a80 <vQueueAddToRegistry+0x98>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <vQueueAddToRegistry+0x6e>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <vQueueAddToRegistry+0x98>)
 8002a52:	4413      	add	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	d9dd      	bls.n	8002a1e <vQueueAddToRegistry+0x36>
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <vQueueAddToRegistry+0x8c>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	bf00      	nop
 8002a76:	371c      	adds	r7, #28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	2000027c 	.word	0x2000027c

08002a84 <vQueueWaitForMessageRestricted>:
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	f001 fd64 	bl	8004560 <vPortEnterCritical>
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a9e:	b25b      	sxtb	r3, r3
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d103      	bne.n	8002aae <vQueueWaitForMessageRestricted+0x2a>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ab4:	b25b      	sxtb	r3, r3
 8002ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aba:	d103      	bne.n	8002ac4 <vQueueWaitForMessageRestricted+0x40>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ac4:	f001 fd7c 	bl	80045c0 <vPortExitCritical>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d106      	bne.n	8002ade <vQueueWaitForMessageRestricted+0x5a>
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3324      	adds	r3, #36	; 0x24
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fd43 	bl	8003564 <vTaskPlaceOnEventListRestricted>
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff1a 	bl	8002918 <prvUnlockQueue>
 8002ae4:	bf00      	nop
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <xTaskCreate>:
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af04      	add	r7, sp, #16
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 fb88 	bl	8004214 <pvPortMalloc>
 8002b04:	6178      	str	r0, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <xTaskCreate+0x48>
 8002b0c:	207c      	movs	r0, #124	; 0x7c
 8002b0e:	f001 fb81 	bl	8004214 <pvPortMalloc>
 8002b12:	61f8      	str	r0, [r7, #28]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <xTaskCreate+0x40>
 8002b1a:	227c      	movs	r2, #124	; 0x7c
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	69f8      	ldr	r0, [r7, #28]
 8002b20:	f001 ff48 	bl	80049b4 <memset>
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
 8002b2a:	e005      	b.n	8002b38 <xTaskCreate+0x4c>
 8002b2c:	6978      	ldr	r0, [r7, #20]
 8002b2e:	f001 fb83 	bl	8004238 <vPortFree>
 8002b32:	e001      	b.n	8002b38 <xTaskCreate+0x4c>
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d013      	beq.n	8002b66 <xTaskCreate+0x7a>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9303      	str	r3, [sp, #12]
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	9302      	str	r3, [sp, #8]
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f80e 	bl	8002b76 <prvInitialiseNewTask>
 8002b5a:	69f8      	ldr	r0, [r7, #28]
 8002b5c:	f000 f89a 	bl	8002c94 <prvAddNewTaskToReadyList>
 8002b60:	2301      	movs	r3, #1
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e002      	b.n	8002b6c <xTaskCreate+0x80>
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <prvInitialiseNewTask>:
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b088      	sub	sp, #32
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	21a5      	movs	r1, #165	; 0xa5
 8002b90:	f001 ff10 	bl	80049b4 <memset>
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	f023 0307 	bic.w	r3, r3, #7
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <prvInitialiseNewTask+0x58>
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <prvInitialiseNewTask+0x56>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01e      	beq.n	8002c12 <prvInitialiseNewTask+0x9c>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	e012      	b.n	8002c00 <prvInitialiseNewTask+0x8a>
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	4413      	add	r3, r2
 8002be0:	7819      	ldrb	r1, [r3, #0]
 8002be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4413      	add	r3, r2
 8002be8:	3334      	adds	r3, #52	; 0x34
 8002bea:	460a      	mov	r2, r1
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <prvInitialiseNewTask+0x92>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b13      	cmp	r3, #19
 8002c04:	d9e9      	bls.n	8002bda <prvInitialiseNewTask+0x64>
 8002c06:	e000      	b.n	8002c0a <prvInitialiseNewTask+0x94>
 8002c08:	bf00      	nop
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d90a      	bls.n	8002c2e <prvInitialiseNewTask+0xb8>
 8002c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1c:	f383 8811 	msr	BASEPRI, r3
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	bf00      	nop
 8002c2c:	e7fe      	b.n	8002c2c <prvInitialiseNewTask+0xb6>
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d901      	bls.n	8002c38 <prvInitialiseNewTask+0xc2>
 8002c34:	2304      	movs	r3, #4
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c42:	651a      	str	r2, [r3, #80]	; 0x50
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	3304      	adds	r3, #4
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 fb26 	bl	800429a <vListInitialiseItem>
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	3318      	adds	r3, #24
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 fb21 	bl	800429a <vListInitialiseItem>
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5c:	611a      	str	r2, [r3, #16]
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	f1c3 0205 	rsb	r2, r3, #5
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	619a      	str	r2, [r3, #24]
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	68f9      	ldr	r1, [r7, #12]
 8002c72:	69b8      	ldr	r0, [r7, #24]
 8002c74:	f001 fb7e 	bl	8004374 <pxPortInitialiseStack>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <prvInitialiseNewTask+0x114>
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	bf00      	nop
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <prvAddNewTaskToReadyList>:
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	f001 fc60 	bl	8004560 <vPortEnterCritical>
 8002ca0:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <prvAddNewTaskToReadyList+0x114>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	4a40      	ldr	r2, [pc, #256]	; (8002da8 <prvAddNewTaskToReadyList+0x114>)
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b40      	ldr	r3, [pc, #256]	; (8002dac <prvAddNewTaskToReadyList+0x118>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <prvAddNewTaskToReadyList+0x32>
 8002cb2:	4a3e      	ldr	r2, [pc, #248]	; (8002dac <prvAddNewTaskToReadyList+0x118>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <prvAddNewTaskToReadyList+0x114>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d110      	bne.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
 8002cc0:	f000 fe6c 	bl	800399c <prvInitialiseTaskLists>
 8002cc4:	e00d      	b.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
 8002cc6:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <prvAddNewTaskToReadyList+0x11c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
 8002cce:	4b37      	ldr	r3, [pc, #220]	; (8002dac <prvAddNewTaskToReadyList+0x118>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d802      	bhi.n	8002ce2 <prvAddNewTaskToReadyList+0x4e>
 8002cdc:	4a33      	ldr	r2, [pc, #204]	; (8002dac <prvAddNewTaskToReadyList+0x118>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <prvAddNewTaskToReadyList+0x120>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	4a32      	ldr	r2, [pc, #200]	; (8002db4 <prvAddNewTaskToReadyList+0x120>)
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <prvAddNewTaskToReadyList+0x120>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	649a      	str	r2, [r3, #72]	; 0x48
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <prvAddNewTaskToReadyList+0x124>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d903      	bls.n	8002d08 <prvAddNewTaskToReadyList+0x74>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	4a2c      	ldr	r2, [pc, #176]	; (8002db8 <prvAddNewTaskToReadyList+0x124>)
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	492b      	ldr	r1, [pc, #172]	; (8002dbc <prvAddNewTaskToReadyList+0x128>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3304      	adds	r3, #4
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	3204      	adds	r2, #4
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	1d1a      	adds	r2, r3, #4
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <prvAddNewTaskToReadyList+0x128>)
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	615a      	str	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d56:	4919      	ldr	r1, [pc, #100]	; (8002dbc <prvAddNewTaskToReadyList+0x128>)
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	1c59      	adds	r1, r3, #1
 8002d66:	4815      	ldr	r0, [pc, #84]	; (8002dbc <prvAddNewTaskToReadyList+0x128>)
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4403      	add	r3, r0
 8002d72:	6019      	str	r1, [r3, #0]
 8002d74:	f001 fc24 	bl	80045c0 <vPortExitCritical>
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <prvAddNewTaskToReadyList+0x11c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00e      	beq.n	8002d9e <prvAddNewTaskToReadyList+0x10a>
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <prvAddNewTaskToReadyList+0x118>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d207      	bcs.n	8002d9e <prvAddNewTaskToReadyList+0x10a>
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <prvAddNewTaskToReadyList+0x12c>)
 8002d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000178 	.word	0x20000178
 8002dac:	200000a0 	.word	0x200000a0
 8002db0:	20000184 	.word	0x20000184
 8002db4:	20000194 	.word	0x20000194
 8002db8:	20000180 	.word	0x20000180
 8002dbc:	200000a4 	.word	0x200000a4
 8002dc0:	e000ed04 	.word	0xe000ed04

08002dc4 <vTaskDelay>:
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d017      	beq.n	8002e06 <vTaskDelay+0x42>
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <vTaskDelay+0x60>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <vTaskDelay+0x30>
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	bf00      	nop
 8002df2:	e7fe      	b.n	8002df2 <vTaskDelay+0x2e>
 8002df4:	f000 f86c 	bl	8002ed0 <vTaskSuspendAll>
 8002df8:	2100      	movs	r1, #0
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 ff1a 	bl	8003c34 <prvAddCurrentTaskToDelayedList>
 8002e00:	f000 f8aa 	bl	8002f58 <xTaskResumeAll>
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <vTaskDelay+0x58>
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <vTaskDelay+0x64>)
 8002e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	200001a0 	.word	0x200001a0
 8002e28:	e000ed04 	.word	0xe000ed04

08002e2c <vTaskStartScheduler>:
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <vTaskStartScheduler+0x88>)
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	491e      	ldr	r1, [pc, #120]	; (8002eb8 <vTaskStartScheduler+0x8c>)
 8002e40:	481e      	ldr	r0, [pc, #120]	; (8002ebc <vTaskStartScheduler+0x90>)
 8002e42:	f7ff fe53 	bl	8002aec <xTaskCreate>
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d102      	bne.n	8002e54 <vTaskStartScheduler+0x28>
 8002e4e:	f000 ff5f 	bl	8003d10 <xTimerCreateTimerTask>
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d116      	bne.n	8002e88 <vTaskStartScheduler+0x5c>
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	bf00      	nop
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <vTaskStartScheduler+0x94>)
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <vTaskStartScheduler+0x98>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <vTaskStartScheduler+0x9c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f001 fafb 	bl	800447c <xPortStartScheduler>
 8002e86:	e00e      	b.n	8002ea6 <vTaskStartScheduler+0x7a>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8e:	d10a      	bne.n	8002ea6 <vTaskStartScheduler+0x7a>
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <vTaskStartScheduler+0x78>
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <vTaskStartScheduler+0xa0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	2000019c 	.word	0x2000019c
 8002eb8:	08004b7c 	.word	0x08004b7c
 8002ebc:	080038b1 	.word	0x080038b1
 8002ec0:	20000198 	.word	0x20000198
 8002ec4:	20000184 	.word	0x20000184
 8002ec8:	2000017c 	.word	0x2000017c
 8002ecc:	2000000c 	.word	0x2000000c

08002ed0 <vTaskSuspendAll>:
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <vTaskSuspendAll+0x18>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a03      	ldr	r2, [pc, #12]	; (8002ee8 <vTaskSuspendAll+0x18>)
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	200001a0 	.word	0x200001a0

08002eec <prvGetExpectedIdleTime>:
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4b13      	ldr	r3, [pc, #76]	; (8002f44 <prvGetExpectedIdleTime+0x58>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <prvGetExpectedIdleTime+0x16>
 8002efe:	2301      	movs	r3, #1
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <prvGetExpectedIdleTime+0x5c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <prvGetExpectedIdleTime+0x26>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	e012      	b.n	8002f38 <prvGetExpectedIdleTime+0x4c>
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <prvGetExpectedIdleTime+0x60>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d902      	bls.n	8002f20 <prvGetExpectedIdleTime+0x34>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	e00b      	b.n	8002f38 <prvGetExpectedIdleTime+0x4c>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <prvGetExpectedIdleTime+0x40>
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	e005      	b.n	8002f38 <prvGetExpectedIdleTime+0x4c>
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <prvGetExpectedIdleTime+0x64>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <prvGetExpectedIdleTime+0x68>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	20000180 	.word	0x20000180
 8002f48:	200000a0 	.word	0x200000a0
 8002f4c:	200000a4 	.word	0x200000a4
 8002f50:	20000198 	.word	0x20000198
 8002f54:	2000017c 	.word	0x2000017c

08002f58 <xTaskResumeAll>:
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	4b71      	ldr	r3, [pc, #452]	; (800312c <xTaskResumeAll+0x1d4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <xTaskResumeAll+0x2c>
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <xTaskResumeAll+0x2a>
 8002f84:	f001 faec 	bl	8004560 <vPortEnterCritical>
 8002f88:	4b68      	ldr	r3, [pc, #416]	; (800312c <xTaskResumeAll+0x1d4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	4a67      	ldr	r2, [pc, #412]	; (800312c <xTaskResumeAll+0x1d4>)
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b66      	ldr	r3, [pc, #408]	; (800312c <xTaskResumeAll+0x1d4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 80c1 	bne.w	800311e <xTaskResumeAll+0x1c6>
 8002f9c:	4b64      	ldr	r3, [pc, #400]	; (8003130 <xTaskResumeAll+0x1d8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80bc 	beq.w	800311e <xTaskResumeAll+0x1c6>
 8002fa6:	e08b      	b.n	80030c0 <xTaskResumeAll+0x168>
 8002fa8:	4b62      	ldr	r3, [pc, #392]	; (8003134 <xTaskResumeAll+0x1dc>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	6a12      	ldr	r2, [r2, #32]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	69d2      	ldr	r2, [r2, #28]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3318      	adds	r3, #24
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d103      	bne.n	8002fde <xTaskResumeAll+0x86>
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	6a1a      	ldr	r2, [r3, #32]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	1e5a      	subs	r2, r3, #1
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	68d2      	ldr	r2, [r2, #12]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	6892      	ldr	r2, [r2, #8]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3304      	adds	r3, #4
 8003010:	429a      	cmp	r2, r3
 8003012:	d103      	bne.n	800301c <xTaskResumeAll+0xc4>
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2200      	movs	r2, #0
 8003020:	615a      	str	r2, [r3, #20]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	1e5a      	subs	r2, r3, #1
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	4b41      	ldr	r3, [pc, #260]	; (8003138 <xTaskResumeAll+0x1e0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d903      	bls.n	8003040 <xTaskResumeAll+0xe8>
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	4a3e      	ldr	r2, [pc, #248]	; (8003138 <xTaskResumeAll+0x1e0>)
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	493d      	ldr	r1, [pc, #244]	; (800313c <xTaskResumeAll+0x1e4>)
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3304      	adds	r3, #4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	60da      	str	r2, [r3, #12]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	3204      	adds	r2, #4
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	1d1a      	adds	r2, r3, #4
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4a2e      	ldr	r2, [pc, #184]	; (800313c <xTaskResumeAll+0x1e4>)
 8003084:	441a      	add	r2, r3
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	615a      	str	r2, [r3, #20]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	492b      	ldr	r1, [pc, #172]	; (800313c <xTaskResumeAll+0x1e4>)
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	1c59      	adds	r1, r3, #1
 800309e:	4827      	ldr	r0, [pc, #156]	; (800313c <xTaskResumeAll+0x1e4>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4403      	add	r3, r0
 80030aa:	6019      	str	r1, [r3, #0]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <xTaskResumeAll+0x1e8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d302      	bcc.n	80030c0 <xTaskResumeAll+0x168>
 80030ba:	4b22      	ldr	r3, [pc, #136]	; (8003144 <xTaskResumeAll+0x1ec>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <xTaskResumeAll+0x1dc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f47f af6f 	bne.w	8002fa8 <xTaskResumeAll+0x50>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <xTaskResumeAll+0x17c>
 80030d0:	f000 fce2 	bl	8003a98 <prvResetNextTaskUnblockTime>
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <xTaskResumeAll+0x1f0>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <xTaskResumeAll+0x1aa>
 80030e0:	f000 f8a8 	bl	8003234 <xTaskIncrementTick>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <xTaskResumeAll+0x198>
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <xTaskResumeAll+0x1ec>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f1      	bne.n	80030e0 <xTaskResumeAll+0x188>
 80030fc:	4b12      	ldr	r3, [pc, #72]	; (8003148 <xTaskResumeAll+0x1f0>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <xTaskResumeAll+0x1ec>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <xTaskResumeAll+0x1c6>
 800310a:	2301      	movs	r3, #1
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	4b0f      	ldr	r3, [pc, #60]	; (800314c <xTaskResumeAll+0x1f4>)
 8003110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f001 fa4f 	bl	80045c0 <vPortExitCritical>
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	4618      	mov	r0, r3
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	200001a0 	.word	0x200001a0
 8003130:	20000178 	.word	0x20000178
 8003134:	20000138 	.word	0x20000138
 8003138:	20000180 	.word	0x20000180
 800313c:	200000a4 	.word	0x200000a4
 8003140:	200000a0 	.word	0x200000a0
 8003144:	2000018c 	.word	0x2000018c
 8003148:	20000188 	.word	0x20000188
 800314c:	e000ed04 	.word	0xe000ed04

08003150 <xTaskGetTickCount>:
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4b04      	ldr	r3, [pc, #16]	; (8003168 <xTaskGetTickCount+0x18>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	2000017c 	.word	0x2000017c

0800316c <uxTaskGetNumberOfTasks>:
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
 8003170:	4b02      	ldr	r3, [pc, #8]	; (800317c <uxTaskGetNumberOfTasks+0x10>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	20000178 	.word	0x20000178

08003180 <vTaskStepTick>:
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <vTaskStepTick+0xa4>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	441a      	add	r2, r3
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <vTaskStepTick+0xa8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d90a      	bls.n	80031ae <vTaskStepTick+0x2e>
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <vTaskStepTick+0x2c>
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <vTaskStepTick+0xa4>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	441a      	add	r2, r3
 80031b6:	4b1c      	ldr	r3, [pc, #112]	; (8003228 <vTaskStepTick+0xa8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d128      	bne.n	8003210 <vTaskStepTick+0x90>
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <vTaskStepTick+0xac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <vTaskStepTick+0x5c>
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	bf00      	nop
 80031da:	e7fe      	b.n	80031da <vTaskStepTick+0x5a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <vTaskStepTick+0x78>
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	bf00      	nop
 80031f6:	e7fe      	b.n	80031f6 <vTaskStepTick+0x76>
 80031f8:	f001 f9b2 	bl	8004560 <vPortEnterCritical>
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <vTaskStepTick+0xb0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3301      	adds	r3, #1
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <vTaskStepTick+0xb0>)
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	f001 f9db 	bl	80045c0 <vPortExitCritical>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3b01      	subs	r3, #1
 800320e:	607b      	str	r3, [r7, #4]
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <vTaskStepTick+0xa4>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	4a02      	ldr	r2, [pc, #8]	; (8003224 <vTaskStepTick+0xa4>)
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	2000017c 	.word	0x2000017c
 8003228:	20000198 	.word	0x20000198
 800322c:	200001a0 	.word	0x200001a0
 8003230:	20000188 	.word	0x20000188

08003234 <xTaskIncrementTick>:
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	; 0x28
 8003238:	af00      	add	r7, sp, #0
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
 800323e:	4b7e      	ldr	r3, [pc, #504]	; (8003438 <xTaskIncrementTick+0x204>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 80ed 	bne.w	8003422 <xTaskIncrementTick+0x1ee>
 8003248:	4b7c      	ldr	r3, [pc, #496]	; (800343c <xTaskIncrementTick+0x208>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	4a7a      	ldr	r2, [pc, #488]	; (800343c <xTaskIncrementTick+0x208>)
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d120      	bne.n	800329e <xTaskIncrementTick+0x6a>
 800325c:	4b78      	ldr	r3, [pc, #480]	; (8003440 <xTaskIncrementTick+0x20c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <xTaskIncrementTick+0x48>
 8003266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	bf00      	nop
 800327a:	e7fe      	b.n	800327a <xTaskIncrementTick+0x46>
 800327c:	4b70      	ldr	r3, [pc, #448]	; (8003440 <xTaskIncrementTick+0x20c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	4b70      	ldr	r3, [pc, #448]	; (8003444 <xTaskIncrementTick+0x210>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6e      	ldr	r2, [pc, #440]	; (8003440 <xTaskIncrementTick+0x20c>)
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4a6e      	ldr	r2, [pc, #440]	; (8003444 <xTaskIncrementTick+0x210>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <xTaskIncrementTick+0x214>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	4a6c      	ldr	r2, [pc, #432]	; (8003448 <xTaskIncrementTick+0x214>)
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	f000 fbfd 	bl	8003a98 <prvResetNextTaskUnblockTime>
 800329e:	4b6b      	ldr	r3, [pc, #428]	; (800344c <xTaskIncrementTick+0x218>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6a3a      	ldr	r2, [r7, #32]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f0c0 80a7 	bcc.w	80033f8 <xTaskIncrementTick+0x1c4>
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <xTaskIncrementTick+0x20c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d104      	bne.n	80032be <xTaskIncrementTick+0x8a>
 80032b4:	4b65      	ldr	r3, [pc, #404]	; (800344c <xTaskIncrementTick+0x218>)
 80032b6:	f04f 32ff 	mov.w	r2, #4294967295
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	e09c      	b.n	80033f8 <xTaskIncrementTick+0x1c4>
 80032be:	4b60      	ldr	r3, [pc, #384]	; (8003440 <xTaskIncrementTick+0x20c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d203      	bcs.n	80032de <xTaskIncrementTick+0xaa>
 80032d6:	4a5d      	ldr	r2, [pc, #372]	; (800344c <xTaskIncrementTick+0x218>)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e08c      	b.n	80033f8 <xTaskIncrementTick+0x1c4>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	68d2      	ldr	r2, [r2, #12]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	6892      	ldr	r2, [r2, #8]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	3304      	adds	r3, #4
 8003300:	429a      	cmp	r2, r3
 8003302:	d103      	bne.n	800330c <xTaskIncrementTick+0xd8>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2200      	movs	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1e5a      	subs	r2, r3, #1
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01e      	beq.n	8003362 <xTaskIncrementTick+0x12e>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	6a12      	ldr	r2, [r2, #32]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	69d2      	ldr	r2, [r2, #28]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	3318      	adds	r3, #24
 8003346:	429a      	cmp	r2, r3
 8003348:	d103      	bne.n	8003352 <xTaskIncrementTick+0x11e>
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2200      	movs	r2, #0
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	1e5a      	subs	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	4b3a      	ldr	r3, [pc, #232]	; (8003450 <xTaskIncrementTick+0x21c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d903      	bls.n	8003376 <xTaskIncrementTick+0x142>
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	4a37      	ldr	r2, [pc, #220]	; (8003450 <xTaskIncrementTick+0x21c>)
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	4936      	ldr	r1, [pc, #216]	; (8003454 <xTaskIncrementTick+0x220>)
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3304      	adds	r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	3204      	adds	r2, #4
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4a26      	ldr	r2, [pc, #152]	; (8003454 <xTaskIncrementTick+0x220>)
 80033ba:	441a      	add	r2, r3
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	615a      	str	r2, [r3, #20]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	4923      	ldr	r1, [pc, #140]	; (8003454 <xTaskIncrementTick+0x220>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1c59      	adds	r1, r3, #1
 80033d4:	481f      	ldr	r0, [pc, #124]	; (8003454 <xTaskIncrementTick+0x220>)
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4403      	add	r3, r0
 80033e0:	6019      	str	r1, [r3, #0]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <xTaskIncrementTick+0x224>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	429a      	cmp	r2, r3
 80033ee:	f67f af5c 	bls.w	80032aa <xTaskIncrementTick+0x76>
 80033f2:	2301      	movs	r3, #1
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	e758      	b.n	80032aa <xTaskIncrementTick+0x76>
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <xTaskIncrementTick+0x224>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fe:	4915      	ldr	r1, [pc, #84]	; (8003454 <xTaskIncrementTick+0x220>)
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d901      	bls.n	8003414 <xTaskIncrementTick+0x1e0>
 8003410:	2301      	movs	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	4b11      	ldr	r3, [pc, #68]	; (800345c <xTaskIncrementTick+0x228>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <xTaskIncrementTick+0x1f8>
 800341c:	2301      	movs	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
 8003420:	e004      	b.n	800342c <xTaskIncrementTick+0x1f8>
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <xTaskIncrementTick+0x22c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3301      	adds	r3, #1
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <xTaskIncrementTick+0x22c>)
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	4618      	mov	r0, r3
 8003430:	3728      	adds	r7, #40	; 0x28
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200001a0 	.word	0x200001a0
 800343c:	2000017c 	.word	0x2000017c
 8003440:	20000130 	.word	0x20000130
 8003444:	20000134 	.word	0x20000134
 8003448:	20000190 	.word	0x20000190
 800344c:	20000198 	.word	0x20000198
 8003450:	20000180 	.word	0x20000180
 8003454:	200000a4 	.word	0x200000a4
 8003458:	200000a0 	.word	0x200000a0
 800345c:	2000018c 	.word	0x2000018c
 8003460:	20000188 	.word	0x20000188

08003464 <vTaskSwitchContext>:
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	4b27      	ldr	r3, [pc, #156]	; (8003508 <vTaskSwitchContext+0xa4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <vTaskSwitchContext+0x16>
 8003472:	4b26      	ldr	r3, [pc, #152]	; (800350c <vTaskSwitchContext+0xa8>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	e041      	b.n	80034fe <vTaskSwitchContext+0x9a>
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <vTaskSwitchContext+0xa8>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	4b23      	ldr	r3, [pc, #140]	; (8003510 <vTaskSwitchContext+0xac>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e010      	b.n	80034aa <vTaskSwitchContext+0x46>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <vTaskSwitchContext+0x40>
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <vTaskSwitchContext+0x3e>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	491a      	ldr	r1, [pc, #104]	; (8003514 <vTaskSwitchContext+0xb0>)
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0e4      	beq.n	8003488 <vTaskSwitchContext+0x24>
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4a12      	ldr	r2, [pc, #72]	; (8003514 <vTaskSwitchContext+0xb0>)
 80034ca:	4413      	add	r3, r2
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	3308      	adds	r3, #8
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d104      	bne.n	80034ee <vTaskSwitchContext+0x8a>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <vTaskSwitchContext+0xb4>)
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4a05      	ldr	r2, [pc, #20]	; (8003510 <vTaskSwitchContext+0xac>)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	200001a0 	.word	0x200001a0
 800350c:	2000018c 	.word	0x2000018c
 8003510:	20000180 	.word	0x20000180
 8003514:	200000a4 	.word	0x200000a4
 8003518:	200000a0 	.word	0x200000a0

0800351c <vTaskPlaceOnEventList>:
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <vTaskPlaceOnEventList+0x26>
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	bf00      	nop
 8003540:	e7fe      	b.n	8003540 <vTaskPlaceOnEventList+0x24>
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <vTaskPlaceOnEventList+0x44>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3318      	adds	r3, #24
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 feb1 	bl	80042b2 <vListInsert>
 8003550:	2101      	movs	r1, #1
 8003552:	6838      	ldr	r0, [r7, #0]
 8003554:	f000 fb6e 	bl	8003c34 <prvAddCurrentTaskToDelayedList>
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200000a0 	.word	0x200000a0

08003564 <vTaskPlaceOnEventListRestricted>:
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <vTaskPlaceOnEventListRestricted+0x28>
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <vTaskPlaceOnEventListRestricted+0x26>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	4b16      	ldr	r3, [pc, #88]	; (80035ec <vTaskPlaceOnEventListRestricted+0x88>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	61da      	str	r2, [r3, #28]
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <vTaskPlaceOnEventListRestricted+0x88>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	621a      	str	r2, [r3, #32]
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <vTaskPlaceOnEventListRestricted+0x88>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	3218      	adds	r2, #24
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <vTaskPlaceOnEventListRestricted+0x88>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f103 0218 	add.w	r2, r3, #24
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <vTaskPlaceOnEventListRestricted+0x88>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <vTaskPlaceOnEventListRestricted+0x76>
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	68b8      	ldr	r0, [r7, #8]
 80035de:	f000 fb29 	bl	8003c34 <prvAddCurrentTaskToDelayedList>
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200000a0 	.word	0x200000a0

080035f0 <xTaskRemoveFromEventList>:
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	623b      	str	r3, [r7, #32]
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <xTaskRemoveFromEventList+0x2c>
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	bf00      	nop
 800361a:	e7fe      	b.n	800361a <xTaskRemoveFromEventList+0x2a>
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	6a3a      	ldr	r2, [r7, #32]
 8003628:	6a12      	ldr	r2, [r2, #32]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	69d2      	ldr	r2, [r2, #28]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	3318      	adds	r3, #24
 800363e:	429a      	cmp	r2, r3
 8003640:	d103      	bne.n	800364a <xTaskRemoveFromEventList+0x5a>
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	2200      	movs	r2, #0
 800364e:	629a      	str	r2, [r3, #40]	; 0x28
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	1e5a      	subs	r2, r3, #1
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <xTaskRemoveFromEventList+0x198>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d161      	bne.n	8003726 <xTaskRemoveFromEventList+0x136>
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	68d2      	ldr	r2, [r2, #12]
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	3304      	adds	r3, #4
 8003684:	429a      	cmp	r2, r3
 8003686:	d103      	bne.n	8003690 <xTaskRemoveFromEventList+0xa0>
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2200      	movs	r2, #0
 8003694:	615a      	str	r2, [r3, #20]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	4b39      	ldr	r3, [pc, #228]	; (800378c <xTaskRemoveFromEventList+0x19c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d903      	bls.n	80036b4 <xTaskRemoveFromEventList+0xc4>
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	4a36      	ldr	r2, [pc, #216]	; (800378c <xTaskRemoveFromEventList+0x19c>)
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4935      	ldr	r1, [pc, #212]	; (8003790 <xTaskRemoveFromEventList+0x1a0>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3304      	adds	r3, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	60da      	str	r2, [r3, #12]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	3204      	adds	r2, #4
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	1d1a      	adds	r2, r3, #4
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	609a      	str	r2, [r3, #8]
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4a26      	ldr	r2, [pc, #152]	; (8003790 <xTaskRemoveFromEventList+0x1a0>)
 80036f8:	441a      	add	r2, r3
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	615a      	str	r2, [r3, #20]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003702:	4923      	ldr	r1, [pc, #140]	; (8003790 <xTaskRemoveFromEventList+0x1a0>)
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	1c59      	adds	r1, r3, #1
 8003712:	481f      	ldr	r0, [pc, #124]	; (8003790 <xTaskRemoveFromEventList+0x1a0>)
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4403      	add	r3, r0
 800371e:	6019      	str	r1, [r3, #0]
 8003720:	f000 f9ba 	bl	8003a98 <prvResetNextTaskUnblockTime>
 8003724:	e01b      	b.n	800375e <xTaskRemoveFromEventList+0x16e>
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <xTaskRemoveFromEventList+0x1a4>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	61da      	str	r2, [r3, #28]
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	621a      	str	r2, [r3, #32]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	3218      	adds	r2, #24
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	f103 0218 	add.w	r2, r3, #24
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	4a10      	ldr	r2, [pc, #64]	; (8003794 <xTaskRemoveFromEventList+0x1a4>)
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <xTaskRemoveFromEventList+0x1a4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <xTaskRemoveFromEventList+0x1a4>)
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <xTaskRemoveFromEventList+0x1a8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	429a      	cmp	r2, r3
 800376a:	d905      	bls.n	8003778 <xTaskRemoveFromEventList+0x188>
 800376c:	2301      	movs	r3, #1
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	4b0a      	ldr	r3, [pc, #40]	; (800379c <xTaskRemoveFromEventList+0x1ac>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	e001      	b.n	800377c <xTaskRemoveFromEventList+0x18c>
 8003778:	2300      	movs	r3, #0
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	4618      	mov	r0, r3
 8003780:	3728      	adds	r7, #40	; 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200001a0 	.word	0x200001a0
 800378c:	20000180 	.word	0x20000180
 8003790:	200000a4 	.word	0x200000a4
 8003794:	20000138 	.word	0x20000138
 8003798:	200000a0 	.word	0x200000a0
 800379c:	2000018c 	.word	0x2000018c

080037a0 <vTaskInternalSetTimeOutState>:
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <vTaskInternalSetTimeOutState+0x24>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <vTaskInternalSetTimeOutState+0x28>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000190 	.word	0x20000190
 80037c8:	2000017c 	.word	0x2000017c

080037cc <xTaskCheckForTimeOut>:
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTaskCheckForTimeOut+0x26>
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTaskCheckForTimeOut+0x24>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <xTaskCheckForTimeOut+0x42>
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	bf00      	nop
 800380c:	e7fe      	b.n	800380c <xTaskCheckForTimeOut+0x40>
 800380e:	f000 fea7 	bl	8004560 <vPortEnterCritical>
 8003812:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <xTaskCheckForTimeOut+0xc4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d102      	bne.n	8003832 <xTaskCheckForTimeOut+0x66>
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	e026      	b.n	8003880 <xTaskCheckForTimeOut+0xb4>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <xTaskCheckForTimeOut+0xc8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d00a      	beq.n	8003854 <xTaskCheckForTimeOut+0x88>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	429a      	cmp	r2, r3
 8003846:	d305      	bcc.n	8003854 <xTaskCheckForTimeOut+0x88>
 8003848:	2301      	movs	r3, #1
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e015      	b.n	8003880 <xTaskCheckForTimeOut+0xb4>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	429a      	cmp	r2, r3
 800385c:	d20b      	bcs.n	8003876 <xTaskCheckForTimeOut+0xaa>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	1ad2      	subs	r2, r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff98 	bl	80037a0 <vTaskInternalSetTimeOutState>
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	e004      	b.n	8003880 <xTaskCheckForTimeOut+0xb4>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	2301      	movs	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	f000 fe9e 	bl	80045c0 <vPortExitCritical>
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	2000017c 	.word	0x2000017c
 8003894:	20000190 	.word	0x20000190

08003898 <vTaskMissedYield>:
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <vTaskMissedYield+0x14>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	2000018c 	.word	0x2000018c

080038b0 <prvIdleTask>:
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	f000 f8b0 	bl	8003a1c <prvCheckTasksWaitingTermination>
 80038bc:	4b18      	ldr	r3, [pc, #96]	; (8003920 <prvIdleTask+0x70>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d907      	bls.n	80038d4 <prvIdleTask+0x24>
 80038c4:	4b17      	ldr	r3, [pc, #92]	; (8003924 <prvIdleTask+0x74>)
 80038c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f7ff fb0a 	bl	8002eec <prvGetExpectedIdleTime>
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d9eb      	bls.n	80038b8 <prvIdleTask+0x8>
 80038e0:	f7ff faf6 	bl	8002ed0 <vTaskSuspendAll>
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <prvIdleTask+0x78>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b10      	ldr	r3, [pc, #64]	; (800392c <prvIdleTask+0x7c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d20a      	bcs.n	8003906 <prvIdleTask+0x56>
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	bf00      	nop
 8003904:	e7fe      	b.n	8003904 <prvIdleTask+0x54>
 8003906:	f7ff faf1 	bl	8002eec <prvGetExpectedIdleTime>
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d902      	bls.n	8003918 <prvIdleTask+0x68>
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fec2 	bl	800469c <vPortSuppressTicksAndSleep>
 8003918:	f7ff fb1e 	bl	8002f58 <xTaskResumeAll>
 800391c:	e7cc      	b.n	80038b8 <prvIdleTask+0x8>
 800391e:	bf00      	nop
 8003920:	200000a4 	.word	0x200000a4
 8003924:	e000ed04 	.word	0xe000ed04
 8003928:	20000198 	.word	0x20000198
 800392c:	2000017c 	.word	0x2000017c

08003930 <eTaskConfirmSleepModeStatus>:
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	2301      	movs	r3, #1
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	2301      	movs	r3, #1
 800393c:	71fb      	strb	r3, [r7, #7]
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <eTaskConfirmSleepModeStatus+0x58>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <eTaskConfirmSleepModeStatus+0x1c>
 8003946:	2300      	movs	r3, #0
 8003948:	71fb      	strb	r3, [r7, #7]
 800394a:	e017      	b.n	800397c <eTaskConfirmSleepModeStatus+0x4c>
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <eTaskConfirmSleepModeStatus+0x5c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <eTaskConfirmSleepModeStatus+0x2a>
 8003954:	2300      	movs	r3, #0
 8003956:	71fb      	strb	r3, [r7, #7]
 8003958:	e010      	b.n	800397c <eTaskConfirmSleepModeStatus+0x4c>
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <eTaskConfirmSleepModeStatus+0x60>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <eTaskConfirmSleepModeStatus+0x38>
 8003962:	2300      	movs	r3, #0
 8003964:	71fb      	strb	r3, [r7, #7]
 8003966:	e009      	b.n	800397c <eTaskConfirmSleepModeStatus+0x4c>
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <eTaskConfirmSleepModeStatus+0x64>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <eTaskConfirmSleepModeStatus+0x68>)
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	1acb      	subs	r3, r1, r3
 8003974:	429a      	cmp	r2, r3
 8003976:	d101      	bne.n	800397c <eTaskConfirmSleepModeStatus+0x4c>
 8003978:	2302      	movs	r3, #2
 800397a:	71fb      	strb	r3, [r7, #7]
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	20000138 	.word	0x20000138
 800398c:	2000018c 	.word	0x2000018c
 8003990:	20000188 	.word	0x20000188
 8003994:	20000164 	.word	0x20000164
 8003998:	20000178 	.word	0x20000178

0800399c <prvInitialiseTaskLists>:
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	e00c      	b.n	80039c2 <prvInitialiseTaskLists+0x26>
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4a12      	ldr	r2, [pc, #72]	; (80039fc <prvInitialiseTaskLists+0x60>)
 80039b4:	4413      	add	r3, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fc50 	bl	800425c <vListInitialise>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3301      	adds	r3, #1
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d9ef      	bls.n	80039a8 <prvInitialiseTaskLists+0xc>
 80039c8:	480d      	ldr	r0, [pc, #52]	; (8003a00 <prvInitialiseTaskLists+0x64>)
 80039ca:	f000 fc47 	bl	800425c <vListInitialise>
 80039ce:	480d      	ldr	r0, [pc, #52]	; (8003a04 <prvInitialiseTaskLists+0x68>)
 80039d0:	f000 fc44 	bl	800425c <vListInitialise>
 80039d4:	480c      	ldr	r0, [pc, #48]	; (8003a08 <prvInitialiseTaskLists+0x6c>)
 80039d6:	f000 fc41 	bl	800425c <vListInitialise>
 80039da:	480c      	ldr	r0, [pc, #48]	; (8003a0c <prvInitialiseTaskLists+0x70>)
 80039dc:	f000 fc3e 	bl	800425c <vListInitialise>
 80039e0:	480b      	ldr	r0, [pc, #44]	; (8003a10 <prvInitialiseTaskLists+0x74>)
 80039e2:	f000 fc3b 	bl	800425c <vListInitialise>
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <prvInitialiseTaskLists+0x78>)
 80039e8:	4a05      	ldr	r2, [pc, #20]	; (8003a00 <prvInitialiseTaskLists+0x64>)
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <prvInitialiseTaskLists+0x7c>)
 80039ee:	4a05      	ldr	r2, [pc, #20]	; (8003a04 <prvInitialiseTaskLists+0x68>)
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200000a4 	.word	0x200000a4
 8003a00:	20000108 	.word	0x20000108
 8003a04:	2000011c 	.word	0x2000011c
 8003a08:	20000138 	.word	0x20000138
 8003a0c:	2000014c 	.word	0x2000014c
 8003a10:	20000164 	.word	0x20000164
 8003a14:	20000130 	.word	0x20000130
 8003a18:	20000134 	.word	0x20000134

08003a1c <prvCheckTasksWaitingTermination>:
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	e019      	b.n	8003a58 <prvCheckTasksWaitingTermination+0x3c>
 8003a24:	f000 fd9c 	bl	8004560 <vPortEnterCritical>
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <prvCheckTasksWaitingTermination+0x50>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fc74 	bl	8004322 <uxListRemove>
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <prvCheckTasksWaitingTermination+0x54>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <prvCheckTasksWaitingTermination+0x54>)
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <prvCheckTasksWaitingTermination+0x58>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <prvCheckTasksWaitingTermination+0x58>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	f000 fdb7 	bl	80045c0 <vPortExitCritical>
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f810 	bl	8003a78 <prvDeleteTCB>
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <prvCheckTasksWaitingTermination+0x58>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e1      	bne.n	8003a24 <prvCheckTasksWaitingTermination+0x8>
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	2000014c 	.word	0x2000014c
 8003a70:	20000178 	.word	0x20000178
 8003a74:	20000160 	.word	0x20000160

08003a78 <prvDeleteTCB>:
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fbd7 	bl	8004238 <vPortFree>
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fbd4 	bl	8004238 <vPortFree>
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <prvResetNextTaskUnblockTime>:
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <prvResetNextTaskUnblockTime+0x2c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <prvResetNextTaskUnblockTime+0x18>
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <prvResetNextTaskUnblockTime+0x30>)
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e005      	b.n	8003abc <prvResetNextTaskUnblockTime+0x24>
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <prvResetNextTaskUnblockTime+0x2c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a03      	ldr	r2, [pc, #12]	; (8003ac8 <prvResetNextTaskUnblockTime+0x30>)
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	20000130 	.word	0x20000130
 8003ac8:	20000198 	.word	0x20000198

08003acc <xTaskGetSchedulerState>:
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <xTaskGetSchedulerState+0x34>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d102      	bne.n	8003ae0 <xTaskGetSchedulerState+0x14>
 8003ada:	2301      	movs	r3, #1
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	e008      	b.n	8003af2 <xTaskGetSchedulerState+0x26>
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <xTaskGetSchedulerState+0x38>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <xTaskGetSchedulerState+0x22>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	e001      	b.n	8003af2 <xTaskGetSchedulerState+0x26>
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000184 	.word	0x20000184
 8003b04:	200001a0 	.word	0x200001a0

08003b08 <xTaskPriorityDisinherit>:
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d07e      	beq.n	8003c1c <xTaskPriorityDisinherit+0x114>
 8003b1e:	4b42      	ldr	r3, [pc, #264]	; (8003c28 <xTaskPriorityDisinherit+0x120>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d00a      	beq.n	8003b3e <xTaskPriorityDisinherit+0x36>
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xTaskPriorityDisinherit+0x34>
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <xTaskPriorityDisinherit+0x54>
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	bf00      	nop
 8003b5a:	e7fe      	b.n	8003b5a <xTaskPriorityDisinherit+0x52>
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	655a      	str	r2, [r3, #84]	; 0x54
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d054      	beq.n	8003c1c <xTaskPriorityDisinherit+0x114>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d150      	bne.n	8003c1c <xTaskPriorityDisinherit+0x114>
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fbcf 	bl	8004322 <uxListRemove>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	f1c3 0205 	rsb	r2, r3, #5
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	619a      	str	r2, [r3, #24]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <xTaskPriorityDisinherit+0x124>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d903      	bls.n	8003bac <xTaskPriorityDisinherit+0xa4>
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <xTaskPriorityDisinherit+0x124>)
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	491f      	ldr	r1, [pc, #124]	; (8003c30 <xTaskPriorityDisinherit+0x128>)
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	60da      	str	r2, [r3, #12]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	3204      	adds	r2, #4
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1d1a      	adds	r2, r3, #4
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	609a      	str	r2, [r3, #8]
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <xTaskPriorityDisinherit+0x128>)
 8003bf0:	441a      	add	r2, r3
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	615a      	str	r2, [r3, #20]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfa:	490d      	ldr	r1, [pc, #52]	; (8003c30 <xTaskPriorityDisinherit+0x128>)
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	1c59      	adds	r1, r3, #1
 8003c0a:	4809      	ldr	r0, [pc, #36]	; (8003c30 <xTaskPriorityDisinherit+0x128>)
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4403      	add	r3, r0
 8003c16:	6019      	str	r1, [r3, #0]
 8003c18:	2301      	movs	r3, #1
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200000a0 	.word	0x200000a0
 8003c2c:	20000180 	.word	0x20000180
 8003c30:	200000a4 	.word	0x200000a4

08003c34 <prvAddCurrentTaskToDelayedList>:
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	4b2d      	ldr	r3, [pc, #180]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fb69 	bl	8004322 <uxListRemove>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c56:	d124      	bne.n	8003ca2 <prvAddCurrentTaskToDelayedList+0x6e>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d021      	beq.n	8003ca2 <prvAddCurrentTaskToDelayedList+0x6e>
 8003c5e:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	6892      	ldr	r2, [r2, #8]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	3204      	adds	r2, #4
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1d1a      	adds	r2, r3, #4
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003c92:	615a      	str	r2, [r3, #20]
 8003c94:	4b1a      	ldr	r3, [pc, #104]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	bf00      	nop
 8003ca0:	e026      	b.n	8003cf0 <prvAddCurrentTaskToDelayedList+0xbc>
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d209      	bcs.n	8003cce <prvAddCurrentTaskToDelayedList+0x9a>
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f000 faf3 	bl	80042b2 <vListInsert>
 8003ccc:	e010      	b.n	8003cf0 <prvAddCurrentTaskToDelayedList+0xbc>
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f000 fae9 	bl	80042b2 <vListInsert>
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d202      	bcs.n	8003cf0 <prvAddCurrentTaskToDelayedList+0xbc>
 8003cea:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	bf00      	nop
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	2000017c 	.word	0x2000017c
 8003cfc:	200000a0 	.word	0x200000a0
 8003d00:	20000164 	.word	0x20000164
 8003d04:	20000134 	.word	0x20000134
 8003d08:	20000130 	.word	0x20000130
 8003d0c:	20000198 	.word	0x20000198

08003d10 <xTimerCreateTimerTask>:
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	f000 fa45 	bl	80041a8 <prvCheckForValidListAndQueue>
 8003d1e:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <xTimerCreateTimerTask+0x54>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <xTimerCreateTimerTask+0x2c>
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <xTimerCreateTimerTask+0x58>)
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	490e      	ldr	r1, [pc, #56]	; (8003d6c <xTimerCreateTimerTask+0x5c>)
 8003d34:	480e      	ldr	r0, [pc, #56]	; (8003d70 <xTimerCreateTimerTask+0x60>)
 8003d36:	f7fe fed9 	bl	8002aec <xTaskCreate>
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <xTimerCreateTimerTask+0x48>
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <xTimerCreateTimerTask+0x46>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	200001d4 	.word	0x200001d4
 8003d68:	200001d8 	.word	0x200001d8
 8003d6c:	08004b84 	.word	0x08004b84
 8003d70:	08003e19 	.word	0x08003e19

08003d74 <prvReloadTimer>:
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	e008      	b.n	8003d94 <prvReloadTimer+0x20>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	4798      	blx	r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	18d1      	adds	r1, r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f8db 	bl	8003f5c <prvInsertTimerInActiveList>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ea      	bne.n	8003d82 <prvReloadTimer+0xe>
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <prvProcessExpiredTimer>:
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <prvProcessExpiredTimer+0x5c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 faa6 	bl	8004322 <uxListRemove>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <prvProcessExpiredTimer+0x38>
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f7ff ffc3 	bl	8003d74 <prvReloadTimer>
 8003dee:	e008      	b.n	8003e02 <prvProcessExpiredTimer+0x4a>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	4798      	blx	r3
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	200001cc 	.word	0x200001cc

08003e18 <prvTimerTask>:
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 f857 	bl	8003ed8 <prvGetNextExpireTime>
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f803 	bl	8003e3c <prvProcessTimerOrBlockTask>
 8003e36:	f000 f8d3 	bl	8003fe0 <prvProcessReceivedCommands>
 8003e3a:	e7f1      	b.n	8003e20 <prvTimerTask+0x8>

08003e3c <prvProcessTimerOrBlockTask>:
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	f7ff f843 	bl	8002ed0 <vTaskSuspendAll>
 8003e4a:	f107 0308 	add.w	r3, r7, #8
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f864 	bl	8003f1c <prvSampleTimeNow>
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d130      	bne.n	8003ebe <prvProcessTimerOrBlockTask+0x82>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <prvProcessTimerOrBlockTask+0x3c>
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d806      	bhi.n	8003e78 <prvProcessTimerOrBlockTask+0x3c>
 8003e6a:	f7ff f875 	bl	8002f58 <xTaskResumeAll>
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ffa1 	bl	8003db8 <prvProcessExpiredTimer>
 8003e76:	e024      	b.n	8003ec2 <prvProcessTimerOrBlockTask+0x86>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d008      	beq.n	8003e90 <prvProcessTimerOrBlockTask+0x54>
 8003e7e:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <prvProcessTimerOrBlockTask+0x90>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <prvProcessTimerOrBlockTask+0x50>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <prvProcessTimerOrBlockTask+0x52>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <prvProcessTimerOrBlockTask+0x94>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f7fe fdf1 	bl	8002a84 <vQueueWaitForMessageRestricted>
 8003ea2:	f7ff f859 	bl	8002f58 <xTaskResumeAll>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <prvProcessTimerOrBlockTask+0x86>
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <prvProcessTimerOrBlockTask+0x98>)
 8003eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	e001      	b.n	8003ec2 <prvProcessTimerOrBlockTask+0x86>
 8003ebe:	f7ff f84b 	bl	8002f58 <xTaskResumeAll>
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200001d0 	.word	0x200001d0
 8003ed0:	200001d4 	.word	0x200001d4
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <prvGetNextExpireTime>:
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <prvGetNextExpireTime+0x40>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <prvGetNextExpireTime+0x16>
 8003eea:	2201      	movs	r2, #1
 8003eec:	e000      	b.n	8003ef0 <prvGetNextExpireTime+0x18>
 8003eee:	2200      	movs	r2, #0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d105      	bne.n	8003f08 <prvGetNextExpireTime+0x30>
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <prvGetNextExpireTime+0x40>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	e001      	b.n	8003f0c <prvGetNextExpireTime+0x34>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	200001cc 	.word	0x200001cc

08003f1c <prvSampleTimeNow>:
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	f7ff f914 	bl	8003150 <xTaskGetTickCount>
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <prvSampleTimeNow+0x3c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d205      	bcs.n	8003f40 <prvSampleTimeNow+0x24>
 8003f34:	f000 f912 	bl	800415c <prvSwitchTimerLists>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	e002      	b.n	8003f46 <prvSampleTimeNow+0x2a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <prvSampleTimeNow+0x3c>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200001dc 	.word	0x200001dc

08003f5c <prvInsertTimerInActiveList>:
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	611a      	str	r2, [r3, #16]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d812      	bhi.n	8003fa8 <prvInsertTimerInActiveList+0x4c>
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d302      	bcc.n	8003f96 <prvInsertTimerInActiveList+0x3a>
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e01b      	b.n	8003fce <prvInsertTimerInActiveList+0x72>
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <prvInsertTimerInActiveList+0x7c>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f000 f986 	bl	80042b2 <vListInsert>
 8003fa6:	e012      	b.n	8003fce <prvInsertTimerInActiveList+0x72>
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d206      	bcs.n	8003fbe <prvInsertTimerInActiveList+0x62>
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d302      	bcc.n	8003fbe <prvInsertTimerInActiveList+0x62>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e007      	b.n	8003fce <prvInsertTimerInActiveList+0x72>
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <prvInsertTimerInActiveList+0x80>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f000 f972 	bl	80042b2 <vListInsert>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	200001d0 	.word	0x200001d0
 8003fdc:	200001cc 	.word	0x200001cc

08003fe0 <prvProcessReceivedCommands>:
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	e0a6      	b.n	8004136 <prvProcessReceivedCommands+0x156>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f2c0 80a2 	blt.w	8004134 <prvProcessReceivedCommands+0x154>
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <prvProcessReceivedCommands+0x26>
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4618      	mov	r0, r3
 8004002:	f000 f98e 	bl	8004322 <uxListRemove>
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff87 	bl	8003f1c <prvSampleTimeNow>
 800400e:	61b8      	str	r0, [r7, #24]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3b01      	subs	r3, #1
 8004014:	2b08      	cmp	r3, #8
 8004016:	f200 808e 	bhi.w	8004136 <prvProcessReceivedCommands+0x156>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <prvProcessReceivedCommands+0x40>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004045 	.word	0x08004045
 8004024:	08004045 	.word	0x08004045
 8004028:	080040ad 	.word	0x080040ad
 800402c:	080040c1 	.word	0x080040c1
 8004030:	0800410b 	.word	0x0800410b
 8004034:	08004045 	.word	0x08004045
 8004038:	08004045 	.word	0x08004045
 800403c:	080040ad 	.word	0x080040ad
 8004040:	080040c1 	.word	0x080040c1
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	b2da      	uxtb	r2, r3
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	18d1      	adds	r1, r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	69f8      	ldr	r0, [r7, #28]
 8004064:	f7ff ff7a 	bl	8003f5c <prvInsertTimerInActiveList>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d063      	beq.n	8004136 <prvProcessReceivedCommands+0x156>
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <prvProcessReceivedCommands+0xb0>
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	4413      	add	r3, r2
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4619      	mov	r1, r3
 8004088:	69f8      	ldr	r0, [r7, #28]
 800408a:	f7ff fe73 	bl	8003d74 <prvReloadTimer>
 800408e:	e008      	b.n	80040a2 <prvProcessReceivedCommands+0xc2>
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	b2da      	uxtb	r2, r3
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	69f8      	ldr	r0, [r7, #28]
 80040a8:	4798      	blx	r3
 80040aa:	e044      	b.n	8004136 <prvProcessReceivedCommands+0x156>
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80040be:	e03a      	b.n	8004136 <prvProcessReceivedCommands+0x156>
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	619a      	str	r2, [r3, #24]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <prvProcessReceivedCommands+0x116>
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	bf00      	nop
 80040f4:	e7fe      	b.n	80040f4 <prvProcessReceivedCommands+0x114>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	18d1      	adds	r1, r2, r3
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	69f8      	ldr	r0, [r7, #28]
 8004104:	f7ff ff2a 	bl	8003f5c <prvInsertTimerInActiveList>
 8004108:	e015      	b.n	8004136 <prvProcessReceivedCommands+0x156>
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <prvProcessReceivedCommands+0x140>
 8004118:	69f8      	ldr	r0, [r7, #28]
 800411a:	f000 f88d 	bl	8004238 <vPortFree>
 800411e:	e00a      	b.n	8004136 <prvProcessReceivedCommands+0x156>
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004132:	e000      	b.n	8004136 <prvProcessReceivedCommands+0x156>
 8004134:	bf00      	nop
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <prvProcessReceivedCommands+0x178>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f107 0108 	add.w	r1, r7, #8
 800413e:	2200      	movs	r2, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe fa79 	bl	8002638 <xQueueReceive>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	f47f af4d 	bne.w	8003fe8 <prvProcessReceivedCommands+0x8>
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	200001d4 	.word	0x200001d4

0800415c <prvSwitchTimerLists>:
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	e009      	b.n	8004178 <prvSwitchTimerLists+0x1c>
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <prvSwitchTimerLists+0x44>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	f04f 31ff 	mov.w	r1, #4294967295
 8004172:	6838      	ldr	r0, [r7, #0]
 8004174:	f7ff fe20 	bl	8003db8 <prvProcessExpiredTimer>
 8004178:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <prvSwitchTimerLists+0x44>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <prvSwitchTimerLists+0x8>
 8004182:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <prvSwitchTimerLists+0x44>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <prvSwitchTimerLists+0x48>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a04      	ldr	r2, [pc, #16]	; (80041a0 <prvSwitchTimerLists+0x44>)
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4a04      	ldr	r2, [pc, #16]	; (80041a4 <prvSwitchTimerLists+0x48>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	200001cc 	.word	0x200001cc
 80041a4:	200001d0 	.word	0x200001d0

080041a8 <prvCheckForValidListAndQueue>:
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	f000 f9d8 	bl	8004560 <vPortEnterCritical>
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <prvCheckForValidListAndQueue+0x54>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11d      	bne.n	80041f4 <prvCheckForValidListAndQueue+0x4c>
 80041b8:	4811      	ldr	r0, [pc, #68]	; (8004200 <prvCheckForValidListAndQueue+0x58>)
 80041ba:	f000 f84f 	bl	800425c <vListInitialise>
 80041be:	4811      	ldr	r0, [pc, #68]	; (8004204 <prvCheckForValidListAndQueue+0x5c>)
 80041c0:	f000 f84c 	bl	800425c <vListInitialise>
 80041c4:	4b10      	ldr	r3, [pc, #64]	; (8004208 <prvCheckForValidListAndQueue+0x60>)
 80041c6:	4a0e      	ldr	r2, [pc, #56]	; (8004200 <prvCheckForValidListAndQueue+0x58>)
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <prvCheckForValidListAndQueue+0x64>)
 80041cc:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <prvCheckForValidListAndQueue+0x5c>)
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	2200      	movs	r2, #0
 80041d2:	210c      	movs	r1, #12
 80041d4:	200a      	movs	r0, #10
 80041d6:	f7fe f90b 	bl	80023f0 <xQueueGenericCreate>
 80041da:	4603      	mov	r3, r0
 80041dc:	4a07      	ldr	r2, [pc, #28]	; (80041fc <prvCheckForValidListAndQueue+0x54>)
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <prvCheckForValidListAndQueue+0x54>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <prvCheckForValidListAndQueue+0x4c>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <prvCheckForValidListAndQueue+0x54>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4908      	ldr	r1, [pc, #32]	; (8004210 <prvCheckForValidListAndQueue+0x68>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe fbfa 	bl	80029e8 <vQueueAddToRegistry>
 80041f4:	f000 f9e4 	bl	80045c0 <vPortExitCritical>
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	200001d4 	.word	0x200001d4
 8004200:	200001a4 	.word	0x200001a4
 8004204:	200001b8 	.word	0x200001b8
 8004208:	200001cc 	.word	0x200001cc
 800420c:	200001d0 	.word	0x200001d0
 8004210:	08004b8c 	.word	0x08004b8c

08004214 <pvPortMalloc>:
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	f7fe fe58 	bl	8002ed0 <vTaskSuspendAll>
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fba9 	bl	8004978 <malloc>
 8004226:	4603      	mov	r3, r0
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	f7fe fe95 	bl	8002f58 <xTaskResumeAll>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <vPortFree>:
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d006      	beq.n	8004254 <vPortFree+0x1c>
 8004246:	f7fe fe43 	bl	8002ed0 <vTaskSuspendAll>
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fb9c 	bl	8004988 <free>
 8004250:	f7fe fe82 	bl	8002f58 <xTaskResumeAll>
 8004254:	bf00      	nop
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <vListInitialise>:
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f103 0208 	add.w	r2, r3, #8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f04f 32ff 	mov.w	r2, #4294967295
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f103 0208 	add.w	r2, r3, #8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f103 0208 	add.w	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <vListInitialiseItem>:
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	611a      	str	r2, [r3, #16]
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <vListInsert>:
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c8:	d103      	bne.n	80042d2 <vListInsert+0x20>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	e00c      	b.n	80042ec <vListInsert+0x3a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3308      	adds	r3, #8
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e002      	b.n	80042e0 <vListInsert+0x2e>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d2f6      	bcs.n	80042da <vListInsert+0x28>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	609a      	str	r2, [r3, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	611a      	str	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <uxListRemove>:
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6892      	ldr	r2, [r2, #8]
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6852      	ldr	r2, [r2, #4]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d103      	bne.n	8004356 <uxListRemove+0x34>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	1e5a      	subs	r2, r3, #1
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <pxPortInitialiseStack>:
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3b04      	subs	r3, #4
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	3b04      	subs	r3, #4
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3b04      	subs	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <pxPortInitialiseStack+0x54>)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b14      	subs	r3, #20
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3b20      	subs	r3, #32
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	080043cd 	.word	0x080043cd

080043cc <prvTaskExitError>:
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <prvTaskExitError+0x54>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043de:	d00a      	beq.n	80043f6 <prvTaskExitError+0x2a>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <prvTaskExitError+0x28>
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0fc      	beq.n	800440c <prvTaskExitError+0x40>
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000010 	.word	0x20000010
	...

08004430 <SVC_Handler>:
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <pxCurrentTCBConst2>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800443a:	f380 8809 	msr	PSP, r0
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	f04e 0e0d 	orr.w	lr, lr, #13
 800444e:	4770      	bx	lr

08004450 <pxCurrentTCBConst2>:
 8004450:	200000a0 	.word	0x200000a0
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <prvPortStartFirstTask>:
 8004458:	4806      	ldr	r0, [pc, #24]	; (8004474 <prvPortStartFirstTask+0x1c>)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f380 8808 	msr	MSP, r0
 8004462:	b662      	cpsie	i
 8004464:	b661      	cpsie	f
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	df00      	svc	0
 8004470:	bf00      	nop
 8004472:	0000      	.short	0x0000
 8004474:	e000ed08 	.word	0xe000ed08
 8004478:	bf00      	nop
 800447a:	bf00      	nop

0800447c <xPortStartScheduler>:
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	4b32      	ldr	r3, [pc, #200]	; (800454c <xPortStartScheduler+0xd0>)
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	22ff      	movs	r2, #255	; 0xff
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	70fb      	strb	r3, [r7, #3]
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <xPortStartScheduler+0xd4>)
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <xPortStartScheduler+0xd8>)
 80044ac:	2207      	movs	r2, #7
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e009      	b.n	80044c6 <xPortStartScheduler+0x4a>
 80044b2:	4b28      	ldr	r3, [pc, #160]	; (8004554 <xPortStartScheduler+0xd8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	4a26      	ldr	r2, [pc, #152]	; (8004554 <xPortStartScheduler+0xd8>)
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	70fb      	strb	r3, [r7, #3]
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d0ef      	beq.n	80044b2 <xPortStartScheduler+0x36>
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <xPortStartScheduler+0xd8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f1c3 0307 	rsb	r3, r3, #7
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d00a      	beq.n	80044f4 <xPortStartScheduler+0x78>
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	60bb      	str	r3, [r7, #8]
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <xPortStartScheduler+0x76>
 80044f4:	4b17      	ldr	r3, [pc, #92]	; (8004554 <xPortStartScheduler+0xd8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	4a16      	ldr	r2, [pc, #88]	; (8004554 <xPortStartScheduler+0xd8>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <xPortStartScheduler+0xd8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004506:	4a13      	ldr	r2, [pc, #76]	; (8004554 <xPortStartScheduler+0xd8>)
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	b2da      	uxtb	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	4b11      	ldr	r3, [pc, #68]	; (8004558 <xPortStartScheduler+0xdc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a10      	ldr	r2, [pc, #64]	; (8004558 <xPortStartScheduler+0xdc>)
 8004518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <xPortStartScheduler+0xdc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <xPortStartScheduler+0xdc>)
 8004524:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	f000 f981 	bl	8004830 <vPortSetupTimerInterrupt>
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <xPortStartScheduler+0xe0>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	f7ff ff90 	bl	8004458 <prvPortStartFirstTask>
 8004538:	f7fe ff94 	bl	8003464 <vTaskSwitchContext>
 800453c:	f7ff ff46 	bl	80043cc <prvTaskExitError>
 8004540:	2300      	movs	r3, #0
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	e000e400 	.word	0xe000e400
 8004550:	200001ec 	.word	0x200001ec
 8004554:	200001f0 	.word	0x200001f0
 8004558:	e000ed20 	.word	0xe000ed20
 800455c:	20000010 	.word	0x20000010

08004560 <vPortEnterCritical>:
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	bf00      	nop
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <vPortEnterCritical+0x58>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <vPortEnterCritical+0x58>)
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <vPortEnterCritical+0x58>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10f      	bne.n	80045ac <vPortEnterCritical+0x4c>
 800458c:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <vPortEnterCritical+0x5c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <vPortEnterCritical+0x4c>
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <vPortEnterCritical+0x4a>
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000010 	.word	0x20000010
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <vPortExitCritical>:
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4b11      	ldr	r3, [pc, #68]	; (800460c <vPortExitCritical+0x4c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <vPortExitCritical+0x24>
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	bf00      	nop
 80045e2:	e7fe      	b.n	80045e2 <vPortExitCritical+0x22>
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <vPortExitCritical+0x4c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	4a08      	ldr	r2, [pc, #32]	; (800460c <vPortExitCritical+0x4c>)
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <vPortExitCritical+0x4c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <vPortExitCritical+0x42>
 80045f6:	2300      	movs	r3, #0
 80045f8:	603b      	str	r3, [r7, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	20000010 	.word	0x20000010

08004610 <PendSV_Handler>:
 8004610:	f3ef 8009 	mrs	r0, PSP
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <pxCurrentTCBConst>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004620:	6010      	str	r0, [r2, #0]
 8004622:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004626:	f04f 0050 	mov.w	r0, #80	; 0x50
 800462a:	f380 8811 	msr	BASEPRI, r0
 800462e:	f7fe ff19 	bl	8003464 <vTaskSwitchContext>
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f380 8811 	msr	BASEPRI, r0
 800463a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	6808      	ldr	r0, [r1, #0]
 8004642:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004646:	f380 8809 	msr	PSP, r0
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	4770      	bx	lr

08004650 <pxCurrentTCBConst>:
 8004650:	200000a0 	.word	0x200000a0
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <SysTick_Handler>:
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	bf00      	nop
 8004672:	f7fe fddf 	bl	8003234 <xTaskIncrementTick>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <SysTick_Handler+0x2c>
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <SysTick_Handler+0x40>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	2300      	movs	r3, #0
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	bf00      	nop
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <vPortSuppressTicksAndSleep>:
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	4b5b      	ldr	r3, [pc, #364]	; (8004814 <vPortSuppressTicksAndSleep+0x178>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d902      	bls.n	80046b4 <vPortSuppressTicksAndSleep+0x18>
 80046ae:	4b59      	ldr	r3, [pc, #356]	; (8004814 <vPortSuppressTicksAndSleep+0x178>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	b672      	cpsid	i
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f7ff f937 	bl	8003930 <eTaskConfirmSleepModeStatus>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <vPortSuppressTicksAndSleep+0x30>
 80046c8:	b662      	cpsie	i
 80046ca:	e09e      	b.n	800480a <vPortSuppressTicksAndSleep+0x16e>
 80046cc:	4b52      	ldr	r3, [pc, #328]	; (8004818 <vPortSuppressTicksAndSleep+0x17c>)
 80046ce:	2206      	movs	r2, #6
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	4b52      	ldr	r3, [pc, #328]	; (800481c <vPortSuppressTicksAndSleep+0x180>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <vPortSuppressTicksAndSleep+0x48>
 80046de:	4b50      	ldr	r3, [pc, #320]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	4a4d      	ldr	r2, [pc, #308]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	fb02 f303 	mul.w	r3, r2, r3
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4413      	add	r3, r2
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <vPortSuppressTicksAndSleep+0x188>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <vPortSuppressTicksAndSleep+0x78>
 8004702:	4b48      	ldr	r3, [pc, #288]	; (8004824 <vPortSuppressTicksAndSleep+0x188>)
 8004704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	4b45      	ldr	r3, [pc, #276]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69fa      	ldr	r2, [r7, #28]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	4b44      	ldr	r3, [pc, #272]	; (8004828 <vPortSuppressTicksAndSleep+0x18c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	429a      	cmp	r2, r3
 800471c:	d904      	bls.n	8004728 <vPortSuppressTicksAndSleep+0x8c>
 800471e:	4b42      	ldr	r3, [pc, #264]	; (8004828 <vPortSuppressTicksAndSleep+0x18c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	4a40      	ldr	r2, [pc, #256]	; (800482c <vPortSuppressTicksAndSleep+0x190>)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b3b      	ldr	r3, [pc, #236]	; (800481c <vPortSuppressTicksAndSleep+0x180>)
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	4b38      	ldr	r3, [pc, #224]	; (8004818 <vPortSuppressTicksAndSleep+0x17c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a37      	ldr	r2, [pc, #220]	; (8004818 <vPortSuppressTicksAndSleep+0x17c>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <vPortSuppressTicksAndSleep+0xb8>
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	bf30      	wfi
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	b662      	cpsie	i
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	b672      	cpsid	i
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <vPortSuppressTicksAndSleep+0x17c>)
 800476a:	2206      	movs	r2, #6
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <vPortSuppressTicksAndSleep+0x17c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01d      	beq.n	80047b6 <vPortSuppressTicksAndSleep+0x11a>
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b27      	ldr	r3, [pc, #156]	; (800481c <vPortSuppressTicksAndSleep+0x180>)
 8004780:	6819      	ldr	r1, [r3, #0]
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	1acb      	subs	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	3b01      	subs	r3, #1
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	4b26      	ldr	r3, [pc, #152]	; (8004828 <vPortSuppressTicksAndSleep+0x18c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	429a      	cmp	r2, r3
 8004794:	d904      	bls.n	80047a0 <vPortSuppressTicksAndSleep+0x104>
 8004796:	4b22      	ldr	r3, [pc, #136]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	429a      	cmp	r2, r3
 800479e:	d903      	bls.n	80047a8 <vPortSuppressTicksAndSleep+0x10c>
 80047a0:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	4a20      	ldr	r2, [pc, #128]	; (800482c <vPortSuppressTicksAndSleep+0x190>)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	e01a      	b.n	80047ec <vPortSuppressTicksAndSleep+0x150>
 80047b6:	4b19      	ldr	r3, [pc, #100]	; (800481c <vPortSuppressTicksAndSleep+0x180>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	4b18      	ldr	r3, [pc, #96]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	fb02 f203 	mul.w	r2, r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	4b14      	ldr	r3, [pc, #80]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	3301      	adds	r3, #1
 80047dc:	4a10      	ldr	r2, [pc, #64]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	fb02 f203 	mul.w	r2, r2, r3
 80047e4:	4911      	ldr	r1, [pc, #68]	; (800482c <vPortSuppressTicksAndSleep+0x190>)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	600b      	str	r3, [r1, #0]
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <vPortSuppressTicksAndSleep+0x180>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <vPortSuppressTicksAndSleep+0x17c>)
 80047f4:	2207      	movs	r2, #7
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	4b09      	ldr	r3, [pc, #36]	; (8004820 <vPortSuppressTicksAndSleep+0x184>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a0b      	ldr	r2, [pc, #44]	; (800482c <vPortSuppressTicksAndSleep+0x190>)
 80047fe:	3b01      	subs	r3, #1
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	69b8      	ldr	r0, [r7, #24]
 8004804:	f7fe fcbc 	bl	8003180 <vTaskStepTick>
 8004808:	b662      	cpsie	i
 800480a:	bf00      	nop
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200001e4 	.word	0x200001e4
 8004818:	e000e010 	.word	0xe000e010
 800481c:	e000e018 	.word	0xe000e018
 8004820:	200001e0 	.word	0x200001e0
 8004824:	e000ed04 	.word	0xe000ed04
 8004828:	200001e8 	.word	0x200001e8
 800482c:	e000e014 	.word	0xe000e014

08004830 <vPortSetupTimerInterrupt>:
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
 8004834:	4b14      	ldr	r3, [pc, #80]	; (8004888 <vPortSetupTimerInterrupt+0x58>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a14      	ldr	r2, [pc, #80]	; (800488c <vPortSetupTimerInterrupt+0x5c>)
 800483a:	fba2 2303 	umull	r2, r3, r2, r3
 800483e:	099b      	lsrs	r3, r3, #6
 8004840:	4a13      	ldr	r2, [pc, #76]	; (8004890 <vPortSetupTimerInterrupt+0x60>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b12      	ldr	r3, [pc, #72]	; (8004890 <vPortSetupTimerInterrupt+0x60>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	4a10      	ldr	r2, [pc, #64]	; (8004894 <vPortSetupTimerInterrupt+0x64>)
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b10      	ldr	r3, [pc, #64]	; (8004898 <vPortSetupTimerInterrupt+0x68>)
 8004856:	225e      	movs	r2, #94	; 0x5e
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	4b10      	ldr	r3, [pc, #64]	; (800489c <vPortSetupTimerInterrupt+0x6c>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <vPortSetupTimerInterrupt+0x70>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <vPortSetupTimerInterrupt+0x58>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a08      	ldr	r2, [pc, #32]	; (800488c <vPortSetupTimerInterrupt+0x5c>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	4a0c      	ldr	r2, [pc, #48]	; (80048a4 <vPortSetupTimerInterrupt+0x74>)
 8004874:	3b01      	subs	r3, #1
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b08      	ldr	r3, [pc, #32]	; (800489c <vPortSetupTimerInterrupt+0x6c>)
 800487a:	2207      	movs	r2, #7
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	bf00      	nop
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000000 	.word	0x20000000
 800488c:	10624dd3 	.word	0x10624dd3
 8004890:	200001e0 	.word	0x200001e0
 8004894:	200001e4 	.word	0x200001e4
 8004898:	200001e8 	.word	0x200001e8
 800489c:	e000e010 	.word	0xe000e010
 80048a0:	e000e018 	.word	0xe000e018
 80048a4:	e000e014 	.word	0xe000e014

080048a8 <vPortValidateInterruptPriority>:
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	f3ef 8305 	mrs	r3, IPSR
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b0f      	cmp	r3, #15
 80048b8:	d914      	bls.n	80048e4 <vPortValidateInterruptPriority+0x3c>
 80048ba:	4a16      	ldr	r2, [pc, #88]	; (8004914 <vPortValidateInterruptPriority+0x6c>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	72fb      	strb	r3, [r7, #11]
 80048c4:	4b14      	ldr	r3, [pc, #80]	; (8004918 <vPortValidateInterruptPriority+0x70>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	7afa      	ldrb	r2, [r7, #11]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d20a      	bcs.n	80048e4 <vPortValidateInterruptPriority+0x3c>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <vPortValidateInterruptPriority+0x3a>
 80048e4:	4b0d      	ldr	r3, [pc, #52]	; (800491c <vPortValidateInterruptPriority+0x74>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <vPortValidateInterruptPriority+0x78>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d90a      	bls.n	800490a <vPortValidateInterruptPriority+0x62>
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <vPortValidateInterruptPriority+0x60>
 800490a:	bf00      	nop
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr
 8004914:	e000e3f0 	.word	0xe000e3f0
 8004918:	200001ec 	.word	0x200001ec
 800491c:	e000ed0c 	.word	0xe000ed0c
 8004920:	200001f0 	.word	0x200001f0

08004924 <__errno>:
 8004924:	4b01      	ldr	r3, [pc, #4]	; (800492c <__errno+0x8>)
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000014 	.word	0x20000014

08004930 <__libc_init_array>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	2600      	movs	r6, #0
 8004934:	4d0c      	ldr	r5, [pc, #48]	; (8004968 <__libc_init_array+0x38>)
 8004936:	4c0d      	ldr	r4, [pc, #52]	; (800496c <__libc_init_array+0x3c>)
 8004938:	1b64      	subs	r4, r4, r5
 800493a:	10a4      	asrs	r4, r4, #2
 800493c:	42a6      	cmp	r6, r4
 800493e:	d109      	bne.n	8004954 <__libc_init_array+0x24>
 8004940:	f000 f904 	bl	8004b4c <_init>
 8004944:	2600      	movs	r6, #0
 8004946:	4d0a      	ldr	r5, [pc, #40]	; (8004970 <__libc_init_array+0x40>)
 8004948:	4c0a      	ldr	r4, [pc, #40]	; (8004974 <__libc_init_array+0x44>)
 800494a:	1b64      	subs	r4, r4, r5
 800494c:	10a4      	asrs	r4, r4, #2
 800494e:	42a6      	cmp	r6, r4
 8004950:	d105      	bne.n	800495e <__libc_init_array+0x2e>
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f855 3b04 	ldr.w	r3, [r5], #4
 8004958:	4798      	blx	r3
 800495a:	3601      	adds	r6, #1
 800495c:	e7ee      	b.n	800493c <__libc_init_array+0xc>
 800495e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004962:	4798      	blx	r3
 8004964:	3601      	adds	r6, #1
 8004966:	e7f2      	b.n	800494e <__libc_init_array+0x1e>
 8004968:	08004bc0 	.word	0x08004bc0
 800496c:	08004bc0 	.word	0x08004bc0
 8004970:	08004bc0 	.word	0x08004bc0
 8004974:	08004bc4 	.word	0x08004bc4

08004978 <malloc>:
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <malloc+0xc>)
 800497a:	4601      	mov	r1, r0
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	f000 b86d 	b.w	8004a5c <_malloc_r>
 8004982:	bf00      	nop
 8004984:	20000014 	.word	0x20000014

08004988 <free>:
 8004988:	4b02      	ldr	r3, [pc, #8]	; (8004994 <free+0xc>)
 800498a:	4601      	mov	r1, r0
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	f000 b819 	b.w	80049c4 <_free_r>
 8004992:	bf00      	nop
 8004994:	20000014 	.word	0x20000014

08004998 <memcpy>:
 8004998:	440a      	add	r2, r1
 800499a:	4291      	cmp	r1, r2
 800499c:	f100 33ff 	add.w	r3, r0, #4294967295
 80049a0:	d100      	bne.n	80049a4 <memcpy+0xc>
 80049a2:	4770      	bx	lr
 80049a4:	b510      	push	{r4, lr}
 80049a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049aa:	4291      	cmp	r1, r2
 80049ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049b0:	d1f9      	bne.n	80049a6 <memcpy+0xe>
 80049b2:	bd10      	pop	{r4, pc}

080049b4 <memset>:
 80049b4:	4603      	mov	r3, r0
 80049b6:	4402      	add	r2, r0
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d100      	bne.n	80049be <memset+0xa>
 80049bc:	4770      	bx	lr
 80049be:	f803 1b01 	strb.w	r1, [r3], #1
 80049c2:	e7f9      	b.n	80049b8 <memset+0x4>

080049c4 <_free_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	4605      	mov	r5, r0
 80049c8:	2900      	cmp	r1, #0
 80049ca:	d043      	beq.n	8004a54 <_free_r+0x90>
 80049cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049d0:	1f0c      	subs	r4, r1, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	bfb8      	it	lt
 80049d6:	18e4      	addlt	r4, r4, r3
 80049d8:	f000 f8aa 	bl	8004b30 <__malloc_lock>
 80049dc:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <_free_r+0x94>)
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	4610      	mov	r0, r2
 80049e2:	b933      	cbnz	r3, 80049f2 <_free_r+0x2e>
 80049e4:	6063      	str	r3, [r4, #4]
 80049e6:	6014      	str	r4, [r2, #0]
 80049e8:	4628      	mov	r0, r5
 80049ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049ee:	f000 b8a5 	b.w	8004b3c <__malloc_unlock>
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	d90a      	bls.n	8004a0c <_free_r+0x48>
 80049f6:	6821      	ldr	r1, [r4, #0]
 80049f8:	1862      	adds	r2, r4, r1
 80049fa:	4293      	cmp	r3, r2
 80049fc:	bf01      	itttt	eq
 80049fe:	681a      	ldreq	r2, [r3, #0]
 8004a00:	685b      	ldreq	r3, [r3, #4]
 8004a02:	1852      	addeq	r2, r2, r1
 8004a04:	6022      	streq	r2, [r4, #0]
 8004a06:	6063      	str	r3, [r4, #4]
 8004a08:	6004      	str	r4, [r0, #0]
 8004a0a:	e7ed      	b.n	80049e8 <_free_r+0x24>
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	b10b      	cbz	r3, 8004a16 <_free_r+0x52>
 8004a12:	42a3      	cmp	r3, r4
 8004a14:	d9fa      	bls.n	8004a0c <_free_r+0x48>
 8004a16:	6811      	ldr	r1, [r2, #0]
 8004a18:	1850      	adds	r0, r2, r1
 8004a1a:	42a0      	cmp	r0, r4
 8004a1c:	d10b      	bne.n	8004a36 <_free_r+0x72>
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	4401      	add	r1, r0
 8004a22:	1850      	adds	r0, r2, r1
 8004a24:	4283      	cmp	r3, r0
 8004a26:	6011      	str	r1, [r2, #0]
 8004a28:	d1de      	bne.n	80049e8 <_free_r+0x24>
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4401      	add	r1, r0
 8004a30:	6011      	str	r1, [r2, #0]
 8004a32:	6053      	str	r3, [r2, #4]
 8004a34:	e7d8      	b.n	80049e8 <_free_r+0x24>
 8004a36:	d902      	bls.n	8004a3e <_free_r+0x7a>
 8004a38:	230c      	movs	r3, #12
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	e7d4      	b.n	80049e8 <_free_r+0x24>
 8004a3e:	6820      	ldr	r0, [r4, #0]
 8004a40:	1821      	adds	r1, r4, r0
 8004a42:	428b      	cmp	r3, r1
 8004a44:	bf01      	itttt	eq
 8004a46:	6819      	ldreq	r1, [r3, #0]
 8004a48:	685b      	ldreq	r3, [r3, #4]
 8004a4a:	1809      	addeq	r1, r1, r0
 8004a4c:	6021      	streq	r1, [r4, #0]
 8004a4e:	6063      	str	r3, [r4, #4]
 8004a50:	6054      	str	r4, [r2, #4]
 8004a52:	e7c9      	b.n	80049e8 <_free_r+0x24>
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
 8004a56:	bf00      	nop
 8004a58:	200001f4 	.word	0x200001f4

08004a5c <_malloc_r>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	1ccd      	adds	r5, r1, #3
 8004a60:	f025 0503 	bic.w	r5, r5, #3
 8004a64:	3508      	adds	r5, #8
 8004a66:	2d0c      	cmp	r5, #12
 8004a68:	bf38      	it	cc
 8004a6a:	250c      	movcc	r5, #12
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	4606      	mov	r6, r0
 8004a70:	db01      	blt.n	8004a76 <_malloc_r+0x1a>
 8004a72:	42a9      	cmp	r1, r5
 8004a74:	d903      	bls.n	8004a7e <_malloc_r+0x22>
 8004a76:	230c      	movs	r3, #12
 8004a78:	6033      	str	r3, [r6, #0]
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7e:	f000 f857 	bl	8004b30 <__malloc_lock>
 8004a82:	4921      	ldr	r1, [pc, #132]	; (8004b08 <_malloc_r+0xac>)
 8004a84:	680a      	ldr	r2, [r1, #0]
 8004a86:	4614      	mov	r4, r2
 8004a88:	b99c      	cbnz	r4, 8004ab2 <_malloc_r+0x56>
 8004a8a:	4f20      	ldr	r7, [pc, #128]	; (8004b0c <_malloc_r+0xb0>)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	b923      	cbnz	r3, 8004a9a <_malloc_r+0x3e>
 8004a90:	4621      	mov	r1, r4
 8004a92:	4630      	mov	r0, r6
 8004a94:	f000 f83c 	bl	8004b10 <_sbrk_r>
 8004a98:	6038      	str	r0, [r7, #0]
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	f000 f837 	bl	8004b10 <_sbrk_r>
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	d123      	bne.n	8004aee <_malloc_r+0x92>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	f000 f846 	bl	8004b3c <__malloc_unlock>
 8004ab0:	e7e3      	b.n	8004a7a <_malloc_r+0x1e>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	1b5b      	subs	r3, r3, r5
 8004ab6:	d417      	bmi.n	8004ae8 <_malloc_r+0x8c>
 8004ab8:	2b0b      	cmp	r3, #11
 8004aba:	d903      	bls.n	8004ac4 <_malloc_r+0x68>
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	441c      	add	r4, r3
 8004ac0:	6025      	str	r5, [r4, #0]
 8004ac2:	e004      	b.n	8004ace <_malloc_r+0x72>
 8004ac4:	6863      	ldr	r3, [r4, #4]
 8004ac6:	42a2      	cmp	r2, r4
 8004ac8:	bf0c      	ite	eq
 8004aca:	600b      	streq	r3, [r1, #0]
 8004acc:	6053      	strne	r3, [r2, #4]
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 f834 	bl	8004b3c <__malloc_unlock>
 8004ad4:	f104 000b 	add.w	r0, r4, #11
 8004ad8:	1d23      	adds	r3, r4, #4
 8004ada:	f020 0007 	bic.w	r0, r0, #7
 8004ade:	1ac2      	subs	r2, r0, r3
 8004ae0:	d0cc      	beq.n	8004a7c <_malloc_r+0x20>
 8004ae2:	1a1b      	subs	r3, r3, r0
 8004ae4:	50a3      	str	r3, [r4, r2]
 8004ae6:	e7c9      	b.n	8004a7c <_malloc_r+0x20>
 8004ae8:	4622      	mov	r2, r4
 8004aea:	6864      	ldr	r4, [r4, #4]
 8004aec:	e7cc      	b.n	8004a88 <_malloc_r+0x2c>
 8004aee:	1cc4      	adds	r4, r0, #3
 8004af0:	f024 0403 	bic.w	r4, r4, #3
 8004af4:	42a0      	cmp	r0, r4
 8004af6:	d0e3      	beq.n	8004ac0 <_malloc_r+0x64>
 8004af8:	1a21      	subs	r1, r4, r0
 8004afa:	4630      	mov	r0, r6
 8004afc:	f000 f808 	bl	8004b10 <_sbrk_r>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d1dd      	bne.n	8004ac0 <_malloc_r+0x64>
 8004b04:	e7cf      	b.n	8004aa6 <_malloc_r+0x4a>
 8004b06:	bf00      	nop
 8004b08:	200001f4 	.word	0x200001f4
 8004b0c:	200001f8 	.word	0x200001f8

08004b10 <_sbrk_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	2300      	movs	r3, #0
 8004b14:	4d05      	ldr	r5, [pc, #20]	; (8004b2c <_sbrk_r+0x1c>)
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	f7fb fda0 	bl	8000660 <_sbrk>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_sbrk_r+0x1a>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_sbrk_r+0x1a>
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	200002bc 	.word	0x200002bc

08004b30 <__malloc_lock>:
 8004b30:	4801      	ldr	r0, [pc, #4]	; (8004b38 <__malloc_lock+0x8>)
 8004b32:	f000 b809 	b.w	8004b48 <__retarget_lock_acquire_recursive>
 8004b36:	bf00      	nop
 8004b38:	200002c4 	.word	0x200002c4

08004b3c <__malloc_unlock>:
 8004b3c:	4801      	ldr	r0, [pc, #4]	; (8004b44 <__malloc_unlock+0x8>)
 8004b3e:	f000 b804 	b.w	8004b4a <__retarget_lock_release_recursive>
 8004b42:	bf00      	nop
 8004b44:	200002c4 	.word	0x200002c4

08004b48 <__retarget_lock_acquire_recursive>:
 8004b48:	4770      	bx	lr

08004b4a <__retarget_lock_release_recursive>:
 8004b4a:	4770      	bx	lr

08004b4c <_init>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr

08004b58 <_fini>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr
