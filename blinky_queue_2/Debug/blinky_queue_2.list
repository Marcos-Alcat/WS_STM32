
blinky_queue_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080040f8  080040f8  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004140  08004140  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004140  08004140  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004140  08004140  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000078  080041c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  080041c0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011186  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b4  00000000  00000000  00031227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000339e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00034868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190a3  00000000  00000000  000355c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f448  00000000  00000000  0004e66b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901a9  00000000  00000000  0005dab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edc5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000edcb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080040e0 	.word	0x080040e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080040e0 	.word	0x080040e0

08000150 <LedOn>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void LedOn(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	uint32_t value;
	while(1){
		xQueueReceive(my_queue1, &value, portMAX_DELAY);
 8000158:	4b0e      	ldr	r3, [pc, #56]	; (8000194 <LedOn+0x44>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	f107 010c 	add.w	r1, r7, #12
 8000160:	f04f 32ff 	mov.w	r2, #4294967295
 8000164:	4618      	mov	r0, r3
 8000166:	f001 fd61 	bl	8001c2c <xQueueReceive>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800016a:	2200      	movs	r2, #0
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4809      	ldr	r0, [pc, #36]	; (8000198 <LedOn+0x48>)
 8000172:	f000 fccf 	bl	8000b14 <HAL_GPIO_WritePin>
		vTaskDelay(1000);
 8000176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017a:	f002 f935 	bl	80023e8 <vTaskDelay>
		xQueueSend(my_queue2, &value, portMAX_DELAY);
 800017e:	4b07      	ldr	r3, [pc, #28]	; (800019c <LedOn+0x4c>)
 8000180:	6818      	ldr	r0, [r3, #0]
 8000182:	f107 010c 	add.w	r1, r7, #12
 8000186:	2300      	movs	r3, #0
 8000188:	f04f 32ff 	mov.w	r2, #4294967295
 800018c:	f001 fc50 	bl	8001a30 <xQueueGenericSend>
		xQueueReceive(my_queue1, &value, portMAX_DELAY);
 8000190:	e7e2      	b.n	8000158 <LedOn+0x8>
 8000192:	bf00      	nop
 8000194:	200001f8 	.word	0x200001f8
 8000198:	40011000 	.word	0x40011000
 800019c:	200001f4 	.word	0x200001f4

080001a0 <LedOff>:
	  }
}

static void LedOff(void *pvParameters){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b084      	sub	sp, #16
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	uint32_t value;
	while(1){
		xQueueReceive(my_queue2, &value, portMAX_DELAY);
 80001a8:	4b0e      	ldr	r3, [pc, #56]	; (80001e4 <LedOff+0x44>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	f107 010c 	add.w	r1, r7, #12
 80001b0:	f04f 32ff 	mov.w	r2, #4294967295
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 fd39 	bl	8001c2c <xQueueReceive>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <LedOff+0x48>)
 80001c2:	f000 fca7 	bl	8000b14 <HAL_GPIO_WritePin>
		vTaskDelay(1000);
 80001c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ca:	f002 f90d 	bl	80023e8 <vTaskDelay>
		xQueueSend(my_queue1, &value, portMAX_DELAY);
 80001ce:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LedOff+0x4c>)
 80001d0:	6818      	ldr	r0, [r3, #0]
 80001d2:	f107 010c 	add.w	r1, r7, #12
 80001d6:	2300      	movs	r3, #0
 80001d8:	f04f 32ff 	mov.w	r2, #4294967295
 80001dc:	f001 fc28 	bl	8001a30 <xQueueGenericSend>
		xQueueReceive(my_queue2, &value, portMAX_DELAY);
 80001e0:	e7e2      	b.n	80001a8 <LedOff+0x8>
 80001e2:	bf00      	nop
 80001e4:	200001f4 	.word	0x200001f4
 80001e8:	40011000 	.word	0x40011000
 80001ec:	200001f8 	.word	0x200001f8

080001f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 f9f7 	bl	80005e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f841 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 f885 	bl	800030c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(LedOn, "", 100, NULL, 1, NULL);
 8000202:	2300      	movs	r3, #0
 8000204:	9301      	str	r3, [sp, #4]
 8000206:	2301      	movs	r3, #1
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	2300      	movs	r3, #0
 800020c:	2264      	movs	r2, #100	; 0x64
 800020e:	4917      	ldr	r1, [pc, #92]	; (800026c <main+0x7c>)
 8000210:	4817      	ldr	r0, [pc, #92]	; (8000270 <main+0x80>)
 8000212:	f001 ff7d 	bl	8002110 <xTaskCreate>
  xTaskCreate(LedOff, "", 100, NULL, 1, NULL);
 8000216:	2300      	movs	r3, #0
 8000218:	9301      	str	r3, [sp, #4]
 800021a:	2301      	movs	r3, #1
 800021c:	9300      	str	r3, [sp, #0]
 800021e:	2300      	movs	r3, #0
 8000220:	2264      	movs	r2, #100	; 0x64
 8000222:	4912      	ldr	r1, [pc, #72]	; (800026c <main+0x7c>)
 8000224:	4813      	ldr	r0, [pc, #76]	; (8000274 <main+0x84>)
 8000226:	f001 ff73 	bl	8002110 <xTaskCreate>
  my_queue1 = xQueueCreate(1,sizeof(uint32_t));
 800022a:	2200      	movs	r2, #0
 800022c:	2104      	movs	r1, #4
 800022e:	2001      	movs	r0, #1
 8000230:	f001 fb8c 	bl	800194c <xQueueGenericCreate>
 8000234:	4603      	mov	r3, r0
 8000236:	4a10      	ldr	r2, [pc, #64]	; (8000278 <main+0x88>)
 8000238:	6013      	str	r3, [r2, #0]
  my_queue2 = xQueueCreate(1,sizeof(uint32_t));
 800023a:	2200      	movs	r2, #0
 800023c:	2104      	movs	r1, #4
 800023e:	2001      	movs	r0, #1
 8000240:	f001 fb84 	bl	800194c <xQueueGenericCreate>
 8000244:	4603      	mov	r3, r0
 8000246:	4a0d      	ldr	r2, [pc, #52]	; (800027c <main+0x8c>)
 8000248:	6013      	str	r3, [r2, #0]
  uint32_t value = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
  xQueueSend(my_queue1, &value, 0);
 800024e:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <main+0x88>)
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	1d39      	adds	r1, r7, #4
 8000254:	2300      	movs	r3, #0
 8000256:	2200      	movs	r2, #0
 8000258:	f001 fbea 	bl	8001a30 <xQueueGenericSend>
  vTaskStartScheduler();
 800025c:	f002 f8f8 	bl	8002450 <vTaskStartScheduler>
 8000260:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	080040f8 	.word	0x080040f8
 8000270:	08000151 	.word	0x08000151
 8000274:	080001a1 	.word	0x080001a1
 8000278:	200001f8 	.word	0x200001f8
 800027c:	200001f4 	.word	0x200001f4

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 fe5a 	bl	8003f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a2:	2301      	movs	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b0:	2301      	movs	r3, #1
 80002b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	2302      	movs	r3, #2
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fc3b 	bl	8000b44 <HAL_RCC_OscConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d4:	f000 f878 	bl	80003c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d8:	230f      	movs	r3, #15
 80002da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002dc:	2302      	movs	r3, #2
 80002de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2102      	movs	r1, #2
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fea6 	bl	8001044 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fe:	f000 f863 	bl	80003c8 <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3740      	adds	r7, #64	; 0x40
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <MX_GPIO_Init+0x90>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a1d      	ldr	r2, [pc, #116]	; (800039c <MX_GPIO_Init+0x90>)
 8000326:	f043 0310 	orr.w	r3, r3, #16
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b1b      	ldr	r3, [pc, #108]	; (800039c <MX_GPIO_Init+0x90>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0310 	and.w	r3, r3, #16
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000338:	4b18      	ldr	r3, [pc, #96]	; (800039c <MX_GPIO_Init+0x90>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a17      	ldr	r2, [pc, #92]	; (800039c <MX_GPIO_Init+0x90>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b15      	ldr	r3, [pc, #84]	; (800039c <MX_GPIO_Init+0x90>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0320 	and.w	r3, r3, #32
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000350:	4b12      	ldr	r3, [pc, #72]	; (800039c <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a11      	ldr	r2, [pc, #68]	; (800039c <MX_GPIO_Init+0x90>)
 8000356:	f043 0304 	orr.w	r3, r3, #4
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0304 	and.w	r3, r3, #4
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036e:	480c      	ldr	r0, [pc, #48]	; (80003a0 <MX_GPIO_Init+0x94>)
 8000370:	f000 fbd0 	bl	8000b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037a:	2301      	movs	r3, #1
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000382:	2302      	movs	r3, #2
 8000384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	4619      	mov	r1, r3
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <MX_GPIO_Init+0x94>)
 800038e:	f000 fa3d 	bl	800080c <HAL_GPIO_Init>

}
 8000392:	bf00      	nop
 8000394:	3720      	adds	r7, #32
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000
 80003a0:	40011000 	.word	0x40011000

080003a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a04      	ldr	r2, [pc, #16]	; (80003c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d101      	bne.n	80003ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003b6:	f000 f92d 	bl	8000614 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40012c00 	.word	0x40012c00

080003c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003cc:	b672      	cpsid	i
}
 80003ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <Error_Handler+0x8>
	...

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <HAL_MspInit+0x5c>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	4a14      	ldr	r2, [pc, #80]	; (8000430 <HAL_MspInit+0x5c>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6193      	str	r3, [r2, #24]
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x5c>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x5c>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	61d3      	str	r3, [r2, #28]
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <HAL_MspInit+0x60>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <HAL_MspInit+0x60>)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000
 8000434:	40010000 	.word	0x40010000

08000438 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b08c      	sub	sp, #48	; 0x30
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000448:	2200      	movs	r2, #0
 800044a:	6879      	ldr	r1, [r7, #4]
 800044c:	2019      	movs	r0, #25
 800044e:	f000 f9b2 	bl	80007b6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000452:	2019      	movs	r0, #25
 8000454:	f000 f9cb 	bl	80007ee <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <HAL_InitTick+0x9c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <HAL_InitTick+0x9c>)
 800045e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <HAL_InitTick+0x9c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000470:	f107 0210 	add.w	r2, r7, #16
 8000474:	f107 0314 	add.w	r3, r7, #20
 8000478:	4611      	mov	r1, r2
 800047a:	4618      	mov	r0, r3
 800047c:	f000 ff3e 	bl	80012fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000480:	f000 ff28 	bl	80012d4 <HAL_RCC_GetPCLK2Freq>
 8000484:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000488:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <HAL_InitTick+0xa0>)
 800048a:	fba2 2303 	umull	r2, r3, r2, r3
 800048e:	0c9b      	lsrs	r3, r3, #18
 8000490:	3b01      	subs	r3, #1
 8000492:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000494:	4b11      	ldr	r3, [pc, #68]	; (80004dc <HAL_InitTick+0xa4>)
 8000496:	4a12      	ldr	r2, [pc, #72]	; (80004e0 <HAL_InitTick+0xa8>)
 8000498:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <HAL_InitTick+0xa4>)
 800049c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_InitTick+0xa4>)
 80004a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_InitTick+0xa4>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <HAL_InitTick+0xa4>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <HAL_InitTick+0xa4>)
 80004b6:	f000 ff6f 	bl	8001398 <HAL_TIM_Base_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d104      	bne.n	80004ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004c0:	4806      	ldr	r0, [pc, #24]	; (80004dc <HAL_InitTick+0xa4>)
 80004c2:	f000 ffc1 	bl	8001448 <HAL_TIM_Base_Start_IT>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e000      	b.n	80004cc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004ca:	2301      	movs	r3, #1
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3730      	adds	r7, #48	; 0x30
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000
 80004d8:	431bde83 	.word	0x431bde83
 80004dc:	200001fc 	.word	0x200001fc
 80004e0:	40012c00 	.word	0x40012c00

080004e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <NMI_Handler+0x4>

080004ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <HardFault_Handler+0x4>

080004f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <MemManage_Handler+0x4>

080004f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <BusFault_Handler+0x4>

080004fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <UsageFault_Handler+0x4>

08000502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000514:	4802      	ldr	r0, [pc, #8]	; (8000520 <TIM1_UP_IRQHandler+0x10>)
 8000516:	f000 ffe9 	bl	80014ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200001fc 	.word	0x200001fc

08000524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <_sbrk+0x5c>)
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <_sbrk+0x60>)
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d102      	bne.n	8000546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <_sbrk+0x64>)
 8000542:	4a12      	ldr	r2, [pc, #72]	; (800058c <_sbrk+0x68>)
 8000544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	429a      	cmp	r2, r3
 8000552:	d207      	bcs.n	8000564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000554:	f003 fcb0 	bl	8003eb8 <__errno>
 8000558:	4603      	mov	r3, r0
 800055a:	220c      	movs	r2, #12
 800055c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	e009      	b.n	8000578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	4a05      	ldr	r2, [pc, #20]	; (8000588 <_sbrk+0x64>)
 8000574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20005000 	.word	0x20005000
 8000584:	00000400 	.word	0x00000400
 8000588:	20000094 	.word	0x20000094
 800058c:	20000298 	.word	0x20000298

08000590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800059c:	f7ff fff8 	bl	8000590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005a2:	490c      	ldr	r1, [pc, #48]	; (80005d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a09      	ldr	r2, [pc, #36]	; (80005dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005b8:	4c09      	ldr	r4, [pc, #36]	; (80005e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005c6:	f003 fc7d 	bl	8003ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ca:	f7ff fe11 	bl	80001f0 <main>
  bx lr
 80005ce:	4770      	bx	lr
  ldr r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005d8:	08004148 	.word	0x08004148
  ldr r2, =_sbss
 80005dc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005e0:	20000298 	.word	0x20000298

080005e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e4:	e7fe      	b.n	80005e4 <ADC1_2_IRQHandler>
	...

080005e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_Init+0x28>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_Init+0x28>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f8d1 	bl	80007a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ff1a 	bl	8000438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000604:	f7ff fee6 	bl	80003d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	4618      	mov	r0, r3
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_IncTick+0x1c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_IncTick+0x20>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <HAL_IncTick+0x20>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	20000008 	.word	0x20000008
 8000634:	20000244 	.word	0x20000244

08000638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <HAL_GetTick+0x10>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	20000244 	.word	0x20000244

0800064c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f003 0307 	and.w	r3, r3, #7
 800065a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <__NVIC_SetPriorityGrouping+0x44>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000668:	4013      	ands	r3, r2
 800066a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067e:	4a04      	ldr	r2, [pc, #16]	; (8000690 <__NVIC_SetPriorityGrouping+0x44>)
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	60d3      	str	r3, [r2, #12]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <__NVIC_GetPriorityGrouping+0x18>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	0a1b      	lsrs	r3, r3, #8
 800069e:	f003 0307 	and.w	r3, r3, #7
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db0b      	blt.n	80006da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f003 021f 	and.w	r2, r3, #31
 80006c8:	4906      	ldr	r1, [pc, #24]	; (80006e4 <__NVIC_EnableIRQ+0x34>)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	095b      	lsrs	r3, r3, #5
 80006d0:	2001      	movs	r0, #1
 80006d2:	fa00 f202 	lsl.w	r2, r0, r2
 80006d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	; (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	; (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	; 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff ff4f 	bl	800064c <__NVIC_SetPriorityGrouping>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
 80007c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c8:	f7ff ff64 	bl	8000694 <__NVIC_GetPriorityGrouping>
 80007cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	6978      	ldr	r0, [r7, #20]
 80007d4:	f7ff ffb2 	bl	800073c <NVIC_EncodePriority>
 80007d8:	4602      	mov	r2, r0
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff81 	bl	80006e8 <__NVIC_SetPriority>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff57 	bl	80006b0 <__NVIC_EnableIRQ>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800080c:	b480      	push	{r7}
 800080e:	b08b      	sub	sp, #44	; 0x2c
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800081e:	e169      	b.n	8000af4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000820:	2201      	movs	r2, #1
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	69fa      	ldr	r2, [r7, #28]
 8000830:	4013      	ands	r3, r2
 8000832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	429a      	cmp	r2, r3
 800083a:	f040 8158 	bne.w	8000aee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	4a9a      	ldr	r2, [pc, #616]	; (8000aac <HAL_GPIO_Init+0x2a0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d05e      	beq.n	8000906 <HAL_GPIO_Init+0xfa>
 8000848:	4a98      	ldr	r2, [pc, #608]	; (8000aac <HAL_GPIO_Init+0x2a0>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d875      	bhi.n	800093a <HAL_GPIO_Init+0x12e>
 800084e:	4a98      	ldr	r2, [pc, #608]	; (8000ab0 <HAL_GPIO_Init+0x2a4>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d058      	beq.n	8000906 <HAL_GPIO_Init+0xfa>
 8000854:	4a96      	ldr	r2, [pc, #600]	; (8000ab0 <HAL_GPIO_Init+0x2a4>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d86f      	bhi.n	800093a <HAL_GPIO_Init+0x12e>
 800085a:	4a96      	ldr	r2, [pc, #600]	; (8000ab4 <HAL_GPIO_Init+0x2a8>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d052      	beq.n	8000906 <HAL_GPIO_Init+0xfa>
 8000860:	4a94      	ldr	r2, [pc, #592]	; (8000ab4 <HAL_GPIO_Init+0x2a8>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d869      	bhi.n	800093a <HAL_GPIO_Init+0x12e>
 8000866:	4a94      	ldr	r2, [pc, #592]	; (8000ab8 <HAL_GPIO_Init+0x2ac>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d04c      	beq.n	8000906 <HAL_GPIO_Init+0xfa>
 800086c:	4a92      	ldr	r2, [pc, #584]	; (8000ab8 <HAL_GPIO_Init+0x2ac>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d863      	bhi.n	800093a <HAL_GPIO_Init+0x12e>
 8000872:	4a92      	ldr	r2, [pc, #584]	; (8000abc <HAL_GPIO_Init+0x2b0>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d046      	beq.n	8000906 <HAL_GPIO_Init+0xfa>
 8000878:	4a90      	ldr	r2, [pc, #576]	; (8000abc <HAL_GPIO_Init+0x2b0>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d85d      	bhi.n	800093a <HAL_GPIO_Init+0x12e>
 800087e:	2b12      	cmp	r3, #18
 8000880:	d82a      	bhi.n	80008d8 <HAL_GPIO_Init+0xcc>
 8000882:	2b12      	cmp	r3, #18
 8000884:	d859      	bhi.n	800093a <HAL_GPIO_Init+0x12e>
 8000886:	a201      	add	r2, pc, #4	; (adr r2, 800088c <HAL_GPIO_Init+0x80>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	08000907 	.word	0x08000907
 8000890:	080008e1 	.word	0x080008e1
 8000894:	080008f3 	.word	0x080008f3
 8000898:	08000935 	.word	0x08000935
 800089c:	0800093b 	.word	0x0800093b
 80008a0:	0800093b 	.word	0x0800093b
 80008a4:	0800093b 	.word	0x0800093b
 80008a8:	0800093b 	.word	0x0800093b
 80008ac:	0800093b 	.word	0x0800093b
 80008b0:	0800093b 	.word	0x0800093b
 80008b4:	0800093b 	.word	0x0800093b
 80008b8:	0800093b 	.word	0x0800093b
 80008bc:	0800093b 	.word	0x0800093b
 80008c0:	0800093b 	.word	0x0800093b
 80008c4:	0800093b 	.word	0x0800093b
 80008c8:	0800093b 	.word	0x0800093b
 80008cc:	0800093b 	.word	0x0800093b
 80008d0:	080008e9 	.word	0x080008e9
 80008d4:	080008fd 	.word	0x080008fd
 80008d8:	4a79      	ldr	r2, [pc, #484]	; (8000ac0 <HAL_GPIO_Init+0x2b4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d013      	beq.n	8000906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008de:	e02c      	b.n	800093a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	623b      	str	r3, [r7, #32]
          break;
 80008e6:	e029      	b.n	800093c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	3304      	adds	r3, #4
 80008ee:	623b      	str	r3, [r7, #32]
          break;
 80008f0:	e024      	b.n	800093c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	3308      	adds	r3, #8
 80008f8:	623b      	str	r3, [r7, #32]
          break;
 80008fa:	e01f      	b.n	800093c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	330c      	adds	r3, #12
 8000902:	623b      	str	r3, [r7, #32]
          break;
 8000904:	e01a      	b.n	800093c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d102      	bne.n	8000914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800090e:	2304      	movs	r3, #4
 8000910:	623b      	str	r3, [r7, #32]
          break;
 8000912:	e013      	b.n	800093c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d105      	bne.n	8000928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800091c:	2308      	movs	r3, #8
 800091e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69fa      	ldr	r2, [r7, #28]
 8000924:	611a      	str	r2, [r3, #16]
          break;
 8000926:	e009      	b.n	800093c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000928:	2308      	movs	r3, #8
 800092a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69fa      	ldr	r2, [r7, #28]
 8000930:	615a      	str	r2, [r3, #20]
          break;
 8000932:	e003      	b.n	800093c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
          break;
 8000938:	e000      	b.n	800093c <HAL_GPIO_Init+0x130>
          break;
 800093a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	2bff      	cmp	r3, #255	; 0xff
 8000940:	d801      	bhi.n	8000946 <HAL_GPIO_Init+0x13a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	e001      	b.n	800094a <HAL_GPIO_Init+0x13e>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3304      	adds	r3, #4
 800094a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	2bff      	cmp	r3, #255	; 0xff
 8000950:	d802      	bhi.n	8000958 <HAL_GPIO_Init+0x14c>
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	e002      	b.n	800095e <HAL_GPIO_Init+0x152>
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	3b08      	subs	r3, #8
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	210f      	movs	r1, #15
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	fa01 f303 	lsl.w	r3, r1, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	401a      	ands	r2, r3
 8000970:	6a39      	ldr	r1, [r7, #32]
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	431a      	orrs	r2, r3
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 80b1 	beq.w	8000aee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800098c:	4b4d      	ldr	r3, [pc, #308]	; (8000ac4 <HAL_GPIO_Init+0x2b8>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a4c      	ldr	r2, [pc, #304]	; (8000ac4 <HAL_GPIO_Init+0x2b8>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <HAL_GPIO_Init+0x2b8>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009a4:	4a48      	ldr	r2, [pc, #288]	; (8000ac8 <HAL_GPIO_Init+0x2bc>)
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	089b      	lsrs	r3, r3, #2
 80009aa:	3302      	adds	r3, #2
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	f003 0303 	and.w	r3, r3, #3
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	220f      	movs	r2, #15
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a40      	ldr	r2, [pc, #256]	; (8000acc <HAL_GPIO_Init+0x2c0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d013      	beq.n	80009f8 <HAL_GPIO_Init+0x1ec>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a3f      	ldr	r2, [pc, #252]	; (8000ad0 <HAL_GPIO_Init+0x2c4>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d00d      	beq.n	80009f4 <HAL_GPIO_Init+0x1e8>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a3e      	ldr	r2, [pc, #248]	; (8000ad4 <HAL_GPIO_Init+0x2c8>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d007      	beq.n	80009f0 <HAL_GPIO_Init+0x1e4>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <HAL_GPIO_Init+0x2cc>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d101      	bne.n	80009ec <HAL_GPIO_Init+0x1e0>
 80009e8:	2303      	movs	r3, #3
 80009ea:	e006      	b.n	80009fa <HAL_GPIO_Init+0x1ee>
 80009ec:	2304      	movs	r3, #4
 80009ee:	e004      	b.n	80009fa <HAL_GPIO_Init+0x1ee>
 80009f0:	2302      	movs	r3, #2
 80009f2:	e002      	b.n	80009fa <HAL_GPIO_Init+0x1ee>
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <HAL_GPIO_Init+0x1ee>
 80009f8:	2300      	movs	r3, #0
 80009fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009fc:	f002 0203 	and.w	r2, r2, #3
 8000a00:	0092      	lsls	r2, r2, #2
 8000a02:	4093      	lsls	r3, r2
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a0a:	492f      	ldr	r1, [pc, #188]	; (8000ac8 <HAL_GPIO_Init+0x2bc>)
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	3302      	adds	r3, #2
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d006      	beq.n	8000a32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	492c      	ldr	r1, [pc, #176]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	608b      	str	r3, [r1, #8]
 8000a30:	e006      	b.n	8000a40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a32:	4b2a      	ldr	r3, [pc, #168]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	4928      	ldr	r1, [pc, #160]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d006      	beq.n	8000a5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	4922      	ldr	r1, [pc, #136]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60cb      	str	r3, [r1, #12]
 8000a58:	e006      	b.n	8000a68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	491e      	ldr	r1, [pc, #120]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a64:	4013      	ands	r3, r2
 8000a66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	4918      	ldr	r1, [pc, #96]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	604b      	str	r3, [r1, #4]
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	4914      	ldr	r1, [pc, #80]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d021      	beq.n	8000ae0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	490e      	ldr	r1, [pc, #56]	; (8000adc <HAL_GPIO_Init+0x2d0>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	600b      	str	r3, [r1, #0]
 8000aa8:	e021      	b.n	8000aee <HAL_GPIO_Init+0x2e2>
 8000aaa:	bf00      	nop
 8000aac:	10320000 	.word	0x10320000
 8000ab0:	10310000 	.word	0x10310000
 8000ab4:	10220000 	.word	0x10220000
 8000ab8:	10210000 	.word	0x10210000
 8000abc:	10120000 	.word	0x10120000
 8000ac0:	10110000 	.word	0x10110000
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010000 	.word	0x40010000
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	40010c00 	.word	0x40010c00
 8000ad4:	40011000 	.word	0x40011000
 8000ad8:	40011400 	.word	0x40011400
 8000adc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_GPIO_Init+0x304>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	4909      	ldr	r1, [pc, #36]	; (8000b10 <HAL_GPIO_Init+0x304>)
 8000aea:	4013      	ands	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	3301      	adds	r3, #1
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	fa22 f303 	lsr.w	r3, r2, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f47f ae8e 	bne.w	8000820 <HAL_GPIO_Init+0x14>
  }
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	372c      	adds	r7, #44	; 0x2c
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	40010400 	.word	0x40010400

08000b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
 8000b20:	4613      	mov	r3, r2
 8000b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b24:	787b      	ldrb	r3, [r7, #1]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b30:	e003      	b.n	8000b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b32:	887b      	ldrh	r3, [r7, #2]
 8000b34:	041a      	lsls	r2, r3, #16
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	611a      	str	r2, [r3, #16]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e26c      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 8087 	beq.w	8000c72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b64:	4b92      	ldr	r3, [pc, #584]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 030c 	and.w	r3, r3, #12
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d00c      	beq.n	8000b8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b70:	4b8f      	ldr	r3, [pc, #572]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b08      	cmp	r3, #8
 8000b7a:	d112      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x5e>
 8000b7c:	4b8c      	ldr	r3, [pc, #560]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b88:	d10b      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b8a:	4b89      	ldr	r3, [pc, #548]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d06c      	beq.n	8000c70 <HAL_RCC_OscConfig+0x12c>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d168      	bne.n	8000c70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e246      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000baa:	d106      	bne.n	8000bba <HAL_RCC_OscConfig+0x76>
 8000bac:	4b80      	ldr	r3, [pc, #512]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a7f      	ldr	r2, [pc, #508]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e02e      	b.n	8000c18 <HAL_RCC_OscConfig+0xd4>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d10c      	bne.n	8000bdc <HAL_RCC_OscConfig+0x98>
 8000bc2:	4b7b      	ldr	r3, [pc, #492]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a7a      	ldr	r2, [pc, #488]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	4b78      	ldr	r3, [pc, #480]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a77      	ldr	r2, [pc, #476]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	e01d      	b.n	8000c18 <HAL_RCC_OscConfig+0xd4>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be4:	d10c      	bne.n	8000c00 <HAL_RCC_OscConfig+0xbc>
 8000be6:	4b72      	ldr	r3, [pc, #456]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a71      	ldr	r2, [pc, #452]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	4b6f      	ldr	r3, [pc, #444]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a6e      	ldr	r2, [pc, #440]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e00b      	b.n	8000c18 <HAL_RCC_OscConfig+0xd4>
 8000c00:	4b6b      	ldr	r3, [pc, #428]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a6a      	ldr	r2, [pc, #424]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b68      	ldr	r3, [pc, #416]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a67      	ldr	r2, [pc, #412]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d013      	beq.n	8000c48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c20:	f7ff fd0a 	bl	8000638 <HAL_GetTick>
 8000c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c26:	e008      	b.n	8000c3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c28:	f7ff fd06 	bl	8000638 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b64      	cmp	r3, #100	; 0x64
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e1fa      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3a:	4b5d      	ldr	r3, [pc, #372]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0f0      	beq.n	8000c28 <HAL_RCC_OscConfig+0xe4>
 8000c46:	e014      	b.n	8000c72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c48:	f7ff fcf6 	bl	8000638 <HAL_GetTick>
 8000c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4e:	e008      	b.n	8000c62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c50:	f7ff fcf2 	bl	8000638 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b64      	cmp	r3, #100	; 0x64
 8000c5c:	d901      	bls.n	8000c62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e1e6      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c62:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f0      	bne.n	8000c50 <HAL_RCC_OscConfig+0x10c>
 8000c6e:	e000      	b.n	8000c72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d063      	beq.n	8000d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c7e:	4b4c      	ldr	r3, [pc, #304]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00b      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c8a:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d11c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x18c>
 8000c96:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d116      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca2:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <HAL_RCC_OscConfig+0x176>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d001      	beq.n	8000cba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e1ba      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cba:	4b3d      	ldr	r3, [pc, #244]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4939      	ldr	r1, [pc, #228]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cce:	e03a      	b.n	8000d46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d020      	beq.n	8000d1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd8:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <HAL_RCC_OscConfig+0x270>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cde:	f7ff fcab 	bl	8000638 <HAL_GetTick>
 8000ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fca7 	bl	8000638 <HAL_GetTick>
 8000cea:	4602      	mov	r2, r0
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e19b      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0302 	and.w	r3, r3, #2
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0f0      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	4927      	ldr	r1, [pc, #156]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	4313      	orrs	r3, r2
 8000d16:	600b      	str	r3, [r1, #0]
 8000d18:	e015      	b.n	8000d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <HAL_RCC_OscConfig+0x270>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d20:	f7ff fc8a 	bl	8000638 <HAL_GetTick>
 8000d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d28:	f7ff fc86 	bl	8000638 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e17a      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f0      	bne.n	8000d28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d03a      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d019      	beq.n	8000d8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_RCC_OscConfig+0x274>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d60:	f7ff fc6a 	bl	8000638 <HAL_GetTick>
 8000d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d66:	e008      	b.n	8000d7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d68:	f7ff fc66 	bl	8000638 <HAL_GetTick>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d901      	bls.n	8000d7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e15a      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0f0      	beq.n	8000d68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 fae8 	bl	800135c <RCC_Delay>
 8000d8c:	e01c      	b.n	8000dc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_RCC_OscConfig+0x274>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d94:	f7ff fc50 	bl	8000638 <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d9a:	e00f      	b.n	8000dbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc4c 	bl	8000638 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d908      	bls.n	8000dbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e140      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	42420000 	.word	0x42420000
 8000db8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dbc:	4b9e      	ldr	r3, [pc, #632]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1e9      	bne.n	8000d9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 80a6 	beq.w	8000f22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dda:	4b97      	ldr	r3, [pc, #604]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10d      	bne.n	8000e02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b94      	ldr	r3, [pc, #592]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a93      	ldr	r2, [pc, #588]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b91      	ldr	r3, [pc, #580]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e02:	4b8e      	ldr	r3, [pc, #568]	; (800103c <HAL_RCC_OscConfig+0x4f8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d118      	bne.n	8000e40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e0e:	4b8b      	ldr	r3, [pc, #556]	; (800103c <HAL_RCC_OscConfig+0x4f8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a8a      	ldr	r2, [pc, #552]	; (800103c <HAL_RCC_OscConfig+0x4f8>)
 8000e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e1a:	f7ff fc0d 	bl	8000638 <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e22:	f7ff fc09 	bl	8000638 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b64      	cmp	r3, #100	; 0x64
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e0fd      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e34:	4b81      	ldr	r3, [pc, #516]	; (800103c <HAL_RCC_OscConfig+0x4f8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f0      	beq.n	8000e22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d106      	bne.n	8000e56 <HAL_RCC_OscConfig+0x312>
 8000e48:	4b7b      	ldr	r3, [pc, #492]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e4a:	6a1b      	ldr	r3, [r3, #32]
 8000e4c:	4a7a      	ldr	r2, [pc, #488]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6213      	str	r3, [r2, #32]
 8000e54:	e02d      	b.n	8000eb2 <HAL_RCC_OscConfig+0x36e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x334>
 8000e5e:	4b76      	ldr	r3, [pc, #472]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	4a75      	ldr	r2, [pc, #468]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	6213      	str	r3, [r2, #32]
 8000e6a:	4b73      	ldr	r3, [pc, #460]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	4a72      	ldr	r2, [pc, #456]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	f023 0304 	bic.w	r3, r3, #4
 8000e74:	6213      	str	r3, [r2, #32]
 8000e76:	e01c      	b.n	8000eb2 <HAL_RCC_OscConfig+0x36e>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x356>
 8000e80:	4b6d      	ldr	r3, [pc, #436]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4a6c      	ldr	r2, [pc, #432]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6213      	str	r3, [r2, #32]
 8000e8c:	4b6a      	ldr	r3, [pc, #424]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4a69      	ldr	r2, [pc, #420]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6213      	str	r3, [r2, #32]
 8000e98:	e00b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x36e>
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	4a66      	ldr	r2, [pc, #408]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	6213      	str	r3, [r2, #32]
 8000ea6:	4b64      	ldr	r3, [pc, #400]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	4a63      	ldr	r2, [pc, #396]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000eac:	f023 0304 	bic.w	r3, r3, #4
 8000eb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d015      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eba:	f7ff fbbd 	bl	8000638 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	e00a      	b.n	8000ed8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fbb9 	bl	8000638 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e0ab      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	4b57      	ldr	r3, [pc, #348]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0ee      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x37e>
 8000ee4:	e014      	b.n	8000f10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fba7 	bl	8000638 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	e00a      	b.n	8000f04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eee:	f7ff fba3 	bl	8000638 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e095      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f04:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ee      	bne.n	8000eee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d105      	bne.n	8000f22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f16:	4b48      	ldr	r3, [pc, #288]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4a47      	ldr	r2, [pc, #284]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 8081 	beq.w	800102e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f2c:	4b42      	ldr	r3, [pc, #264]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d061      	beq.n	8000ffc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d146      	bne.n	8000fce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f40:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_RCC_OscConfig+0x4fc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb77 	bl	8000638 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f4e:	f7ff fb73 	bl	8000638 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e067      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f60:	4b35      	ldr	r3, [pc, #212]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f0      	bne.n	8000f4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f74:	d108      	bne.n	8000f88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	492d      	ldr	r1, [pc, #180]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a19      	ldr	r1, [r3, #32]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	430b      	orrs	r3, r1
 8000f9a:	4927      	ldr	r1, [pc, #156]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_RCC_OscConfig+0x4fc>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fb47 	bl	8000638 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff fb43 	bl	8000638 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e037      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x46a>
 8000fcc:	e02f      	b.n	800102e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_RCC_OscConfig+0x4fc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fb30 	bl	8000638 <HAL_GetTick>
 8000fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fda:	e008      	b.n	8000fee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fdc:	f7ff fb2c 	bl	8000638 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d901      	bls.n	8000fee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e020      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f0      	bne.n	8000fdc <HAL_RCC_OscConfig+0x498>
 8000ffa:	e018      	b.n	800102e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e013      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	429a      	cmp	r2, r3
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001026:	429a      	cmp	r2, r3
 8001028:	d001      	beq.n	800102e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	40007000 	.word	0x40007000
 8001040:	42420060 	.word	0x42420060

08001044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0d0      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001058:	4b6a      	ldr	r3, [pc, #424]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d910      	bls.n	8001088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001066:	4b67      	ldr	r3, [pc, #412]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 0207 	bic.w	r2, r3, #7
 800106e:	4965      	ldr	r1, [pc, #404]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001076:	4b63      	ldr	r3, [pc, #396]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0b8      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d020      	beq.n	80010d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a0:	4b59      	ldr	r3, [pc, #356]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	4a58      	ldr	r2, [pc, #352]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b8:	4b53      	ldr	r3, [pc, #332]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a52      	ldr	r2, [pc, #328]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c4:	4b50      	ldr	r3, [pc, #320]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	494d      	ldr	r1, [pc, #308]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d040      	beq.n	8001164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d107      	bne.n	80010fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	4b47      	ldr	r3, [pc, #284]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d115      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e07f      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d107      	bne.n	8001112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e073      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e06b      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001122:	4b39      	ldr	r3, [pc, #228]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f023 0203 	bic.w	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4936      	ldr	r1, [pc, #216]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001134:	f7ff fa80 	bl	8000638 <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113a:	e00a      	b.n	8001152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113c:	f7ff fa7c 	bl	8000638 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f241 3288 	movw	r2, #5000	; 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e053      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 020c 	and.w	r2, r3, #12
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	429a      	cmp	r2, r3
 8001162:	d1eb      	bne.n	800113c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d210      	bcs.n	8001194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 0207 	bic.w	r2, r3, #7
 800117a:	4922      	ldr	r1, [pc, #136]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e032      	b.n	80011fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4916      	ldr	r1, [pc, #88]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	490e      	ldr	r1, [pc, #56]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011d2:	f000 f821 	bl	8001218 <HAL_RCC_GetSysClockFreq>
 80011d6:	4602      	mov	r2, r0
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	490a      	ldr	r1, [pc, #40]	; (800120c <HAL_RCC_ClockConfig+0x1c8>)
 80011e4:	5ccb      	ldrb	r3, [r1, r3]
 80011e6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_RCC_ClockConfig+0x1cc>)
 80011ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_RCC_ClockConfig+0x1d0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f920 	bl	8000438 <HAL_InitTick>

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000
 8001208:	40021000 	.word	0x40021000
 800120c:	08004114 	.word	0x08004114
 8001210:	20000000 	.word	0x20000000
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b04      	cmp	r3, #4
 8001240:	d002      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0x30>
 8001242:	2b08      	cmp	r3, #8
 8001244:	d003      	beq.n	800124e <HAL_RCC_GetSysClockFreq+0x36>
 8001246:	e027      	b.n	8001298 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800124a:	613b      	str	r3, [r7, #16]
      break;
 800124c:	e027      	b.n	800129e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	0c9b      	lsrs	r3, r3, #18
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	4a17      	ldr	r2, [pc, #92]	; (80012b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d010      	beq.n	8001288 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	0c5b      	lsrs	r3, r3, #17
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800127a:	fb02 f203 	mul.w	r2, r2, r3
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e004      	b.n	8001292 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800128c:	fb02 f303 	mul.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	613b      	str	r3, [r7, #16]
      break;
 8001296:	e002      	b.n	800129e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800129a:	613b      	str	r3, [r7, #16]
      break;
 800129c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800129e:	693b      	ldr	r3, [r7, #16]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000
 80012b0:	007a1200 	.word	0x007a1200
 80012b4:	0800412c 	.word	0x0800412c
 80012b8:	0800413c 	.word	0x0800413c
 80012bc:	003d0900 	.word	0x003d0900

080012c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012c4:	4b02      	ldr	r3, [pc, #8]	; (80012d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	20000000 	.word	0x20000000

080012d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012d8:	f7ff fff2 	bl	80012c0 <HAL_RCC_GetHCLKFreq>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	0adb      	lsrs	r3, r3, #11
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	4903      	ldr	r1, [pc, #12]	; (80012f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012ea:	5ccb      	ldrb	r3, [r1, r3]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	08004124 	.word	0x08004124

080012fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	220f      	movs	r2, #15
 800130a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_RCC_GetClockConfig+0x58>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0203 	and.w	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_RCC_GetClockConfig+0x58>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_RCC_GetClockConfig+0x58>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_RCC_GetClockConfig+0x58>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_RCC_GetClockConfig+0x5c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0207 	and.w	r2, r3, #7
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	40022000 	.word	0x40022000

0800135c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <RCC_Delay+0x34>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <RCC_Delay+0x38>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	fb02 f303 	mul.w	r3, r2, r3
 8001376:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001378:	bf00      	nop
  }
  while (Delay --);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	60fa      	str	r2, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f9      	bne.n	8001378 <RCC_Delay+0x1c>
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000000 	.word	0x20000000
 8001394:	10624dd3 	.word	0x10624dd3

08001398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e041      	b.n	800142e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d106      	bne.n	80013c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f839 	bl	8001436 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2202      	movs	r2, #2
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3304      	adds	r3, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4610      	mov	r0, r2
 80013d8:	f000 f9b4 	bl	8001744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d001      	beq.n	8001460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e03a      	b.n	80014d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2202      	movs	r2, #2
 8001464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <HAL_TIM_Base_Start_IT+0x98>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00e      	beq.n	80014a0 <HAL_TIM_Base_Start_IT+0x58>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148a:	d009      	beq.n	80014a0 <HAL_TIM_Base_Start_IT+0x58>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d004      	beq.n	80014a0 <HAL_TIM_Base_Start_IT+0x58>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d111      	bne.n	80014c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d010      	beq.n	80014d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014c2:	e007      	b.n	80014d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	40012c00 	.word	0x40012c00
 80014e4:	40000400 	.word	0x40000400
 80014e8:	40000800 	.word	0x40000800

080014ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d122      	bne.n	8001548 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b02      	cmp	r3, #2
 800150e:	d11b      	bne.n	8001548 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f06f 0202 	mvn.w	r2, #2
 8001518:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f8ed 	bl	800170e <HAL_TIM_IC_CaptureCallback>
 8001534:	e005      	b.n	8001542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f8e0 	bl	80016fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f8ef 	bl	8001720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b04      	cmp	r3, #4
 8001554:	d122      	bne.n	800159c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b04      	cmp	r3, #4
 8001562:	d11b      	bne.n	800159c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0204 	mvn.w	r2, #4
 800156c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2202      	movs	r2, #2
 8001572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f8c3 	bl	800170e <HAL_TIM_IC_CaptureCallback>
 8001588:	e005      	b.n	8001596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f8b6 	bl	80016fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f8c5 	bl	8001720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d122      	bne.n	80015f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d11b      	bne.n	80015f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 0208 	mvn.w	r2, #8
 80015c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2204      	movs	r2, #4
 80015c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f899 	bl	800170e <HAL_TIM_IC_CaptureCallback>
 80015dc:	e005      	b.n	80015ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f88c 	bl	80016fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f89b 	bl	8001720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d122      	bne.n	8001644 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b10      	cmp	r3, #16
 800160a:	d11b      	bne.n	8001644 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f06f 0210 	mvn.w	r2, #16
 8001614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2208      	movs	r2, #8
 800161a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f86f 	bl	800170e <HAL_TIM_IC_CaptureCallback>
 8001630:	e005      	b.n	800163e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f862 	bl	80016fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f871 	bl	8001720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10e      	bne.n	8001670 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b01      	cmp	r3, #1
 800165e:	d107      	bne.n	8001670 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f06f 0201 	mvn.w	r2, #1
 8001668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe fe9a 	bl	80003a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	2b80      	cmp	r3, #128	; 0x80
 800167c:	d10e      	bne.n	800169c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001688:	2b80      	cmp	r3, #128	; 0x80
 800168a:	d107      	bne.n	800169c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f8bf 	bl	800181a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016a6:	2b40      	cmp	r3, #64	; 0x40
 80016a8:	d10e      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b4:	2b40      	cmp	r3, #64	; 0x40
 80016b6:	d107      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f835 	bl	8001732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0320 	and.w	r3, r3, #32
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	d10e      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0320 	and.w	r3, r3, #32
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	d107      	bne.n	80016f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0220 	mvn.w	r2, #32
 80016ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f88a 	bl	8001808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a29      	ldr	r2, [pc, #164]	; (80017fc <TIM_Base_SetConfig+0xb8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00b      	beq.n	8001774 <TIM_Base_SetConfig+0x30>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001762:	d007      	beq.n	8001774 <TIM_Base_SetConfig+0x30>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a26      	ldr	r2, [pc, #152]	; (8001800 <TIM_Base_SetConfig+0xbc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d003      	beq.n	8001774 <TIM_Base_SetConfig+0x30>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a25      	ldr	r2, [pc, #148]	; (8001804 <TIM_Base_SetConfig+0xc0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d108      	bne.n	8001786 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800177a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <TIM_Base_SetConfig+0xb8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00b      	beq.n	80017a6 <TIM_Base_SetConfig+0x62>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001794:	d007      	beq.n	80017a6 <TIM_Base_SetConfig+0x62>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a19      	ldr	r2, [pc, #100]	; (8001800 <TIM_Base_SetConfig+0xbc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d003      	beq.n	80017a6 <TIM_Base_SetConfig+0x62>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <TIM_Base_SetConfig+0xc0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d108      	bne.n	80017b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <TIM_Base_SetConfig+0xb8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d103      	bne.n	80017ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	615a      	str	r2, [r3, #20]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40000400 	.word	0x40000400
 8001804:	40000800 	.word	0x40000800

08001808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001836:	2301      	movs	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10a      	bne.n	800185a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001848:	f383 8811 	msr	BASEPRI, r3
 800184c:	f3bf 8f6f 	isb	sy
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001856:	bf00      	nop
 8001858:	e7fe      	b.n	8001858 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d05d      	beq.n	800191c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001864:	2b00      	cmp	r3, #0
 8001866:	d059      	beq.n	800191c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001870:	2100      	movs	r1, #0
 8001872:	fba3 2302 	umull	r2, r3, r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d000      	beq.n	800187c <xQueueGenericReset+0x50>
 800187a:	2101      	movs	r1, #1
 800187c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	d14c      	bne.n	800191c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001882:	f002 f975 	bl	8003b70 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188e:	6939      	ldr	r1, [r7, #16]
 8001890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	441a      	add	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2200      	movs	r2, #0
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6939      	ldr	r1, [r7, #16]
 80018b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	441a      	add	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	22ff      	movs	r2, #255	; 0xff
 80018c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	22ff      	movs	r2, #255	; 0xff
 80018ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d114      	bne.n	8001902 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01a      	beq.n	8001916 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	3310      	adds	r3, #16
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 f98b 	bl	8002c00 <xTaskRemoveFromEventList>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d012      	beq.n	8001916 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <xQueueGenericReset+0x11c>)
 80018f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	e009      	b.n	8001916 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3310      	adds	r3, #16
 8001906:	4618      	mov	r0, r3
 8001908:	f001 ffb0 	bl	800386c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	3324      	adds	r3, #36	; 0x24
 8001910:	4618      	mov	r0, r3
 8001912:	f001 ffab 	bl	800386c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001916:	f002 f95b 	bl	8003bd0 <vPortExitCritical>
 800191a:	e001      	b.n	8001920 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10a      	bne.n	800193c <xQueueGenericReset+0x110>
        __asm volatile
 8001926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192a:	f383 8811 	msr	BASEPRI, r3
 800192e:	f3bf 8f6f 	isb	sy
 8001932:	f3bf 8f4f 	dsb	sy
 8001936:	60bb      	str	r3, [r7, #8]
    }
 8001938:	bf00      	nop
 800193a:	e7fe      	b.n	800193a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800193c:	697b      	ldr	r3, [r7, #20]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000ed04 	.word	0xe000ed04

0800194c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af02      	add	r7, sp, #8
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	4613      	mov	r3, r2
 8001958:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d02e      	beq.n	80019c2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001964:	2100      	movs	r1, #0
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	fba3 2302 	umull	r2, r3, r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d000      	beq.n	8001974 <xQueueGenericCreate+0x28>
 8001972:	2101      	movs	r1, #1
 8001974:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001976:	2b00      	cmp	r3, #0
 8001978:	d123      	bne.n	80019c2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001982:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001986:	d81c      	bhi.n	80019c2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	3350      	adds	r3, #80	; 0x50
 8001996:	4618      	mov	r0, r3
 8001998:	f001 ff44 	bl	8003824 <pvPortMalloc>
 800199c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01c      	beq.n	80019de <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3350      	adds	r3, #80	; 0x50
 80019ac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80019ae:	79fa      	ldrb	r2, [r7, #7]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 f814 	bl	80019e8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80019c0:	e00d      	b.n	80019de <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10a      	bne.n	80019de <xQueueGenericCreate+0x92>
        __asm volatile
 80019c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019cc:	f383 8811 	msr	BASEPRI, r3
 80019d0:	f3bf 8f6f 	isb	sy
 80019d4:	f3bf 8f4f 	dsb	sy
 80019d8:	613b      	str	r3, [r7, #16]
    }
 80019da:	bf00      	nop
 80019dc:	e7fe      	b.n	80019dc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80019de:	69fb      	ldr	r3, [r7, #28]
    }
 80019e0:	4618      	mov	r0, r3
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d103      	bne.n	8001a04 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e002      	b.n	8001a0a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a16:	2101      	movs	r1, #1
 8001a18:	69b8      	ldr	r0, [r7, #24]
 8001a1a:	f7ff ff07 	bl	800182c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08e      	sub	sp, #56	; 0x38
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10a      	bne.n	8001a62 <xQueueGenericSend+0x32>
        __asm volatile
 8001a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001a5e:	bf00      	nop
 8001a60:	e7fe      	b.n	8001a60 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d103      	bne.n	8001a70 <xQueueGenericSend+0x40>
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <xQueueGenericSend+0x44>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <xQueueGenericSend+0x46>
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10a      	bne.n	8001a90 <xQueueGenericSend+0x60>
        __asm volatile
 8001a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7e:	f383 8811 	msr	BASEPRI, r3
 8001a82:	f3bf 8f6f 	isb	sy
 8001a86:	f3bf 8f4f 	dsb	sy
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001a8c:	bf00      	nop
 8001a8e:	e7fe      	b.n	8001a8e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d103      	bne.n	8001a9e <xQueueGenericSend+0x6e>
 8001a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <xQueueGenericSend+0x72>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <xQueueGenericSend+0x74>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10a      	bne.n	8001abe <xQueueGenericSend+0x8e>
        __asm volatile
 8001aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	623b      	str	r3, [r7, #32]
    }
 8001aba:	bf00      	nop
 8001abc:	e7fe      	b.n	8001abc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001abe:	f001 fb0d 	bl	80030dc <xTaskGetSchedulerState>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <xQueueGenericSend+0x9e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <xQueueGenericSend+0xa2>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <xQueueGenericSend+0xa4>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10a      	bne.n	8001aee <xQueueGenericSend+0xbe>
        __asm volatile
 8001ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001adc:	f383 8811 	msr	BASEPRI, r3
 8001ae0:	f3bf 8f6f 	isb	sy
 8001ae4:	f3bf 8f4f 	dsb	sy
 8001ae8:	61fb      	str	r3, [r7, #28]
    }
 8001aea:	bf00      	nop
 8001aec:	e7fe      	b.n	8001aec <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001aee:	f002 f83f 	bl	8003b70 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d302      	bcc.n	8001b04 <xQueueGenericSend+0xd4>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d129      	bne.n	8001b58 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b0a:	f000 f96f 	bl	8001dec <prvCopyDataToQueue>
 8001b0e:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1a:	3324      	adds	r3, #36	; 0x24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 f86f 	bl	8002c00 <xTaskRemoveFromEventList>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001b28:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <xQueueGenericSend+0x1f8>)
 8001b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f3bf 8f4f 	dsb	sy
 8001b34:	f3bf 8f6f 	isb	sy
 8001b38:	e00a      	b.n	8001b50 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <xQueueGenericSend+0x1f8>)
 8001b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f3bf 8f4f 	dsb	sy
 8001b4c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001b50:	f002 f83e 	bl	8003bd0 <vPortExitCritical>
                return pdPASS;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e063      	b.n	8001c20 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001b5e:	f002 f837 	bl	8003bd0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e05c      	b.n	8001c20 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d106      	bne.n	8001b7a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 f91d 	bl	8002db0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001b76:	2301      	movs	r3, #1
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001b7a:	f002 f829 	bl	8003bd0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001b7e:	f000 fcb9 	bl	80024f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001b82:	f001 fff5 	bl	8003b70 <vPortEnterCritical>
 8001b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b8c:	b25b      	sxtb	r3, r3
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b92:	d103      	bne.n	8001b9c <xQueueGenericSend+0x16c>
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d103      	bne.n	8001bb2 <xQueueGenericSend+0x182>
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bb2:	f002 f80d 	bl	8003bd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001bb6:	1d3a      	adds	r2, r7, #4
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 f90c 	bl	8002ddc <xTaskCheckForTimeOut>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d124      	bne.n	8001c14 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bcc:	f000 fa06 	bl	8001fdc <prvIsQueueFull>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d018      	beq.n	8001c08 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd8:	3310      	adds	r3, #16
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 ffa4 	bl	8002b2c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001be6:	f000 f991 	bl	8001f0c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001bea:	f000 fcc7 	bl	800257c <xTaskResumeAll>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f af7c 	bne.w	8001aee <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <xQueueGenericSend+0x1f8>)
 8001bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	f3bf 8f4f 	dsb	sy
 8001c02:	f3bf 8f6f 	isb	sy
 8001c06:	e772      	b.n	8001aee <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c0a:	f000 f97f 	bl	8001f0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001c0e:	f000 fcb5 	bl	800257c <xTaskResumeAll>
 8001c12:	e76c      	b.n	8001aee <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c16:	f000 f979 	bl	8001f0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001c1a:	f000 fcaf 	bl	800257c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001c1e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3738      	adds	r7, #56	; 0x38
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	e000ed04 	.word	0xe000ed04

08001c2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10a      	bne.n	8001c5c <xQueueReceive+0x30>
        __asm volatile
 8001c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4a:	f383 8811 	msr	BASEPRI, r3
 8001c4e:	f3bf 8f6f 	isb	sy
 8001c52:	f3bf 8f4f 	dsb	sy
 8001c56:	623b      	str	r3, [r7, #32]
    }
 8001c58:	bf00      	nop
 8001c5a:	e7fe      	b.n	8001c5a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <xQueueReceive+0x3e>
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <xQueueReceive+0x42>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <xQueueReceive+0x44>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10a      	bne.n	8001c8a <xQueueReceive+0x5e>
        __asm volatile
 8001c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c78:	f383 8811 	msr	BASEPRI, r3
 8001c7c:	f3bf 8f6f 	isb	sy
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	61fb      	str	r3, [r7, #28]
    }
 8001c86:	bf00      	nop
 8001c88:	e7fe      	b.n	8001c88 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c8a:	f001 fa27 	bl	80030dc <xTaskGetSchedulerState>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <xQueueReceive+0x6e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <xQueueReceive+0x72>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <xQueueReceive+0x74>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10a      	bne.n	8001cba <xQueueReceive+0x8e>
        __asm volatile
 8001ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	61bb      	str	r3, [r7, #24]
    }
 8001cb6:	bf00      	nop
 8001cb8:	e7fe      	b.n	8001cb8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001cba:	f001 ff59 	bl	8003b70 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01f      	beq.n	8001d0a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cce:	f000 f8f7 	bl	8001ec0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00f      	beq.n	8001d02 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	3310      	adds	r3, #16
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 ff8a 	bl	8002c00 <xTaskRemoveFromEventList>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <xQueueReceive+0x1bc>)
 8001cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001d02:	f001 ff65 	bl	8003bd0 <vPortExitCritical>
                return pdPASS;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e069      	b.n	8001dde <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d103      	bne.n	8001d18 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001d10:	f001 ff5e 	bl	8003bd0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e062      	b.n	8001dde <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001d1e:	f107 0310 	add.w	r3, r7, #16
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 f844 	bl	8002db0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001d2c:	f001 ff50 	bl	8003bd0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001d30:	f000 fbe0 	bl	80024f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001d34:	f001 ff1c 	bl	8003b70 <vPortEnterCritical>
 8001d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d103      	bne.n	8001d4e <xQueueReceive+0x122>
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5a:	d103      	bne.n	8001d64 <xQueueReceive+0x138>
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d64:	f001 ff34 	bl	8003bd0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d68:	1d3a      	adds	r2, r7, #4
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 f833 	bl	8002ddc <xTaskCheckForTimeOut>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d123      	bne.n	8001dc4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d7e:	f000 f917 	bl	8001fb0 <prvIsQueueEmpty>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d017      	beq.n	8001db8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	3324      	adds	r3, #36	; 0x24
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 fecb 	bl	8002b2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d98:	f000 f8b8 	bl	8001f0c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001d9c:	f000 fbee 	bl	800257c <xTaskResumeAll>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d189      	bne.n	8001cba <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <xQueueReceive+0x1bc>)
 8001da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	f3bf 8f4f 	dsb	sy
 8001db2:	f3bf 8f6f 	isb	sy
 8001db6:	e780      	b.n	8001cba <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dba:	f000 f8a7 	bl	8001f0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001dbe:	f000 fbdd 	bl	800257c <xTaskResumeAll>
 8001dc2:	e77a      	b.n	8001cba <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dc6:	f000 f8a1 	bl	8001f0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001dca:	f000 fbd7 	bl	800257c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dd0:	f000 f8ee 	bl	8001fb0 <prvIsQueueEmpty>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f43f af6f 	beq.w	8001cba <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001ddc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3730      	adds	r7, #48	; 0x30
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000ed04 	.word	0xe000ed04

08001dec <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e00:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10d      	bne.n	8001e26 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d14d      	bne.n	8001eae <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 f97e 	bl	8003118 <xTaskPriorityDisinherit>
 8001e1c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	e043      	b.n	8001eae <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d119      	bne.n	8001e60 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6858      	ldr	r0, [r3, #4]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	461a      	mov	r2, r3
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	f002 f878 	bl	8003f2c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	441a      	add	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d32b      	bcc.n	8001eae <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	e026      	b.n	8001eae <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	68d8      	ldr	r0, [r3, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	461a      	mov	r2, r3
 8001e6a:	68b9      	ldr	r1, [r7, #8]
 8001e6c:	f002 f85e 	bl	8003f2c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	425b      	negs	r3, r3
 8001e7a:	441a      	add	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	425b      	negs	r3, r3
 8001e96:	441a      	add	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d105      	bne.n	8001eae <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001eb6:	697b      	ldr	r3, [r7, #20]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d018      	beq.n	8001f04 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	441a      	add	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d303      	bcc.n	8001ef4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68d9      	ldr	r1, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	461a      	mov	r2, r3
 8001efe:	6838      	ldr	r0, [r7, #0]
 8001f00:	f002 f814 	bl	8003f2c <memcpy>
    }
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001f14:	f001 fe2c 	bl	8003b70 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f1e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f20:	e011      	b.n	8001f46 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d012      	beq.n	8001f50 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3324      	adds	r3, #36	; 0x24
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fe66 	bl	8002c00 <xTaskRemoveFromEventList>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001f3a:	f000 ffb5 	bl	8002ea8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	dce9      	bgt.n	8001f22 <prvUnlockQueue+0x16>
 8001f4e:	e000      	b.n	8001f52 <prvUnlockQueue+0x46>
                    break;
 8001f50:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001f5a:	f001 fe39 	bl	8003bd0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001f5e:	f001 fe07 	bl	8003b70 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f68:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f6a:	e011      	b.n	8001f90 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d012      	beq.n	8001f9a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3310      	adds	r3, #16
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fe41 	bl	8002c00 <xTaskRemoveFromEventList>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001f84:	f000 ff90 	bl	8002ea8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	dce9      	bgt.n	8001f6c <prvUnlockQueue+0x60>
 8001f98:	e000      	b.n	8001f9c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001f9a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	22ff      	movs	r2, #255	; 0xff
 8001fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001fa4:	f001 fe14 	bl	8003bd0 <vPortExitCritical>
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001fb8:	f001 fdda 	bl	8003b70 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	e001      	b.n	8001fce <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001fce:	f001 fdff 	bl	8003bd0 <vPortExitCritical>

    return xReturn;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001fe4:	f001 fdc4 	bl	8003b70 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d102      	bne.n	8001ffa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e001      	b.n	8001ffe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001ffe:	f001 fde7 	bl	8003bd0 <vPortExitCritical>

    return xReturn;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10a      	bne.n	8002036 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002024:	f383 8811 	msr	BASEPRI, r3
 8002028:	f3bf 8f6f 	isb	sy
 800202c:	f3bf 8f4f 	dsb	sy
 8002030:	60fb      	str	r3, [r7, #12]
    }
 8002032:	bf00      	nop
 8002034:	e7fe      	b.n	8002034 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d024      	beq.n	8002086 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e01e      	b.n	8002080 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002042:	4a18      	ldr	r2, [pc, #96]	; (80020a4 <vQueueAddToRegistry+0x98>)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	d105      	bne.n	800205e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <vQueueAddToRegistry+0x98>)
 8002058:	4413      	add	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
                    break;
 800205c:	e013      	b.n	8002086 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10a      	bne.n	800207a <vQueueAddToRegistry+0x6e>
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <vQueueAddToRegistry+0x98>)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d104      	bne.n	800207a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <vQueueAddToRegistry+0x98>)
 8002076:	4413      	add	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2b07      	cmp	r3, #7
 8002084:	d9dd      	bls.n	8002042 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002098:	bf00      	nop
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000248 	.word	0x20000248

080020a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80020b8:	f001 fd5a 	bl	8003b70 <vPortEnterCritical>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020c2:	b25b      	sxtb	r3, r3
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d103      	bne.n	80020d2 <vQueueWaitForMessageRestricted+0x2a>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020de:	d103      	bne.n	80020e8 <vQueueWaitForMessageRestricted+0x40>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020e8:	f001 fd72 	bl	8003bd0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3324      	adds	r3, #36	; 0x24
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fd39 	bl	8002b74 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff02 	bl	8001f0c <prvUnlockQueue>
    }
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af04      	add	r7, sp, #16
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4618      	mov	r0, r3
 8002124:	f001 fb7e 	bl	8003824 <pvPortMalloc>
 8002128:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002130:	207c      	movs	r0, #124	; 0x7c
 8002132:	f001 fb77 	bl	8003824 <pvPortMalloc>
 8002136:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800213e:	227c      	movs	r2, #124	; 0x7c
 8002140:	2100      	movs	r1, #0
 8002142:	69f8      	ldr	r0, [r7, #28]
 8002144:	f001 ff00 	bl	8003f48 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
 800214e:	e005      	b.n	800215c <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002150:	6978      	ldr	r0, [r7, #20]
 8002152:	f001 fb79 	bl	8003848 <vPortFree>
 8002156:	e001      	b.n	800215c <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d013      	beq.n	800218a <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002162:	2300      	movs	r3, #0
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f80e 	bl	800219a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800217e:	69f8      	ldr	r0, [r7, #28]
 8002180:	f000 f89a 	bl	80022b8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002184:	2301      	movs	r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e002      	b.n	8002190 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002190:	69bb      	ldr	r3, [r7, #24]
    }
 8002192:	4618      	mov	r0, r3
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b088      	sub	sp, #32
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	461a      	mov	r2, r3
 80021b2:	21a5      	movs	r1, #165	; 0xa5
 80021b4:	f001 fec8 	bl	8003f48 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021c2:	3b01      	subs	r3, #1
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	f023 0307 	bic.w	r3, r3, #7
 80021d0:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80021dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	617b      	str	r3, [r7, #20]
    }
 80021ee:	bf00      	nop
 80021f0:	e7fe      	b.n	80021f0 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01e      	beq.n	8002236 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	e012      	b.n	8002224 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	4413      	add	r3, r2
 8002204:	7819      	ldrb	r1, [r3, #0]
 8002206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	4413      	add	r3, r2
 800220c:	3334      	adds	r3, #52	; 0x34
 800220e:	460a      	mov	r2, r1
 8002210:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4413      	add	r3, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b13      	cmp	r3, #19
 8002228:	d9e9      	bls.n	80021fe <prvInitialiseNewTask+0x64>
 800222a:	e000      	b.n	800222e <prvInitialiseNewTask+0x94>
            {
                break;
 800222c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	2b04      	cmp	r3, #4
 800223a:	d90a      	bls.n	8002252 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002240:	f383 8811 	msr	BASEPRI, r3
 8002244:	f3bf 8f6f 	isb	sy
 8002248:	f3bf 8f4f 	dsb	sy
 800224c:	613b      	str	r3, [r7, #16]
    }
 800224e:	bf00      	nop
 8002250:	e7fe      	b.n	8002250 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	2b04      	cmp	r3, #4
 8002256:	d901      	bls.n	800225c <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002258:	2304      	movs	r3, #4
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002266:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	3304      	adds	r3, #4
 800226c:	4618      	mov	r0, r3
 800226e:	f001 fb1c 	bl	80038aa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	3318      	adds	r3, #24
 8002276:	4618      	mov	r0, r3
 8002278:	f001 fb17 	bl	80038aa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002280:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	f1c3 0205 	rsb	r2, r3, #5
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	68f9      	ldr	r1, [r7, #12]
 8002296:	69b8      	ldr	r0, [r7, #24]
 8002298:	f001 fb74 	bl	8003984 <pxPortInitialiseStack>
 800229c:	4602      	mov	r2, r0
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022ae:	bf00      	nop
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80022c0:	f001 fc56 	bl	8003b70 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <prvAddNewTaskToReadyList+0x114>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	4a40      	ldr	r2, [pc, #256]	; (80023cc <prvAddNewTaskToReadyList+0x114>)
 80022cc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80022ce:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <prvAddNewTaskToReadyList+0x118>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022d6:	4a3e      	ldr	r2, [pc, #248]	; (80023d0 <prvAddNewTaskToReadyList+0x118>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022dc:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <prvAddNewTaskToReadyList+0x114>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d110      	bne.n	8002306 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022e4:	f000 fe62 	bl	8002fac <prvInitialiseTaskLists>
 80022e8:	e00d      	b.n	8002306 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <prvAddNewTaskToReadyList+0x11c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022f2:	4b37      	ldr	r3, [pc, #220]	; (80023d0 <prvAddNewTaskToReadyList+0x118>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d802      	bhi.n	8002306 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002300:	4a33      	ldr	r2, [pc, #204]	; (80023d0 <prvAddNewTaskToReadyList+0x118>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002306:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <prvAddNewTaskToReadyList+0x120>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	4a32      	ldr	r2, [pc, #200]	; (80023d8 <prvAddNewTaskToReadyList+0x120>)
 800230e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002310:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <prvAddNewTaskToReadyList+0x120>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231c:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <prvAddNewTaskToReadyList+0x124>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d903      	bls.n	800232c <prvAddNewTaskToReadyList+0x74>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	4a2c      	ldr	r2, [pc, #176]	; (80023dc <prvAddNewTaskToReadyList+0x124>)
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002330:	492b      	ldr	r1, [pc, #172]	; (80023e0 <prvAddNewTaskToReadyList+0x128>)
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3304      	adds	r3, #4
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	3204      	adds	r2, #4
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	1d1a      	adds	r2, r3, #4
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <prvAddNewTaskToReadyList+0x128>)
 8002370:	441a      	add	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	615a      	str	r2, [r3, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237a:	4919      	ldr	r1, [pc, #100]	; (80023e0 <prvAddNewTaskToReadyList+0x128>)
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1c59      	adds	r1, r3, #1
 800238a:	4815      	ldr	r0, [pc, #84]	; (80023e0 <prvAddNewTaskToReadyList+0x128>)
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4403      	add	r3, r0
 8002396:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002398:	f001 fc1a 	bl	8003bd0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <prvAddNewTaskToReadyList+0x11c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00e      	beq.n	80023c2 <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <prvAddNewTaskToReadyList+0x118>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d207      	bcs.n	80023c2 <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <prvAddNewTaskToReadyList+0x12c>)
 80023b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000170 	.word	0x20000170
 80023d0:	20000098 	.word	0x20000098
 80023d4:	2000017c 	.word	0x2000017c
 80023d8:	2000018c 	.word	0x2000018c
 80023dc:	20000178 	.word	0x20000178
 80023e0:	2000009c 	.word	0x2000009c
 80023e4:	e000ed04 	.word	0xe000ed04

080023e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d017      	beq.n	800242a <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <vTaskDelay+0x60>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <vTaskDelay+0x30>
        __asm volatile
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	60bb      	str	r3, [r7, #8]
    }
 8002414:	bf00      	nop
 8002416:	e7fe      	b.n	8002416 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002418:	f000 f86c 	bl	80024f4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800241c:	2100      	movs	r1, #0
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 ff10 	bl	8003244 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002424:	f000 f8aa 	bl	800257c <xTaskResumeAll>
 8002428:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <vTaskDelay+0x64>)
 8002432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000198 	.word	0x20000198
 800244c:	e000ed04 	.word	0xe000ed04

08002450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <vTaskStartScheduler+0x88>)
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2300      	movs	r3, #0
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	491e      	ldr	r1, [pc, #120]	; (80024dc <vTaskStartScheduler+0x8c>)
 8002464:	481e      	ldr	r0, [pc, #120]	; (80024e0 <vTaskStartScheduler+0x90>)
 8002466:	f7ff fe53 	bl	8002110 <xTaskCreate>
 800246a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d102      	bne.n	8002478 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002472:	f000 ff55 	bl	8003320 <xTimerCreateTimerTask>
 8002476:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d116      	bne.n	80024ac <vTaskStartScheduler+0x5c>
        __asm volatile
 800247e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002482:	f383 8811 	msr	BASEPRI, r3
 8002486:	f3bf 8f6f 	isb	sy
 800248a:	f3bf 8f4f 	dsb	sy
 800248e:	60bb      	str	r3, [r7, #8]
    }
 8002490:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <vTaskStartScheduler+0x94>)
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <vTaskStartScheduler+0x98>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <vTaskStartScheduler+0x9c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80024a6:	f001 faf1 	bl	8003a8c <xPortStartScheduler>
 80024aa:	e00e      	b.n	80024ca <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d10a      	bne.n	80024ca <vTaskStartScheduler+0x7a>
        __asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	607b      	str	r3, [r7, #4]
    }
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <vTaskStartScheduler+0xa0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000194 	.word	0x20000194
 80024dc:	080040fc 	.word	0x080040fc
 80024e0:	08002ec1 	.word	0x08002ec1
 80024e4:	20000190 	.word	0x20000190
 80024e8:	2000017c 	.word	0x2000017c
 80024ec:	20000174 	.word	0x20000174
 80024f0:	2000000c 	.word	0x2000000c

080024f4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <vTaskSuspendAll+0x18>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	4a03      	ldr	r2, [pc, #12]	; (800250c <vTaskSuspendAll+0x18>)
 8002500:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000198 	.word	0x20000198

08002510 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <prvGetExpectedIdleTime+0x58>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8002522:	2301      	movs	r3, #1
 8002524:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <prvGetExpectedIdleTime+0x5c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	e012      	b.n	800255c <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8002536:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <prvGetExpectedIdleTime+0x60>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d902      	bls.n	8002544 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	e00b      	b.n	800255c <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	e005      	b.n	800255c <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <prvGetExpectedIdleTime+0x64>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <prvGetExpectedIdleTime+0x68>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 800255c:	687b      	ldr	r3, [r7, #4]
    }
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	20000178 	.word	0x20000178
 800256c:	20000098 	.word	0x20000098
 8002570:	2000009c 	.word	0x2000009c
 8002574:	20000190 	.word	0x20000190
 8002578:	20000174 	.word	0x20000174

0800257c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800258a:	4b71      	ldr	r3, [pc, #452]	; (8002750 <xTaskResumeAll+0x1d4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <xTaskResumeAll+0x2c>
        __asm volatile
 8002592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002596:	f383 8811 	msr	BASEPRI, r3
 800259a:	f3bf 8f6f 	isb	sy
 800259e:	f3bf 8f4f 	dsb	sy
 80025a2:	607b      	str	r3, [r7, #4]
    }
 80025a4:	bf00      	nop
 80025a6:	e7fe      	b.n	80025a6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80025a8:	f001 fae2 	bl	8003b70 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025ac:	4b68      	ldr	r3, [pc, #416]	; (8002750 <xTaskResumeAll+0x1d4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	4a67      	ldr	r2, [pc, #412]	; (8002750 <xTaskResumeAll+0x1d4>)
 80025b4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025b6:	4b66      	ldr	r3, [pc, #408]	; (8002750 <xTaskResumeAll+0x1d4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f040 80c1 	bne.w	8002742 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <xTaskResumeAll+0x1d8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80bc 	beq.w	8002742 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025ca:	e08b      	b.n	80026e4 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025cc:	4b62      	ldr	r3, [pc, #392]	; (8002758 <xTaskResumeAll+0x1dc>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	6a12      	ldr	r2, [r2, #32]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	69d2      	ldr	r2, [r2, #28]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3318      	adds	r3, #24
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d103      	bne.n	8002602 <xTaskResumeAll+0x86>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	6a1a      	ldr	r2, [r3, #32]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	2200      	movs	r2, #0
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	68d2      	ldr	r2, [r2, #12]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3304      	adds	r3, #4
 8002634:	429a      	cmp	r2, r3
 8002636:	d103      	bne.n	8002640 <xTaskResumeAll+0xc4>
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2200      	movs	r2, #0
 8002644:	615a      	str	r2, [r3, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1e5a      	subs	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	4b41      	ldr	r3, [pc, #260]	; (800275c <xTaskResumeAll+0x1e0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d903      	bls.n	8002664 <xTaskResumeAll+0xe8>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	4a3e      	ldr	r2, [pc, #248]	; (800275c <xTaskResumeAll+0x1e0>)
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002668:	493d      	ldr	r1, [pc, #244]	; (8002760 <xTaskResumeAll+0x1e4>)
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	3304      	adds	r3, #4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	3204      	adds	r2, #4
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	1d1a      	adds	r2, r3, #4
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4a2e      	ldr	r2, [pc, #184]	; (8002760 <xTaskResumeAll+0x1e4>)
 80026a8:	441a      	add	r2, r3
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	615a      	str	r2, [r3, #20]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	492b      	ldr	r1, [pc, #172]	; (8002760 <xTaskResumeAll+0x1e4>)
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	1c59      	adds	r1, r3, #1
 80026c2:	4827      	ldr	r0, [pc, #156]	; (8002760 <xTaskResumeAll+0x1e4>)
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4403      	add	r3, r0
 80026ce:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <xTaskResumeAll+0x1e8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <xTaskResumeAll+0x1ec>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026e4:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <xTaskResumeAll+0x1dc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f47f af6f 	bne.w	80025cc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026f4:	f000 fcd8 	bl	80030a8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <xTaskResumeAll+0x1f0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002704:	f000 f89e 	bl	8002844 <xTaskIncrementTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <xTaskResumeAll+0x1ec>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3b01      	subs	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f1      	bne.n	8002704 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <xTaskResumeAll+0x1f0>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <xTaskResumeAll+0x1ec>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800272e:	2301      	movs	r3, #1
 8002730:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <xTaskResumeAll+0x1f4>)
 8002734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002742:	f001 fa45 	bl	8003bd0 <vPortExitCritical>

    return xAlreadyYielded;
 8002746:	69bb      	ldr	r3, [r7, #24]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000198 	.word	0x20000198
 8002754:	20000170 	.word	0x20000170
 8002758:	20000130 	.word	0x20000130
 800275c:	20000178 	.word	0x20000178
 8002760:	2000009c 	.word	0x2000009c
 8002764:	20000098 	.word	0x20000098
 8002768:	20000184 	.word	0x20000184
 800276c:	20000180 	.word	0x20000180
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800277a:	4b04      	ldr	r3, [pc, #16]	; (800278c <xTaskGetTickCount+0x18>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002780:	687b      	ldr	r3, [r7, #4]
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	20000174 	.word	0x20000174

08002790 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <vTaskStepTick+0xa4>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	441a      	add	r2, r3
 80027a0:	4b25      	ldr	r3, [pc, #148]	; (8002838 <vTaskStepTick+0xa8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d90a      	bls.n	80027be <vTaskStepTick+0x2e>
        __asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	617b      	str	r3, [r7, #20]
    }
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 80027be:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <vTaskStepTick+0xa4>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	441a      	add	r2, r3
 80027c6:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <vTaskStepTick+0xa8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d128      	bne.n	8002820 <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <vTaskStepTick+0xac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <vTaskStepTick+0x5c>
        __asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	613b      	str	r3, [r7, #16]
    }
 80027e8:	bf00      	nop
 80027ea:	e7fe      	b.n	80027ea <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10a      	bne.n	8002808 <vTaskStepTick+0x78>
        __asm volatile
 80027f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	60fb      	str	r3, [r7, #12]
    }
 8002804:	bf00      	nop
 8002806:	e7fe      	b.n	8002806 <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 8002808:	f001 f9b2 	bl	8003b70 <vPortEnterCritical>
            {
                xPendedTicks++;
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <vTaskStepTick+0xb0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <vTaskStepTick+0xb0>)
 8002814:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002816:	f001 f9db 	bl	8003bd0 <vPortExitCritical>
            xTicksToJump--;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3b01      	subs	r3, #1
 800281e:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <vTaskStepTick+0xa4>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	4a02      	ldr	r2, [pc, #8]	; (8002834 <vTaskStepTick+0xa4>)
 800282a:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 800282c:	bf00      	nop
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000174 	.word	0x20000174
 8002838:	20000190 	.word	0x20000190
 800283c:	20000198 	.word	0x20000198
 8002840:	20000180 	.word	0x20000180

08002844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800284e:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <xTaskIncrementTick+0x204>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 80ed 	bne.w	8002a32 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002858:	4b7c      	ldr	r3, [pc, #496]	; (8002a4c <xTaskIncrementTick+0x208>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002860:	4a7a      	ldr	r2, [pc, #488]	; (8002a4c <xTaskIncrementTick+0x208>)
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d120      	bne.n	80028ae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800286c:	4b78      	ldr	r3, [pc, #480]	; (8002a50 <xTaskIncrementTick+0x20c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <xTaskIncrementTick+0x48>
        __asm volatile
 8002876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287a:	f383 8811 	msr	BASEPRI, r3
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	607b      	str	r3, [r7, #4]
    }
 8002888:	bf00      	nop
 800288a:	e7fe      	b.n	800288a <xTaskIncrementTick+0x46>
 800288c:	4b70      	ldr	r3, [pc, #448]	; (8002a50 <xTaskIncrementTick+0x20c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <xTaskIncrementTick+0x210>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6e      	ldr	r2, [pc, #440]	; (8002a50 <xTaskIncrementTick+0x20c>)
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4a6e      	ldr	r2, [pc, #440]	; (8002a54 <xTaskIncrementTick+0x210>)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b6d      	ldr	r3, [pc, #436]	; (8002a58 <xTaskIncrementTick+0x214>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	4a6c      	ldr	r2, [pc, #432]	; (8002a58 <xTaskIncrementTick+0x214>)
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	f000 fbfd 	bl	80030a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028ae:	4b6b      	ldr	r3, [pc, #428]	; (8002a5c <xTaskIncrementTick+0x218>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6a3a      	ldr	r2, [r7, #32]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	f0c0 80a7 	bcc.w	8002a08 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ba:	4b65      	ldr	r3, [pc, #404]	; (8002a50 <xTaskIncrementTick+0x20c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028c4:	4b65      	ldr	r3, [pc, #404]	; (8002a5c <xTaskIncrementTick+0x218>)
 80028c6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ca:	601a      	str	r2, [r3, #0]
                    break;
 80028cc:	e09c      	b.n	8002a08 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028ce:	4b60      	ldr	r3, [pc, #384]	; (8002a50 <xTaskIncrementTick+0x20c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80028de:	6a3a      	ldr	r2, [r7, #32]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d203      	bcs.n	80028ee <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80028e6:	4a5d      	ldr	r2, [pc, #372]	; (8002a5c <xTaskIncrementTick+0x218>)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80028ec:	e08c      	b.n	8002a08 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	68d2      	ldr	r2, [r2, #12]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	6892      	ldr	r2, [r2, #8]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	3304      	adds	r3, #4
 8002910:	429a      	cmp	r2, r3
 8002912:	d103      	bne.n	800291c <xTaskIncrementTick+0xd8>
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2200      	movs	r2, #0
 8002920:	615a      	str	r2, [r3, #20]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	1e5a      	subs	r2, r3, #1
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01e      	beq.n	8002972 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	6a12      	ldr	r2, [r2, #32]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	69d2      	ldr	r2, [r2, #28]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	3318      	adds	r3, #24
 8002956:	429a      	cmp	r2, r3
 8002958:	d103      	bne.n	8002962 <xTaskIncrementTick+0x11e>
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2200      	movs	r2, #0
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	1e5a      	subs	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002976:	4b3a      	ldr	r3, [pc, #232]	; (8002a60 <xTaskIncrementTick+0x21c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d903      	bls.n	8002986 <xTaskIncrementTick+0x142>
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	4a37      	ldr	r2, [pc, #220]	; (8002a60 <xTaskIncrementTick+0x21c>)
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298a:	4936      	ldr	r1, [pc, #216]	; (8002a64 <xTaskIncrementTick+0x220>)
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	3304      	adds	r3, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	3204      	adds	r2, #4
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	1d1a      	adds	r2, r3, #4
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <xTaskIncrementTick+0x220>)
 80029ca:	441a      	add	r2, r3
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	615a      	str	r2, [r3, #20]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	4923      	ldr	r1, [pc, #140]	; (8002a64 <xTaskIncrementTick+0x220>)
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	1c59      	adds	r1, r3, #1
 80029e4:	481f      	ldr	r0, [pc, #124]	; (8002a64 <xTaskIncrementTick+0x220>)
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4403      	add	r3, r0
 80029f0:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <xTaskIncrementTick+0x224>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f67f af5c 	bls.w	80028ba <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a06:	e758      	b.n	80028ba <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <xTaskIncrementTick+0x224>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0e:	4915      	ldr	r1, [pc, #84]	; (8002a64 <xTaskIncrementTick+0x220>)
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d901      	bls.n	8002a24 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8002a20:	2301      	movs	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <xTaskIncrementTick+0x228>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	e004      	b.n	8002a3c <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <xTaskIncrementTick+0x22c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <xTaskIncrementTick+0x22c>)
 8002a3a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3728      	adds	r7, #40	; 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000198 	.word	0x20000198
 8002a4c:	20000174 	.word	0x20000174
 8002a50:	20000128 	.word	0x20000128
 8002a54:	2000012c 	.word	0x2000012c
 8002a58:	20000188 	.word	0x20000188
 8002a5c:	20000190 	.word	0x20000190
 8002a60:	20000178 	.word	0x20000178
 8002a64:	2000009c 	.word	0x2000009c
 8002a68:	20000098 	.word	0x20000098
 8002a6c:	20000184 	.word	0x20000184
 8002a70:	20000180 	.word	0x20000180

08002a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a7a:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <vTaskSwitchContext+0xa4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <vTaskSwitchContext+0xa8>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002a88:	e041      	b.n	8002b0e <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <vTaskSwitchContext+0xa8>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <vTaskSwitchContext+0xac>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e010      	b.n	8002aba <vTaskSwitchContext+0x46>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <vTaskSwitchContext+0x40>
        __asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	607b      	str	r3, [r7, #4]
    }
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <vTaskSwitchContext+0x3e>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	491a      	ldr	r1, [pc, #104]	; (8002b24 <vTaskSwitchContext+0xb0>)
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0e4      	beq.n	8002a98 <vTaskSwitchContext+0x24>
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4a12      	ldr	r2, [pc, #72]	; (8002b24 <vTaskSwitchContext+0xb0>)
 8002ada:	4413      	add	r3, r2
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	3308      	adds	r3, #8
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d104      	bne.n	8002afe <vTaskSwitchContext+0x8a>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <vTaskSwitchContext+0xb4>)
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <vTaskSwitchContext+0xac>)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6013      	str	r3, [r2, #0]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	20000198 	.word	0x20000198
 8002b1c:	20000184 	.word	0x20000184
 8002b20:	20000178 	.word	0x20000178
 8002b24:	2000009c 	.word	0x2000009c
 8002b28:	20000098 	.word	0x20000098

08002b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	60fb      	str	r3, [r7, #12]
    }
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b52:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <vTaskPlaceOnEventList+0x44>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3318      	adds	r3, #24
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 feb1 	bl	80038c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b60:	2101      	movs	r1, #1
 8002b62:	6838      	ldr	r0, [r7, #0]
 8002b64:	f000 fb6e 	bl	8003244 <prvAddCurrentTaskToDelayedList>
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	20000098 	.word	0x20000098

08002b74 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	613b      	str	r3, [r7, #16]
    }
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <vTaskPlaceOnEventListRestricted+0x88>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	61da      	str	r2, [r3, #28]
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <vTaskPlaceOnEventListRestricted+0x88>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	6892      	ldr	r2, [r2, #8]
 8002bb2:	621a      	str	r2, [r3, #32]
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <vTaskPlaceOnEventListRestricted+0x88>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	3218      	adds	r2, #24
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <vTaskPlaceOnEventListRestricted+0x88>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f103 0218 	add.w	r2, r3, #24
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <vTaskPlaceOnEventListRestricted+0x88>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
 8002be8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68b8      	ldr	r0, [r7, #8]
 8002bee:	f000 fb29 	bl	8003244 <prvAddCurrentTaskToDelayedList>
    }
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000098 	.word	0x20000098

08002c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	60fb      	str	r3, [r7, #12]
    }
 8002c28:	bf00      	nop
 8002c2a:	e7fe      	b.n	8002c2a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	6a3a      	ldr	r2, [r7, #32]
 8002c38:	6a12      	ldr	r2, [r2, #32]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	6a3a      	ldr	r2, [r7, #32]
 8002c42:	69d2      	ldr	r2, [r2, #28]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	3318      	adds	r3, #24
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d103      	bne.n	8002c5a <xTaskRemoveFromEventList+0x5a>
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1e5a      	subs	r2, r3, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <xTaskRemoveFromEventList+0x198>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d161      	bne.n	8002d36 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	68d2      	ldr	r2, [r2, #12]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	6892      	ldr	r2, [r2, #8]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	3304      	adds	r3, #4
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d103      	bne.n	8002ca0 <xTaskRemoveFromEventList+0xa0>
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1e5a      	subs	r2, r3, #1
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <xTaskRemoveFromEventList+0x19c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d903      	bls.n	8002cc4 <xTaskRemoveFromEventList+0xc4>
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <xTaskRemoveFromEventList+0x19c>)
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	4935      	ldr	r1, [pc, #212]	; (8002da0 <xTaskRemoveFromEventList+0x1a0>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	3204      	adds	r2, #4
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	1d1a      	adds	r2, r3, #4
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <xTaskRemoveFromEventList+0x1a0>)
 8002d08:	441a      	add	r2, r3
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	4923      	ldr	r1, [pc, #140]	; (8002da0 <xTaskRemoveFromEventList+0x1a0>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1c59      	adds	r1, r3, #1
 8002d22:	481f      	ldr	r0, [pc, #124]	; (8002da0 <xTaskRemoveFromEventList+0x1a0>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4403      	add	r3, r0
 8002d2e:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 8002d30:	f000 f9ba 	bl	80030a8 <prvResetNextTaskUnblockTime>
 8002d34:	e01b      	b.n	8002d6e <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <xTaskRemoveFromEventList+0x1a4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	61da      	str	r2, [r3, #28]
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	621a      	str	r2, [r3, #32]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	6a3a      	ldr	r2, [r7, #32]
 8002d50:	3218      	adds	r2, #24
 8002d52:	605a      	str	r2, [r3, #4]
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f103 0218 	add.w	r2, r3, #24
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <xTaskRemoveFromEventList+0x1a4>)
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <xTaskRemoveFromEventList+0x1a4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <xTaskRemoveFromEventList+0x1a4>)
 8002d6c:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <xTaskRemoveFromEventList+0x1a8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d905      	bls.n	8002d88 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <xTaskRemoveFromEventList+0x1ac>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e001      	b.n	8002d8c <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3728      	adds	r7, #40	; 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000198 	.word	0x20000198
 8002d9c:	20000178 	.word	0x20000178
 8002da0:	2000009c 	.word	0x2000009c
 8002da4:	20000130 	.word	0x20000130
 8002da8:	20000098 	.word	0x20000098
 8002dac:	20000184 	.word	0x20000184

08002db0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <vTaskInternalSetTimeOutState+0x24>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <vTaskInternalSetTimeOutState+0x28>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	605a      	str	r2, [r3, #4]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000188 	.word	0x20000188
 8002dd8:	20000174 	.word	0x20000174

08002ddc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	613b      	str	r3, [r7, #16]
    }
 8002dfe:	bf00      	nop
 8002e00:	e7fe      	b.n	8002e00 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	60fb      	str	r3, [r7, #12]
    }
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002e1e:	f000 fea7 	bl	8003b70 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002e22:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <xTaskCheckForTimeOut+0xc4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d102      	bne.n	8002e42 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	e026      	b.n	8002e90 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <xTaskCheckForTimeOut+0xc8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d00a      	beq.n	8002e64 <xTaskCheckForTimeOut+0x88>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d305      	bcc.n	8002e64 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e015      	b.n	8002e90 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d20b      	bcs.n	8002e86 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff98 	bl	8002db0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	e004      	b.n	8002e90 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002e90:	f000 fe9e 	bl	8003bd0 <vPortExitCritical>

    return xReturn;
 8002e94:	69fb      	ldr	r3, [r7, #28]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000174 	.word	0x20000174
 8002ea4:	20000188 	.word	0x20000188

08002ea8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <vTaskMissedYield+0x14>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000184 	.word	0x20000184

08002ec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ec8:	f000 f8b0 	bl	800302c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ecc:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <prvIdleTask+0x70>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d907      	bls.n	8002ee4 <prvIdleTask+0x24>
            {
                taskYIELD();
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <prvIdleTask+0x74>)
 8002ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 8002ee4:	f7ff fb14 	bl	8002510 <prvGetExpectedIdleTime>
 8002ee8:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d9eb      	bls.n	8002ec8 <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 8002ef0:	f7ff fb00 	bl	80024f4 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <prvIdleTask+0x78>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <prvIdleTask+0x7c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d20a      	bcs.n	8002f16 <prvIdleTask+0x56>
        __asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	60bb      	str	r3, [r7, #8]
    }
 8002f12:	bf00      	nop
 8002f14:	e7fe      	b.n	8002f14 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 8002f16:	f7ff fafb 	bl	8002510 <prvGetExpectedIdleTime>
 8002f1a:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d902      	bls.n	8002f28 <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fec2 	bl	8003cac <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 8002f28:	f7ff fb28 	bl	800257c <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 8002f2c:	e7cc      	b.n	8002ec8 <prvIdleTask+0x8>
 8002f2e:	bf00      	nop
 8002f30:	2000009c 	.word	0x2000009c
 8002f34:	e000ed04 	.word	0xe000ed04
 8002f38:	20000190 	.word	0x20000190
 8002f3c:	20000174 	.word	0x20000174

08002f40 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8002f4e:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <eTaskConfirmSleepModeStatus+0x58>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8002f56:	2300      	movs	r3, #0
 8002f58:	71fb      	strb	r3, [r7, #7]
 8002f5a:	e017      	b.n	8002f8c <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <eTaskConfirmSleepModeStatus+0x5c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8002f64:	2300      	movs	r3, #0
 8002f66:	71fb      	strb	r3, [r7, #7]
 8002f68:	e010      	b.n	8002f8c <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <eTaskConfirmSleepModeStatus+0x60>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 8002f72:	2300      	movs	r3, #0
 8002f74:	71fb      	strb	r3, [r7, #7]
 8002f76:	e009      	b.n	8002f8c <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <eTaskConfirmSleepModeStatus+0x64>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <eTaskConfirmSleepModeStatus+0x68>)
 8002f7e:	6819      	ldr	r1, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	1acb      	subs	r3, r1, r3
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d101      	bne.n	8002f8c <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
    }
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	20000130 	.word	0x20000130
 8002f9c:	20000184 	.word	0x20000184
 8002fa0:	20000180 	.word	0x20000180
 8002fa4:	2000015c 	.word	0x2000015c
 8002fa8:	20000170 	.word	0x20000170

08002fac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	e00c      	b.n	8002fd2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4a12      	ldr	r2, [pc, #72]	; (800300c <prvInitialiseTaskLists+0x60>)
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fc50 	bl	800386c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d9ef      	bls.n	8002fb8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002fd8:	480d      	ldr	r0, [pc, #52]	; (8003010 <prvInitialiseTaskLists+0x64>)
 8002fda:	f000 fc47 	bl	800386c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002fde:	480d      	ldr	r0, [pc, #52]	; (8003014 <prvInitialiseTaskLists+0x68>)
 8002fe0:	f000 fc44 	bl	800386c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <prvInitialiseTaskLists+0x6c>)
 8002fe6:	f000 fc41 	bl	800386c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002fea:	480c      	ldr	r0, [pc, #48]	; (800301c <prvInitialiseTaskLists+0x70>)
 8002fec:	f000 fc3e 	bl	800386c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002ff0:	480b      	ldr	r0, [pc, #44]	; (8003020 <prvInitialiseTaskLists+0x74>)
 8002ff2:	f000 fc3b 	bl	800386c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <prvInitialiseTaskLists+0x78>)
 8002ff8:	4a05      	ldr	r2, [pc, #20]	; (8003010 <prvInitialiseTaskLists+0x64>)
 8002ffa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <prvInitialiseTaskLists+0x7c>)
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <prvInitialiseTaskLists+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000009c 	.word	0x2000009c
 8003010:	20000100 	.word	0x20000100
 8003014:	20000114 	.word	0x20000114
 8003018:	20000130 	.word	0x20000130
 800301c:	20000144 	.word	0x20000144
 8003020:	2000015c 	.word	0x2000015c
 8003024:	20000128 	.word	0x20000128
 8003028:	2000012c 	.word	0x2000012c

0800302c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003032:	e019      	b.n	8003068 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003034:	f000 fd9c 	bl	8003b70 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003038:	4b10      	ldr	r3, [pc, #64]	; (800307c <prvCheckTasksWaitingTermination+0x50>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fc74 	bl	8003932 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <prvCheckTasksWaitingTermination+0x54>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3b01      	subs	r3, #1
 8003050:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <prvCheckTasksWaitingTermination+0x54>)
 8003052:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <prvCheckTasksWaitingTermination+0x58>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3b01      	subs	r3, #1
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <prvCheckTasksWaitingTermination+0x58>)
 800305c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800305e:	f000 fdb7 	bl	8003bd0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f810 	bl	8003088 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <prvCheckTasksWaitingTermination+0x58>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e1      	bne.n	8003034 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000144 	.word	0x20000144
 8003080:	20000170 	.word	0x20000170
 8003084:	20000158 	.word	0x20000158

08003088 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fbd7 	bl	8003848 <vPortFree>
            vPortFree( pxTCB );
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fbd4 	bl	8003848 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <prvResetNextTaskUnblockTime+0x2c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <prvResetNextTaskUnblockTime+0x30>)
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295
 80030bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80030be:	e005      	b.n	80030cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <prvResetNextTaskUnblockTime+0x2c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a03      	ldr	r2, [pc, #12]	; (80030d8 <prvResetNextTaskUnblockTime+0x30>)
 80030ca:	6013      	str	r3, [r2, #0]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	20000128 	.word	0x20000128
 80030d8:	20000190 	.word	0x20000190

080030dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <xTaskGetSchedulerState+0x34>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80030ea:	2301      	movs	r3, #1
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	e008      	b.n	8003102 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <xTaskGetSchedulerState+0x38>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d102      	bne.n	80030fe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80030f8:	2302      	movs	r3, #2
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	e001      	b.n	8003102 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003102:	687b      	ldr	r3, [r7, #4]
    }
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	bc80      	pop	{r7}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	2000017c 	.word	0x2000017c
 8003114:	20000198 	.word	0x20000198

08003118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d07e      	beq.n	800322c <xTaskPriorityDisinherit+0x114>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800312e:	4b42      	ldr	r3, [pc, #264]	; (8003238 <xTaskPriorityDisinherit+0x120>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	429a      	cmp	r2, r3
 8003136:	d00a      	beq.n	800314e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	613b      	str	r3, [r7, #16]
    }
 800314a:	bf00      	nop
 800314c:	e7fe      	b.n	800314c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	60fb      	str	r3, [r7, #12]
    }
 8003168:	bf00      	nop
 800316a:	e7fe      	b.n	800316a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317e:	429a      	cmp	r2, r3
 8003180:	d054      	beq.n	800322c <xTaskPriorityDisinherit+0x114>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	2b00      	cmp	r3, #0
 8003188:	d150      	bne.n	800322c <xTaskPriorityDisinherit+0x114>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3304      	adds	r3, #4
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fbcf 	bl	8003932 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	f1c3 0205 	rsb	r2, r3, #5
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <xTaskPriorityDisinherit+0x124>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d903      	bls.n	80031bc <xTaskPriorityDisinherit+0xa4>
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	4a20      	ldr	r2, [pc, #128]	; (800323c <xTaskPriorityDisinherit+0x124>)
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	491f      	ldr	r1, [pc, #124]	; (8003240 <xTaskPriorityDisinherit+0x128>)
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3304      	adds	r3, #4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	3204      	adds	r2, #4
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	1d1a      	adds	r2, r3, #4
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	609a      	str	r2, [r3, #8]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <xTaskPriorityDisinherit+0x128>)
 8003200:	441a      	add	r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	615a      	str	r2, [r3, #20]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	490d      	ldr	r1, [pc, #52]	; (8003240 <xTaskPriorityDisinherit+0x128>)
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1c59      	adds	r1, r3, #1
 800321a:	4809      	ldr	r0, [pc, #36]	; (8003240 <xTaskPriorityDisinherit+0x128>)
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4403      	add	r3, r0
 8003226:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003228:	2301      	movs	r3, #1
 800322a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800322c:	69fb      	ldr	r3, [r7, #28]
    }
 800322e:	4618      	mov	r0, r3
 8003230:	3720      	adds	r7, #32
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000098 	.word	0x20000098
 800323c:	20000178 	.word	0x20000178
 8003240:	2000009c 	.word	0x2000009c

08003244 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800324e:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003254:	4b2d      	ldr	r3, [pc, #180]	; (800330c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3304      	adds	r3, #4
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fb69 	bl	8003932 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d124      	bne.n	80032b2 <prvAddCurrentTaskToDelayedList+0x6e>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d021      	beq.n	80032b2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	613b      	str	r3, [r7, #16]
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	4b23      	ldr	r3, [pc, #140]	; (800330c <prvAddCurrentTaskToDelayedList+0xc8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	6892      	ldr	r2, [r2, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	3204      	adds	r2, #4
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	1d1a      	adds	r2, r3, #4
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <prvAddCurrentTaskToDelayedList+0xc8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <prvAddCurrentTaskToDelayedList+0xcc>)
 80032a2:	615a      	str	r2, [r3, #20]
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <prvAddCurrentTaskToDelayedList+0xcc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a19      	ldr	r2, [pc, #100]	; (8003310 <prvAddCurrentTaskToDelayedList+0xcc>)
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80032b0:	e026      	b.n	8003300 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032ba:	4b14      	ldr	r3, [pc, #80]	; (800330c <prvAddCurrentTaskToDelayedList+0xc8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d209      	bcs.n	80032de <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <prvAddCurrentTaskToDelayedList+0xd0>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <prvAddCurrentTaskToDelayedList+0xc8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3304      	adds	r3, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f000 faf3 	bl	80038c2 <vListInsert>
}
 80032dc:	e010      	b.n	8003300 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <prvAddCurrentTaskToDelayedList+0xd4>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <prvAddCurrentTaskToDelayedList+0xc8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3304      	adds	r3, #4
 80032e8:	4619      	mov	r1, r3
 80032ea:	4610      	mov	r0, r2
 80032ec:	f000 fae9 	bl	80038c2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <prvAddCurrentTaskToDelayedList+0xd8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d202      	bcs.n	8003300 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 80032fa:	4a08      	ldr	r2, [pc, #32]	; (800331c <prvAddCurrentTaskToDelayedList+0xd8>)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6013      	str	r3, [r2, #0]
}
 8003300:	bf00      	nop
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000174 	.word	0x20000174
 800330c:	20000098 	.word	0x20000098
 8003310:	2000015c 	.word	0x2000015c
 8003314:	2000012c 	.word	0x2000012c
 8003318:	20000128 	.word	0x20000128
 800331c:	20000190 	.word	0x20000190

08003320 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003326:	2300      	movs	r3, #0
 8003328:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800332a:	f000 fa45 	bl	80037b8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <xTimerCreateTimerTask+0x54>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <xTimerCreateTimerTask+0x58>)
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	2303      	movs	r3, #3
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	2300      	movs	r3, #0
 8003340:	2280      	movs	r2, #128	; 0x80
 8003342:	490e      	ldr	r1, [pc, #56]	; (800337c <xTimerCreateTimerTask+0x5c>)
 8003344:	480e      	ldr	r0, [pc, #56]	; (8003380 <xTimerCreateTimerTask+0x60>)
 8003346:	f7fe fee3 	bl	8002110 <xTaskCreate>
 800334a:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	603b      	str	r3, [r7, #0]
    }
 8003364:	bf00      	nop
 8003366:	e7fe      	b.n	8003366 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003368:	687b      	ldr	r3, [r7, #4]
    }
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	200001cc 	.word	0x200001cc
 8003378:	200001d0 	.word	0x200001d0
 800337c:	08004104 	.word	0x08004104
 8003380:	08003429 	.word	0x08003429

08003384 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003390:	e008      	b.n	80033a4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	18d1      	adds	r1, r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f8db 	bl	800356c <prvInsertTimerInActiveList>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ea      	bne.n	8003392 <prvReloadTimer+0xe>
        }
    }
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d2:	4b14      	ldr	r3, [pc, #80]	; (8003424 <prvProcessExpiredTimer+0x5c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3304      	adds	r3, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 faa6 	bl	8003932 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f7ff ffc3 	bl	8003384 <prvReloadTimer>
 80033fe:	e008      	b.n	8003412 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	4798      	blx	r3
    }
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200001c4 	.word	0x200001c4

08003428 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003430:	f107 0308 	add.w	r3, r7, #8
 8003434:	4618      	mov	r0, r3
 8003436:	f000 f857 	bl	80034e8 <prvGetNextExpireTime>
 800343a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4619      	mov	r1, r3
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f803 	bl	800344c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003446:	f000 f8d3 	bl	80035f0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800344a:	e7f1      	b.n	8003430 <prvTimerTask+0x8>

0800344c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003456:	f7ff f84d 	bl	80024f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800345a:	f107 0308 	add.w	r3, r7, #8
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f864 	bl	800352c <prvSampleTimeNow>
 8003464:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d130      	bne.n	80034ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <prvProcessTimerOrBlockTask+0x3c>
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	429a      	cmp	r2, r3
 8003478:	d806      	bhi.n	8003488 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800347a:	f7ff f87f 	bl	800257c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ffa1 	bl	80033c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003486:	e024      	b.n	80034d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <prvProcessTimerOrBlockTask+0x90>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <prvProcessTimerOrBlockTask+0x50>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <prvProcessTimerOrBlockTask+0x52>
 800349c:	2300      	movs	r3, #0
 800349e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034a0:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <prvProcessTimerOrBlockTask+0x94>)
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	4619      	mov	r1, r3
 80034ae:	f7fe fdfb 	bl	80020a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80034b2:	f7ff f863 	bl	800257c <xTaskResumeAll>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <prvProcessTimerOrBlockTask+0x98>)
 80034be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	f3bf 8f6f 	isb	sy
    }
 80034cc:	e001      	b.n	80034d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80034ce:	f7ff f855 	bl	800257c <xTaskResumeAll>
    }
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	200001c8 	.word	0x200001c8
 80034e0:	200001cc 	.word	0x200001cc
 80034e4:	e000ed04 	.word	0xe000ed04

080034e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <prvGetNextExpireTime+0x40>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <prvGetNextExpireTime+0x16>
 80034fa:	2201      	movs	r2, #1
 80034fc:	e000      	b.n	8003500 <prvGetNextExpireTime+0x18>
 80034fe:	2200      	movs	r2, #0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d105      	bne.n	8003518 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <prvGetNextExpireTime+0x40>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	e001      	b.n	800351c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800351c:	68fb      	ldr	r3, [r7, #12]
    }
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	200001c4 	.word	0x200001c4

0800352c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003534:	f7ff f91e 	bl	8002774 <xTaskGetTickCount>
 8003538:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <prvSampleTimeNow+0x3c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	429a      	cmp	r2, r3
 8003542:	d205      	bcs.n	8003550 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003544:	f000 f912 	bl	800376c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e002      	b.n	8003556 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003556:	4a04      	ldr	r2, [pc, #16]	; (8003568 <prvSampleTimeNow+0x3c>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800355c:	68fb      	ldr	r3, [r7, #12]
    }
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	200001d4 	.word	0x200001d4

0800356c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	429a      	cmp	r2, r3
 8003590:	d812      	bhi.n	80035b8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	1ad2      	subs	r2, r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	429a      	cmp	r2, r3
 800359e:	d302      	bcc.n	80035a6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	e01b      	b.n	80035de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <prvInsertTimerInActiveList+0x7c>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3304      	adds	r3, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	4610      	mov	r0, r2
 80035b2:	f000 f986 	bl	80038c2 <vListInsert>
 80035b6:	e012      	b.n	80035de <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d206      	bcs.n	80035ce <prvInsertTimerInActiveList+0x62>
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	e007      	b.n	80035de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <prvInsertTimerInActiveList+0x80>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f000 f972 	bl	80038c2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80035de:	697b      	ldr	r3, [r7, #20]
    }
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200001c8 	.word	0x200001c8
 80035ec:	200001c4 	.word	0x200001c4

080035f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035f6:	e0a6      	b.n	8003746 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f2c0 80a2 	blt.w	8003744 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3304      	adds	r3, #4
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f98e 	bl	8003932 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff87 	bl	800352c <prvSampleTimeNow>
 800361e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	3b01      	subs	r3, #1
 8003624:	2b08      	cmp	r3, #8
 8003626:	f200 808e 	bhi.w	8003746 <prvProcessReceivedCommands+0x156>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <prvProcessReceivedCommands+0x40>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003655 	.word	0x08003655
 8003634:	08003655 	.word	0x08003655
 8003638:	080036bd 	.word	0x080036bd
 800363c:	080036d1 	.word	0x080036d1
 8003640:	0800371b 	.word	0x0800371b
 8003644:	08003655 	.word	0x08003655
 8003648:	08003655 	.word	0x08003655
 800364c:	080036bd 	.word	0x080036bd
 8003650:	080036d1 	.word	0x080036d1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	b2da      	uxtb	r2, r3
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	18d1      	adds	r1, r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	69f8      	ldr	r0, [r7, #28]
 8003674:	f7ff ff7a 	bl	800356c <prvInsertTimerInActiveList>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d063      	beq.n	8003746 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d009      	beq.n	80036a0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	4413      	add	r3, r2
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4619      	mov	r1, r3
 8003698:	69f8      	ldr	r0, [r7, #28]
 800369a:	f7ff fe73 	bl	8003384 <prvReloadTimer>
 800369e:	e008      	b.n	80036b2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	69f8      	ldr	r0, [r7, #28]
 80036b8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80036ba:	e044      	b.n	8003746 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036c2:	f023 0301 	bic.w	r3, r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80036ce:	e03a      	b.n	8003746 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	617b      	str	r3, [r7, #20]
    }
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	18d1      	adds	r1, r2, r3
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	69f8      	ldr	r0, [r7, #28]
 8003714:	f7ff ff2a 	bl	800356c <prvInsertTimerInActiveList>
                        break;
 8003718:	e015      	b.n	8003746 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003728:	69f8      	ldr	r0, [r7, #28]
 800372a:	f000 f88d 	bl	8003848 <vPortFree>
 800372e:	e00a      	b.n	8003746 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	b2da      	uxtb	r2, r3
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003742:	e000      	b.n	8003746 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003744:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <prvProcessReceivedCommands+0x178>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f107 0108 	add.w	r1, r7, #8
 800374e:	2200      	movs	r2, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f7fe fa6b 	bl	8001c2c <xQueueReceive>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f47f af4d 	bne.w	80035f8 <prvProcessReceivedCommands+0x8>
        }
    }
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200001cc 	.word	0x200001cc

0800376c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003772:	e009      	b.n	8003788 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <prvSwitchTimerLists+0x44>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800377e:	f04f 31ff 	mov.w	r1, #4294967295
 8003782:	6838      	ldr	r0, [r7, #0]
 8003784:	f7ff fe20 	bl	80033c8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <prvSwitchTimerLists+0x44>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <prvSwitchTimerLists+0x44>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <prvSwitchTimerLists+0x48>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <prvSwitchTimerLists+0x44>)
 800379e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <prvSwitchTimerLists+0x48>)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6013      	str	r3, [r2, #0]
    }
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200001c4 	.word	0x200001c4
 80037b4:	200001c8 	.word	0x200001c8

080037b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80037bc:	f000 f9d8 	bl	8003b70 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80037c0:	4b12      	ldr	r3, [pc, #72]	; (800380c <prvCheckForValidListAndQueue+0x54>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d11d      	bne.n	8003804 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80037c8:	4811      	ldr	r0, [pc, #68]	; (8003810 <prvCheckForValidListAndQueue+0x58>)
 80037ca:	f000 f84f 	bl	800386c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80037ce:	4811      	ldr	r0, [pc, #68]	; (8003814 <prvCheckForValidListAndQueue+0x5c>)
 80037d0:	f000 f84c 	bl	800386c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <prvCheckForValidListAndQueue+0x60>)
 80037d6:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <prvCheckForValidListAndQueue+0x58>)
 80037d8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <prvCheckForValidListAndQueue+0x64>)
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <prvCheckForValidListAndQueue+0x5c>)
 80037de:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80037e0:	2200      	movs	r2, #0
 80037e2:	210c      	movs	r1, #12
 80037e4:	200a      	movs	r0, #10
 80037e6:	f7fe f8b1 	bl	800194c <xQueueGenericCreate>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4a07      	ldr	r2, [pc, #28]	; (800380c <prvCheckForValidListAndQueue+0x54>)
 80037ee:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <prvCheckForValidListAndQueue+0x54>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <prvCheckForValidListAndQueue+0x54>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4908      	ldr	r1, [pc, #32]	; (8003820 <prvCheckForValidListAndQueue+0x68>)
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe fc04 	bl	800200c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003804:	f000 f9e4 	bl	8003bd0 <vPortExitCritical>
    }
 8003808:	bf00      	nop
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200001cc 	.word	0x200001cc
 8003810:	2000019c 	.word	0x2000019c
 8003814:	200001b0 	.word	0x200001b0
 8003818:	200001c4 	.word	0x200001c4
 800381c:	200001c8 	.word	0x200001c8
 8003820:	0800410c 	.word	0x0800410c

08003824 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800382c:	f7fe fe62 	bl	80024f4 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fb6b 	bl	8003f0c <malloc>
 8003836:	4603      	mov	r3, r0
 8003838:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800383a:	f7fe fe9f 	bl	800257c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800383e:	68fb      	ldr	r3, [r7, #12]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d006      	beq.n	8003864 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 8003856:	f7fe fe4d 	bl	80024f4 <vTaskSuspendAll>
        {
            free( pv );
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fb5e 	bl	8003f1c <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8003860:	f7fe fe8c 	bl	800257c <xTaskResumeAll>
    }
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f103 0208 	add.w	r2, r3, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f04f 32ff 	mov.w	r2, #4294967295
 8003884:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f103 0208 	add.w	r2, r3, #8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f103 0208 	add.w	r2, r3, #8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d103      	bne.n	80038e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e00c      	b.n	80038fc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3308      	adds	r3, #8
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e002      	b.n	80038f0 <vListInsert+0x2e>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d2f6      	bcs.n	80038ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	601a      	str	r2, [r3, #0]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6892      	ldr	r2, [r2, #8]
 8003948:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6852      	ldr	r2, [r2, #4]
 8003952:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	429a      	cmp	r2, r3
 800395c:	d103      	bne.n	8003966 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1e5a      	subs	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b04      	subs	r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800399c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3b04      	subs	r3, #4
 80039a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3b04      	subs	r3, #4
 80039b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <pxPortInitialiseStack+0x54>)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3b14      	subs	r3, #20
 80039be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	3b20      	subs	r3, #32
 80039ca:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	080039dd 	.word	0x080039dd

080039dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <prvTaskExitError+0x54>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	d00a      	beq.n	8003a06 <prvTaskExitError+0x2a>
        __asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	60fb      	str	r3, [r7, #12]
    }
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <prvTaskExitError+0x28>
        __asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	60bb      	str	r3, [r7, #8]
    }
 8003a18:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003a1a:	bf00      	nop
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0fc      	beq.n	8003a1c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000010 	.word	0x20000010
	...

08003a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003a40:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <pxCurrentTCBConst2>)
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	6808      	ldr	r0, [r1, #0]
 8003a46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a4a:	f380 8809 	msr	PSP, r0
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f380 8811 	msr	BASEPRI, r0
 8003a5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003a5e:	4770      	bx	lr

08003a60 <pxCurrentTCBConst2>:
 8003a60:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop

08003a68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003a68:	4806      	ldr	r0, [pc, #24]	; (8003a84 <prvPortStartFirstTask+0x1c>)
 8003a6a:	6800      	ldr	r0, [r0, #0]
 8003a6c:	6800      	ldr	r0, [r0, #0]
 8003a6e:	f380 8808 	msr	MSP, r0
 8003a72:	b662      	cpsie	i
 8003a74:	b661      	cpsie	f
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	df00      	svc	0
 8003a80:	bf00      	nop
 8003a82:	0000      	.short	0x0000
 8003a84:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop

08003a8c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a92:	4b32      	ldr	r3, [pc, #200]	; (8003b5c <xPortStartScheduler+0xd0>)
 8003a94:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	22ff      	movs	r2, #255	; 0xff
 8003aa2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <xPortStartScheduler+0xd4>)
 8003ab8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003aba:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <xPortStartScheduler+0xd8>)
 8003abc:	2207      	movs	r2, #7
 8003abe:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ac0:	e009      	b.n	8003ad6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8003ac2:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <xPortStartScheduler+0xd8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <xPortStartScheduler+0xd8>)
 8003aca:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003acc:	78fb      	ldrb	r3, [r7, #3]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b80      	cmp	r3, #128	; 0x80
 8003ae0:	d0ef      	beq.n	8003ac2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ae2:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <xPortStartScheduler+0xd8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1c3 0307 	rsb	r3, r3, #7
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d00a      	beq.n	8003b04 <xPortStartScheduler+0x78>
        __asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	60bb      	str	r3, [r7, #8]
    }
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <xPortStartScheduler+0xd8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <xPortStartScheduler+0xd8>)
 8003b0c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <xPortStartScheduler+0xd8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b16:	4a13      	ldr	r2, [pc, #76]	; (8003b64 <xPortStartScheduler+0xd8>)
 8003b18:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003b22:	4b11      	ldr	r3, [pc, #68]	; (8003b68 <xPortStartScheduler+0xdc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <xPortStartScheduler+0xdc>)
 8003b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b2c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	; (8003b68 <xPortStartScheduler+0xdc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a0d      	ldr	r2, [pc, #52]	; (8003b68 <xPortStartScheduler+0xdc>)
 8003b34:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b38:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003b3a:	f000 f981 	bl	8003e40 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <xPortStartScheduler+0xe0>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003b44:	f7ff ff90 	bl	8003a68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003b48:	f7fe ff94 	bl	8002a74 <vTaskSwitchContext>
    prvTaskExitError();
 8003b4c:	f7ff ff46 	bl	80039dc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	e000e400 	.word	0xe000e400
 8003b60:	200001e4 	.word	0x200001e4
 8003b64:	200001e8 	.word	0x200001e8
 8003b68:	e000ed20 	.word	0xe000ed20
 8003b6c:	20000010 	.word	0x20000010

08003b70 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
        __asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	607b      	str	r3, [r7, #4]
    }
 8003b88:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <vPortEnterCritical+0x58>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <vPortEnterCritical+0x58>)
 8003b92:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <vPortEnterCritical+0x58>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d10f      	bne.n	8003bbc <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <vPortEnterCritical+0x5c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <vPortEnterCritical+0x4c>
        __asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	603b      	str	r3, [r7, #0]
    }
 8003bb8:	bf00      	nop
 8003bba:	e7fe      	b.n	8003bba <vPortEnterCritical+0x4a>
    }
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000010 	.word	0x20000010
 8003bcc:	e000ed04 	.word	0xe000ed04

08003bd0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <vPortExitCritical+0x4c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <vPortExitCritical+0x24>
        __asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
    }
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <vPortExitCritical+0x4c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <vPortExitCritical+0x4c>)
 8003bfc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <vPortExitCritical+0x4c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <vPortExitCritical+0x42>
 8003c06:	2300      	movs	r3, #0
 8003c08:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003c10:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	20000010 	.word	0x20000010

08003c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003c20:	f3ef 8009 	mrs	r0, PSP
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <pxCurrentTCBConst>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c30:	6010      	str	r0, [r2, #0]
 8003c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003c36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c3a:	f380 8811 	msr	BASEPRI, r0
 8003c3e:	f7fe ff19 	bl	8002a74 <vTaskSwitchContext>
 8003c42:	f04f 0000 	mov.w	r0, #0
 8003c46:	f380 8811 	msr	BASEPRI, r0
 8003c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	6808      	ldr	r0, [r1, #0]
 8003c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c56:	f380 8809 	msr	PSP, r0
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	4770      	bx	lr

08003c60 <pxCurrentTCBConst>:
 8003c60:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop

08003c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	607b      	str	r3, [r7, #4]
    }
 8003c80:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003c82:	f7fe fddf 	bl	8002844 <xTaskIncrementTick>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <SysTick_Handler+0x40>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f383 8811 	msr	BASEPRI, r3
    }
 8003c9e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8003cb4:	4b5b      	ldr	r3, [pc, #364]	; (8003e24 <vPortSuppressTicksAndSleep+0x178>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d902      	bls.n	8003cc4 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8003cbe:	4b59      	ldr	r3, [pc, #356]	; (8003e24 <vPortSuppressTicksAndSleep+0x178>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 8003cc4:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 8003cc6:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 8003cca:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8003cce:	f7ff f937 	bl	8002f40 <eTaskConfirmSleepModeStatus>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 8003cd8:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 8003cda:	e09e      	b.n	8003e1a <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8003cdc:	4b52      	ldr	r3, [pc, #328]	; (8003e28 <vPortSuppressTicksAndSleep+0x17c>)
 8003cde:	2206      	movs	r2, #6
 8003ce0:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8003ce2:	4b52      	ldr	r3, [pc, #328]	; (8003e2c <vPortSuppressTicksAndSleep+0x180>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 8003cee:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	4a4d      	ldr	r2, [pc, #308]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	fb02 f303 	mul.w	r3, r2, r3
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4413      	add	r3, r2
 8003d04:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 8003d06:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <vPortSuppressTicksAndSleep+0x188>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 8003d12:	4b48      	ldr	r3, [pc, #288]	; (8003e34 <vPortSuppressTicksAndSleep+0x188>)
 8003d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d18:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 8003d1a:	4b45      	ldr	r3, [pc, #276]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 8003d24:	4b44      	ldr	r3, [pc, #272]	; (8003e38 <vPortSuppressTicksAndSleep+0x18c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d904      	bls.n	8003d38 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 8003d2e:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <vPortSuppressTicksAndSleep+0x18c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8003d38:	4a40      	ldr	r2, [pc, #256]	; (8003e3c <vPortSuppressTicksAndSleep+0x190>)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d3e:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <vPortSuppressTicksAndSleep+0x180>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8003d44:	4b38      	ldr	r3, [pc, #224]	; (8003e28 <vPortSuppressTicksAndSleep+0x17c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a37      	ldr	r2, [pc, #220]	; (8003e28 <vPortSuppressTicksAndSleep+0x17c>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 8003d5a:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 8003d5e:	bf30      	wfi
                __asm volatile ( "isb" );
 8003d60:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 8003d64:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 8003d66:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8003d6a:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 8003d6e:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 8003d70:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8003d74:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8003d78:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <vPortSuppressTicksAndSleep+0x17c>)
 8003d7a:	2206      	movs	r2, #6
 8003d7c:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <vPortSuppressTicksAndSleep+0x17c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01d      	beq.n	8003dc6 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8003d8a:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <vPortSuppressTicksAndSleep+0x180>)
 8003d90:	6819      	ldr	r1, [r3, #0]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	1acb      	subs	r3, r1, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8003d9c:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <vPortSuppressTicksAndSleep+0x18c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d904      	bls.n	8003db0 <vPortSuppressTicksAndSleep+0x104>
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d903      	bls.n	8003db8 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8003db0:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8003db8:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <vPortSuppressTicksAndSleep+0x190>)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e01a      	b.n	8003dfc <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <vPortSuppressTicksAndSleep+0x180>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	fb02 f203 	mul.w	r2, r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8003ddc:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	3301      	adds	r3, #1
 8003dec:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	fb02 f203 	mul.w	r2, r2, r3
 8003df4:	4911      	ldr	r1, [pc, #68]	; (8003e3c <vPortSuppressTicksAndSleep+0x190>)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <vPortSuppressTicksAndSleep+0x180>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <vPortSuppressTicksAndSleep+0x17c>)
 8003e04:	2207      	movs	r2, #7
 8003e06:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <vPortSuppressTicksAndSleep+0x184>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a0b      	ldr	r2, [pc, #44]	; (8003e3c <vPortSuppressTicksAndSleep+0x190>)
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 8003e12:	69b8      	ldr	r0, [r7, #24]
 8003e14:	f7fe fcbc 	bl	8002790 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 8003e18:	b662      	cpsie	i
    }
 8003e1a:	bf00      	nop
 8003e1c:	3720      	adds	r7, #32
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	200001dc 	.word	0x200001dc
 8003e28:	e000e010 	.word	0xe000e010
 8003e2c:	e000e018 	.word	0xe000e018
 8003e30:	200001d8 	.word	0x200001d8
 8003e34:	e000ed04 	.word	0xe000ed04
 8003e38:	200001e0 	.word	0x200001e0
 8003e3c:	e000e014 	.word	0xe000e014

08003e40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8003e44:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <vPortSetupTimerInterrupt+0x58>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a14      	ldr	r2, [pc, #80]	; (8003e9c <vPortSetupTimerInterrupt+0x5c>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	099b      	lsrs	r3, r3, #6
 8003e50:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <vPortSetupTimerInterrupt+0x60>)
 8003e52:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8003e54:	4b12      	ldr	r3, [pc, #72]	; (8003ea0 <vPortSetupTimerInterrupt+0x60>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <vPortSetupTimerInterrupt+0x64>)
 8003e62:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <vPortSetupTimerInterrupt+0x68>)
 8003e66:	225e      	movs	r2, #94	; 0x5e
 8003e68:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <vPortSetupTimerInterrupt+0x6c>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <vPortSetupTimerInterrupt+0x70>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <vPortSetupTimerInterrupt+0x58>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a08      	ldr	r2, [pc, #32]	; (8003e9c <vPortSetupTimerInterrupt+0x5c>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	099b      	lsrs	r3, r3, #6
 8003e82:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <vPortSetupTimerInterrupt+0x74>)
 8003e84:	3b01      	subs	r3, #1
 8003e86:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <vPortSetupTimerInterrupt+0x6c>)
 8003e8a:	2207      	movs	r2, #7
 8003e8c:	601a      	str	r2, [r3, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	10624dd3 	.word	0x10624dd3
 8003ea0:	200001d8 	.word	0x200001d8
 8003ea4:	200001dc 	.word	0x200001dc
 8003ea8:	200001e0 	.word	0x200001e0
 8003eac:	e000e010 	.word	0xe000e010
 8003eb0:	e000e018 	.word	0xe000e018
 8003eb4:	e000e014 	.word	0xe000e014

08003eb8 <__errno>:
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <__errno+0x8>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000014 	.word	0x20000014

08003ec4 <__libc_init_array>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	2600      	movs	r6, #0
 8003ec8:	4d0c      	ldr	r5, [pc, #48]	; (8003efc <__libc_init_array+0x38>)
 8003eca:	4c0d      	ldr	r4, [pc, #52]	; (8003f00 <__libc_init_array+0x3c>)
 8003ecc:	1b64      	subs	r4, r4, r5
 8003ece:	10a4      	asrs	r4, r4, #2
 8003ed0:	42a6      	cmp	r6, r4
 8003ed2:	d109      	bne.n	8003ee8 <__libc_init_array+0x24>
 8003ed4:	f000 f904 	bl	80040e0 <_init>
 8003ed8:	2600      	movs	r6, #0
 8003eda:	4d0a      	ldr	r5, [pc, #40]	; (8003f04 <__libc_init_array+0x40>)
 8003edc:	4c0a      	ldr	r4, [pc, #40]	; (8003f08 <__libc_init_array+0x44>)
 8003ede:	1b64      	subs	r4, r4, r5
 8003ee0:	10a4      	asrs	r4, r4, #2
 8003ee2:	42a6      	cmp	r6, r4
 8003ee4:	d105      	bne.n	8003ef2 <__libc_init_array+0x2e>
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eec:	4798      	blx	r3
 8003eee:	3601      	adds	r6, #1
 8003ef0:	e7ee      	b.n	8003ed0 <__libc_init_array+0xc>
 8003ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef6:	4798      	blx	r3
 8003ef8:	3601      	adds	r6, #1
 8003efa:	e7f2      	b.n	8003ee2 <__libc_init_array+0x1e>
 8003efc:	08004140 	.word	0x08004140
 8003f00:	08004140 	.word	0x08004140
 8003f04:	08004140 	.word	0x08004140
 8003f08:	08004144 	.word	0x08004144

08003f0c <malloc>:
 8003f0c:	4b02      	ldr	r3, [pc, #8]	; (8003f18 <malloc+0xc>)
 8003f0e:	4601      	mov	r1, r0
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	f000 b86d 	b.w	8003ff0 <_malloc_r>
 8003f16:	bf00      	nop
 8003f18:	20000014 	.word	0x20000014

08003f1c <free>:
 8003f1c:	4b02      	ldr	r3, [pc, #8]	; (8003f28 <free+0xc>)
 8003f1e:	4601      	mov	r1, r0
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	f000 b819 	b.w	8003f58 <_free_r>
 8003f26:	bf00      	nop
 8003f28:	20000014 	.word	0x20000014

08003f2c <memcpy>:
 8003f2c:	440a      	add	r2, r1
 8003f2e:	4291      	cmp	r1, r2
 8003f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f34:	d100      	bne.n	8003f38 <memcpy+0xc>
 8003f36:	4770      	bx	lr
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f3e:	4291      	cmp	r1, r2
 8003f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f44:	d1f9      	bne.n	8003f3a <memcpy+0xe>
 8003f46:	bd10      	pop	{r4, pc}

08003f48 <memset>:
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4402      	add	r2, r0
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d100      	bne.n	8003f52 <memset+0xa>
 8003f50:	4770      	bx	lr
 8003f52:	f803 1b01 	strb.w	r1, [r3], #1
 8003f56:	e7f9      	b.n	8003f4c <memset+0x4>

08003f58 <_free_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	2900      	cmp	r1, #0
 8003f5e:	d043      	beq.n	8003fe8 <_free_r+0x90>
 8003f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f64:	1f0c      	subs	r4, r1, #4
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bfb8      	it	lt
 8003f6a:	18e4      	addlt	r4, r4, r3
 8003f6c:	f000 f8aa 	bl	80040c4 <__malloc_lock>
 8003f70:	4a1e      	ldr	r2, [pc, #120]	; (8003fec <_free_r+0x94>)
 8003f72:	6813      	ldr	r3, [r2, #0]
 8003f74:	4610      	mov	r0, r2
 8003f76:	b933      	cbnz	r3, 8003f86 <_free_r+0x2e>
 8003f78:	6063      	str	r3, [r4, #4]
 8003f7a:	6014      	str	r4, [r2, #0]
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f82:	f000 b8a5 	b.w	80040d0 <__malloc_unlock>
 8003f86:	42a3      	cmp	r3, r4
 8003f88:	d90a      	bls.n	8003fa0 <_free_r+0x48>
 8003f8a:	6821      	ldr	r1, [r4, #0]
 8003f8c:	1862      	adds	r2, r4, r1
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	bf01      	itttt	eq
 8003f92:	681a      	ldreq	r2, [r3, #0]
 8003f94:	685b      	ldreq	r3, [r3, #4]
 8003f96:	1852      	addeq	r2, r2, r1
 8003f98:	6022      	streq	r2, [r4, #0]
 8003f9a:	6063      	str	r3, [r4, #4]
 8003f9c:	6004      	str	r4, [r0, #0]
 8003f9e:	e7ed      	b.n	8003f7c <_free_r+0x24>
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	b10b      	cbz	r3, 8003faa <_free_r+0x52>
 8003fa6:	42a3      	cmp	r3, r4
 8003fa8:	d9fa      	bls.n	8003fa0 <_free_r+0x48>
 8003faa:	6811      	ldr	r1, [r2, #0]
 8003fac:	1850      	adds	r0, r2, r1
 8003fae:	42a0      	cmp	r0, r4
 8003fb0:	d10b      	bne.n	8003fca <_free_r+0x72>
 8003fb2:	6820      	ldr	r0, [r4, #0]
 8003fb4:	4401      	add	r1, r0
 8003fb6:	1850      	adds	r0, r2, r1
 8003fb8:	4283      	cmp	r3, r0
 8003fba:	6011      	str	r1, [r2, #0]
 8003fbc:	d1de      	bne.n	8003f7c <_free_r+0x24>
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	4401      	add	r1, r0
 8003fc4:	6011      	str	r1, [r2, #0]
 8003fc6:	6053      	str	r3, [r2, #4]
 8003fc8:	e7d8      	b.n	8003f7c <_free_r+0x24>
 8003fca:	d902      	bls.n	8003fd2 <_free_r+0x7a>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	e7d4      	b.n	8003f7c <_free_r+0x24>
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	1821      	adds	r1, r4, r0
 8003fd6:	428b      	cmp	r3, r1
 8003fd8:	bf01      	itttt	eq
 8003fda:	6819      	ldreq	r1, [r3, #0]
 8003fdc:	685b      	ldreq	r3, [r3, #4]
 8003fde:	1809      	addeq	r1, r1, r0
 8003fe0:	6021      	streq	r1, [r4, #0]
 8003fe2:	6063      	str	r3, [r4, #4]
 8003fe4:	6054      	str	r4, [r2, #4]
 8003fe6:	e7c9      	b.n	8003f7c <_free_r+0x24>
 8003fe8:	bd38      	pop	{r3, r4, r5, pc}
 8003fea:	bf00      	nop
 8003fec:	200001ec 	.word	0x200001ec

08003ff0 <_malloc_r>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	1ccd      	adds	r5, r1, #3
 8003ff4:	f025 0503 	bic.w	r5, r5, #3
 8003ff8:	3508      	adds	r5, #8
 8003ffa:	2d0c      	cmp	r5, #12
 8003ffc:	bf38      	it	cc
 8003ffe:	250c      	movcc	r5, #12
 8004000:	2d00      	cmp	r5, #0
 8004002:	4606      	mov	r6, r0
 8004004:	db01      	blt.n	800400a <_malloc_r+0x1a>
 8004006:	42a9      	cmp	r1, r5
 8004008:	d903      	bls.n	8004012 <_malloc_r+0x22>
 800400a:	230c      	movs	r3, #12
 800400c:	6033      	str	r3, [r6, #0]
 800400e:	2000      	movs	r0, #0
 8004010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004012:	f000 f857 	bl	80040c4 <__malloc_lock>
 8004016:	4921      	ldr	r1, [pc, #132]	; (800409c <_malloc_r+0xac>)
 8004018:	680a      	ldr	r2, [r1, #0]
 800401a:	4614      	mov	r4, r2
 800401c:	b99c      	cbnz	r4, 8004046 <_malloc_r+0x56>
 800401e:	4f20      	ldr	r7, [pc, #128]	; (80040a0 <_malloc_r+0xb0>)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	b923      	cbnz	r3, 800402e <_malloc_r+0x3e>
 8004024:	4621      	mov	r1, r4
 8004026:	4630      	mov	r0, r6
 8004028:	f000 f83c 	bl	80040a4 <_sbrk_r>
 800402c:	6038      	str	r0, [r7, #0]
 800402e:	4629      	mov	r1, r5
 8004030:	4630      	mov	r0, r6
 8004032:	f000 f837 	bl	80040a4 <_sbrk_r>
 8004036:	1c43      	adds	r3, r0, #1
 8004038:	d123      	bne.n	8004082 <_malloc_r+0x92>
 800403a:	230c      	movs	r3, #12
 800403c:	4630      	mov	r0, r6
 800403e:	6033      	str	r3, [r6, #0]
 8004040:	f000 f846 	bl	80040d0 <__malloc_unlock>
 8004044:	e7e3      	b.n	800400e <_malloc_r+0x1e>
 8004046:	6823      	ldr	r3, [r4, #0]
 8004048:	1b5b      	subs	r3, r3, r5
 800404a:	d417      	bmi.n	800407c <_malloc_r+0x8c>
 800404c:	2b0b      	cmp	r3, #11
 800404e:	d903      	bls.n	8004058 <_malloc_r+0x68>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	441c      	add	r4, r3
 8004054:	6025      	str	r5, [r4, #0]
 8004056:	e004      	b.n	8004062 <_malloc_r+0x72>
 8004058:	6863      	ldr	r3, [r4, #4]
 800405a:	42a2      	cmp	r2, r4
 800405c:	bf0c      	ite	eq
 800405e:	600b      	streq	r3, [r1, #0]
 8004060:	6053      	strne	r3, [r2, #4]
 8004062:	4630      	mov	r0, r6
 8004064:	f000 f834 	bl	80040d0 <__malloc_unlock>
 8004068:	f104 000b 	add.w	r0, r4, #11
 800406c:	1d23      	adds	r3, r4, #4
 800406e:	f020 0007 	bic.w	r0, r0, #7
 8004072:	1ac2      	subs	r2, r0, r3
 8004074:	d0cc      	beq.n	8004010 <_malloc_r+0x20>
 8004076:	1a1b      	subs	r3, r3, r0
 8004078:	50a3      	str	r3, [r4, r2]
 800407a:	e7c9      	b.n	8004010 <_malloc_r+0x20>
 800407c:	4622      	mov	r2, r4
 800407e:	6864      	ldr	r4, [r4, #4]
 8004080:	e7cc      	b.n	800401c <_malloc_r+0x2c>
 8004082:	1cc4      	adds	r4, r0, #3
 8004084:	f024 0403 	bic.w	r4, r4, #3
 8004088:	42a0      	cmp	r0, r4
 800408a:	d0e3      	beq.n	8004054 <_malloc_r+0x64>
 800408c:	1a21      	subs	r1, r4, r0
 800408e:	4630      	mov	r0, r6
 8004090:	f000 f808 	bl	80040a4 <_sbrk_r>
 8004094:	3001      	adds	r0, #1
 8004096:	d1dd      	bne.n	8004054 <_malloc_r+0x64>
 8004098:	e7cf      	b.n	800403a <_malloc_r+0x4a>
 800409a:	bf00      	nop
 800409c:	200001ec 	.word	0x200001ec
 80040a0:	200001f0 	.word	0x200001f0

080040a4 <_sbrk_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	2300      	movs	r3, #0
 80040a8:	4d05      	ldr	r5, [pc, #20]	; (80040c0 <_sbrk_r+0x1c>)
 80040aa:	4604      	mov	r4, r0
 80040ac:	4608      	mov	r0, r1
 80040ae:	602b      	str	r3, [r5, #0]
 80040b0:	f7fc fa38 	bl	8000524 <_sbrk>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d102      	bne.n	80040be <_sbrk_r+0x1a>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	b103      	cbz	r3, 80040be <_sbrk_r+0x1a>
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	20000288 	.word	0x20000288

080040c4 <__malloc_lock>:
 80040c4:	4801      	ldr	r0, [pc, #4]	; (80040cc <__malloc_lock+0x8>)
 80040c6:	f000 b809 	b.w	80040dc <__retarget_lock_acquire_recursive>
 80040ca:	bf00      	nop
 80040cc:	20000290 	.word	0x20000290

080040d0 <__malloc_unlock>:
 80040d0:	4801      	ldr	r0, [pc, #4]	; (80040d8 <__malloc_unlock+0x8>)
 80040d2:	f000 b804 	b.w	80040de <__retarget_lock_release_recursive>
 80040d6:	bf00      	nop
 80040d8:	20000290 	.word	0x20000290

080040dc <__retarget_lock_acquire_recursive>:
 80040dc:	4770      	bx	lr

080040de <__retarget_lock_release_recursive>:
 80040de:	4770      	bx	lr

080040e0 <_init>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	bf00      	nop
 80040e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e6:	bc08      	pop	{r3}
 80040e8:	469e      	mov	lr, r3
 80040ea:	4770      	bx	lr

080040ec <_fini>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr
