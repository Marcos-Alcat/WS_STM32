
blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c84  08003c84  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003c84  08003c84  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c84  08003c84  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000078  08003d04  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003d04  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011101  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002796  00000000  00000000  000311a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00033938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  000347c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001699a  00000000  00000000  00035520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f420  00000000  00000000  0004beba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090153  00000000  00000000  0005b2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb42d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000eb480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c24 	.word	0x08003c24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003c24 	.word	0x08003c24

08000150 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8000158:	f001 fa06 	bl	8001568 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 800015c:	6878      	ldr	r0, [r7, #4]
 800015e:	f003 fc77 	bl	8003a50 <malloc>
 8000162:	4603      	mov	r3, r0
 8000164:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000166:	f001 fa43 	bl	80015f0 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800016a:	68fb      	ldr	r3, [r7, #12]
}
 800016c:	4618      	mov	r0, r3
 800016e:	3710      	adds	r7, #16
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}

08000174 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b082      	sub	sp, #8
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d006      	beq.n	8000190 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 8000182:	f001 f9f1 	bl	8001568 <vTaskSuspendAll>
        {
            free( pv );
 8000186:	6878      	ldr	r0, [r7, #4]
 8000188:	f003 fc6a 	bl	8003a60 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 800018c:	f001 fa30 	bl	80015f0 <xTaskResumeAll>
    }
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f103 0208 	add.w	r2, r3, #8
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f04f 32ff 	mov.w	r2, #4294967295
 80001b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f103 0208 	add.w	r2, r3, #8
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f103 0208 	add.w	r2, r3, #8
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001d6:	b480      	push	{r7}
 80001d8:	b083      	sub	sp, #12
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2200      	movs	r2, #0
 80001e2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr

080001ee <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001ee:	b480      	push	{r7}
 80001f0:	b085      	sub	sp, #20
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
 80001f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000204:	d103      	bne.n	800020e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	e00c      	b.n	8000228 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	3308      	adds	r3, #8
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	e002      	b.n	800021c <vListInsert+0x2e>
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	68ba      	ldr	r2, [r7, #8]
 8000224:	429a      	cmp	r2, r3
 8000226:	d2f6      	bcs.n	8000216 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	685a      	ldr	r2, [r3, #4]
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	683a      	ldr	r2, [r7, #0]
 8000242:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	601a      	str	r2, [r3, #0]
}
 8000254:	bf00      	nop
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800025e:	b480      	push	{r7}
 8000260:	b085      	sub	sp, #20
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	691b      	ldr	r3, [r3, #16]
 800026a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	6892      	ldr	r2, [r2, #8]
 8000274:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	6852      	ldr	r2, [r2, #4]
 800027e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	429a      	cmp	r2, r3
 8000288:	d103      	bne.n	8000292 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	689a      	ldr	r2, [r3, #8]
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	1e5a      	subs	r2, r3, #1
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	681b      	ldr	r3, [r3, #0]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr

080002b0 <LedOn>:


/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void LedOn(void *pvParameters){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	vTaskDelay(1000);
 80002b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002bc:	f001 f8ce 	bl	800145c <vTaskDelay>
	while(1){
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c6:	4804      	ldr	r0, [pc, #16]	; (80002d8 <LedOn+0x28>)
 80002c8:	f002 fd0c 	bl	8002ce4 <HAL_GPIO_WritePin>
		vTaskDelay(2000);
 80002cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002d0:	f001 f8c4 	bl	800145c <vTaskDelay>
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d4:	e7f4      	b.n	80002c0 <LedOn+0x10>
 80002d6:	bf00      	nop
 80002d8:	40011000 	.word	0x40011000

080002dc <LedOff>:
	}

}

static void LedOff(void *pvParameters){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ea:	4804      	ldr	r0, [pc, #16]	; (80002fc <LedOff+0x20>)
 80002ec:	f002 fcfa 	bl	8002ce4 <HAL_GPIO_WritePin>
		vTaskDelay(2000);
 80002f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002f4:	f001 f8b2 	bl	800145c <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002f8:	e7f4      	b.n	80002e4 <LedOff+0x8>
 80002fa:	bf00      	nop
 80002fc:	40011000 	.word	0x40011000

08000300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000306:	f002 fa57 	bl	80027b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030a:	f000 f823 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030e:	f000 f867 	bl	80003e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(LedOn, "", 100, NULL, 1, NULL);
 8000312:	2300      	movs	r3, #0
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2300      	movs	r3, #0
 800031c:	2264      	movs	r2, #100	; 0x64
 800031e:	490a      	ldr	r1, [pc, #40]	; (8000348 <main+0x48>)
 8000320:	480a      	ldr	r0, [pc, #40]	; (800034c <main+0x4c>)
 8000322:	f000 ff2f 	bl	8001184 <xTaskCreate>
  xTaskCreate(LedOff, "", 100, NULL, 1, NULL);
 8000326:	2300      	movs	r3, #0
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	2300      	movs	r3, #0
 8000330:	2264      	movs	r2, #100	; 0x64
 8000332:	4905      	ldr	r1, [pc, #20]	; (8000348 <main+0x48>)
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <main+0x50>)
 8000336:	f000 ff25 	bl	8001184 <xTaskCreate>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 800033a:	f001 f8c3 	bl	80014c4 <vTaskStartScheduler>
 800033e:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000340:	4618      	mov	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	08003c3c 	.word	0x08003c3c
 800034c:	080002b1 	.word	0x080002b1
 8000350:	080002dd 	.word	0x080002dd

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b090      	sub	sp, #64	; 0x40
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	2228      	movs	r2, #40	; 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f003 fb92 	bl	8003a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000376:	2301      	movs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2301      	movs	r3, #1
 8000386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000388:	2302      	movs	r3, #2
 800038a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000390:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000392:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000396:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000398:	f107 0318 	add.w	r3, r7, #24
 800039c:	4618      	mov	r0, r3
 800039e:	f002 fcb9 	bl	8002d14 <HAL_RCC_OscConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003a8:	f000 f878 	bl	800049c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ac:	230f      	movs	r3, #15
 80003ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b0:	2302      	movs	r3, #2
 80003b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2102      	movs	r1, #2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 ff24 	bl	8003214 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003d2:	f000 f863 	bl	800049c <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3740      	adds	r7, #64	; 0x40
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <MX_GPIO_Init+0x90>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a1d      	ldr	r2, [pc, #116]	; (8000470 <MX_GPIO_Init+0x90>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_GPIO_Init+0x90>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0310 	and.w	r3, r3, #16
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_GPIO_Init+0x90>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a17      	ldr	r2, [pc, #92]	; (8000470 <MX_GPIO_Init+0x90>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <MX_GPIO_Init+0x90>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0320 	and.w	r3, r3, #32
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_GPIO_Init+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a11      	ldr	r2, [pc, #68]	; (8000470 <MX_GPIO_Init+0x90>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_GPIO_Init+0x90>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000442:	480c      	ldr	r0, [pc, #48]	; (8000474 <MX_GPIO_Init+0x94>)
 8000444:	f002 fc4e 	bl	8002ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	2302      	movs	r3, #2
 8000458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_GPIO_Init+0x94>)
 8000462:	f002 fabb 	bl	80029dc <HAL_GPIO_Init>

}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	40011000 	.word	0x40011000

08000478 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d101      	bne.n	800048e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800048a:	f002 f9ab 	bl	80027e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40012c00 	.word	0x40012c00

0800049c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i
}
 80004a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <Error_Handler+0x8>
	...

080004a8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	60b9      	str	r1, [r7, #8]
 80004b2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3b04      	subs	r3, #4
 80004b8:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3b04      	subs	r3, #4
 80004c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	f023 0201 	bic.w	r2, r3, #1
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3b04      	subs	r3, #4
 80004d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <pxPortInitialiseStack+0x54>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	3b14      	subs	r3, #20
 80004e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3b20      	subs	r3, #32
 80004ee:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80004f0:	68fb      	ldr	r3, [r7, #12]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	08000501 	.word	0x08000501

08000500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800050a:	4b12      	ldr	r3, [pc, #72]	; (8000554 <prvTaskExitError+0x54>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000512:	d00a      	beq.n	800052a <prvTaskExitError+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000518:	f383 8811 	msr	BASEPRI, r3
 800051c:	f3bf 8f6f 	isb	sy
 8000520:	f3bf 8f4f 	dsb	sy
 8000524:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000526:	bf00      	nop
 8000528:	e7fe      	b.n	8000528 <prvTaskExitError+0x28>
        __asm volatile
 800052a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800052e:	f383 8811 	msr	BASEPRI, r3
 8000532:	f3bf 8f6f 	isb	sy
 8000536:	f3bf 8f4f 	dsb	sy
 800053a:	60bb      	str	r3, [r7, #8]
    }
 800053c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800053e:	bf00      	nop
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0fc      	beq.n	8000540 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
	...

08000560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <pxCurrentTCBConst2>)
 8000562:	6819      	ldr	r1, [r3, #0]
 8000564:	6808      	ldr	r0, [r1, #0]
 8000566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800056a:	f380 8809 	msr	PSP, r0
 800056e:	f3bf 8f6f 	isb	sy
 8000572:	f04f 0000 	mov.w	r0, #0
 8000576:	f380 8811 	msr	BASEPRI, r0
 800057a:	f04e 0e0d 	orr.w	lr, lr, #13
 800057e:	4770      	bx	lr

08000580 <pxCurrentTCBConst2>:
 8000580:	200000ac 	.word	0x200000ac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop

08000588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <prvPortStartFirstTask+0x1c>)
 800058a:	6800      	ldr	r0, [r0, #0]
 800058c:	6800      	ldr	r0, [r0, #0]
 800058e:	f380 8808 	msr	MSP, r0
 8000592:	b662      	cpsie	i
 8000594:	b661      	cpsie	f
 8000596:	f3bf 8f4f 	dsb	sy
 800059a:	f3bf 8f6f 	isb	sy
 800059e:	df00      	svc	0
 80005a0:	bf00      	nop
 80005a2:	0000      	.short	0x0000
 80005a4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop

080005ac <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80005b2:	4b32      	ldr	r3, [pc, #200]	; (800067c <xPortStartScheduler+0xd0>)
 80005b4:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	22ff      	movs	r2, #255	; 0xff
 80005c2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <xPortStartScheduler+0xd4>)
 80005d8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80005da:	4b2a      	ldr	r3, [pc, #168]	; (8000684 <xPortStartScheduler+0xd8>)
 80005dc:	2207      	movs	r2, #7
 80005de:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80005e0:	e009      	b.n	80005f6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <xPortStartScheduler+0xd8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <xPortStartScheduler+0xd8>)
 80005ea:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80005f6:	78fb      	ldrb	r3, [r7, #3]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	2b80      	cmp	r3, #128	; 0x80
 8000600:	d0ef      	beq.n	80005e2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <xPortStartScheduler+0xd8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f1c3 0307 	rsb	r3, r3, #7
 800060a:	2b04      	cmp	r3, #4
 800060c:	d00a      	beq.n	8000624 <xPortStartScheduler+0x78>
        __asm volatile
 800060e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000612:	f383 8811 	msr	BASEPRI, r3
 8000616:	f3bf 8f6f 	isb	sy
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	60bb      	str	r3, [r7, #8]
    }
 8000620:	bf00      	nop
 8000622:	e7fe      	b.n	8000622 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <xPortStartScheduler+0xd8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	4a16      	ldr	r2, [pc, #88]	; (8000684 <xPortStartScheduler+0xd8>)
 800062c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800062e:	4b15      	ldr	r3, [pc, #84]	; (8000684 <xPortStartScheduler+0xd8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000636:	4a13      	ldr	r2, [pc, #76]	; (8000684 <xPortStartScheduler+0xd8>)
 8000638:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	b2da      	uxtb	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <xPortStartScheduler+0xdc>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a10      	ldr	r2, [pc, #64]	; (8000688 <xPortStartScheduler+0xdc>)
 8000648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800064c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <xPortStartScheduler+0xdc>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <xPortStartScheduler+0xdc>)
 8000654:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000658:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800065a:	f000 f981 	bl	8000960 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <xPortStartScheduler+0xe0>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000664:	f7ff ff90 	bl	8000588 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000668:	f001 fa3e 	bl	8001ae8 <vTaskSwitchContext>
    prvTaskExitError();
 800066c:	f7ff ff48 	bl	8000500 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	e000e400 	.word	0xe000e400
 8000680:	200000a0 	.word	0x200000a0
 8000684:	200000a4 	.word	0x200000a4
 8000688:	e000ed20 	.word	0xe000ed20
 800068c:	20000000 	.word	0x20000000

08000690 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
        __asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	607b      	str	r3, [r7, #4]
    }
 80006a8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <vPortEnterCritical+0x58>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <vPortEnterCritical+0x58>)
 80006b2:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <vPortEnterCritical+0x58>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d10f      	bne.n	80006dc <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <vPortEnterCritical+0x5c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00a      	beq.n	80006dc <vPortEnterCritical+0x4c>
        __asm volatile
 80006c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ca:	f383 8811 	msr	BASEPRI, r3
 80006ce:	f3bf 8f6f 	isb	sy
 80006d2:	f3bf 8f4f 	dsb	sy
 80006d6:	603b      	str	r3, [r7, #0]
    }
 80006d8:	bf00      	nop
 80006da:	e7fe      	b.n	80006da <vPortEnterCritical+0x4a>
    }
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000000 	.word	0x20000000
 80006ec:	e000ed04 	.word	0xe000ed04

080006f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <vPortExitCritical+0x4c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d10a      	bne.n	8000714 <vPortExitCritical+0x24>
        __asm volatile
 80006fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000702:	f383 8811 	msr	BASEPRI, r3
 8000706:	f3bf 8f6f 	isb	sy
 800070a:	f3bf 8f4f 	dsb	sy
 800070e:	607b      	str	r3, [r7, #4]
    }
 8000710:	bf00      	nop
 8000712:	e7fe      	b.n	8000712 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <vPortExitCritical+0x4c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3b01      	subs	r3, #1
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <vPortExitCritical+0x4c>)
 800071c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <vPortExitCritical+0x4c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d105      	bne.n	8000732 <vPortExitCritical+0x42>
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000730:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	20000000 	.word	0x20000000

08000740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000740:	f3ef 8009 	mrs	r0, PSP
 8000744:	f3bf 8f6f 	isb	sy
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <pxCurrentTCBConst>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000750:	6010      	str	r0, [r2, #0]
 8000752:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000756:	f04f 0050 	mov.w	r0, #80	; 0x50
 800075a:	f380 8811 	msr	BASEPRI, r0
 800075e:	f001 f9c3 	bl	8001ae8 <vTaskSwitchContext>
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	f380 8811 	msr	BASEPRI, r0
 800076a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800076e:	6819      	ldr	r1, [r3, #0]
 8000770:	6808      	ldr	r0, [r1, #0]
 8000772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000776:	f380 8809 	msr	PSP, r0
 800077a:	f3bf 8f6f 	isb	sy
 800077e:	4770      	bx	lr

08000780 <pxCurrentTCBConst>:
 8000780:	200000ac 	.word	0x200000ac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop

08000788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
        __asm volatile
 800078e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000792:	f383 8811 	msr	BASEPRI, r3
 8000796:	f3bf 8f6f 	isb	sy
 800079a:	f3bf 8f4f 	dsb	sy
 800079e:	607b      	str	r3, [r7, #4]
    }
 80007a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80007a2:	f001 f889 	bl	80018b8 <xTaskIncrementTick>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d003      	beq.n	80007b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <SysTick_Handler+0x40>)
 80007ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	f383 8811 	msr	BASEPRI, r3
    }
 80007be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	e000ed04 	.word	0xe000ed04

080007cc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80007d4:	4b5b      	ldr	r3, [pc, #364]	; (8000944 <vPortSuppressTicksAndSleep+0x178>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d902      	bls.n	80007e4 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80007de:	4b59      	ldr	r3, [pc, #356]	; (8000944 <vPortSuppressTicksAndSleep+0x178>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 80007e4:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 80007e6:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 80007ea:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80007ee:	f001 fbe1 	bl	8001fb4 <eTaskConfirmSleepModeStatus>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d101      	bne.n	80007fc <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 80007f8:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 80007fa:	e09e      	b.n	800093a <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 80007fc:	4b52      	ldr	r3, [pc, #328]	; (8000948 <vPortSuppressTicksAndSleep+0x17c>)
 80007fe:	2206      	movs	r2, #6
 8000800:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8000802:	4b52      	ldr	r3, [pc, #328]	; (800094c <vPortSuppressTicksAndSleep+0x180>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d102      	bne.n	8000814 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 800080e:	4b50      	ldr	r3, [pc, #320]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	4a4d      	ldr	r2, [pc, #308]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 800081a:	6812      	ldr	r2, [r2, #0]
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	4413      	add	r3, r2
 8000824:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 8000826:	4b4b      	ldr	r3, [pc, #300]	; (8000954 <vPortSuppressTicksAndSleep+0x188>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d008      	beq.n	8000844 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 8000832:	4b48      	ldr	r3, [pc, #288]	; (8000954 <vPortSuppressTicksAndSleep+0x188>)
 8000834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000838:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 800083a:	4b45      	ldr	r3, [pc, #276]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 8000844:	4b44      	ldr	r3, [pc, #272]	; (8000958 <vPortSuppressTicksAndSleep+0x18c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	69fa      	ldr	r2, [r7, #28]
 800084a:	429a      	cmp	r2, r3
 800084c:	d904      	bls.n	8000858 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 800084e:	4b42      	ldr	r3, [pc, #264]	; (8000958 <vPortSuppressTicksAndSleep+0x18c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8000858:	4a40      	ldr	r2, [pc, #256]	; (800095c <vPortSuppressTicksAndSleep+0x190>)
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800085e:	4b3b      	ldr	r3, [pc, #236]	; (800094c <vPortSuppressTicksAndSleep+0x180>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8000864:	4b38      	ldr	r3, [pc, #224]	; (8000948 <vPortSuppressTicksAndSleep+0x17c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a37      	ldr	r2, [pc, #220]	; (8000948 <vPortSuppressTicksAndSleep+0x17c>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d004      	beq.n	8000884 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 800087a:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 800087e:	bf30      	wfi
                __asm volatile ( "isb" );
 8000880:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 8000884:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 8000886:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800088a:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 800088e:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 8000890:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8000894:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <vPortSuppressTicksAndSleep+0x17c>)
 800089a:	2206      	movs	r2, #6
 800089c:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <vPortSuppressTicksAndSleep+0x17c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d01d      	beq.n	80008e6 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b27      	ldr	r3, [pc, #156]	; (800094c <vPortSuppressTicksAndSleep+0x180>)
 80008b0:	6819      	ldr	r1, [r3, #0]
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	1acb      	subs	r3, r1, r3
 80008b6:	4413      	add	r3, r2
 80008b8:	3b01      	subs	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <vPortSuppressTicksAndSleep+0x18c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d904      	bls.n	80008d0 <vPortSuppressTicksAndSleep+0x104>
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d903      	bls.n	80008d8 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 80008d0:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 80008d8:	4a20      	ldr	r2, [pc, #128]	; (800095c <vPortSuppressTicksAndSleep+0x190>)
 80008da:	693b      	ldr	r3, [r7, #16]
 80008dc:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
 80008e4:	e01a      	b.n	800091c <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <vPortSuppressTicksAndSleep+0x180>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	fb02 f203 	mul.w	r2, r2, r3
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	3301      	adds	r3, #1
 800090c:	4a10      	ldr	r2, [pc, #64]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	fb02 f203 	mul.w	r2, r2, r3
 8000914:	4911      	ldr	r1, [pc, #68]	; (800095c <vPortSuppressTicksAndSleep+0x190>)
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <vPortSuppressTicksAndSleep+0x180>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <vPortSuppressTicksAndSleep+0x17c>)
 8000924:	2207      	movs	r2, #7
 8000926:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <vPortSuppressTicksAndSleep+0x184>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0b      	ldr	r2, [pc, #44]	; (800095c <vPortSuppressTicksAndSleep+0x190>)
 800092e:	3b01      	subs	r3, #1
 8000930:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 8000932:	69b8      	ldr	r0, [r7, #24]
 8000934:	f000 ff66 	bl	8001804 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 8000938:	b662      	cpsie	i
    }
 800093a:	bf00      	nop
 800093c:	3720      	adds	r7, #32
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000098 	.word	0x20000098
 8000948:	e000e010 	.word	0xe000e010
 800094c:	e000e018 	.word	0xe000e018
 8000950:	20000094 	.word	0x20000094
 8000954:	e000ed04 	.word	0xe000ed04
 8000958:	2000009c 	.word	0x2000009c
 800095c:	e000e014 	.word	0xe000e014

08000960 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <vPortSetupTimerInterrupt+0x58>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <vPortSetupTimerInterrupt+0x5c>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	099b      	lsrs	r3, r3, #6
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <vPortSetupTimerInterrupt+0x60>)
 8000972:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <vPortSetupTimerInterrupt+0x60>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800097c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000980:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <vPortSetupTimerInterrupt+0x64>)
 8000982:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <vPortSetupTimerInterrupt+0x68>)
 8000986:	225e      	movs	r2, #94	; 0x5e
 8000988:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <vPortSetupTimerInterrupt+0x6c>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <vPortSetupTimerInterrupt+0x70>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <vPortSetupTimerInterrupt+0x58>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <vPortSetupTimerInterrupt+0x5c>)
 800099c:	fba2 2303 	umull	r2, r3, r2, r3
 80009a0:	099b      	lsrs	r3, r3, #6
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <vPortSetupTimerInterrupt+0x74>)
 80009a4:	3b01      	subs	r3, #1
 80009a6:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <vPortSetupTimerInterrupt+0x6c>)
 80009aa:	2207      	movs	r2, #7
 80009ac:	601a      	str	r2, [r3, #0]
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000004 	.word	0x20000004
 80009bc:	10624dd3 	.word	0x10624dd3
 80009c0:	20000094 	.word	0x20000094
 80009c4:	20000098 	.word	0x20000098
 80009c8:	2000009c 	.word	0x2000009c
 80009cc:	e000e010 	.word	0xe000e010
 80009d0:	e000e018 	.word	0xe000e018
 80009d4:	e000e014 	.word	0xe000e014

080009d8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80009e2:	2301      	movs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10a      	bne.n	8000a06 <xQueueGenericReset+0x2e>
        __asm volatile
 80009f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f4:	f383 8811 	msr	BASEPRI, r3
 80009f8:	f3bf 8f6f 	isb	sy
 80009fc:	f3bf 8f4f 	dsb	sy
 8000a00:	60fb      	str	r3, [r7, #12]
    }
 8000a02:	bf00      	nop
 8000a04:	e7fe      	b.n	8000a04 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d05d      	beq.n	8000ac8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d059      	beq.n	8000ac8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d000      	beq.n	8000a28 <xQueueGenericReset+0x50>
 8000a26:	2101      	movs	r1, #1
 8000a28:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d14c      	bne.n	8000ac8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8000a2e:	f7ff fe2f 	bl	8000690 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a3a:	6939      	ldr	r1, [r7, #16]
 8000a3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a3e:	fb01 f303 	mul.w	r3, r1, r3
 8000a42:	441a      	add	r2, r3
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	6939      	ldr	r1, [r7, #16]
 8000a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000a64:	fb01 f303 	mul.w	r3, r1, r3
 8000a68:	441a      	add	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d114      	bne.n	8000aae <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d01a      	beq.n	8000ac2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	3310      	adds	r3, #16
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 f8ef 	bl	8001c74 <xTaskRemoveFromEventList>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d012      	beq.n	8000ac2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <xQueueGenericReset+0x11c>)
 8000a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	f3bf 8f4f 	dsb	sy
 8000aa8:	f3bf 8f6f 	isb	sy
 8000aac:	e009      	b.n	8000ac2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	3310      	adds	r3, #16
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fb70 	bl	8000198 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	3324      	adds	r3, #36	; 0x24
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fb6b 	bl	8000198 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000ac2:	f7ff fe15 	bl	80006f0 <vPortExitCritical>
 8000ac6:	e001      	b.n	8000acc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10a      	bne.n	8000ae8 <xQueueGenericReset+0x110>
        __asm volatile
 8000ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ad6:	f383 8811 	msr	BASEPRI, r3
 8000ada:	f3bf 8f6f 	isb	sy
 8000ade:	f3bf 8f4f 	dsb	sy
 8000ae2:	60bb      	str	r3, [r7, #8]
    }
 8000ae4:	bf00      	nop
 8000ae6:	e7fe      	b.n	8000ae6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000ae8:	697b      	ldr	r3, [r7, #20]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000ed04 	.word	0xe000ed04

08000af8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af02      	add	r7, sp, #8
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	4613      	mov	r3, r2
 8000b04:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d02e      	beq.n	8000b6e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000b10:	2100      	movs	r1, #0
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	fba3 2302 	umull	r2, r3, r3, r2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d000      	beq.n	8000b20 <xQueueGenericCreate+0x28>
 8000b1e:	2101      	movs	r1, #1
 8000b20:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d123      	bne.n	8000b6e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	68ba      	ldr	r2, [r7, #8]
 8000b2a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000b2e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000b32:	d81c      	bhi.n	8000b6e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	fb02 f303 	mul.w	r3, r2, r3
 8000b3c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	3350      	adds	r3, #80	; 0x50
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb04 	bl	8000150 <pvPortMalloc>
 8000b48:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d01c      	beq.n	8000b8a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3350      	adds	r3, #80	; 0x50
 8000b58:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000b5a:	79fa      	ldrb	r2, [r7, #7]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	4613      	mov	r3, r2
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f000 f814 	bl	8000b94 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000b6c:	e00d      	b.n	8000b8a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10a      	bne.n	8000b8a <xQueueGenericCreate+0x92>
        __asm volatile
 8000b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b78:	f383 8811 	msr	BASEPRI, r3
 8000b7c:	f3bf 8f6f 	isb	sy
 8000b80:	f3bf 8f4f 	dsb	sy
 8000b84:	613b      	str	r3, [r7, #16]
    }
 8000b86:	bf00      	nop
 8000b88:	e7fe      	b.n	8000b88 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000b8a:	69fb      	ldr	r3, [r7, #28]
    }
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d103      	bne.n	8000bb0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	e002      	b.n	8000bb6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	69b8      	ldr	r0, [r7, #24]
 8000bc6:	f7ff ff07 	bl	80009d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	78fa      	ldrb	r2, [r7, #3]
 8000bce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10a      	bne.n	8000c0c <xQueueReceive+0x30>
        __asm volatile
 8000bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfa:	f383 8811 	msr	BASEPRI, r3
 8000bfe:	f3bf 8f6f 	isb	sy
 8000c02:	f3bf 8f4f 	dsb	sy
 8000c06:	623b      	str	r3, [r7, #32]
    }
 8000c08:	bf00      	nop
 8000c0a:	e7fe      	b.n	8000c0a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <xQueueReceive+0x3e>
 8000c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <xQueueReceive+0x42>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <xQueueReceive+0x44>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10a      	bne.n	8000c3a <xQueueReceive+0x5e>
        __asm volatile
 8000c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c28:	f383 8811 	msr	BASEPRI, r3
 8000c2c:	f3bf 8f6f 	isb	sy
 8000c30:	f3bf 8f4f 	dsb	sy
 8000c34:	61fb      	str	r3, [r7, #28]
    }
 8000c36:	bf00      	nop
 8000c38:	e7fe      	b.n	8000c38 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c3a:	f001 fa89 	bl	8002150 <xTaskGetSchedulerState>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <xQueueReceive+0x6e>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <xQueueReceive+0x72>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <xQueueReceive+0x74>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10a      	bne.n	8000c6a <xQueueReceive+0x8e>
        __asm volatile
 8000c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c58:	f383 8811 	msr	BASEPRI, r3
 8000c5c:	f3bf 8f6f 	isb	sy
 8000c60:	f3bf 8f4f 	dsb	sy
 8000c64:	61bb      	str	r3, [r7, #24]
    }
 8000c66:	bf00      	nop
 8000c68:	e7fe      	b.n	8000c68 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c6a:	f7ff fd11 	bl	8000690 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d01f      	beq.n	8000cba <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c7a:	68b9      	ldr	r1, [r7, #8]
 8000c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c7e:	f000 f88d 	bl	8000d9c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c84:	1e5a      	subs	r2, r3, #1
 8000c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c88:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00f      	beq.n	8000cb2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c94:	3310      	adds	r3, #16
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 ffec 	bl	8001c74 <xTaskRemoveFromEventList>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d007      	beq.n	8000cb2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <xQueueReceive+0x1bc>)
 8000ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	f3bf 8f4f 	dsb	sy
 8000cae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000cb2:	f7ff fd1d 	bl	80006f0 <vPortExitCritical>
                return pdPASS;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e069      	b.n	8000d8e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d103      	bne.n	8000cc8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000cc0:	f7ff fd16 	bl	80006f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e062      	b.n	8000d8e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d106      	bne.n	8000cdc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 f8a6 	bl	8001e24 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000cdc:	f7ff fd08 	bl	80006f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000ce0:	f000 fc42 	bl	8001568 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000ce4:	f7ff fcd4 	bl	8000690 <vPortEnterCritical>
 8000ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d103      	bne.n	8000cfe <xQueueReceive+0x122>
 8000cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0a:	d103      	bne.n	8000d14 <xQueueReceive+0x138>
 8000d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d14:	f7ff fcec 	bl	80006f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d18:	1d3a      	adds	r2, r7, #4
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f001 f895 	bl	8001e50 <xTaskCheckForTimeOut>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d123      	bne.n	8000d74 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d2e:	f000 f8ad 	bl	8000e8c <prvIsQueueEmpty>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d017      	beq.n	8000d68 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3a:	3324      	adds	r3, #36	; 0x24
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 ff2d 	bl	8001ba0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d48:	f000 f84e 	bl	8000de8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d4c:	f000 fc50 	bl	80015f0 <xTaskResumeAll>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d189      	bne.n	8000c6a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <xQueueReceive+0x1bc>)
 8000d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	e780      	b.n	8000c6a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d6a:	f000 f83d 	bl	8000de8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d6e:	f000 fc3f 	bl	80015f0 <xTaskResumeAll>
 8000d72:	e77a      	b.n	8000c6a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d76:	f000 f837 	bl	8000de8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d7a:	f000 fc39 	bl	80015f0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d80:	f000 f884 	bl	8000e8c <prvIsQueueEmpty>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f43f af6f 	beq.w	8000c6a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8000d8c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3730      	adds	r7, #48	; 0x30
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000ed04 	.word	0xe000ed04

08000d9c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d018      	beq.n	8000de0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	441a      	add	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d303      	bcc.n	8000dd0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68d9      	ldr	r1, [r3, #12]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	461a      	mov	r2, r3
 8000dda:	6838      	ldr	r0, [r7, #0]
 8000ddc:	f002 fe48 	bl	8003a70 <memcpy>
    }
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000df0:	f7ff fc4e 	bl	8000690 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dfa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000dfc:	e011      	b.n	8000e22 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d012      	beq.n	8000e2c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3324      	adds	r3, #36	; 0x24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 ff32 	bl	8001c74 <xTaskRemoveFromEventList>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000e16:	f001 f881 	bl	8001f1c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dce9      	bgt.n	8000dfe <prvUnlockQueue+0x16>
 8000e2a:	e000      	b.n	8000e2e <prvUnlockQueue+0x46>
                    break;
 8000e2c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	22ff      	movs	r2, #255	; 0xff
 8000e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000e36:	f7ff fc5b 	bl	80006f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000e3a:	f7ff fc29 	bl	8000690 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e44:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e46:	e011      	b.n	8000e6c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d012      	beq.n	8000e76 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3310      	adds	r3, #16
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 ff0d 	bl	8001c74 <xTaskRemoveFromEventList>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000e60:	f001 f85c 	bl	8001f1c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000e64:	7bbb      	ldrb	r3, [r7, #14]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000e6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	dce9      	bgt.n	8000e48 <prvUnlockQueue+0x60>
 8000e74:	e000      	b.n	8000e78 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000e76:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	22ff      	movs	r2, #255	; 0xff
 8000e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000e80:	f7ff fc36 	bl	80006f0 <vPortExitCritical>
}
 8000e84:	bf00      	nop
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e94:	f7ff fbfc 	bl	8000690 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d102      	bne.n	8000ea6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	e001      	b.n	8000eaa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000eaa:	f7ff fc21 	bl	80006f0 <vPortExitCritical>

    return xReturn;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10a      	bne.n	8000ee2 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8000ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ed0:	f383 8811 	msr	BASEPRI, r3
 8000ed4:	f3bf 8f6f 	isb	sy
 8000ed8:	f3bf 8f4f 	dsb	sy
 8000edc:	60fb      	str	r3, [r7, #12]
    }
 8000ede:	bf00      	nop
 8000ee0:	e7fe      	b.n	8000ee0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d024      	beq.n	8000f32 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	e01e      	b.n	8000f2c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <vQueueAddToRegistry+0x98>)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d105      	bne.n	8000f0a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <vQueueAddToRegistry+0x98>)
 8000f04:	4413      	add	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
                    break;
 8000f08:	e013      	b.n	8000f32 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10a      	bne.n	8000f26 <vQueueAddToRegistry+0x6e>
 8000f10:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <vQueueAddToRegistry+0x98>)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d104      	bne.n	8000f26 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <vQueueAddToRegistry+0x98>)
 8000f22:	4413      	add	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b07      	cmp	r3, #7
 8000f30:	d9dd      	bls.n	8000eee <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d005      	beq.n	8000f44 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8000f44:	bf00      	nop
 8000f46:	371c      	adds	r7, #28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	200001f4 	.word	0x200001f4

08000f54 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000f64:	f7ff fb94 	bl	8000690 <vPortEnterCritical>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d103      	bne.n	8000f7e <vQueueWaitForMessageRestricted+0x2a>
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f84:	b25b      	sxtb	r3, r3
 8000f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8a:	d103      	bne.n	8000f94 <vQueueWaitForMessageRestricted+0x40>
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000f94:	f7ff fbac 	bl	80006f0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d106      	bne.n	8000fae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3324      	adds	r3, #36	; 0x24
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fe1d 	bl	8001be8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000fae:	6978      	ldr	r0, [r7, #20]
 8000fb0:	f7ff ff1a 	bl	8000de8 <prvUnlockQueue>
    }
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_MspInit+0x5c>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_MspInit+0x5c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_MspInit+0x5c>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x5c>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_MspInit+0x5c>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	61d3      	str	r3, [r2, #28]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_MspInit+0x5c>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_MspInit+0x60>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_MspInit+0x60>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000

08001020 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	2019      	movs	r0, #25
 8001036:	f001 fca6 	bl	8002986 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800103a:	2019      	movs	r0, #25
 800103c:	f001 fcbf 	bl	80029be <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_InitTick+0x9c>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a1d      	ldr	r2, [pc, #116]	; (80010bc <HAL_InitTick+0x9c>)
 8001046:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_InitTick+0x9c>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001058:	f107 0210 	add.w	r2, r7, #16
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4611      	mov	r1, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fa32 	bl	80034cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001068:	f002 fa1c 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 800106c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001070:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <HAL_InitTick+0xa0>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0c9b      	lsrs	r3, r3, #18
 8001078:	3b01      	subs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_InitTick+0xa4>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <HAL_InitTick+0xa8>)
 8001080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_InitTick+0xa4>)
 8001084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001088:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800108a:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <HAL_InitTick+0xa4>)
 800108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_InitTick+0xa4>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_InitTick+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <HAL_InitTick+0xa4>)
 800109e:	f002 fa63 	bl	8003568 <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d104      	bne.n	80010b2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010a8:	4806      	ldr	r0, [pc, #24]	; (80010c4 <HAL_InitTick+0xa4>)
 80010aa:	f002 fab5 	bl	8003618 <HAL_TIM_Base_Start_IT>
 80010ae:	4603      	mov	r3, r0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3730      	adds	r7, #48	; 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	431bde83 	.word	0x431bde83
 80010c4:	20000234 	.word	0x20000234
 80010c8:	40012c00 	.word	0x40012c00

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <NMI_Handler+0x4>

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
	...

080010f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <TIM1_UP_IRQHandler+0x10>)
 80010fe:	f002 fadd 	bl	80036bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000234 	.word	0x20000234

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f002 fc5e 	bl	80039fc <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20005000 	.word	0x20005000
 800116c:	00000400 	.word	0x00000400
 8001170:	200000a8 	.word	0x200000a8
 8001174:	20000290 	.word	0x20000290

08001178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af04      	add	r7, sp, #16
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4618      	mov	r0, r3
 8001198:	f7fe ffda 	bl	8000150 <pvPortMalloc>
 800119c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80011a4:	207c      	movs	r0, #124	; 0x7c
 80011a6:	f7fe ffd3 	bl	8000150 <pvPortMalloc>
 80011aa:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d008      	beq.n	80011c4 <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80011b2:	227c      	movs	r2, #124	; 0x7c
 80011b4:	2100      	movs	r1, #0
 80011b6:	69f8      	ldr	r0, [r7, #28]
 80011b8:	f002 fc68 	bl	8003a8c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
 80011c2:	e005      	b.n	80011d0 <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80011c4:	6978      	ldr	r0, [r7, #20]
 80011c6:	f7fe ffd5 	bl	8000174 <vPortFree>
 80011ca:	e001      	b.n	80011d0 <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d013      	beq.n	80011fe <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80011d6:	2300      	movs	r3, #0
 80011d8:	9303      	str	r3, [sp, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f000 f80e 	bl	800120e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80011f2:	69f8      	ldr	r0, [r7, #28]
 80011f4:	f000 f89a 	bl	800132c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	e002      	b.n	8001204 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001204:	69bb      	ldr	r3, [r7, #24]
    }
 8001206:	4618      	mov	r0, r3
 8001208:	3720      	adds	r7, #32
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b088      	sub	sp, #32
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	461a      	mov	r2, r3
 8001226:	21a5      	movs	r1, #165	; 0xa5
 8001228:	f002 fc30 	bl	8003a8c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001236:	3b01      	subs	r3, #1
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	f023 0307 	bic.w	r3, r3, #7
 8001244:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00a      	beq.n	8001266 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001254:	f383 8811 	msr	BASEPRI, r3
 8001258:	f3bf 8f6f 	isb	sy
 800125c:	f3bf 8f4f 	dsb	sy
 8001260:	617b      	str	r3, [r7, #20]
    }
 8001262:	bf00      	nop
 8001264:	e7fe      	b.n	8001264 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d01e      	beq.n	80012aa <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	e012      	b.n	8001298 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	7819      	ldrb	r1, [r3, #0]
 800127a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	4413      	add	r3, r2
 8001280:	3334      	adds	r3, #52	; 0x34
 8001282:	460a      	mov	r2, r1
 8001284:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b13      	cmp	r3, #19
 800129c:	d9e9      	bls.n	8001272 <prvInitialiseNewTask+0x64>
 800129e:	e000      	b.n	80012a2 <prvInitialiseNewTask+0x94>
            {
                break;
 80012a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d90a      	bls.n	80012c6 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80012b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b4:	f383 8811 	msr	BASEPRI, r3
 80012b8:	f3bf 8f6f 	isb	sy
 80012bc:	f3bf 8f4f 	dsb	sy
 80012c0:	613b      	str	r3, [r7, #16]
    }
 80012c2:	bf00      	nop
 80012c4:	e7fe      	b.n	80012c4 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d901      	bls.n	80012d0 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80012cc:	2304      	movs	r3, #4
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80012d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80012d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012da:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80012dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012de:	3304      	adds	r3, #4
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7fe ff78 	bl	80001d6 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80012e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e8:	3318      	adds	r3, #24
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7fe ff73 	bl	80001d6 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80012f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012f4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f8:	f1c3 0205 	rsb	r2, r3, #5
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	69b8      	ldr	r0, [r7, #24]
 800130c:	f7ff f8cc 	bl	80004a8 <pxPortInitialiseStack>
 8001310:	4602      	mov	r2, r0
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001320:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001322:	bf00      	nop
 8001324:	3720      	adds	r7, #32
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001334:	f7ff f9ac 	bl	8000690 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001338:	4b41      	ldr	r3, [pc, #260]	; (8001440 <prvAddNewTaskToReadyList+0x114>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a40      	ldr	r2, [pc, #256]	; (8001440 <prvAddNewTaskToReadyList+0x114>)
 8001340:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <prvAddNewTaskToReadyList+0x118>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d109      	bne.n	800135e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800134a:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <prvAddNewTaskToReadyList+0x118>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <prvAddNewTaskToReadyList+0x114>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d110      	bne.n	800137a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001358:	f000 fe62 	bl	8002020 <prvInitialiseTaskLists>
 800135c:	e00d      	b.n	800137a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800135e:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <prvAddNewTaskToReadyList+0x11c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001366:	4b37      	ldr	r3, [pc, #220]	; (8001444 <prvAddNewTaskToReadyList+0x118>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	429a      	cmp	r2, r3
 8001372:	d802      	bhi.n	800137a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001374:	4a33      	ldr	r2, [pc, #204]	; (8001444 <prvAddNewTaskToReadyList+0x118>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <prvAddNewTaskToReadyList+0x120>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a32      	ldr	r2, [pc, #200]	; (800144c <prvAddNewTaskToReadyList+0x120>)
 8001382:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001384:	4b31      	ldr	r3, [pc, #196]	; (800144c <prvAddNewTaskToReadyList+0x120>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <prvAddNewTaskToReadyList+0x124>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d903      	bls.n	80013a0 <prvAddNewTaskToReadyList+0x74>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <prvAddNewTaskToReadyList+0x124>)
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013a4:	492b      	ldr	r1, [pc, #172]	; (8001454 <prvAddNewTaskToReadyList+0x128>)
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	3304      	adds	r3, #4
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	3204      	adds	r2, #4
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	1d1a      	adds	r2, r3, #4
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <prvAddNewTaskToReadyList+0x128>)
 80013e4:	441a      	add	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ee:	4919      	ldr	r1, [pc, #100]	; (8001454 <prvAddNewTaskToReadyList+0x128>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	1c59      	adds	r1, r3, #1
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <prvAddNewTaskToReadyList+0x128>)
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4403      	add	r3, r0
 800140a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800140c:	f7ff f970 	bl	80006f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <prvAddNewTaskToReadyList+0x11c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00e      	beq.n	8001436 <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <prvAddNewTaskToReadyList+0x118>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	429a      	cmp	r2, r3
 8001424:	d207      	bcs.n	8001436 <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <prvAddNewTaskToReadyList+0x12c>)
 8001428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	f3bf 8f4f 	dsb	sy
 8001432:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000184 	.word	0x20000184
 8001444:	200000ac 	.word	0x200000ac
 8001448:	20000190 	.word	0x20000190
 800144c:	200001a0 	.word	0x200001a0
 8001450:	2000018c 	.word	0x2000018c
 8001454:	200000b0 	.word	0x200000b0
 8001458:	e000ed04 	.word	0xe000ed04

0800145c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d017      	beq.n	800149e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <vTaskDelay+0x60>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00a      	beq.n	800148c <vTaskDelay+0x30>
        __asm volatile
 8001476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147a:	f383 8811 	msr	BASEPRI, r3
 800147e:	f3bf 8f6f 	isb	sy
 8001482:	f3bf 8f4f 	dsb	sy
 8001486:	60bb      	str	r3, [r7, #8]
    }
 8001488:	bf00      	nop
 800148a:	e7fe      	b.n	800148a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800148c:	f000 f86c 	bl	8001568 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001490:	2100      	movs	r1, #0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fe7a 	bl	800218c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001498:	f000 f8aa 	bl	80015f0 <xTaskResumeAll>
 800149c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d107      	bne.n	80014b4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <vTaskDelay+0x64>)
 80014a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f3bf 8f4f 	dsb	sy
 80014b0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200001ac 	.word	0x200001ac
 80014c0:	e000ed04 	.word	0xe000ed04

080014c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <vTaskStartScheduler+0x88>)
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	2280      	movs	r2, #128	; 0x80
 80014d6:	491e      	ldr	r1, [pc, #120]	; (8001550 <vTaskStartScheduler+0x8c>)
 80014d8:	481e      	ldr	r0, [pc, #120]	; (8001554 <vTaskStartScheduler+0x90>)
 80014da:	f7ff fe53 	bl	8001184 <xTaskCreate>
 80014de:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d102      	bne.n	80014ec <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80014e6:	f000 febf 	bl	8002268 <xTimerCreateTimerTask>
 80014ea:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d116      	bne.n	8001520 <vTaskStartScheduler+0x5c>
        __asm volatile
 80014f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f6:	f383 8811 	msr	BASEPRI, r3
 80014fa:	f3bf 8f6f 	isb	sy
 80014fe:	f3bf 8f4f 	dsb	sy
 8001502:	60bb      	str	r3, [r7, #8]
    }
 8001504:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001506:	4b14      	ldr	r3, [pc, #80]	; (8001558 <vTaskStartScheduler+0x94>)
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <vTaskStartScheduler+0x98>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <vTaskStartScheduler+0x9c>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800151a:	f7ff f847 	bl	80005ac <xPortStartScheduler>
 800151e:	e00e      	b.n	800153e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001526:	d10a      	bne.n	800153e <vTaskStartScheduler+0x7a>
        __asm volatile
 8001528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152c:	f383 8811 	msr	BASEPRI, r3
 8001530:	f3bf 8f6f 	isb	sy
 8001534:	f3bf 8f4f 	dsb	sy
 8001538:	607b      	str	r3, [r7, #4]
    }
 800153a:	bf00      	nop
 800153c:	e7fe      	b.n	800153c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <vTaskStartScheduler+0xa0>)
 8001540:	681b      	ldr	r3, [r3, #0]
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200001a8 	.word	0x200001a8
 8001550:	08003c40 	.word	0x08003c40
 8001554:	08001f35 	.word	0x08001f35
 8001558:	200001a4 	.word	0x200001a4
 800155c:	20000190 	.word	0x20000190
 8001560:	20000188 	.word	0x20000188
 8001564:	20000008 	.word	0x20000008

08001568 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <vTaskSuspendAll+0x18>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a03      	ldr	r2, [pc, #12]	; (8001580 <vTaskSuspendAll+0x18>)
 8001574:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	200001ac 	.word	0x200001ac

08001584 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <prvGetExpectedIdleTime+0x58>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8001596:	2301      	movs	r3, #1
 8001598:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <prvGetExpectedIdleTime+0x5c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	e012      	b.n	80015d0 <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <prvGetExpectedIdleTime+0x60>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d902      	bls.n	80015b8 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	e00b      	b.n	80015d0 <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	e005      	b.n	80015d0 <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <prvGetExpectedIdleTime+0x64>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <prvGetExpectedIdleTime+0x68>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 80015d0:	687b      	ldr	r3, [r7, #4]
    }
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	2000018c 	.word	0x2000018c
 80015e0:	200000ac 	.word	0x200000ac
 80015e4:	200000b0 	.word	0x200000b0
 80015e8:	200001a4 	.word	0x200001a4
 80015ec:	20000188 	.word	0x20000188

080015f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80015fe:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <xTaskResumeAll+0x1d4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10a      	bne.n	800161c <xTaskResumeAll+0x2c>
        __asm volatile
 8001606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800160a:	f383 8811 	msr	BASEPRI, r3
 800160e:	f3bf 8f6f 	isb	sy
 8001612:	f3bf 8f4f 	dsb	sy
 8001616:	607b      	str	r3, [r7, #4]
    }
 8001618:	bf00      	nop
 800161a:	e7fe      	b.n	800161a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800161c:	f7ff f838 	bl	8000690 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001620:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <xTaskResumeAll+0x1d4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	4a67      	ldr	r2, [pc, #412]	; (80017c4 <xTaskResumeAll+0x1d4>)
 8001628:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800162a:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <xTaskResumeAll+0x1d4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 80c1 	bne.w	80017b6 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001634:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <xTaskResumeAll+0x1d8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80bc 	beq.w	80017b6 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800163e:	e08b      	b.n	8001758 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001640:	4b62      	ldr	r3, [pc, #392]	; (80017cc <xTaskResumeAll+0x1dc>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	6a12      	ldr	r2, [r2, #32]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	69d2      	ldr	r2, [r2, #28]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3318      	adds	r3, #24
 800166a:	429a      	cmp	r2, r3
 800166c:	d103      	bne.n	8001676 <xTaskResumeAll+0x86>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	6a1a      	ldr	r2, [r3, #32]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2200      	movs	r2, #0
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	68d2      	ldr	r2, [r2, #12]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	6892      	ldr	r2, [r2, #8]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	3304      	adds	r3, #4
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d103      	bne.n	80016b4 <xTaskResumeAll+0xc4>
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	68da      	ldr	r2, [r3, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	1e5a      	subs	r2, r3, #1
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <xTaskResumeAll+0x1e0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d903      	bls.n	80016d8 <xTaskResumeAll+0xe8>
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	4a3e      	ldr	r2, [pc, #248]	; (80017d0 <xTaskResumeAll+0x1e0>)
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	493d      	ldr	r1, [pc, #244]	; (80017d4 <xTaskResumeAll+0x1e4>)
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	440b      	add	r3, r1
 80016e8:	3304      	adds	r3, #4
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	3204      	adds	r2, #4
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	1d1a      	adds	r2, r3, #4
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	4a2e      	ldr	r2, [pc, #184]	; (80017d4 <xTaskResumeAll+0x1e4>)
 800171c:	441a      	add	r2, r3
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	615a      	str	r2, [r3, #20]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	492b      	ldr	r1, [pc, #172]	; (80017d4 <xTaskResumeAll+0x1e4>)
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	1c59      	adds	r1, r3, #1
 8001736:	4827      	ldr	r0, [pc, #156]	; (80017d4 <xTaskResumeAll+0x1e4>)
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4403      	add	r3, r0
 8001742:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <xTaskResumeAll+0x1e8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	429a      	cmp	r2, r3
 8001750:	d302      	bcc.n	8001758 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <xTaskResumeAll+0x1ec>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <xTaskResumeAll+0x1dc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f47f af6f 	bne.w	8001640 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001768:	f000 fcd8 	bl	800211c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <xTaskResumeAll+0x1f0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d010      	beq.n	800179a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001778:	f000 f89e 	bl	80018b8 <xTaskIncrementTick>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <xTaskResumeAll+0x1ec>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3b01      	subs	r3, #1
 800178c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f1      	bne.n	8001778 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <xTaskResumeAll+0x1f0>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <xTaskResumeAll+0x1ec>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <xTaskResumeAll+0x1f4>)
 80017a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	f3bf 8f4f 	dsb	sy
 80017b2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80017b6:	f7fe ff9b 	bl	80006f0 <vPortExitCritical>

    return xAlreadyYielded;
 80017ba:	69bb      	ldr	r3, [r7, #24]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200001ac 	.word	0x200001ac
 80017c8:	20000184 	.word	0x20000184
 80017cc:	20000144 	.word	0x20000144
 80017d0:	2000018c 	.word	0x2000018c
 80017d4:	200000b0 	.word	0x200000b0
 80017d8:	200000ac 	.word	0x200000ac
 80017dc:	20000198 	.word	0x20000198
 80017e0:	20000194 	.word	0x20000194
 80017e4:	e000ed04 	.word	0xe000ed04

080017e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <xTaskGetTickCount+0x18>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80017f4:	687b      	ldr	r3, [r7, #4]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	20000188 	.word	0x20000188

08001804 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <vTaskStepTick+0xa4>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	441a      	add	r2, r3
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <vTaskStepTick+0xa8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d90a      	bls.n	8001832 <vTaskStepTick+0x2e>
        __asm volatile
 800181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001820:	f383 8811 	msr	BASEPRI, r3
 8001824:	f3bf 8f6f 	isb	sy
 8001828:	f3bf 8f4f 	dsb	sy
 800182c:	617b      	str	r3, [r7, #20]
    }
 800182e:	bf00      	nop
 8001830:	e7fe      	b.n	8001830 <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 8001832:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <vTaskStepTick+0xa4>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	441a      	add	r2, r3
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <vTaskStepTick+0xa8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d128      	bne.n	8001894 <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 8001842:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <vTaskStepTick+0xac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10a      	bne.n	8001860 <vTaskStepTick+0x5c>
        __asm volatile
 800184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184e:	f383 8811 	msr	BASEPRI, r3
 8001852:	f3bf 8f6f 	isb	sy
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	613b      	str	r3, [r7, #16]
    }
 800185c:	bf00      	nop
 800185e:	e7fe      	b.n	800185e <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10a      	bne.n	800187c <vTaskStepTick+0x78>
        __asm volatile
 8001866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186a:	f383 8811 	msr	BASEPRI, r3
 800186e:	f3bf 8f6f 	isb	sy
 8001872:	f3bf 8f4f 	dsb	sy
 8001876:	60fb      	str	r3, [r7, #12]
    }
 8001878:	bf00      	nop
 800187a:	e7fe      	b.n	800187a <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 800187c:	f7fe ff08 	bl	8000690 <vPortEnterCritical>
            {
                xPendedTicks++;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <vTaskStepTick+0xb0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <vTaskStepTick+0xb0>)
 8001888:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800188a:	f7fe ff31 	bl	80006f0 <vPortExitCritical>
            xTicksToJump--;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3b01      	subs	r3, #1
 8001892:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <vTaskStepTick+0xa4>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	4a02      	ldr	r2, [pc, #8]	; (80018a8 <vTaskStepTick+0xa4>)
 800189e:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 80018a0:	bf00      	nop
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000188 	.word	0x20000188
 80018ac:	200001a4 	.word	0x200001a4
 80018b0:	200001ac 	.word	0x200001ac
 80018b4:	20000194 	.word	0x20000194

080018b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018c2:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <xTaskIncrementTick+0x204>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 80ed 	bne.w	8001aa6 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80018cc:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <xTaskIncrementTick+0x208>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3301      	adds	r3, #1
 80018d2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80018d4:	4a7a      	ldr	r2, [pc, #488]	; (8001ac0 <xTaskIncrementTick+0x208>)
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80018da:	6a3b      	ldr	r3, [r7, #32]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d120      	bne.n	8001922 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80018e0:	4b78      	ldr	r3, [pc, #480]	; (8001ac4 <xTaskIncrementTick+0x20c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <xTaskIncrementTick+0x48>
        __asm volatile
 80018ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ee:	f383 8811 	msr	BASEPRI, r3
 80018f2:	f3bf 8f6f 	isb	sy
 80018f6:	f3bf 8f4f 	dsb	sy
 80018fa:	607b      	str	r3, [r7, #4]
    }
 80018fc:	bf00      	nop
 80018fe:	e7fe      	b.n	80018fe <xTaskIncrementTick+0x46>
 8001900:	4b70      	ldr	r3, [pc, #448]	; (8001ac4 <xTaskIncrementTick+0x20c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	4b70      	ldr	r3, [pc, #448]	; (8001ac8 <xTaskIncrementTick+0x210>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <xTaskIncrementTick+0x20c>)
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <xTaskIncrementTick+0x210>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <xTaskIncrementTick+0x214>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	4a6c      	ldr	r2, [pc, #432]	; (8001acc <xTaskIncrementTick+0x214>)
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	f000 fbfd 	bl	800211c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001922:	4b6b      	ldr	r3, [pc, #428]	; (8001ad0 <xTaskIncrementTick+0x218>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6a3a      	ldr	r2, [r7, #32]
 8001928:	429a      	cmp	r2, r3
 800192a:	f0c0 80a7 	bcc.w	8001a7c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800192e:	4b65      	ldr	r3, [pc, #404]	; (8001ac4 <xTaskIncrementTick+0x20c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d104      	bne.n	8001942 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001938:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <xTaskIncrementTick+0x218>)
 800193a:	f04f 32ff 	mov.w	r2, #4294967295
 800193e:	601a      	str	r2, [r3, #0]
                    break;
 8001940:	e09c      	b.n	8001a7c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001942:	4b60      	ldr	r3, [pc, #384]	; (8001ac4 <xTaskIncrementTick+0x20c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001952:	6a3a      	ldr	r2, [r7, #32]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	429a      	cmp	r2, r3
 8001958:	d203      	bcs.n	8001962 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800195a:	4a5d      	ldr	r2, [pc, #372]	; (8001ad0 <xTaskIncrementTick+0x218>)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001960:	e08c      	b.n	8001a7c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	68d2      	ldr	r2, [r2, #12]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	6892      	ldr	r2, [r2, #8]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	3304      	adds	r3, #4
 8001984:	429a      	cmp	r2, r3
 8001986:	d103      	bne.n	8001990 <xTaskIncrementTick+0xd8>
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01e      	beq.n	80019e6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	6a12      	ldr	r2, [r2, #32]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	69d2      	ldr	r2, [r2, #28]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	3318      	adds	r3, #24
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d103      	bne.n	80019d6 <xTaskIncrementTick+0x11e>
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	6a1a      	ldr	r2, [r3, #32]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2200      	movs	r2, #0
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ea:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <xTaskIncrementTick+0x21c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d903      	bls.n	80019fa <xTaskIncrementTick+0x142>
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	4a37      	ldr	r2, [pc, #220]	; (8001ad4 <xTaskIncrementTick+0x21c>)
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fe:	4936      	ldr	r1, [pc, #216]	; (8001ad8 <xTaskIncrementTick+0x220>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	3204      	adds	r2, #4
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	1d1a      	adds	r2, r3, #4
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <xTaskIncrementTick+0x220>)
 8001a3e:	441a      	add	r2, r3
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	4923      	ldr	r1, [pc, #140]	; (8001ad8 <xTaskIncrementTick+0x220>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	1c59      	adds	r1, r3, #1
 8001a58:	481f      	ldr	r0, [pc, #124]	; (8001ad8 <xTaskIncrementTick+0x220>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4403      	add	r3, r0
 8001a64:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <xTaskIncrementTick+0x224>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f67f af5c 	bls.w	800192e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001a76:	2301      	movs	r3, #1
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a7a:	e758      	b.n	800192e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <xTaskIncrementTick+0x224>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a82:	4915      	ldr	r1, [pc, #84]	; (8001ad8 <xTaskIncrementTick+0x220>)
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d901      	bls.n	8001a98 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <xTaskIncrementTick+0x228>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	e004      	b.n	8001ab0 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <xTaskIncrementTick+0x22c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <xTaskIncrementTick+0x22c>)
 8001aae:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3728      	adds	r7, #40	; 0x28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200001ac 	.word	0x200001ac
 8001ac0:	20000188 	.word	0x20000188
 8001ac4:	2000013c 	.word	0x2000013c
 8001ac8:	20000140 	.word	0x20000140
 8001acc:	2000019c 	.word	0x2000019c
 8001ad0:	200001a4 	.word	0x200001a4
 8001ad4:	2000018c 	.word	0x2000018c
 8001ad8:	200000b0 	.word	0x200000b0
 8001adc:	200000ac 	.word	0x200000ac
 8001ae0:	20000198 	.word	0x20000198
 8001ae4:	20000194 	.word	0x20000194

08001ae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <vTaskSwitchContext+0xa4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001af6:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <vTaskSwitchContext+0xa8>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001afc:	e041      	b.n	8001b82 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 8001afe:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <vTaskSwitchContext+0xa8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b04:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <vTaskSwitchContext+0xac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e010      	b.n	8001b2e <vTaskSwitchContext+0x46>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10a      	bne.n	8001b28 <vTaskSwitchContext+0x40>
        __asm volatile
 8001b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b16:	f383 8811 	msr	BASEPRI, r3
 8001b1a:	f3bf 8f6f 	isb	sy
 8001b1e:	f3bf 8f4f 	dsb	sy
 8001b22:	607b      	str	r3, [r7, #4]
    }
 8001b24:	bf00      	nop
 8001b26:	e7fe      	b.n	8001b26 <vTaskSwitchContext+0x3e>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	491a      	ldr	r1, [pc, #104]	; (8001b98 <vTaskSwitchContext+0xb0>)
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0e4      	beq.n	8001b0c <vTaskSwitchContext+0x24>
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <vTaskSwitchContext+0xb0>)
 8001b4e:	4413      	add	r3, r2
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	3308      	adds	r3, #8
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d104      	bne.n	8001b72 <vTaskSwitchContext+0x8a>
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a08      	ldr	r2, [pc, #32]	; (8001b9c <vTaskSwitchContext+0xb4>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <vTaskSwitchContext+0xac>)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6013      	str	r3, [r2, #0]
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	200001ac 	.word	0x200001ac
 8001b90:	20000198 	.word	0x20000198
 8001b94:	2000018c 	.word	0x2000018c
 8001b98:	200000b0 	.word	0x200000b0
 8001b9c:	200000ac 	.word	0x200000ac

08001ba0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10a      	bne.n	8001bc6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb4:	f383 8811 	msr	BASEPRI, r3
 8001bb8:	f3bf 8f6f 	isb	sy
 8001bbc:	f3bf 8f4f 	dsb	sy
 8001bc0:	60fb      	str	r3, [r7, #12]
    }
 8001bc2:	bf00      	nop
 8001bc4:	e7fe      	b.n	8001bc4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <vTaskPlaceOnEventList+0x44>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3318      	adds	r3, #24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fb0d 	bl	80001ee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	6838      	ldr	r0, [r7, #0]
 8001bd8:	f000 fad8 	bl	800218c <prvAddCurrentTaskToDelayedList>
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200000ac 	.word	0x200000ac

08001be8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10a      	bne.n	8001c10 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8001bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfe:	f383 8811 	msr	BASEPRI, r3
 8001c02:	f3bf 8f6f 	isb	sy
 8001c06:	f3bf 8f4f 	dsb	sy
 8001c0a:	613b      	str	r3, [r7, #16]
    }
 8001c0c:	bf00      	nop
 8001c0e:	e7fe      	b.n	8001c0e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	61da      	str	r2, [r3, #28]
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	6892      	ldr	r2, [r2, #8]
 8001c26:	621a      	str	r2, [r3, #32]
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	3218      	adds	r2, #24
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f103 0218 	add.w	r2, r3, #24
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	629a      	str	r2, [r3, #40]	; 0x28
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	68b8      	ldr	r0, [r7, #8]
 8001c62:	f000 fa93 	bl	800218c <prvAddCurrentTaskToDelayedList>
    }
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200000ac 	.word	0x200000ac

08001c74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10a      	bne.n	8001ca0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8001c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8e:	f383 8811 	msr	BASEPRI, r3
 8001c92:	f3bf 8f6f 	isb	sy
 8001c96:	f3bf 8f4f 	dsb	sy
 8001c9a:	60fb      	str	r3, [r7, #12]
    }
 8001c9c:	bf00      	nop
 8001c9e:	e7fe      	b.n	8001c9e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	6a3a      	ldr	r2, [r7, #32]
 8001cac:	6a12      	ldr	r2, [r2, #32]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	69d2      	ldr	r2, [r2, #28]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	3318      	adds	r3, #24
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d103      	bne.n	8001cce <xTaskRemoveFromEventList+0x5a>
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	6a1a      	ldr	r2, [r3, #32]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	1e5a      	subs	r2, r3, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cde:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <xTaskRemoveFromEventList+0x198>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d161      	bne.n	8001daa <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	6a3a      	ldr	r2, [r7, #32]
 8001cf2:	68d2      	ldr	r2, [r2, #12]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	6a3a      	ldr	r2, [r7, #32]
 8001cfc:	6892      	ldr	r2, [r2, #8]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	3304      	adds	r3, #4
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d103      	bne.n	8001d14 <xTaskRemoveFromEventList+0xa0>
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2200      	movs	r2, #0
 8001d18:	615a      	str	r2, [r3, #20]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d28:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <xTaskRemoveFromEventList+0x19c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d903      	bls.n	8001d38 <xTaskRemoveFromEventList+0xc4>
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <xTaskRemoveFromEventList+0x19c>)
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3c:	4935      	ldr	r1, [pc, #212]	; (8001e14 <xTaskRemoveFromEventList+0x1a0>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	3304      	adds	r3, #4
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	6a3a      	ldr	r2, [r7, #32]
 8001d62:	3204      	adds	r2, #4
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	1d1a      	adds	r2, r3, #4
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <xTaskRemoveFromEventList+0x1a0>)
 8001d7c:	441a      	add	r2, r3
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	615a      	str	r2, [r3, #20]
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d86:	4923      	ldr	r1, [pc, #140]	; (8001e14 <xTaskRemoveFromEventList+0x1a0>)
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	1c59      	adds	r1, r3, #1
 8001d96:	481f      	ldr	r0, [pc, #124]	; (8001e14 <xTaskRemoveFromEventList+0x1a0>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4403      	add	r3, r0
 8001da2:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 8001da4:	f000 f9ba 	bl	800211c <prvResetNextTaskUnblockTime>
 8001da8:	e01b      	b.n	8001de2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <xTaskRemoveFromEventList+0x1a4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	61da      	str	r2, [r3, #28]
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	621a      	str	r2, [r3, #32]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	6a3a      	ldr	r2, [r7, #32]
 8001dc4:	3218      	adds	r2, #24
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f103 0218 	add.w	r2, r3, #24
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <xTaskRemoveFromEventList+0x1a4>)
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <xTaskRemoveFromEventList+0x1a4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <xTaskRemoveFromEventList+0x1a4>)
 8001de0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <xTaskRemoveFromEventList+0x1a8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d905      	bls.n	8001dfc <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001df4:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <xTaskRemoveFromEventList+0x1ac>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e001      	b.n	8001e00 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200001ac 	.word	0x200001ac
 8001e10:	2000018c 	.word	0x2000018c
 8001e14:	200000b0 	.word	0x200000b0
 8001e18:	20000144 	.word	0x20000144
 8001e1c:	200000ac 	.word	0x200000ac
 8001e20:	20000198 	.word	0x20000198

08001e24 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <vTaskInternalSetTimeOutState+0x24>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <vTaskInternalSetTimeOutState+0x28>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	605a      	str	r2, [r3, #4]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	2000019c 	.word	0x2000019c
 8001e4c:	20000188 	.word	0x20000188

08001e50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e64:	f383 8811 	msr	BASEPRI, r3
 8001e68:	f3bf 8f6f 	isb	sy
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	613b      	str	r3, [r7, #16]
    }
 8001e72:	bf00      	nop
 8001e74:	e7fe      	b.n	8001e74 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	60fb      	str	r3, [r7, #12]
    }
 8001e8e:	bf00      	nop
 8001e90:	e7fe      	b.n	8001e90 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001e92:	f7fe fbfd 	bl	8000690 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <xTaskCheckForTimeOut+0xc4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eae:	d102      	bne.n	8001eb6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	e026      	b.n	8001f04 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <xTaskCheckForTimeOut+0xc8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d00a      	beq.n	8001ed8 <xTaskCheckForTimeOut+0x88>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d305      	bcc.n	8001ed8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e015      	b.n	8001f04 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d20b      	bcs.n	8001efa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	1ad2      	subs	r2, r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff98 	bl	8001e24 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	e004      	b.n	8001f04 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001f04:	f7fe fbf4 	bl	80006f0 <vPortExitCritical>

    return xReturn;
 8001f08:	69fb      	ldr	r3, [r7, #28]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000188 	.word	0x20000188
 8001f18:	2000019c 	.word	0x2000019c

08001f1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <vTaskMissedYield+0x14>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000198 	.word	0x20000198

08001f34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001f3c:	f000 f8b0 	bl	80020a0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <prvIdleTask+0x70>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d907      	bls.n	8001f58 <prvIdleTask+0x24>
            {
                taskYIELD();
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <prvIdleTask+0x74>)
 8001f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 8001f58:	f7ff fb14 	bl	8001584 <prvGetExpectedIdleTime>
 8001f5c:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d9eb      	bls.n	8001f3c <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 8001f64:	f7ff fb00 	bl	8001568 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <prvIdleTask+0x78>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <prvIdleTask+0x7c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d20a      	bcs.n	8001f8a <prvIdleTask+0x56>
        __asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	60bb      	str	r3, [r7, #8]
    }
 8001f86:	bf00      	nop
 8001f88:	e7fe      	b.n	8001f88 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 8001f8a:	f7ff fafb 	bl	8001584 <prvGetExpectedIdleTime>
 8001f8e:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d902      	bls.n	8001f9c <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7fe fc18 	bl	80007cc <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 8001f9c:	f7ff fb28 	bl	80015f0 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 8001fa0:	e7cc      	b.n	8001f3c <prvIdleTask+0x8>
 8001fa2:	bf00      	nop
 8001fa4:	200000b0 	.word	0x200000b0
 8001fa8:	e000ed04 	.word	0xe000ed04
 8001fac:	200001a4 	.word	0x200001a4
 8001fb0:	20000188 	.word	0x20000188

08001fb4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <eTaskConfirmSleepModeStatus+0x58>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	e017      	b.n	8002000 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <eTaskConfirmSleepModeStatus+0x5c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	e010      	b.n	8002000 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <eTaskConfirmSleepModeStatus+0x60>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	e009      	b.n	8002000 <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <eTaskConfirmSleepModeStatus+0x64>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <eTaskConfirmSleepModeStatus+0x68>)
 8001ff2:	6819      	ldr	r1, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	1acb      	subs	r3, r1, r3
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d101      	bne.n	8002000 <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 8002000:	79fb      	ldrb	r3, [r7, #7]
    }
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000144 	.word	0x20000144
 8002010:	20000198 	.word	0x20000198
 8002014:	20000194 	.word	0x20000194
 8002018:	20000170 	.word	0x20000170
 800201c:	20000184 	.word	0x20000184

08002020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	e00c      	b.n	8002046 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <prvInitialiseTaskLists+0x60>)
 8002038:	4413      	add	r3, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe f8ac 	bl	8000198 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3301      	adds	r3, #1
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d9ef      	bls.n	800202c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <prvInitialiseTaskLists+0x64>)
 800204e:	f7fe f8a3 	bl	8000198 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002052:	480d      	ldr	r0, [pc, #52]	; (8002088 <prvInitialiseTaskLists+0x68>)
 8002054:	f7fe f8a0 	bl	8000198 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <prvInitialiseTaskLists+0x6c>)
 800205a:	f7fe f89d 	bl	8000198 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800205e:	480c      	ldr	r0, [pc, #48]	; (8002090 <prvInitialiseTaskLists+0x70>)
 8002060:	f7fe f89a 	bl	8000198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002064:	480b      	ldr	r0, [pc, #44]	; (8002094 <prvInitialiseTaskLists+0x74>)
 8002066:	f7fe f897 	bl	8000198 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <prvInitialiseTaskLists+0x78>)
 800206c:	4a05      	ldr	r2, [pc, #20]	; (8002084 <prvInitialiseTaskLists+0x64>)
 800206e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <prvInitialiseTaskLists+0x7c>)
 8002072:	4a05      	ldr	r2, [pc, #20]	; (8002088 <prvInitialiseTaskLists+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200000b0 	.word	0x200000b0
 8002084:	20000114 	.word	0x20000114
 8002088:	20000128 	.word	0x20000128
 800208c:	20000144 	.word	0x20000144
 8002090:	20000158 	.word	0x20000158
 8002094:	20000170 	.word	0x20000170
 8002098:	2000013c 	.word	0x2000013c
 800209c:	20000140 	.word	0x20000140

080020a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020a6:	e019      	b.n	80020dc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80020a8:	f7fe faf2 	bl	8000690 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <prvCheckTasksWaitingTermination+0x50>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3304      	adds	r3, #4
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe f8d0 	bl	800025e <uxListRemove>
                --uxCurrentNumberOfTasks;
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <prvCheckTasksWaitingTermination+0x54>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <prvCheckTasksWaitingTermination+0x54>)
 80020c6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <prvCheckTasksWaitingTermination+0x58>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <prvCheckTasksWaitingTermination+0x58>)
 80020d0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80020d2:	f7fe fb0d 	bl	80006f0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f810 	bl	80020fc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <prvCheckTasksWaitingTermination+0x58>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e1      	bne.n	80020a8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000158 	.word	0x20000158
 80020f4:	20000184 	.word	0x20000184
 80020f8:	2000016c 	.word	0x2000016c

080020fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f833 	bl	8000174 <vPortFree>
            vPortFree( pxTCB );
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe f830 	bl	8000174 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <prvResetNextTaskUnblockTime+0x2c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d104      	bne.n	8002134 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <prvResetNextTaskUnblockTime+0x30>)
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002132:	e005      	b.n	8002140 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <prvResetNextTaskUnblockTime+0x2c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a03      	ldr	r2, [pc, #12]	; (800214c <prvResetNextTaskUnblockTime+0x30>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	2000013c 	.word	0x2000013c
 800214c:	200001a4 	.word	0x200001a4

08002150 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <xTaskGetSchedulerState+0x34>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d102      	bne.n	8002164 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800215e:	2301      	movs	r3, #1
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	e008      	b.n	8002176 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <xTaskGetSchedulerState+0x38>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800216c:	2302      	movs	r3, #2
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	e001      	b.n	8002176 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002176:	687b      	ldr	r3, [r7, #4]
    }
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000190 	.word	0x20000190
 8002188:	200001ac 	.word	0x200001ac

0800218c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002196:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800219c:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <prvAddCurrentTaskToDelayedList+0xc8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3304      	adds	r3, #4
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f85b 	bl	800025e <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d124      	bne.n	80021fa <prvAddCurrentTaskToDelayedList+0x6e>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d021      	beq.n	80021fa <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021b6:	4b28      	ldr	r3, [pc, #160]	; (8002258 <prvAddCurrentTaskToDelayedList+0xcc>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <prvAddCurrentTaskToDelayedList+0xc8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <prvAddCurrentTaskToDelayedList+0xc8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	6892      	ldr	r2, [r2, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <prvAddCurrentTaskToDelayedList+0xc8>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	3204      	adds	r2, #4
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <prvAddCurrentTaskToDelayedList+0xc8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1d1a      	adds	r2, r3, #4
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <prvAddCurrentTaskToDelayedList+0xc8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <prvAddCurrentTaskToDelayedList+0xcc>)
 80021ea:	615a      	str	r2, [r3, #20]
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <prvAddCurrentTaskToDelayedList+0xcc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a19      	ldr	r2, [pc, #100]	; (8002258 <prvAddCurrentTaskToDelayedList+0xcc>)
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80021f8:	e026      	b.n	8002248 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002202:	4b14      	ldr	r3, [pc, #80]	; (8002254 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	429a      	cmp	r2, r3
 8002210:	d209      	bcs.n	8002226 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <prvAddCurrentTaskToDelayedList+0xd0>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f7fd ffe5 	bl	80001ee <vListInsert>
}
 8002224:	e010      	b.n	8002248 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <prvAddCurrentTaskToDelayedList+0xc8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3304      	adds	r3, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f7fd ffdb 	bl	80001ee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <prvAddCurrentTaskToDelayedList+0xd8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	429a      	cmp	r2, r3
 8002240:	d202      	bcs.n	8002248 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000188 	.word	0x20000188
 8002254:	200000ac 	.word	0x200000ac
 8002258:	20000170 	.word	0x20000170
 800225c:	20000140 	.word	0x20000140
 8002260:	2000013c 	.word	0x2000013c
 8002264:	200001a4 	.word	0x200001a4

08002268 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002272:	f000 fa45 	bl	8002700 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <xTimerCreateTimerTask+0x54>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <xTimerCreateTimerTask+0x58>)
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	2303      	movs	r3, #3
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2300      	movs	r3, #0
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	490e      	ldr	r1, [pc, #56]	; (80022c4 <xTimerCreateTimerTask+0x5c>)
 800228c:	480e      	ldr	r0, [pc, #56]	; (80022c8 <xTimerCreateTimerTask+0x60>)
 800228e:	f7fe ff79 	bl	8001184 <xTaskCreate>
 8002292:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <xTimerCreateTimerTask+0x48>
        __asm volatile
 800229a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	603b      	str	r3, [r7, #0]
    }
 80022ac:	bf00      	nop
 80022ae:	e7fe      	b.n	80022ae <xTimerCreateTimerTask+0x46>
        return xReturn;
 80022b0:	687b      	ldr	r3, [r7, #4]
    }
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200001e0 	.word	0x200001e0
 80022c0:	200001e4 	.word	0x200001e4
 80022c4:	08003c48 	.word	0x08003c48
 80022c8:	08002371 	.word	0x08002371

080022cc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80022d8:	e008      	b.n	80022ec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	699a      	ldr	r2, [r3, #24]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	18d1      	adds	r1, r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f8db 	bl	80024b4 <prvInsertTimerInActiveList>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ea      	bne.n	80022da <prvReloadTimer+0xe>
        }
    }
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <prvProcessExpiredTimer+0x5c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3304      	adds	r3, #4
 8002328:	4618      	mov	r0, r3
 800232a:	f7fd ff98 	bl	800025e <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f7ff ffc3 	bl	80022cc <prvReloadTimer>
 8002346:	e008      	b.n	800235a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	4798      	blx	r3
    }
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200001d8 	.word	0x200001d8

08002370 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f857 	bl	8002430 <prvGetNextExpireTime>
 8002382:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4619      	mov	r1, r3
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f803 	bl	8002394 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800238e:	f000 f8d3 	bl	8002538 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002392:	e7f1      	b.n	8002378 <prvTimerTask+0x8>

08002394 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800239e:	f7ff f8e3 	bl	8001568 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f864 	bl	8002474 <prvSampleTimeNow>
 80023ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d130      	bne.n	8002416 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10a      	bne.n	80023d0 <prvProcessTimerOrBlockTask+0x3c>
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d806      	bhi.n	80023d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80023c2:	f7ff f915 	bl	80015f0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80023c6:	68f9      	ldr	r1, [r7, #12]
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffa1 	bl	8002310 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80023ce:	e024      	b.n	800241a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <prvProcessTimerOrBlockTask+0x90>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <prvProcessTimerOrBlockTask+0x50>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <prvProcessTimerOrBlockTask+0x52>
 80023e4:	2300      	movs	r3, #0
 80023e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <prvProcessTimerOrBlockTask+0x94>)
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7fe fdad 	bl	8000f54 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80023fa:	f7ff f8f9 	bl	80015f0 <xTaskResumeAll>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <prvProcessTimerOrBlockTask+0x98>)
 8002406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	f3bf 8f6f 	isb	sy
    }
 8002414:	e001      	b.n	800241a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002416:	f7ff f8eb 	bl	80015f0 <xTaskResumeAll>
    }
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200001dc 	.word	0x200001dc
 8002428:	200001e0 	.word	0x200001e0
 800242c:	e000ed04 	.word	0xe000ed04

08002430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002438:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <prvGetNextExpireTime+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <prvGetNextExpireTime+0x16>
 8002442:	2201      	movs	r2, #1
 8002444:	e000      	b.n	8002448 <prvGetNextExpireTime+0x18>
 8002446:	2200      	movs	r2, #0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <prvGetNextExpireTime+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e001      	b.n	8002464 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002464:	68fb      	ldr	r3, [r7, #12]
    }
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	200001d8 	.word	0x200001d8

08002474 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800247c:	f7ff f9b4 	bl	80017e8 <xTaskGetTickCount>
 8002480:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <prvSampleTimeNow+0x3c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d205      	bcs.n	8002498 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800248c:	f000 f912 	bl	80026b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e002      	b.n	800249e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <prvSampleTimeNow+0x3c>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80024a4:	68fb      	ldr	r3, [r7, #12]
    }
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200001e8 	.word	0x200001e8

080024b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d812      	bhi.n	8002500 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	1ad2      	subs	r2, r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d302      	bcc.n	80024ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80024e8:	2301      	movs	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e01b      	b.n	8002526 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <prvInsertTimerInActiveList+0x7c>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3304      	adds	r3, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f7fd fe78 	bl	80001ee <vListInsert>
 80024fe:	e012      	b.n	8002526 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d206      	bcs.n	8002516 <prvInsertTimerInActiveList+0x62>
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d302      	bcc.n	8002516 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002510:	2301      	movs	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	e007      	b.n	8002526 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <prvInsertTimerInActiveList+0x80>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3304      	adds	r3, #4
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7fd fe64 	bl	80001ee <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002526:	697b      	ldr	r3, [r7, #20]
    }
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200001dc 	.word	0x200001dc
 8002534:	200001d8 	.word	0x200001d8

08002538 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800253e:	e0a6      	b.n	800268e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f2c0 80a2 	blt.w	800268c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	3304      	adds	r3, #4
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd fe80 	bl	800025e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff87 	bl	8002474 <prvSampleTimeNow>
 8002566:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3b01      	subs	r3, #1
 800256c:	2b08      	cmp	r3, #8
 800256e:	f200 808e 	bhi.w	800268e <prvProcessReceivedCommands+0x156>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <prvProcessReceivedCommands+0x40>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	0800259d 	.word	0x0800259d
 800257c:	0800259d 	.word	0x0800259d
 8002580:	08002605 	.word	0x08002605
 8002584:	08002619 	.word	0x08002619
 8002588:	08002663 	.word	0x08002663
 800258c:	0800259d 	.word	0x0800259d
 8002590:	0800259d 	.word	0x0800259d
 8002594:	08002605 	.word	0x08002605
 8002598:	08002619 	.word	0x08002619
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	18d1      	adds	r1, r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	69f8      	ldr	r0, [r7, #28]
 80025bc:	f7ff ff7a 	bl	80024b4 <prvInsertTimerInActiveList>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d063      	beq.n	800268e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d009      	beq.n	80025e8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4619      	mov	r1, r3
 80025e0:	69f8      	ldr	r0, [r7, #28]
 80025e2:	f7ff fe73 	bl	80022cc <prvReloadTimer>
 80025e6:	e008      	b.n	80025fa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	69f8      	ldr	r0, [r7, #28]
 8002600:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002602:	e044      	b.n	800268e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002616:	e03a      	b.n	800268e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	617b      	str	r3, [r7, #20]
    }
 800264a:	bf00      	nop
 800264c:	e7fe      	b.n	800264c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	18d1      	adds	r1, r2, r3
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	69f8      	ldr	r0, [r7, #28]
 800265c:	f7ff ff2a 	bl	80024b4 <prvInsertTimerInActiveList>
                        break;
 8002660:	e015      	b.n	800268e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8002670:	69f8      	ldr	r0, [r7, #28]
 8002672:	f7fd fd7f 	bl	8000174 <vPortFree>
 8002676:	e00a      	b.n	800268e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800268a:	e000      	b.n	800268e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800268c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <prvProcessReceivedCommands+0x178>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f107 0108 	add.w	r1, r7, #8
 8002696:	2200      	movs	r2, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fa9f 	bl	8000bdc <xQueueReceive>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f af4d 	bne.w	8002540 <prvProcessReceivedCommands+0x8>
        }
    }
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	3720      	adds	r7, #32
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200001e0 	.word	0x200001e0

080026b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026ba:	e009      	b.n	80026d0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <prvSwitchTimerLists+0x44>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80026c6:	f04f 31ff 	mov.w	r1, #4294967295
 80026ca:	6838      	ldr	r0, [r7, #0]
 80026cc:	f7ff fe20 	bl	8002310 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <prvSwitchTimerLists+0x44>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <prvSwitchTimerLists+0x44>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <prvSwitchTimerLists+0x48>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <prvSwitchTimerLists+0x44>)
 80026e6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <prvSwitchTimerLists+0x48>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6013      	str	r3, [r2, #0]
    }
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200001d8 	.word	0x200001d8
 80026fc:	200001dc 	.word	0x200001dc

08002700 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002704:	f7fd ffc4 	bl	8000690 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <prvCheckForValidListAndQueue+0x54>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11d      	bne.n	800274c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002710:	4811      	ldr	r0, [pc, #68]	; (8002758 <prvCheckForValidListAndQueue+0x58>)
 8002712:	f7fd fd41 	bl	8000198 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002716:	4811      	ldr	r0, [pc, #68]	; (800275c <prvCheckForValidListAndQueue+0x5c>)
 8002718:	f7fd fd3e 	bl	8000198 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <prvCheckForValidListAndQueue+0x60>)
 800271e:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <prvCheckForValidListAndQueue+0x58>)
 8002720:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <prvCheckForValidListAndQueue+0x64>)
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <prvCheckForValidListAndQueue+0x5c>)
 8002726:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002728:	2200      	movs	r2, #0
 800272a:	210c      	movs	r1, #12
 800272c:	200a      	movs	r0, #10
 800272e:	f7fe f9e3 	bl	8000af8 <xQueueGenericCreate>
 8002732:	4603      	mov	r3, r0
 8002734:	4a07      	ldr	r2, [pc, #28]	; (8002754 <prvCheckForValidListAndQueue+0x54>)
 8002736:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <prvCheckForValidListAndQueue+0x54>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <prvCheckForValidListAndQueue+0x54>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4908      	ldr	r1, [pc, #32]	; (8002768 <prvCheckForValidListAndQueue+0x68>)
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fbb6 	bl	8000eb8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800274c:	f7fd ffd0 	bl	80006f0 <vPortExitCritical>
    }
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200001e0 	.word	0x200001e0
 8002758:	200001b0 	.word	0x200001b0
 800275c:	200001c4 	.word	0x200001c4
 8002760:	200001d8 	.word	0x200001d8
 8002764:	200001dc 	.word	0x200001dc
 8002768:	08003c50 	.word	0x08003c50

0800276c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800276c:	f7fe fd04 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002770:	480b      	ldr	r0, [pc, #44]	; (80027a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002772:	490c      	ldr	r1, [pc, #48]	; (80027a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002774:	4a0c      	ldr	r2, [pc, #48]	; (80027a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002778:	e002      	b.n	8002780 <LoopCopyDataInit>

0800277a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800277c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800277e:	3304      	adds	r3, #4

08002780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002784:	d3f9      	bcc.n	800277a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002788:	4c09      	ldr	r4, [pc, #36]	; (80027b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800278c:	e001      	b.n	8002792 <LoopFillZerobss>

0800278e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800278e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002790:	3204      	adds	r2, #4

08002792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002794:	d3fb      	bcc.n	800278e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002796:	f001 f937 	bl	8003a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800279a:	f7fd fdb1 	bl	8000300 <main>
  bx lr
 800279e:	4770      	bx	lr
  ldr r0, =_sdata
 80027a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80027a8:	08003c8c 	.word	0x08003c8c
  ldr r2, =_sbss
 80027ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80027b0:	20000290 	.word	0x20000290

080027b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027b4:	e7fe      	b.n	80027b4 <ADC1_2_IRQHandler>
	...

080027b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027bc:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_Init+0x28>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a07      	ldr	r2, [pc, #28]	; (80027e0 <HAL_Init+0x28>)
 80027c2:	f043 0310 	orr.w	r3, r3, #16
 80027c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027c8:	2003      	movs	r0, #3
 80027ca:	f000 f8d1 	bl	8002970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe fc26 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d4:	f7fe fbf2 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40022000 	.word	0x40022000

080027e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_IncTick+0x1c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_IncTick+0x20>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a03      	ldr	r2, [pc, #12]	; (8002804 <HAL_IncTick+0x20>)
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000010 	.word	0x20000010
 8002804:	2000027c 	.word	0x2000027c

08002808 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return uwTick;
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <HAL_GetTick+0x10>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr
 8002818:	2000027c 	.word	0x2000027c

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284e:	4a04      	ldr	r2, [pc, #16]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	60d3      	str	r3, [r2, #12]
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	db0b      	blt.n	80028aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <__NVIC_EnableIRQ+0x34>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2001      	movs	r0, #1
 80028a2:	fa00 f202 	lsl.w	r2, r0, r2
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	db0a      	blt.n	80028e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	490c      	ldr	r1, [pc, #48]	; (8002904 <__NVIC_SetPriority+0x4c>)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	440b      	add	r3, r1
 80028dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e0:	e00a      	b.n	80028f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4908      	ldr	r1, [pc, #32]	; (8002908 <__NVIC_SetPriority+0x50>)
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3b04      	subs	r3, #4
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	761a      	strb	r2, [r3, #24]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000e100 	.word	0xe000e100
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	; 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f1c3 0307 	rsb	r3, r3, #7
 8002926:	2b04      	cmp	r3, #4
 8002928:	bf28      	it	cs
 800292a:	2304      	movcs	r3, #4
 800292c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3304      	adds	r3, #4
 8002932:	2b06      	cmp	r3, #6
 8002934:	d902      	bls.n	800293c <NVIC_EncodePriority+0x30>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3b03      	subs	r3, #3
 800293a:	e000      	b.n	800293e <NVIC_EncodePriority+0x32>
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002940:	f04f 32ff 	mov.w	r2, #4294967295
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	401a      	ands	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	43d9      	mvns	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002964:	4313      	orrs	r3, r2
         );
}
 8002966:	4618      	mov	r0, r3
 8002968:	3724      	adds	r7, #36	; 0x24
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff4f 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff64 	bl	8002864 <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ffb2 	bl	800290c <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff81 	bl	80028b8 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff57 	bl	8002880 <__NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029dc:	b480      	push	{r7}
 80029de:	b08b      	sub	sp, #44	; 0x2c
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ee:	e169      	b.n	8002cc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029f0:	2201      	movs	r2, #1
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f040 8158 	bne.w	8002cbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4a9a      	ldr	r2, [pc, #616]	; (8002c7c <HAL_GPIO_Init+0x2a0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d05e      	beq.n	8002ad6 <HAL_GPIO_Init+0xfa>
 8002a18:	4a98      	ldr	r2, [pc, #608]	; (8002c7c <HAL_GPIO_Init+0x2a0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d875      	bhi.n	8002b0a <HAL_GPIO_Init+0x12e>
 8002a1e:	4a98      	ldr	r2, [pc, #608]	; (8002c80 <HAL_GPIO_Init+0x2a4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d058      	beq.n	8002ad6 <HAL_GPIO_Init+0xfa>
 8002a24:	4a96      	ldr	r2, [pc, #600]	; (8002c80 <HAL_GPIO_Init+0x2a4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d86f      	bhi.n	8002b0a <HAL_GPIO_Init+0x12e>
 8002a2a:	4a96      	ldr	r2, [pc, #600]	; (8002c84 <HAL_GPIO_Init+0x2a8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d052      	beq.n	8002ad6 <HAL_GPIO_Init+0xfa>
 8002a30:	4a94      	ldr	r2, [pc, #592]	; (8002c84 <HAL_GPIO_Init+0x2a8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d869      	bhi.n	8002b0a <HAL_GPIO_Init+0x12e>
 8002a36:	4a94      	ldr	r2, [pc, #592]	; (8002c88 <HAL_GPIO_Init+0x2ac>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d04c      	beq.n	8002ad6 <HAL_GPIO_Init+0xfa>
 8002a3c:	4a92      	ldr	r2, [pc, #584]	; (8002c88 <HAL_GPIO_Init+0x2ac>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d863      	bhi.n	8002b0a <HAL_GPIO_Init+0x12e>
 8002a42:	4a92      	ldr	r2, [pc, #584]	; (8002c8c <HAL_GPIO_Init+0x2b0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d046      	beq.n	8002ad6 <HAL_GPIO_Init+0xfa>
 8002a48:	4a90      	ldr	r2, [pc, #576]	; (8002c8c <HAL_GPIO_Init+0x2b0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d85d      	bhi.n	8002b0a <HAL_GPIO_Init+0x12e>
 8002a4e:	2b12      	cmp	r3, #18
 8002a50:	d82a      	bhi.n	8002aa8 <HAL_GPIO_Init+0xcc>
 8002a52:	2b12      	cmp	r3, #18
 8002a54:	d859      	bhi.n	8002b0a <HAL_GPIO_Init+0x12e>
 8002a56:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <HAL_GPIO_Init+0x80>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002ad7 	.word	0x08002ad7
 8002a60:	08002ab1 	.word	0x08002ab1
 8002a64:	08002ac3 	.word	0x08002ac3
 8002a68:	08002b05 	.word	0x08002b05
 8002a6c:	08002b0b 	.word	0x08002b0b
 8002a70:	08002b0b 	.word	0x08002b0b
 8002a74:	08002b0b 	.word	0x08002b0b
 8002a78:	08002b0b 	.word	0x08002b0b
 8002a7c:	08002b0b 	.word	0x08002b0b
 8002a80:	08002b0b 	.word	0x08002b0b
 8002a84:	08002b0b 	.word	0x08002b0b
 8002a88:	08002b0b 	.word	0x08002b0b
 8002a8c:	08002b0b 	.word	0x08002b0b
 8002a90:	08002b0b 	.word	0x08002b0b
 8002a94:	08002b0b 	.word	0x08002b0b
 8002a98:	08002b0b 	.word	0x08002b0b
 8002a9c:	08002b0b 	.word	0x08002b0b
 8002aa0:	08002ab9 	.word	0x08002ab9
 8002aa4:	08002acd 	.word	0x08002acd
 8002aa8:	4a79      	ldr	r2, [pc, #484]	; (8002c90 <HAL_GPIO_Init+0x2b4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aae:	e02c      	b.n	8002b0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	623b      	str	r3, [r7, #32]
          break;
 8002ab6:	e029      	b.n	8002b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	3304      	adds	r3, #4
 8002abe:	623b      	str	r3, [r7, #32]
          break;
 8002ac0:	e024      	b.n	8002b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	623b      	str	r3, [r7, #32]
          break;
 8002aca:	e01f      	b.n	8002b0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	330c      	adds	r3, #12
 8002ad2:	623b      	str	r3, [r7, #32]
          break;
 8002ad4:	e01a      	b.n	8002b0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d102      	bne.n	8002ae4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ade:	2304      	movs	r3, #4
 8002ae0:	623b      	str	r3, [r7, #32]
          break;
 8002ae2:	e013      	b.n	8002b0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aec:	2308      	movs	r3, #8
 8002aee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	611a      	str	r2, [r3, #16]
          break;
 8002af6:	e009      	b.n	8002b0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af8:	2308      	movs	r3, #8
 8002afa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	615a      	str	r2, [r3, #20]
          break;
 8002b02:	e003      	b.n	8002b0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b04:	2300      	movs	r3, #0
 8002b06:	623b      	str	r3, [r7, #32]
          break;
 8002b08:	e000      	b.n	8002b0c <HAL_GPIO_Init+0x130>
          break;
 8002b0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	2bff      	cmp	r3, #255	; 0xff
 8002b10:	d801      	bhi.n	8002b16 <HAL_GPIO_Init+0x13a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	e001      	b.n	8002b1a <HAL_GPIO_Init+0x13e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2bff      	cmp	r3, #255	; 0xff
 8002b20:	d802      	bhi.n	8002b28 <HAL_GPIO_Init+0x14c>
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0x152>
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	3b08      	subs	r3, #8
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	210f      	movs	r1, #15
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	6a39      	ldr	r1, [r7, #32]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80b1 	beq.w	8002cbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b5c:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <HAL_GPIO_Init+0x2b8>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_GPIO_Init+0x2b8>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6193      	str	r3, [r2, #24]
 8002b68:	4b4a      	ldr	r3, [pc, #296]	; (8002c94 <HAL_GPIO_Init+0x2b8>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b74:	4a48      	ldr	r2, [pc, #288]	; (8002c98 <HAL_GPIO_Init+0x2bc>)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a40      	ldr	r2, [pc, #256]	; (8002c9c <HAL_GPIO_Init+0x2c0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <HAL_GPIO_Init+0x1ec>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3f      	ldr	r2, [pc, #252]	; (8002ca0 <HAL_GPIO_Init+0x2c4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_GPIO_Init+0x1e8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3e      	ldr	r2, [pc, #248]	; (8002ca4 <HAL_GPIO_Init+0x2c8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d007      	beq.n	8002bc0 <HAL_GPIO_Init+0x1e4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3d      	ldr	r2, [pc, #244]	; (8002ca8 <HAL_GPIO_Init+0x2cc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d101      	bne.n	8002bbc <HAL_GPIO_Init+0x1e0>
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e006      	b.n	8002bca <HAL_GPIO_Init+0x1ee>
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	e004      	b.n	8002bca <HAL_GPIO_Init+0x1ee>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e002      	b.n	8002bca <HAL_GPIO_Init+0x1ee>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_GPIO_Init+0x1ee>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bcc:	f002 0203 	and.w	r2, r2, #3
 8002bd0:	0092      	lsls	r2, r2, #2
 8002bd2:	4093      	lsls	r3, r2
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bda:	492f      	ldr	r1, [pc, #188]	; (8002c98 <HAL_GPIO_Init+0x2bc>)
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d006      	beq.n	8002c02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	492c      	ldr	r1, [pc, #176]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c02:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	4928      	ldr	r1, [pc, #160]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c1c:	4b23      	ldr	r3, [pc, #140]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	4922      	ldr	r1, [pc, #136]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60cb      	str	r3, [r1, #12]
 8002c28:	e006      	b.n	8002c38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c2a:	4b20      	ldr	r3, [pc, #128]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	491e      	ldr	r1, [pc, #120]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d006      	beq.n	8002c52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4918      	ldr	r1, [pc, #96]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	4914      	ldr	r1, [pc, #80]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d021      	beq.n	8002cb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	490e      	ldr	r1, [pc, #56]	; (8002cac <HAL_GPIO_Init+0x2d0>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]
 8002c78:	e021      	b.n	8002cbe <HAL_GPIO_Init+0x2e2>
 8002c7a:	bf00      	nop
 8002c7c:	10320000 	.word	0x10320000
 8002c80:	10310000 	.word	0x10310000
 8002c84:	10220000 	.word	0x10220000
 8002c88:	10210000 	.word	0x10210000
 8002c8c:	10120000 	.word	0x10120000
 8002c90:	10110000 	.word	0x10110000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40010800 	.word	0x40010800
 8002ca0:	40010c00 	.word	0x40010c00
 8002ca4:	40011000 	.word	0x40011000
 8002ca8:	40011400 	.word	0x40011400
 8002cac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_GPIO_Init+0x304>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	4909      	ldr	r1, [pc, #36]	; (8002ce0 <HAL_GPIO_Init+0x304>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f47f ae8e 	bne.w	80029f0 <HAL_GPIO_Init+0x14>
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	bf00      	nop
 8002cd8:	372c      	adds	r7, #44	; 0x2c
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	40010400 	.word	0x40010400

08002ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf4:	787b      	ldrb	r3, [r7, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d00:	e003      	b.n	8002d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	611a      	str	r2, [r3, #16]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e26c      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8087 	beq.w	8002e42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d34:	4b92      	ldr	r3, [pc, #584]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d00c      	beq.n	8002d5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d112      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5e>
 8002d4c:	4b8c      	ldr	r3, [pc, #560]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d10b      	bne.n	8002d72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5a:	4b89      	ldr	r3, [pc, #548]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d06c      	beq.n	8002e40 <HAL_RCC_OscConfig+0x12c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d168      	bne.n	8002e40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e246      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x76>
 8002d7c:	4b80      	ldr	r3, [pc, #512]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a7f      	ldr	r2, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	e02e      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x98>
 8002d92:	4b7b      	ldr	r3, [pc, #492]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a7a      	ldr	r2, [pc, #488]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a77      	ldr	r2, [pc, #476]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	e01d      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0xbc>
 8002db6:	4b72      	ldr	r3, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a71      	ldr	r2, [pc, #452]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6e      	ldr	r2, [pc, #440]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e00b      	b.n	8002de8 <HAL_RCC_OscConfig+0xd4>
 8002dd0:	4b6b      	ldr	r3, [pc, #428]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6a      	ldr	r2, [pc, #424]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b68      	ldr	r3, [pc, #416]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a67      	ldr	r2, [pc, #412]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d013      	beq.n	8002e18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff fd0a 	bl	8002808 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff fd06 	bl	8002808 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1fa      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b5d      	ldr	r3, [pc, #372]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0xe4>
 8002e16:	e014      	b.n	8002e42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7ff fcf6 	bl	8002808 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e20:	f7ff fcf2 	bl	8002808 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	; 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e1e6      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x10c>
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d063      	beq.n	8002f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e4e:	4b4c      	ldr	r3, [pc, #304]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00b      	beq.n	8002e72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e5a:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11c      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x18c>
 8002e66:	4b46      	ldr	r3, [pc, #280]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d116      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	4b43      	ldr	r3, [pc, #268]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_RCC_OscConfig+0x176>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e1ba      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4939      	ldr	r1, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	e03a      	b.n	8002f16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea8:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7ff fcab 	bl	8002808 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb6:	f7ff fca7 	bl	8002808 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e19b      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4927      	ldr	r1, [pc, #156]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e015      	b.n	8002f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <HAL_RCC_OscConfig+0x270>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fc8a 	bl	8002808 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef8:	f7ff fc86 	bl	8002808 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e17a      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03a      	beq.n	8002f98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d019      	beq.n	8002f5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7ff fc6a 	bl	8002808 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7ff fc66 	bl	8002808 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e15a      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f000 fae8 	bl	800352c <RCC_Delay>
 8002f5c:	e01c      	b.n	8002f98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <HAL_RCC_OscConfig+0x274>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f64:	f7ff fc50 	bl	8002808 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6a:	e00f      	b.n	8002f8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7ff fc4c 	bl	8002808 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d908      	bls.n	8002f8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e140      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	42420000 	.word	0x42420000
 8002f88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	4b9e      	ldr	r3, [pc, #632]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e9      	bne.n	8002f6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a6 	beq.w	80030f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002faa:	4b97      	ldr	r3, [pc, #604]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10d      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b94      	ldr	r3, [pc, #592]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a93      	ldr	r2, [pc, #588]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]
 8002fc2:	4b91      	ldr	r3, [pc, #580]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	4b8e      	ldr	r3, [pc, #568]	; (800320c <HAL_RCC_OscConfig+0x4f8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d118      	bne.n	8003010 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fde:	4b8b      	ldr	r3, [pc, #556]	; (800320c <HAL_RCC_OscConfig+0x4f8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a8a      	ldr	r2, [pc, #552]	; (800320c <HAL_RCC_OscConfig+0x4f8>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fea:	f7ff fc0d 	bl	8002808 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff2:	f7ff fc09 	bl	8002808 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b64      	cmp	r3, #100	; 0x64
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0fd      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCC_OscConfig+0x4f8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d106      	bne.n	8003026 <HAL_RCC_OscConfig+0x312>
 8003018:	4b7b      	ldr	r3, [pc, #492]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4a7a      	ldr	r2, [pc, #488]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6213      	str	r3, [r2, #32]
 8003024:	e02d      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10c      	bne.n	8003048 <HAL_RCC_OscConfig+0x334>
 800302e:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a75      	ldr	r2, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	6213      	str	r3, [r2, #32]
 800303a:	4b73      	ldr	r3, [pc, #460]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a72      	ldr	r2, [pc, #456]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003040:	f023 0304 	bic.w	r3, r3, #4
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	e01c      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b05      	cmp	r3, #5
 800304e:	d10c      	bne.n	800306a <HAL_RCC_OscConfig+0x356>
 8003050:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4a6c      	ldr	r2, [pc, #432]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	6213      	str	r3, [r2, #32]
 800305c:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a69      	ldr	r2, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	e00b      	b.n	8003082 <HAL_RCC_OscConfig+0x36e>
 800306a:	4b67      	ldr	r3, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a66      	ldr	r2, [pc, #408]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	4b64      	ldr	r3, [pc, #400]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a63      	ldr	r2, [pc, #396]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d015      	beq.n	80030b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308a:	f7ff fbbd 	bl	8002808 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7ff fbb9 	bl	8002808 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0ab      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a8:	4b57      	ldr	r3, [pc, #348]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ee      	beq.n	8003092 <HAL_RCC_OscConfig+0x37e>
 80030b4:	e014      	b.n	80030e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b6:	f7ff fba7 	bl	8002808 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7ff fba3 	bl	8002808 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e095      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d4:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ee      	bne.n	80030be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d105      	bne.n	80030f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e6:	4b48      	ldr	r3, [pc, #288]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4a47      	ldr	r2, [pc, #284]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8081 	beq.w	80031fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030fc:	4b42      	ldr	r3, [pc, #264]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d061      	beq.n	80031cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d146      	bne.n	800319e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003110:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_OscConfig+0x4fc>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7ff fb77 	bl	8002808 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311e:	f7ff fb73 	bl	8002808 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e067      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003130:	4b35      	ldr	r3, [pc, #212]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f0      	bne.n	800311e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d108      	bne.n	8003158 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003146:	4b30      	ldr	r3, [pc, #192]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	492d      	ldr	r1, [pc, #180]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a19      	ldr	r1, [r3, #32]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	430b      	orrs	r3, r1
 800316a:	4927      	ldr	r1, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x4fc>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7ff fb47 	bl	8002808 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7ff fb43 	bl	8002808 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e037      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x46a>
 800319c:	e02f      	b.n	80031fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_RCC_OscConfig+0x4fc>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a4:	f7ff fb30 	bl	8002808 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7ff fb2c 	bl	8002808 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e020      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x498>
 80031ca:	e018      	b.n	80031fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e013      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_OscConfig+0x4f4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d106      	bne.n	80031fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d001      	beq.n	80031fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
 8003210:	42420060 	.word	0x42420060

08003214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0d0      	b.n	80033ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003228:	4b6a      	ldr	r3, [pc, #424]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d910      	bls.n	8003258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b67      	ldr	r3, [pc, #412]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 0207 	bic.w	r2, r3, #7
 800323e:	4965      	ldr	r1, [pc, #404]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b8      	b.n	80033ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003270:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4a58      	ldr	r2, [pc, #352]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800327a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003288:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003292:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	494d      	ldr	r1, [pc, #308]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d040      	beq.n	8003334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d115      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d107      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d2:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e073      	b.n	80033ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06b      	b.n	80033ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f2:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f023 0203 	bic.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4936      	ldr	r1, [pc, #216]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003304:	f7ff fa80 	bl	8002808 <HAL_GetTick>
 8003308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	e00a      	b.n	8003322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330c:	f7ff fa7c 	bl	8002808 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e053      	b.n	80033ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003322:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 020c 	and.w	r2, r3, #12
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	429a      	cmp	r2, r3
 8003332:	d1eb      	bne.n	800330c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003334:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d210      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 0207 	bic.w	r2, r3, #7
 800334a:	4922      	ldr	r1, [pc, #136]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e032      	b.n	80033ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4916      	ldr	r1, [pc, #88]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	490e      	ldr	r1, [pc, #56]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033a2:	f000 f821 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	490a      	ldr	r1, [pc, #40]	; (80033dc <HAL_RCC_ClockConfig+0x1c8>)
 80033b4:	5ccb      	ldrb	r3, [r1, r3]
 80033b6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1cc>)
 80033bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1d0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fe2c 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40022000 	.word	0x40022000
 80033d8:	40021000 	.word	0x40021000
 80033dc:	08003c58 	.word	0x08003c58
 80033e0:	20000004 	.word	0x20000004
 80033e4:	2000000c 	.word	0x2000000c

080033e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003402:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_RCC_GetSysClockFreq+0x94>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b04      	cmp	r3, #4
 8003410:	d002      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x30>
 8003412:	2b08      	cmp	r3, #8
 8003414:	d003      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0x36>
 8003416:	e027      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_RCC_GetSysClockFreq+0x98>)
 800341a:	613b      	str	r3, [r7, #16]
      break;
 800341c:	e027      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	0c9b      	lsrs	r3, r3, #18
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	4a17      	ldr	r2, [pc, #92]	; (8003484 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003428:	5cd3      	ldrb	r3, [r2, r3]
 800342a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_RCC_GetSysClockFreq+0x94>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	0c5b      	lsrs	r3, r3, #17
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	4a11      	ldr	r2, [pc, #68]	; (8003488 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003442:	5cd3      	ldrb	r3, [r2, r3]
 8003444:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <HAL_RCC_GetSysClockFreq+0x98>)
 800344a:	fb02 f203 	mul.w	r2, r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e004      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a0c      	ldr	r2, [pc, #48]	; (800348c <HAL_RCC_GetSysClockFreq+0xa4>)
 800345c:	fb02 f303 	mul.w	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	613b      	str	r3, [r7, #16]
      break;
 8003466:	e002      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetSysClockFreq+0x98>)
 800346a:	613b      	str	r3, [r7, #16]
      break;
 800346c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346e:	693b      	ldr	r3, [r7, #16]
}
 8003470:	4618      	mov	r0, r3
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	007a1200 	.word	0x007a1200
 8003484:	08003c70 	.word	0x08003c70
 8003488:	08003c80 	.word	0x08003c80
 800348c:	003d0900 	.word	0x003d0900

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b02      	ldr	r3, [pc, #8]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	20000004 	.word	0x20000004

080034a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a8:	f7ff fff2 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	0adb      	lsrs	r3, r3, #11
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	4903      	ldr	r1, [pc, #12]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ba:	5ccb      	ldrb	r3, [r1, r3]
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	08003c68 	.word	0x08003c68

080034cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	220f      	movs	r2, #15
 80034da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <HAL_RCC_GetClockConfig+0x58>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034e8:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <HAL_RCC_GetClockConfig+0x58>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_GetClockConfig+0x58>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_RCC_GetClockConfig+0x58>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	08db      	lsrs	r3, r3, #3
 8003506:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetClockConfig+0x5c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0207 	and.w	r2, r3, #7
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	40021000 	.word	0x40021000
 8003528:	40022000 	.word	0x40022000

0800352c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003534:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <RCC_Delay+0x34>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <RCC_Delay+0x38>)
 800353a:	fba2 2303 	umull	r2, r3, r2, r3
 800353e:	0a5b      	lsrs	r3, r3, #9
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	fb02 f303 	mul.w	r3, r2, r3
 8003546:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003548:	bf00      	nop
  }
  while (Delay --);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	60fa      	str	r2, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1f9      	bne.n	8003548 <RCC_Delay+0x1c>
}
 8003554:	bf00      	nop
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	20000004 	.word	0x20000004
 8003564:	10624dd3 	.word	0x10624dd3

08003568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e041      	b.n	80035fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d106      	bne.n	8003594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f839 	bl	8003606 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	4619      	mov	r1, r3
 80035a6:	4610      	mov	r0, r2
 80035a8:	f000 f9b4 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e03a      	b.n	80036a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_TIM_Base_Start_IT+0x98>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00e      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x58>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d009      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x58>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d004      	beq.n	8003670 <HAL_TIM_Base_Start_IT+0x58>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d111      	bne.n	8003694 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b06      	cmp	r3, #6
 8003680:	d010      	beq.n	80036a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	e007      	b.n	80036a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800

080036bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d122      	bne.n	8003718 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d11b      	bne.n	8003718 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0202 	mvn.w	r2, #2
 80036e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f8ed 	bl	80038de <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f8e0 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f8ef 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d122      	bne.n	800376c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d11b      	bne.n	800376c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0204 	mvn.w	r2, #4
 800373c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8c3 	bl	80038de <HAL_TIM_IC_CaptureCallback>
 8003758:	e005      	b.n	8003766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8b6 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f8c5 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b08      	cmp	r3, #8
 8003778:	d122      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b08      	cmp	r3, #8
 8003786:	d11b      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0208 	mvn.w	r2, #8
 8003790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2204      	movs	r2, #4
 8003796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f899 	bl	80038de <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f88c 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f89b 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d122      	bne.n	8003814 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b10      	cmp	r3, #16
 80037da:	d11b      	bne.n	8003814 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0210 	mvn.w	r2, #16
 80037e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2208      	movs	r2, #8
 80037ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f86f 	bl	80038de <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f862 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f871 	bl	80038f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0201 	mvn.w	r2, #1
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fc fe1c 	bl	8000478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d10e      	bne.n	800386c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	2b80      	cmp	r3, #128	; 0x80
 800385a:	d107      	bne.n	800386c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8bf 	bl	80039ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d10e      	bne.n	8003898 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d107      	bne.n	8003898 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f835 	bl	8003902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d10e      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d107      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0220 	mvn.w	r2, #32
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f88a 	bl	80039d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a29      	ldr	r2, [pc, #164]	; (80039cc <TIM_Base_SetConfig+0xb8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00b      	beq.n	8003944 <TIM_Base_SetConfig+0x30>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003932:	d007      	beq.n	8003944 <TIM_Base_SetConfig+0x30>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <TIM_Base_SetConfig+0xbc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d003      	beq.n	8003944 <TIM_Base_SetConfig+0x30>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a25      	ldr	r2, [pc, #148]	; (80039d4 <TIM_Base_SetConfig+0xc0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d108      	bne.n	8003956 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <TIM_Base_SetConfig+0xb8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00b      	beq.n	8003976 <TIM_Base_SetConfig+0x62>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003964:	d007      	beq.n	8003976 <TIM_Base_SetConfig+0x62>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <TIM_Base_SetConfig+0xbc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d003      	beq.n	8003976 <TIM_Base_SetConfig+0x62>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <TIM_Base_SetConfig+0xc0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d108      	bne.n	8003988 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a07      	ldr	r2, [pc, #28]	; (80039cc <TIM_Base_SetConfig+0xb8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d103      	bne.n	80039bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	615a      	str	r2, [r3, #20]
}
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800

080039d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <__errno>:
 80039fc:	4b01      	ldr	r3, [pc, #4]	; (8003a04 <__errno+0x8>)
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000014 	.word	0x20000014

08003a08 <__libc_init_array>:
 8003a08:	b570      	push	{r4, r5, r6, lr}
 8003a0a:	2600      	movs	r6, #0
 8003a0c:	4d0c      	ldr	r5, [pc, #48]	; (8003a40 <__libc_init_array+0x38>)
 8003a0e:	4c0d      	ldr	r4, [pc, #52]	; (8003a44 <__libc_init_array+0x3c>)
 8003a10:	1b64      	subs	r4, r4, r5
 8003a12:	10a4      	asrs	r4, r4, #2
 8003a14:	42a6      	cmp	r6, r4
 8003a16:	d109      	bne.n	8003a2c <__libc_init_array+0x24>
 8003a18:	f000 f904 	bl	8003c24 <_init>
 8003a1c:	2600      	movs	r6, #0
 8003a1e:	4d0a      	ldr	r5, [pc, #40]	; (8003a48 <__libc_init_array+0x40>)
 8003a20:	4c0a      	ldr	r4, [pc, #40]	; (8003a4c <__libc_init_array+0x44>)
 8003a22:	1b64      	subs	r4, r4, r5
 8003a24:	10a4      	asrs	r4, r4, #2
 8003a26:	42a6      	cmp	r6, r4
 8003a28:	d105      	bne.n	8003a36 <__libc_init_array+0x2e>
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a30:	4798      	blx	r3
 8003a32:	3601      	adds	r6, #1
 8003a34:	e7ee      	b.n	8003a14 <__libc_init_array+0xc>
 8003a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3a:	4798      	blx	r3
 8003a3c:	3601      	adds	r6, #1
 8003a3e:	e7f2      	b.n	8003a26 <__libc_init_array+0x1e>
 8003a40:	08003c84 	.word	0x08003c84
 8003a44:	08003c84 	.word	0x08003c84
 8003a48:	08003c84 	.word	0x08003c84
 8003a4c:	08003c88 	.word	0x08003c88

08003a50 <malloc>:
 8003a50:	4b02      	ldr	r3, [pc, #8]	; (8003a5c <malloc+0xc>)
 8003a52:	4601      	mov	r1, r0
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	f000 b86d 	b.w	8003b34 <_malloc_r>
 8003a5a:	bf00      	nop
 8003a5c:	20000014 	.word	0x20000014

08003a60 <free>:
 8003a60:	4b02      	ldr	r3, [pc, #8]	; (8003a6c <free+0xc>)
 8003a62:	4601      	mov	r1, r0
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	f000 b819 	b.w	8003a9c <_free_r>
 8003a6a:	bf00      	nop
 8003a6c:	20000014 	.word	0x20000014

08003a70 <memcpy>:
 8003a70:	440a      	add	r2, r1
 8003a72:	4291      	cmp	r1, r2
 8003a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a78:	d100      	bne.n	8003a7c <memcpy+0xc>
 8003a7a:	4770      	bx	lr
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a82:	4291      	cmp	r1, r2
 8003a84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a88:	d1f9      	bne.n	8003a7e <memcpy+0xe>
 8003a8a:	bd10      	pop	{r4, pc}

08003a8c <memset>:
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4402      	add	r2, r0
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d100      	bne.n	8003a96 <memset+0xa>
 8003a94:	4770      	bx	lr
 8003a96:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9a:	e7f9      	b.n	8003a90 <memset+0x4>

08003a9c <_free_r>:
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	4605      	mov	r5, r0
 8003aa0:	2900      	cmp	r1, #0
 8003aa2:	d043      	beq.n	8003b2c <_free_r+0x90>
 8003aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aa8:	1f0c      	subs	r4, r1, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bfb8      	it	lt
 8003aae:	18e4      	addlt	r4, r4, r3
 8003ab0:	f000 f8aa 	bl	8003c08 <__malloc_lock>
 8003ab4:	4a1e      	ldr	r2, [pc, #120]	; (8003b30 <_free_r+0x94>)
 8003ab6:	6813      	ldr	r3, [r2, #0]
 8003ab8:	4610      	mov	r0, r2
 8003aba:	b933      	cbnz	r3, 8003aca <_free_r+0x2e>
 8003abc:	6063      	str	r3, [r4, #4]
 8003abe:	6014      	str	r4, [r2, #0]
 8003ac0:	4628      	mov	r0, r5
 8003ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ac6:	f000 b8a5 	b.w	8003c14 <__malloc_unlock>
 8003aca:	42a3      	cmp	r3, r4
 8003acc:	d90a      	bls.n	8003ae4 <_free_r+0x48>
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	1862      	adds	r2, r4, r1
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	bf01      	itttt	eq
 8003ad6:	681a      	ldreq	r2, [r3, #0]
 8003ad8:	685b      	ldreq	r3, [r3, #4]
 8003ada:	1852      	addeq	r2, r2, r1
 8003adc:	6022      	streq	r2, [r4, #0]
 8003ade:	6063      	str	r3, [r4, #4]
 8003ae0:	6004      	str	r4, [r0, #0]
 8003ae2:	e7ed      	b.n	8003ac0 <_free_r+0x24>
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	b10b      	cbz	r3, 8003aee <_free_r+0x52>
 8003aea:	42a3      	cmp	r3, r4
 8003aec:	d9fa      	bls.n	8003ae4 <_free_r+0x48>
 8003aee:	6811      	ldr	r1, [r2, #0]
 8003af0:	1850      	adds	r0, r2, r1
 8003af2:	42a0      	cmp	r0, r4
 8003af4:	d10b      	bne.n	8003b0e <_free_r+0x72>
 8003af6:	6820      	ldr	r0, [r4, #0]
 8003af8:	4401      	add	r1, r0
 8003afa:	1850      	adds	r0, r2, r1
 8003afc:	4283      	cmp	r3, r0
 8003afe:	6011      	str	r1, [r2, #0]
 8003b00:	d1de      	bne.n	8003ac0 <_free_r+0x24>
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4401      	add	r1, r0
 8003b08:	6011      	str	r1, [r2, #0]
 8003b0a:	6053      	str	r3, [r2, #4]
 8003b0c:	e7d8      	b.n	8003ac0 <_free_r+0x24>
 8003b0e:	d902      	bls.n	8003b16 <_free_r+0x7a>
 8003b10:	230c      	movs	r3, #12
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	e7d4      	b.n	8003ac0 <_free_r+0x24>
 8003b16:	6820      	ldr	r0, [r4, #0]
 8003b18:	1821      	adds	r1, r4, r0
 8003b1a:	428b      	cmp	r3, r1
 8003b1c:	bf01      	itttt	eq
 8003b1e:	6819      	ldreq	r1, [r3, #0]
 8003b20:	685b      	ldreq	r3, [r3, #4]
 8003b22:	1809      	addeq	r1, r1, r0
 8003b24:	6021      	streq	r1, [r4, #0]
 8003b26:	6063      	str	r3, [r4, #4]
 8003b28:	6054      	str	r4, [r2, #4]
 8003b2a:	e7c9      	b.n	8003ac0 <_free_r+0x24>
 8003b2c:	bd38      	pop	{r3, r4, r5, pc}
 8003b2e:	bf00      	nop
 8003b30:	200001ec 	.word	0x200001ec

08003b34 <_malloc_r>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	1ccd      	adds	r5, r1, #3
 8003b38:	f025 0503 	bic.w	r5, r5, #3
 8003b3c:	3508      	adds	r5, #8
 8003b3e:	2d0c      	cmp	r5, #12
 8003b40:	bf38      	it	cc
 8003b42:	250c      	movcc	r5, #12
 8003b44:	2d00      	cmp	r5, #0
 8003b46:	4606      	mov	r6, r0
 8003b48:	db01      	blt.n	8003b4e <_malloc_r+0x1a>
 8003b4a:	42a9      	cmp	r1, r5
 8003b4c:	d903      	bls.n	8003b56 <_malloc_r+0x22>
 8003b4e:	230c      	movs	r3, #12
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	2000      	movs	r0, #0
 8003b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b56:	f000 f857 	bl	8003c08 <__malloc_lock>
 8003b5a:	4921      	ldr	r1, [pc, #132]	; (8003be0 <_malloc_r+0xac>)
 8003b5c:	680a      	ldr	r2, [r1, #0]
 8003b5e:	4614      	mov	r4, r2
 8003b60:	b99c      	cbnz	r4, 8003b8a <_malloc_r+0x56>
 8003b62:	4f20      	ldr	r7, [pc, #128]	; (8003be4 <_malloc_r+0xb0>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	b923      	cbnz	r3, 8003b72 <_malloc_r+0x3e>
 8003b68:	4621      	mov	r1, r4
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f000 f83c 	bl	8003be8 <_sbrk_r>
 8003b70:	6038      	str	r0, [r7, #0]
 8003b72:	4629      	mov	r1, r5
 8003b74:	4630      	mov	r0, r6
 8003b76:	f000 f837 	bl	8003be8 <_sbrk_r>
 8003b7a:	1c43      	adds	r3, r0, #1
 8003b7c:	d123      	bne.n	8003bc6 <_malloc_r+0x92>
 8003b7e:	230c      	movs	r3, #12
 8003b80:	4630      	mov	r0, r6
 8003b82:	6033      	str	r3, [r6, #0]
 8003b84:	f000 f846 	bl	8003c14 <__malloc_unlock>
 8003b88:	e7e3      	b.n	8003b52 <_malloc_r+0x1e>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	1b5b      	subs	r3, r3, r5
 8003b8e:	d417      	bmi.n	8003bc0 <_malloc_r+0x8c>
 8003b90:	2b0b      	cmp	r3, #11
 8003b92:	d903      	bls.n	8003b9c <_malloc_r+0x68>
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	441c      	add	r4, r3
 8003b98:	6025      	str	r5, [r4, #0]
 8003b9a:	e004      	b.n	8003ba6 <_malloc_r+0x72>
 8003b9c:	6863      	ldr	r3, [r4, #4]
 8003b9e:	42a2      	cmp	r2, r4
 8003ba0:	bf0c      	ite	eq
 8003ba2:	600b      	streq	r3, [r1, #0]
 8003ba4:	6053      	strne	r3, [r2, #4]
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f000 f834 	bl	8003c14 <__malloc_unlock>
 8003bac:	f104 000b 	add.w	r0, r4, #11
 8003bb0:	1d23      	adds	r3, r4, #4
 8003bb2:	f020 0007 	bic.w	r0, r0, #7
 8003bb6:	1ac2      	subs	r2, r0, r3
 8003bb8:	d0cc      	beq.n	8003b54 <_malloc_r+0x20>
 8003bba:	1a1b      	subs	r3, r3, r0
 8003bbc:	50a3      	str	r3, [r4, r2]
 8003bbe:	e7c9      	b.n	8003b54 <_malloc_r+0x20>
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	6864      	ldr	r4, [r4, #4]
 8003bc4:	e7cc      	b.n	8003b60 <_malloc_r+0x2c>
 8003bc6:	1cc4      	adds	r4, r0, #3
 8003bc8:	f024 0403 	bic.w	r4, r4, #3
 8003bcc:	42a0      	cmp	r0, r4
 8003bce:	d0e3      	beq.n	8003b98 <_malloc_r+0x64>
 8003bd0:	1a21      	subs	r1, r4, r0
 8003bd2:	4630      	mov	r0, r6
 8003bd4:	f000 f808 	bl	8003be8 <_sbrk_r>
 8003bd8:	3001      	adds	r0, #1
 8003bda:	d1dd      	bne.n	8003b98 <_malloc_r+0x64>
 8003bdc:	e7cf      	b.n	8003b7e <_malloc_r+0x4a>
 8003bde:	bf00      	nop
 8003be0:	200001ec 	.word	0x200001ec
 8003be4:	200001f0 	.word	0x200001f0

08003be8 <_sbrk_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	2300      	movs	r3, #0
 8003bec:	4d05      	ldr	r5, [pc, #20]	; (8003c04 <_sbrk_r+0x1c>)
 8003bee:	4604      	mov	r4, r0
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	602b      	str	r3, [r5, #0]
 8003bf4:	f7fd fa8a 	bl	800110c <_sbrk>
 8003bf8:	1c43      	adds	r3, r0, #1
 8003bfa:	d102      	bne.n	8003c02 <_sbrk_r+0x1a>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	b103      	cbz	r3, 8003c02 <_sbrk_r+0x1a>
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	20000280 	.word	0x20000280

08003c08 <__malloc_lock>:
 8003c08:	4801      	ldr	r0, [pc, #4]	; (8003c10 <__malloc_lock+0x8>)
 8003c0a:	f000 b809 	b.w	8003c20 <__retarget_lock_acquire_recursive>
 8003c0e:	bf00      	nop
 8003c10:	20000288 	.word	0x20000288

08003c14 <__malloc_unlock>:
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <__malloc_unlock+0x8>)
 8003c16:	f000 b804 	b.w	8003c22 <__retarget_lock_release_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	20000288 	.word	0x20000288

08003c20 <__retarget_lock_acquire_recursive>:
 8003c20:	4770      	bx	lr

08003c22 <__retarget_lock_release_recursive>:
 8003c22:	4770      	bx	lr

08003c24 <_init>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	bf00      	nop
 8003c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2a:	bc08      	pop	{r3}
 8003c2c:	469e      	mov	lr, r3
 8003c2e:	4770      	bx	lr

08003c30 <_fini>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	bf00      	nop
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr
