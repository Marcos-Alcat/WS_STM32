
blinky_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f98  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f0  080040f0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080040f0  080040f0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040f0  080040f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080040f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000078  08004170  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004170  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011160  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b2  00000000  00000000  00031201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000339b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00034840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190a3  00000000  00000000  000355a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f483  00000000  00000000  0004e643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901b9  00000000  00000000  0005dac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edc7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000edcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004090 	.word	0x08004090

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004090 	.word	0x08004090

08000150 <WriteQueue>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void WriteQueue(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	uint32_t led_state = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]
	while(1){
		if (led_state) led_state = 0;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	2b00      	cmp	r3, #0
 8000160:	d002      	beq.n	8000168 <WriteQueue+0x18>
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
 8000166:	e001      	b.n	800016c <WriteQueue+0x1c>
		else led_state = 1;
 8000168:	2301      	movs	r3, #1
 800016a:	60fb      	str	r3, [r7, #12]
		xQueueSend(my_queue, &led_state, portMAX_DELAY);
 800016c:	4b06      	ldr	r3, [pc, #24]	; (8000188 <WriteQueue+0x38>)
 800016e:	6818      	ldr	r0, [r3, #0]
 8000170:	f107 010c 	add.w	r1, r7, #12
 8000174:	2300      	movs	r3, #0
 8000176:	f04f 32ff 	mov.w	r2, #4294967295
 800017a:	f001 fc35 	bl	80019e8 <xQueueGenericSend>
		vTaskDelay(1000);
 800017e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000182:	f002 f90d 	bl	80023a0 <vTaskDelay>
		if (led_state) led_state = 0;
 8000186:	e7e9      	b.n	800015c <WriteQueue+0xc>
 8000188:	200001f4 	.word	0x200001f4

0800018c <ReadQueue>:
	  }
}

static void ReadQueue(void *pvParameters){
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
	uint32_t read_value;
	while(1){
		xQueueReceive(my_queue, &read_value, portMAX_DELAY);
 8000194:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <ReadQueue+0x3c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f107 010c 	add.w	r1, r7, #12
 800019c:	f04f 32ff 	mov.w	r2, #4294967295
 80001a0:	4618      	mov	r0, r3
 80001a2:	f001 fd1f 	bl	8001be4 <xQueueReceive>
		if (read_value) HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	d006      	beq.n	80001ba <ReadQueue+0x2e>
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <ReadQueue+0x40>)
 80001b4:	f000 fc8a 	bl	8000acc <HAL_GPIO_WritePin>
 80001b8:	e7ec      	b.n	8000194 <ReadQueue+0x8>
		else HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c0:	4802      	ldr	r0, [pc, #8]	; (80001cc <ReadQueue+0x40>)
 80001c2:	f000 fc83 	bl	8000acc <HAL_GPIO_WritePin>
		xQueueReceive(my_queue, &read_value, portMAX_DELAY);
 80001c6:	e7e5      	b.n	8000194 <ReadQueue+0x8>
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	40011000 	.word	0x40011000

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 f9e3 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f82d 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f871 	bl	80002c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(WriteQueue, "", 100, NULL, 1, NULL);
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2301      	movs	r3, #1
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2300      	movs	r3, #0
 80001ec:	2264      	movs	r2, #100	; 0x64
 80001ee:	490e      	ldr	r1, [pc, #56]	; (8000228 <main+0x58>)
 80001f0:	480e      	ldr	r0, [pc, #56]	; (800022c <main+0x5c>)
 80001f2:	f001 ff69 	bl	80020c8 <xTaskCreate>
  xTaskCreate(ReadQueue, "", 100, NULL, 1, NULL);
 80001f6:	2300      	movs	r3, #0
 80001f8:	9301      	str	r3, [sp, #4]
 80001fa:	2301      	movs	r3, #1
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2300      	movs	r3, #0
 8000200:	2264      	movs	r2, #100	; 0x64
 8000202:	4909      	ldr	r1, [pc, #36]	; (8000228 <main+0x58>)
 8000204:	480a      	ldr	r0, [pc, #40]	; (8000230 <main+0x60>)
 8000206:	f001 ff5f 	bl	80020c8 <xTaskCreate>
  my_queue = xQueueCreate(1,sizeof(uint32_t));
 800020a:	2200      	movs	r2, #0
 800020c:	2104      	movs	r1, #4
 800020e:	2001      	movs	r0, #1
 8000210:	f001 fb78 	bl	8001904 <xQueueGenericCreate>
 8000214:	4603      	mov	r3, r0
 8000216:	4a07      	ldr	r2, [pc, #28]	; (8000234 <main+0x64>)
 8000218:	6013      	str	r3, [r2, #0]

  vTaskStartScheduler();
 800021a:	f002 f8f5 	bl	8002408 <vTaskStartScheduler>
 800021e:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000220:	4618      	mov	r0, r3
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	080040a8 	.word	0x080040a8
 800022c:	08000151 	.word	0x08000151
 8000230:	0800018d 	.word	0x0800018d
 8000234:	200001f4 	.word	0x200001f4

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fe56 	bl	8003ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025a:	2301      	movs	r3, #1
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026c:	2302      	movs	r3, #2
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000276:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0318 	add.w	r3, r7, #24
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fc3b 	bl	8000afc <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800028c:	f000 f878 	bl	8000380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2302      	movs	r3, #2
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 fea6 	bl	8000ffc <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b6:	f000 f863 	bl	8000380 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	; 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d8:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a1d      	ldr	r2, [pc, #116]	; (8000354 <MX_GPIO_Init+0x90>)
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b1b      	ldr	r3, [pc, #108]	; (8000354 <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0310 	and.w	r3, r3, #16
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a17      	ldr	r2, [pc, #92]	; (8000354 <MX_GPIO_Init+0x90>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	60bb      	str	r3, [r7, #8]
 8000306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <MX_GPIO_Init+0x90>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_GPIO_Init+0x90>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <MX_GPIO_Init+0x94>)
 8000328:	f000 fbd0 	bl	8000acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800032c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2302      	movs	r3, #2
 800033c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4619      	mov	r1, r3
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_GPIO_Init+0x94>)
 8000346:	f000 fa3d 	bl	80007c4 <HAL_GPIO_Init>

}
 800034a:	bf00      	nop
 800034c:	3720      	adds	r7, #32
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40021000 	.word	0x40021000
 8000358:	40011000 	.word	0x40011000

0800035c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d101      	bne.n	8000372 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800036e:	f000 f92d 	bl	80005cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40012c00 	.word	0x40012c00

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	e7fe      	b.n	8000388 <Error_Handler+0x8>
	...

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08c      	sub	sp, #48	; 0x30
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000400:	2200      	movs	r2, #0
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	2019      	movs	r0, #25
 8000406:	f000 f9b2 	bl	800076e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800040a:	2019      	movs	r0, #25
 800040c:	f000 f9cb 	bl	80007a6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000410:	4b1e      	ldr	r3, [pc, #120]	; (800048c <HAL_InitTick+0x9c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1d      	ldr	r2, [pc, #116]	; (800048c <HAL_InitTick+0x9c>)
 8000416:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <HAL_InitTick+0x9c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000428:	f107 0210 	add.w	r2, r7, #16
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	4611      	mov	r1, r2
 8000432:	4618      	mov	r0, r3
 8000434:	f000 ff3e 	bl	80012b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000438:	f000 ff28 	bl	800128c <HAL_RCC_GetPCLK2Freq>
 800043c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800043e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <HAL_InitTick+0xa0>)
 8000442:	fba2 2303 	umull	r2, r3, r2, r3
 8000446:	0c9b      	lsrs	r3, r3, #18
 8000448:	3b01      	subs	r3, #1
 800044a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_InitTick+0xa4>)
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <HAL_InitTick+0xa8>)
 8000450:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <HAL_InitTick+0xa4>)
 8000454:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000458:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_InitTick+0xa4>)
 800045c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800045e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_InitTick+0xa4>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <HAL_InitTick+0xa4>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800046c:	4809      	ldr	r0, [pc, #36]	; (8000494 <HAL_InitTick+0xa4>)
 800046e:	f000 ff6f 	bl	8001350 <HAL_TIM_Base_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d104      	bne.n	8000482 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000478:	4806      	ldr	r0, [pc, #24]	; (8000494 <HAL_InitTick+0xa4>)
 800047a:	f000 ffc1 	bl	8001400 <HAL_TIM_Base_Start_IT>
 800047e:	4603      	mov	r3, r0
 8000480:	e000      	b.n	8000484 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000482:	2301      	movs	r3, #1
}
 8000484:	4618      	mov	r0, r3
 8000486:	3730      	adds	r7, #48	; 0x30
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40021000 	.word	0x40021000
 8000490:	431bde83 	.word	0x431bde83
 8000494:	200001f8 	.word	0x200001f8
 8000498:	40012c00 	.word	0x40012c00

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
	...

080004c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <TIM1_UP_IRQHandler+0x10>)
 80004ce:	f000 ffe9 	bl	80014a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	200001f8 	.word	0x200001f8

080004dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e4:	4a14      	ldr	r2, [pc, #80]	; (8000538 <_sbrk+0x5c>)
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <_sbrk+0x60>)
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <_sbrk+0x64>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d102      	bne.n	80004fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <_sbrk+0x64>)
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <_sbrk+0x68>)
 80004fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <_sbrk+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	429a      	cmp	r2, r3
 800050a:	d207      	bcs.n	800051c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800050c:	f003 fcac 	bl	8003e68 <__errno>
 8000510:	4603      	mov	r3, r0
 8000512:	220c      	movs	r2, #12
 8000514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	e009      	b.n	8000530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <_sbrk+0x64>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	4a05      	ldr	r2, [pc, #20]	; (8000540 <_sbrk+0x64>)
 800052c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20005000 	.word	0x20005000
 800053c:	00000400 	.word	0x00000400
 8000540:	20000094 	.word	0x20000094
 8000544:	20000298 	.word	0x20000298

08000548 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000554:	f7ff fff8 	bl	8000548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800055a:	490c      	ldr	r1, [pc, #48]	; (800058c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800055c:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <LoopFillZerobss+0x16>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a09      	ldr	r2, [pc, #36]	; (8000594 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000570:	4c09      	ldr	r4, [pc, #36]	; (8000598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057e:	f003 fc79 	bl	8003e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff fe25 	bl	80001d0 <main>
  bx lr
 8000586:	4770      	bx	lr
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000590:	080040f8 	.word	0x080040f8
  ldr r2, =_sbss
 8000594:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000598:	20000294 	.word	0x20000294

0800059c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_2_IRQHandler>
	...

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_Init+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_Init+0x28>)
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 f8d1 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ff1a 	bl	80003f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005bc:	f7ff fee6 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40022000 	.word	0x40022000

080005cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_IncTick+0x1c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <HAL_IncTick+0x20>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a03      	ldr	r2, [pc, #12]	; (80005ec <HAL_IncTick+0x20>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	20000008 	.word	0x20000008
 80005ec:	20000240 	.word	0x20000240

080005f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b02      	ldr	r3, [pc, #8]	; (8000600 <HAL_GetTick+0x10>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	20000240 	.word	0x20000240

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db0b      	blt.n	8000692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	f003 021f 	and.w	r2, r3, #31
 8000680:	4906      	ldr	r1, [pc, #24]	; (800069c <__NVIC_EnableIRQ+0x34>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	095b      	lsrs	r3, r3, #5
 8000688:	2001      	movs	r0, #1
 800068a:	fa00 f202 	lsl.w	r2, r0, r2
 800068e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	e000e100 	.word	0xe000e100

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	; (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	; (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	; 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff4f 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff64 	bl	800064c <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ffb2 	bl	80006f4 <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff81 	bl	80006a0 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff57 	bl	8000668 <__NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b08b      	sub	sp, #44	; 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d6:	e169      	b.n	8000aac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007d8:	2201      	movs	r2, #1
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	69fa      	ldr	r2, [r7, #28]
 80007e8:	4013      	ands	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	f040 8158 	bne.w	8000aa6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	4a9a      	ldr	r2, [pc, #616]	; (8000a64 <HAL_GPIO_Init+0x2a0>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d05e      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 8000800:	4a98      	ldr	r2, [pc, #608]	; (8000a64 <HAL_GPIO_Init+0x2a0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d875      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 8000806:	4a98      	ldr	r2, [pc, #608]	; (8000a68 <HAL_GPIO_Init+0x2a4>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d058      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 800080c:	4a96      	ldr	r2, [pc, #600]	; (8000a68 <HAL_GPIO_Init+0x2a4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d86f      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 8000812:	4a96      	ldr	r2, [pc, #600]	; (8000a6c <HAL_GPIO_Init+0x2a8>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d052      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 8000818:	4a94      	ldr	r2, [pc, #592]	; (8000a6c <HAL_GPIO_Init+0x2a8>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d869      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 800081e:	4a94      	ldr	r2, [pc, #592]	; (8000a70 <HAL_GPIO_Init+0x2ac>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d04c      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 8000824:	4a92      	ldr	r2, [pc, #584]	; (8000a70 <HAL_GPIO_Init+0x2ac>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d863      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 800082a:	4a92      	ldr	r2, [pc, #584]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d046      	beq.n	80008be <HAL_GPIO_Init+0xfa>
 8000830:	4a90      	ldr	r2, [pc, #576]	; (8000a74 <HAL_GPIO_Init+0x2b0>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d85d      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 8000836:	2b12      	cmp	r3, #18
 8000838:	d82a      	bhi.n	8000890 <HAL_GPIO_Init+0xcc>
 800083a:	2b12      	cmp	r3, #18
 800083c:	d859      	bhi.n	80008f2 <HAL_GPIO_Init+0x12e>
 800083e:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <HAL_GPIO_Init+0x80>)
 8000840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000844:	080008bf 	.word	0x080008bf
 8000848:	08000899 	.word	0x08000899
 800084c:	080008ab 	.word	0x080008ab
 8000850:	080008ed 	.word	0x080008ed
 8000854:	080008f3 	.word	0x080008f3
 8000858:	080008f3 	.word	0x080008f3
 800085c:	080008f3 	.word	0x080008f3
 8000860:	080008f3 	.word	0x080008f3
 8000864:	080008f3 	.word	0x080008f3
 8000868:	080008f3 	.word	0x080008f3
 800086c:	080008f3 	.word	0x080008f3
 8000870:	080008f3 	.word	0x080008f3
 8000874:	080008f3 	.word	0x080008f3
 8000878:	080008f3 	.word	0x080008f3
 800087c:	080008f3 	.word	0x080008f3
 8000880:	080008f3 	.word	0x080008f3
 8000884:	080008f3 	.word	0x080008f3
 8000888:	080008a1 	.word	0x080008a1
 800088c:	080008b5 	.word	0x080008b5
 8000890:	4a79      	ldr	r2, [pc, #484]	; (8000a78 <HAL_GPIO_Init+0x2b4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d013      	beq.n	80008be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000896:	e02c      	b.n	80008f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	623b      	str	r3, [r7, #32]
          break;
 800089e:	e029      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	3304      	adds	r3, #4
 80008a6:	623b      	str	r3, [r7, #32]
          break;
 80008a8:	e024      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	3308      	adds	r3, #8
 80008b0:	623b      	str	r3, [r7, #32]
          break;
 80008b2:	e01f      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	330c      	adds	r3, #12
 80008ba:	623b      	str	r3, [r7, #32]
          break;
 80008bc:	e01a      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d102      	bne.n	80008cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008c6:	2304      	movs	r3, #4
 80008c8:	623b      	str	r3, [r7, #32]
          break;
 80008ca:	e013      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d105      	bne.n	80008e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008d4:	2308      	movs	r3, #8
 80008d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	611a      	str	r2, [r3, #16]
          break;
 80008de:	e009      	b.n	80008f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e0:	2308      	movs	r3, #8
 80008e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69fa      	ldr	r2, [r7, #28]
 80008e8:	615a      	str	r2, [r3, #20]
          break;
 80008ea:	e003      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
          break;
 80008f0:	e000      	b.n	80008f4 <HAL_GPIO_Init+0x130>
          break;
 80008f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	2bff      	cmp	r3, #255	; 0xff
 80008f8:	d801      	bhi.n	80008fe <HAL_GPIO_Init+0x13a>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	e001      	b.n	8000902 <HAL_GPIO_Init+0x13e>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3304      	adds	r3, #4
 8000902:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	2bff      	cmp	r3, #255	; 0xff
 8000908:	d802      	bhi.n	8000910 <HAL_GPIO_Init+0x14c>
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	e002      	b.n	8000916 <HAL_GPIO_Init+0x152>
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	3b08      	subs	r3, #8
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	210f      	movs	r1, #15
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	401a      	ands	r2, r3
 8000928:	6a39      	ldr	r1, [r7, #32]
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	431a      	orrs	r2, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	2b00      	cmp	r3, #0
 8000940:	f000 80b1 	beq.w	8000aa6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000944:	4b4d      	ldr	r3, [pc, #308]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a4c      	ldr	r2, [pc, #304]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b4a      	ldr	r3, [pc, #296]	; (8000a7c <HAL_GPIO_Init+0x2b8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800095c:	4a48      	ldr	r2, [pc, #288]	; (8000a80 <HAL_GPIO_Init+0x2bc>)
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	089b      	lsrs	r3, r3, #2
 8000962:	3302      	adds	r3, #2
 8000964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000968:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096c:	f003 0303 	and.w	r3, r3, #3
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	220f      	movs	r2, #15
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a40      	ldr	r2, [pc, #256]	; (8000a84 <HAL_GPIO_Init+0x2c0>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d013      	beq.n	80009b0 <HAL_GPIO_Init+0x1ec>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a3f      	ldr	r2, [pc, #252]	; (8000a88 <HAL_GPIO_Init+0x2c4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d00d      	beq.n	80009ac <HAL_GPIO_Init+0x1e8>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a3e      	ldr	r2, [pc, #248]	; (8000a8c <HAL_GPIO_Init+0x2c8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d007      	beq.n	80009a8 <HAL_GPIO_Init+0x1e4>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a3d      	ldr	r2, [pc, #244]	; (8000a90 <HAL_GPIO_Init+0x2cc>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d101      	bne.n	80009a4 <HAL_GPIO_Init+0x1e0>
 80009a0:	2303      	movs	r3, #3
 80009a2:	e006      	b.n	80009b2 <HAL_GPIO_Init+0x1ee>
 80009a4:	2304      	movs	r3, #4
 80009a6:	e004      	b.n	80009b2 <HAL_GPIO_Init+0x1ee>
 80009a8:	2302      	movs	r3, #2
 80009aa:	e002      	b.n	80009b2 <HAL_GPIO_Init+0x1ee>
 80009ac:	2301      	movs	r3, #1
 80009ae:	e000      	b.n	80009b2 <HAL_GPIO_Init+0x1ee>
 80009b0:	2300      	movs	r3, #0
 80009b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009b4:	f002 0203 	and.w	r2, r2, #3
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	4093      	lsls	r3, r2
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	4313      	orrs	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009c2:	492f      	ldr	r1, [pc, #188]	; (8000a80 <HAL_GPIO_Init+0x2bc>)
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	3302      	adds	r3, #2
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d006      	beq.n	80009ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	492c      	ldr	r1, [pc, #176]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	608b      	str	r3, [r1, #8]
 80009e8:	e006      	b.n	80009f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	4928      	ldr	r1, [pc, #160]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 80009f4:	4013      	ands	r3, r2
 80009f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a06:	68da      	ldr	r2, [r3, #12]
 8000a08:	4922      	ldr	r1, [pc, #136]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	60cb      	str	r3, [r1, #12]
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	491e      	ldr	r1, [pc, #120]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	4918      	ldr	r1, [pc, #96]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	604b      	str	r3, [r1, #4]
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	4914      	ldr	r1, [pc, #80]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d021      	beq.n	8000a98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	490e      	ldr	r1, [pc, #56]	; (8000a94 <HAL_GPIO_Init+0x2d0>)
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	600b      	str	r3, [r1, #0]
 8000a60:	e021      	b.n	8000aa6 <HAL_GPIO_Init+0x2e2>
 8000a62:	bf00      	nop
 8000a64:	10320000 	.word	0x10320000
 8000a68:	10310000 	.word	0x10310000
 8000a6c:	10220000 	.word	0x10220000
 8000a70:	10210000 	.word	0x10210000
 8000a74:	10120000 	.word	0x10120000
 8000a78:	10110000 	.word	0x10110000
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010000 	.word	0x40010000
 8000a84:	40010800 	.word	0x40010800
 8000a88:	40010c00 	.word	0x40010c00
 8000a8c:	40011000 	.word	0x40011000
 8000a90:	40011400 	.word	0x40011400
 8000a94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_GPIO_Init+0x304>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	4909      	ldr	r1, [pc, #36]	; (8000ac8 <HAL_GPIO_Init+0x304>)
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f47f ae8e 	bne.w	80007d8 <HAL_GPIO_Init+0x14>
  }
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	372c      	adds	r7, #44	; 0x2c
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	40010400 	.word	0x40010400

08000acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000adc:	787b      	ldrb	r3, [r7, #1]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ae2:	887a      	ldrh	r2, [r7, #2]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ae8:	e003      	b.n	8000af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	041a      	lsls	r2, r3, #16
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	611a      	str	r2, [r3, #16]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e26c      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 8087 	beq.w	8000c2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b1c:	4b92      	ldr	r3, [pc, #584]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 030c 	and.w	r3, r3, #12
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d00c      	beq.n	8000b42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b28:	4b8f      	ldr	r3, [pc, #572]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 030c 	and.w	r3, r3, #12
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	d112      	bne.n	8000b5a <HAL_RCC_OscConfig+0x5e>
 8000b34:	4b8c      	ldr	r3, [pc, #560]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b40:	d10b      	bne.n	8000b5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b42:	4b89      	ldr	r3, [pc, #548]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d06c      	beq.n	8000c28 <HAL_RCC_OscConfig+0x12c>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d168      	bne.n	8000c28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e246      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b62:	d106      	bne.n	8000b72 <HAL_RCC_OscConfig+0x76>
 8000b64:	4b80      	ldr	r3, [pc, #512]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a7f      	ldr	r2, [pc, #508]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	e02e      	b.n	8000bd0 <HAL_RCC_OscConfig+0xd4>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10c      	bne.n	8000b94 <HAL_RCC_OscConfig+0x98>
 8000b7a:	4b7b      	ldr	r3, [pc, #492]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a7a      	ldr	r2, [pc, #488]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	4b78      	ldr	r3, [pc, #480]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a77      	ldr	r2, [pc, #476]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e01d      	b.n	8000bd0 <HAL_RCC_OscConfig+0xd4>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_RCC_OscConfig+0xbc>
 8000b9e:	4b72      	ldr	r3, [pc, #456]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a71      	ldr	r2, [pc, #452]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	4b6f      	ldr	r3, [pc, #444]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a6e      	ldr	r2, [pc, #440]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e00b      	b.n	8000bd0 <HAL_RCC_OscConfig+0xd4>
 8000bb8:	4b6b      	ldr	r3, [pc, #428]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a6a      	ldr	r2, [pc, #424]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b68      	ldr	r3, [pc, #416]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a67      	ldr	r2, [pc, #412]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d013      	beq.n	8000c00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fd0a 	bl	80005f0 <HAL_GetTick>
 8000bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bde:	e008      	b.n	8000bf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be0:	f7ff fd06 	bl	80005f0 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d901      	bls.n	8000bf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e1fa      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf2:	4b5d      	ldr	r3, [pc, #372]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f0      	beq.n	8000be0 <HAL_RCC_OscConfig+0xe4>
 8000bfe:	e014      	b.n	8000c2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fcf6 	bl	80005f0 <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c08:	f7ff fcf2 	bl	80005f0 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b64      	cmp	r3, #100	; 0x64
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e1e6      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1a:	4b53      	ldr	r3, [pc, #332]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f0      	bne.n	8000c08 <HAL_RCC_OscConfig+0x10c>
 8000c26:	e000      	b.n	8000c2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d063      	beq.n	8000cfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c36:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00b      	beq.n	8000c5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c42:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d11c      	bne.n	8000c88 <HAL_RCC_OscConfig+0x18c>
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d116      	bne.n	8000c88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5a:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d005      	beq.n	8000c72 <HAL_RCC_OscConfig+0x176>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d001      	beq.n	8000c72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e1ba      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c72:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4939      	ldr	r1, [pc, #228]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	4313      	orrs	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c86:	e03a      	b.n	8000cfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	691b      	ldr	r3, [r3, #16]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d020      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_RCC_OscConfig+0x270>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c96:	f7ff fcab 	bl	80005f0 <HAL_GetTick>
 8000c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9c:	e008      	b.n	8000cb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c9e:	f7ff fca7 	bl	80005f0 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e19b      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f0      	beq.n	8000c9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	4927      	ldr	r1, [pc, #156]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	600b      	str	r3, [r1, #0]
 8000cd0:	e015      	b.n	8000cfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_RCC_OscConfig+0x270>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fc8a 	bl	80005f0 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fc86 	bl	80005f0 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e17a      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d03a      	beq.n	8000d80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d019      	beq.n	8000d46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_RCC_OscConfig+0x274>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d18:	f7ff fc6a 	bl	80005f0 <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d20:	f7ff fc66 	bl	80005f0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e15a      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f0      	beq.n	8000d20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f000 fae8 	bl	8001314 <RCC_Delay>
 8000d44:	e01c      	b.n	8000d80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_RCC_OscConfig+0x274>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d4c:	f7ff fc50 	bl	80005f0 <HAL_GetTick>
 8000d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d52:	e00f      	b.n	8000d74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d54:	f7ff fc4c 	bl	80005f0 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d908      	bls.n	8000d74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d62:	2303      	movs	r3, #3
 8000d64:	e140      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	42420000 	.word	0x42420000
 8000d70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d74:	4b9e      	ldr	r3, [pc, #632]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1e9      	bne.n	8000d54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 80a6 	beq.w	8000eda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d92:	4b97      	ldr	r3, [pc, #604]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10d      	bne.n	8000dba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b94      	ldr	r3, [pc, #592]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a93      	ldr	r2, [pc, #588]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b91      	ldr	r3, [pc, #580]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000db6:	2301      	movs	r3, #1
 8000db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dba:	4b8e      	ldr	r3, [pc, #568]	; (8000ff4 <HAL_RCC_OscConfig+0x4f8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d118      	bne.n	8000df8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dc6:	4b8b      	ldr	r3, [pc, #556]	; (8000ff4 <HAL_RCC_OscConfig+0x4f8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a8a      	ldr	r2, [pc, #552]	; (8000ff4 <HAL_RCC_OscConfig+0x4f8>)
 8000dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fc0d 	bl	80005f0 <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dda:	f7ff fc09 	bl	80005f0 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b64      	cmp	r3, #100	; 0x64
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e0fd      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dec:	4b81      	ldr	r3, [pc, #516]	; (8000ff4 <HAL_RCC_OscConfig+0x4f8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f0      	beq.n	8000dda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d106      	bne.n	8000e0e <HAL_RCC_OscConfig+0x312>
 8000e00:	4b7b      	ldr	r3, [pc, #492]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4a7a      	ldr	r2, [pc, #488]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6213      	str	r3, [r2, #32]
 8000e0c:	e02d      	b.n	8000e6a <HAL_RCC_OscConfig+0x36e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10c      	bne.n	8000e30 <HAL_RCC_OscConfig+0x334>
 8000e16:	4b76      	ldr	r3, [pc, #472]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	4a75      	ldr	r2, [pc, #468]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6213      	str	r3, [r2, #32]
 8000e22:	4b73      	ldr	r3, [pc, #460]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	4a72      	ldr	r2, [pc, #456]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e28:	f023 0304 	bic.w	r3, r3, #4
 8000e2c:	6213      	str	r3, [r2, #32]
 8000e2e:	e01c      	b.n	8000e6a <HAL_RCC_OscConfig+0x36e>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	d10c      	bne.n	8000e52 <HAL_RCC_OscConfig+0x356>
 8000e38:	4b6d      	ldr	r3, [pc, #436]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4a6c      	ldr	r2, [pc, #432]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	6213      	str	r3, [r2, #32]
 8000e44:	4b6a      	ldr	r3, [pc, #424]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e46:	6a1b      	ldr	r3, [r3, #32]
 8000e48:	4a69      	ldr	r2, [pc, #420]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6213      	str	r3, [r2, #32]
 8000e50:	e00b      	b.n	8000e6a <HAL_RCC_OscConfig+0x36e>
 8000e52:	4b67      	ldr	r3, [pc, #412]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4a66      	ldr	r2, [pc, #408]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	6213      	str	r3, [r2, #32]
 8000e5e:	4b64      	ldr	r3, [pc, #400]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	4a63      	ldr	r2, [pc, #396]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	f023 0304 	bic.w	r3, r3, #4
 8000e68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d015      	beq.n	8000e9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e72:	f7ff fbbd 	bl	80005f0 <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e78:	e00a      	b.n	8000e90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e7a:	f7ff fbb9 	bl	80005f0 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e0ab      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e90:	4b57      	ldr	r3, [pc, #348]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0ee      	beq.n	8000e7a <HAL_RCC_OscConfig+0x37e>
 8000e9c:	e014      	b.n	8000ec8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9e:	f7ff fba7 	bl	80005f0 <HAL_GetTick>
 8000ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea4:	e00a      	b.n	8000ebc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea6:	f7ff fba3 	bl	80005f0 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e095      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ebc:	4b4c      	ldr	r3, [pc, #304]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1ee      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d105      	bne.n	8000eda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ece:	4b48      	ldr	r3, [pc, #288]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8081 	beq.w	8000fe6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee4:	4b42      	ldr	r3, [pc, #264]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d061      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d146      	bne.n	8000f86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_RCC_OscConfig+0x4fc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efe:	f7ff fb77 	bl	80005f0 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f06:	f7ff fb73 	bl	80005f0 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e067      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f18:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f0      	bne.n	8000f06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2c:	d108      	bne.n	8000f40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f2e:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	492d      	ldr	r1, [pc, #180]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a19      	ldr	r1, [r3, #32]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	430b      	orrs	r3, r1
 8000f52:	4927      	ldr	r1, [pc, #156]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	4313      	orrs	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f58:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <HAL_RCC_OscConfig+0x4fc>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fb47 	bl	80005f0 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff fb43 	bl	80005f0 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e037      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f0      	beq.n	8000f66 <HAL_RCC_OscConfig+0x46a>
 8000f84:	e02f      	b.n	8000fe6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <HAL_RCC_OscConfig+0x4fc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fb30 	bl	80005f0 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f94:	f7ff fb2c 	bl	80005f0 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e020      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x498>
 8000fb2:	e018      	b.n	8000fe6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e013      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_RCC_OscConfig+0x4f4>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40007000 	.word	0x40007000
 8000ff8:	42420060 	.word	0x42420060

08000ffc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e0d0      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001010:	4b6a      	ldr	r3, [pc, #424]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d910      	bls.n	8001040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800101e:	4b67      	ldr	r3, [pc, #412]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 0207 	bic.w	r2, r3, #7
 8001026:	4965      	ldr	r1, [pc, #404]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	4313      	orrs	r3, r2
 800102c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800102e:	4b63      	ldr	r3, [pc, #396]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	d001      	beq.n	8001040 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0b8      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001058:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4a58      	ldr	r2, [pc, #352]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 800105e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001062:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001070:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001076:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800107a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800107c:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	494d      	ldr	r1, [pc, #308]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	4313      	orrs	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d040      	beq.n	800111c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d115      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e07f      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d107      	bne.n	80010ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e073      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e06b      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f023 0203 	bic.w	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4936      	ldr	r1, [pc, #216]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010ec:	f7ff fa80 	bl	80005f0 <HAL_GetTick>
 80010f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f2:	e00a      	b.n	800110a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f4:	f7ff fa7c 	bl	80005f0 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001102:	4293      	cmp	r3, r2
 8001104:	d901      	bls.n	800110a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e053      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 020c 	and.w	r2, r3, #12
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	429a      	cmp	r2, r3
 800111a:	d1eb      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d210      	bcs.n	800114c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 0207 	bic.w	r2, r3, #7
 8001132:	4922      	ldr	r1, [pc, #136]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e032      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	4916      	ldr	r1, [pc, #88]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d009      	beq.n	800118a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	490e      	ldr	r1, [pc, #56]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800118a:	f000 f821 	bl	80011d0 <HAL_RCC_GetSysClockFreq>
 800118e:	4602      	mov	r2, r0
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	490a      	ldr	r1, [pc, #40]	; (80011c4 <HAL_RCC_ClockConfig+0x1c8>)
 800119c:	5ccb      	ldrb	r3, [r1, r3]
 800119e:	fa22 f303 	lsr.w	r3, r2, r3
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_RCC_ClockConfig+0x1cc>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_RCC_ClockConfig+0x1d0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f920 	bl	80003f0 <HAL_InitTick>

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40022000 	.word	0x40022000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	080040c4 	.word	0x080040c4
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <HAL_RCC_GetSysClockFreq+0x94>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d002      	beq.n	8001200 <HAL_RCC_GetSysClockFreq+0x30>
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d003      	beq.n	8001206 <HAL_RCC_GetSysClockFreq+0x36>
 80011fe:	e027      	b.n	8001250 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_RCC_GetSysClockFreq+0x98>)
 8001202:	613b      	str	r3, [r7, #16]
      break;
 8001204:	e027      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	0c9b      	lsrs	r3, r3, #18
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d010      	beq.n	8001240 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_RCC_GetSysClockFreq+0x94>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	0c5b      	lsrs	r3, r3, #17
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_RCC_GetSysClockFreq+0xa0>)
 800122a:	5cd3      	ldrb	r3, [r2, r3]
 800122c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_RCC_GetSysClockFreq+0x98>)
 8001232:	fb02 f203 	mul.w	r2, r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	fbb2 f3f3 	udiv	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	e004      	b.n	800124a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001244:	fb02 f303 	mul.w	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	613b      	str	r3, [r7, #16]
      break;
 800124e:	e002      	b.n	8001256 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_RCC_GetSysClockFreq+0x98>)
 8001252:	613b      	str	r3, [r7, #16]
      break;
 8001254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001256:	693b      	ldr	r3, [r7, #16]
}
 8001258:	4618      	mov	r0, r3
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000
 8001268:	007a1200 	.word	0x007a1200
 800126c:	080040dc 	.word	0x080040dc
 8001270:	080040ec 	.word	0x080040ec
 8001274:	003d0900 	.word	0x003d0900

08001278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <HAL_RCC_GetHCLKFreq+0x10>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000000 	.word	0x20000000

0800128c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001290:	f7ff fff2 	bl	8001278 <HAL_RCC_GetHCLKFreq>
 8001294:	4602      	mov	r2, r0
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	0adb      	lsrs	r3, r3, #11
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	4903      	ldr	r1, [pc, #12]	; (80012b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012a2:	5ccb      	ldrb	r3, [r1, r3]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000
 80012b0:	080040d4 	.word	0x080040d4

080012b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	220f      	movs	r2, #15
 80012c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_RCC_GetClockConfig+0x58>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_RCC_GetClockConfig+0x58>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_GetClockConfig+0x58>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_RCC_GetClockConfig+0x58>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_RCC_GetClockConfig+0x5c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0207 	and.w	r2, r3, #7
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000
 8001310:	40022000 	.word	0x40022000

08001314 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <RCC_Delay+0x34>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <RCC_Delay+0x38>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0a5b      	lsrs	r3, r3, #9
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001330:	bf00      	nop
  }
  while (Delay --);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	60fa      	str	r2, [r7, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f9      	bne.n	8001330 <RCC_Delay+0x1c>
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000000 	.word	0x20000000
 800134c:	10624dd3 	.word	0x10624dd3

08001350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e041      	b.n	80013e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d106      	bne.n	800137c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f839 	bl	80013ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3304      	adds	r3, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4610      	mov	r0, r2
 8001390:	f000 f9b4 	bl	80016fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d001      	beq.n	8001418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e03a      	b.n	800148e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a18      	ldr	r2, [pc, #96]	; (8001498 <HAL_TIM_Base_Start_IT+0x98>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00e      	beq.n	8001458 <HAL_TIM_Base_Start_IT+0x58>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001442:	d009      	beq.n	8001458 <HAL_TIM_Base_Start_IT+0x58>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <HAL_TIM_Base_Start_IT+0x9c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d004      	beq.n	8001458 <HAL_TIM_Base_Start_IT+0x58>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d111      	bne.n	800147c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b06      	cmp	r3, #6
 8001468:	d010      	beq.n	800148c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800147a:	e007      	b.n	800148c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40012c00 	.word	0x40012c00
 800149c:	40000400 	.word	0x40000400
 80014a0:	40000800 	.word	0x40000800

080014a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d122      	bne.n	8001500 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d11b      	bne.n	8001500 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f06f 0202 	mvn.w	r2, #2
 80014d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f8ed 	bl	80016c6 <HAL_TIM_IC_CaptureCallback>
 80014ec:	e005      	b.n	80014fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f8e0 	bl	80016b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f8ef 	bl	80016d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	2b04      	cmp	r3, #4
 800150c:	d122      	bne.n	8001554 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b04      	cmp	r3, #4
 800151a:	d11b      	bne.n	8001554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f06f 0204 	mvn.w	r2, #4
 8001524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f8c3 	bl	80016c6 <HAL_TIM_IC_CaptureCallback>
 8001540:	e005      	b.n	800154e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f8b6 	bl	80016b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f8c5 	bl	80016d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b08      	cmp	r3, #8
 8001560:	d122      	bne.n	80015a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b08      	cmp	r3, #8
 800156e:	d11b      	bne.n	80015a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f06f 0208 	mvn.w	r2, #8
 8001578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2204      	movs	r2, #4
 800157e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f899 	bl	80016c6 <HAL_TIM_IC_CaptureCallback>
 8001594:	e005      	b.n	80015a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f88c 	bl	80016b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f89b 	bl	80016d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b10      	cmp	r3, #16
 80015b4:	d122      	bne.n	80015fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	2b10      	cmp	r3, #16
 80015c2:	d11b      	bne.n	80015fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f06f 0210 	mvn.w	r2, #16
 80015cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2208      	movs	r2, #8
 80015d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f86f 	bl	80016c6 <HAL_TIM_IC_CaptureCallback>
 80015e8:	e005      	b.n	80015f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f862 	bl	80016b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f871 	bl	80016d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10e      	bne.n	8001628 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	d107      	bne.n	8001628 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f06f 0201 	mvn.w	r2, #1
 8001620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe fe9a 	bl	800035c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	2b80      	cmp	r3, #128	; 0x80
 8001634:	d10e      	bne.n	8001654 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001640:	2b80      	cmp	r3, #128	; 0x80
 8001642:	d107      	bne.n	8001654 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800164c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f8bf 	bl	80017d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165e:	2b40      	cmp	r3, #64	; 0x40
 8001660:	d10e      	bne.n	8001680 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166c:	2b40      	cmp	r3, #64	; 0x40
 800166e:	d107      	bne.n	8001680 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 f835 	bl	80016ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	2b20      	cmp	r3, #32
 800168c:	d10e      	bne.n	80016ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b20      	cmp	r3, #32
 800169a:	d107      	bne.n	80016ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 0220 	mvn.w	r2, #32
 80016a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f88a 	bl	80017c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <TIM_Base_SetConfig+0xb8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d00b      	beq.n	800172c <TIM_Base_SetConfig+0x30>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171a:	d007      	beq.n	800172c <TIM_Base_SetConfig+0x30>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <TIM_Base_SetConfig+0xbc>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d003      	beq.n	800172c <TIM_Base_SetConfig+0x30>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a25      	ldr	r2, [pc, #148]	; (80017bc <TIM_Base_SetConfig+0xc0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d108      	bne.n	800173e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <TIM_Base_SetConfig+0xb8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00b      	beq.n	800175e <TIM_Base_SetConfig+0x62>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174c:	d007      	beq.n	800175e <TIM_Base_SetConfig+0x62>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <TIM_Base_SetConfig+0xbc>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d003      	beq.n	800175e <TIM_Base_SetConfig+0x62>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a18      	ldr	r2, [pc, #96]	; (80017bc <TIM_Base_SetConfig+0xc0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d108      	bne.n	8001770 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <TIM_Base_SetConfig+0xb8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d103      	bne.n	80017a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	615a      	str	r2, [r3, #20]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	40012c00 	.word	0x40012c00
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800

080017c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <xQueueGenericReset>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10a      	bne.n	8001812 <xQueueGenericReset+0x2e>
 80017fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001800:	f383 8811 	msr	BASEPRI, r3
 8001804:	f3bf 8f6f 	isb	sy
 8001808:	f3bf 8f4f 	dsb	sy
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	bf00      	nop
 8001810:	e7fe      	b.n	8001810 <xQueueGenericReset+0x2c>
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d05d      	beq.n	80018d4 <xQueueGenericReset+0xf0>
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181c:	2b00      	cmp	r3, #0
 800181e:	d059      	beq.n	80018d4 <xQueueGenericReset+0xf0>
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	2100      	movs	r1, #0
 800182a:	fba3 2302 	umull	r2, r3, r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d000      	beq.n	8001834 <xQueueGenericReset+0x50>
 8001832:	2101      	movs	r1, #1
 8001834:	460b      	mov	r3, r1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d14c      	bne.n	80018d4 <xQueueGenericReset+0xf0>
 800183a:	f002 f971 	bl	8003b20 <vPortEnterCritical>
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	6939      	ldr	r1, [r7, #16]
 8001848:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	441a      	add	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2200      	movs	r2, #0
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	3b01      	subs	r3, #1
 800186c:	6939      	ldr	r1, [r7, #16]
 800186e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	441a      	add	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	22ff      	movs	r2, #255	; 0xff
 8001886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d114      	bne.n	80018ba <xQueueGenericReset+0xd6>
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d01a      	beq.n	80018ce <xQueueGenericReset+0xea>
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	3310      	adds	r3, #16
 800189c:	4618      	mov	r0, r3
 800189e:	f001 f98b 	bl	8002bb8 <xTaskRemoveFromEventList>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d012      	beq.n	80018ce <xQueueGenericReset+0xea>
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <xQueueGenericReset+0x11c>)
 80018aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	f3bf 8f6f 	isb	sy
 80018b8:	e009      	b.n	80018ce <xQueueGenericReset+0xea>
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	3310      	adds	r3, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 ffb0 	bl	8003824 <vListInitialise>
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	3324      	adds	r3, #36	; 0x24
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 ffab 	bl	8003824 <vListInitialise>
 80018ce:	f002 f957 	bl	8003b80 <vPortExitCritical>
 80018d2:	e001      	b.n	80018d8 <xQueueGenericReset+0xf4>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <xQueueGenericReset+0x110>
 80018de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e2:	f383 8811 	msr	BASEPRI, r3
 80018e6:	f3bf 8f6f 	isb	sy
 80018ea:	f3bf 8f4f 	dsb	sy
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	bf00      	nop
 80018f2:	e7fe      	b.n	80018f2 <xQueueGenericReset+0x10e>
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000ed04 	.word	0xe000ed04

08001904 <xQueueGenericCreate>:
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	4613      	mov	r3, r2
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d02e      	beq.n	800197a <xQueueGenericCreate+0x76>
 800191c:	2100      	movs	r1, #0
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	fba3 2302 	umull	r2, r3, r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d000      	beq.n	800192c <xQueueGenericCreate+0x28>
 800192a:	2101      	movs	r1, #1
 800192c:	460b      	mov	r3, r1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d123      	bne.n	800197a <xQueueGenericCreate+0x76>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800193e:	d81c      	bhi.n	800197a <xQueueGenericCreate+0x76>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	fb02 f303 	mul.w	r3, r2, r3
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	3350      	adds	r3, #80	; 0x50
 800194e:	4618      	mov	r0, r3
 8001950:	f001 ff44 	bl	80037dc <pvPortMalloc>
 8001954:	61f8      	str	r0, [r7, #28]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01c      	beq.n	8001996 <xQueueGenericCreate+0x92>
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3350      	adds	r3, #80	; 0x50
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	79fa      	ldrb	r2, [r7, #7]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4613      	mov	r3, r2
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f814 	bl	80019a0 <prvInitialiseNewQueue>
 8001978:	e00d      	b.n	8001996 <xQueueGenericCreate+0x92>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10a      	bne.n	8001996 <xQueueGenericCreate+0x92>
 8001980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001984:	f383 8811 	msr	BASEPRI, r3
 8001988:	f3bf 8f6f 	isb	sy
 800198c:	f3bf 8f4f 	dsb	sy
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	bf00      	nop
 8001994:	e7fe      	b.n	8001994 <xQueueGenericCreate+0x90>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	4618      	mov	r0, r3
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <prvInitialiseNewQueue>:
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	70fb      	strb	r3, [r7, #3]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <prvInitialiseNewQueue+0x1c>
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e002      	b.n	80019c2 <prvInitialiseNewQueue+0x22>
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40
 80019ce:	2101      	movs	r1, #1
 80019d0:	69b8      	ldr	r0, [r7, #24]
 80019d2:	f7ff ff07 	bl	80017e4 <xQueueGenericReset>
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <xQueueGenericSend>:
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
 80019fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10a      	bne.n	8001a1a <xQueueGenericSend+0x32>
 8001a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a08:	f383 8811 	msr	BASEPRI, r3
 8001a0c:	f3bf 8f6f 	isb	sy
 8001a10:	f3bf 8f4f 	dsb	sy
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a16:	bf00      	nop
 8001a18:	e7fe      	b.n	8001a18 <xQueueGenericSend+0x30>
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d103      	bne.n	8001a28 <xQueueGenericSend+0x40>
 8001a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <xQueueGenericSend+0x44>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <xQueueGenericSend+0x46>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10a      	bne.n	8001a48 <xQueueGenericSend+0x60>
 8001a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a36:	f383 8811 	msr	BASEPRI, r3
 8001a3a:	f3bf 8f6f 	isb	sy
 8001a3e:	f3bf 8f4f 	dsb	sy
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	bf00      	nop
 8001a46:	e7fe      	b.n	8001a46 <xQueueGenericSend+0x5e>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d103      	bne.n	8001a56 <xQueueGenericSend+0x6e>
 8001a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <xQueueGenericSend+0x72>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <xQueueGenericSend+0x74>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10a      	bne.n	8001a76 <xQueueGenericSend+0x8e>
 8001a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	623b      	str	r3, [r7, #32]
 8001a72:	bf00      	nop
 8001a74:	e7fe      	b.n	8001a74 <xQueueGenericSend+0x8c>
 8001a76:	f001 fb0d 	bl	8003094 <xTaskGetSchedulerState>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <xQueueGenericSend+0x9e>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <xQueueGenericSend+0xa2>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <xQueueGenericSend+0xa4>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10a      	bne.n	8001aa6 <xQueueGenericSend+0xbe>
 8001a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a94:	f383 8811 	msr	BASEPRI, r3
 8001a98:	f3bf 8f6f 	isb	sy
 8001a9c:	f3bf 8f4f 	dsb	sy
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	bf00      	nop
 8001aa4:	e7fe      	b.n	8001aa4 <xQueueGenericSend+0xbc>
 8001aa6:	f002 f83b 	bl	8003b20 <vPortEnterCritical>
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d302      	bcc.n	8001abc <xQueueGenericSend+0xd4>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d129      	bne.n	8001b10 <xQueueGenericSend+0x128>
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ac2:	f000 f96f 	bl	8001da4 <prvCopyDataToQueue>
 8001ac6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <xQueueGenericSend+0x10a>
 8001ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad2:	3324      	adds	r3, #36	; 0x24
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 f86f 	bl	8002bb8 <xTaskRemoveFromEventList>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <xQueueGenericSend+0x120>
 8001ae0:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <xQueueGenericSend+0x1f8>)
 8001ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	e00a      	b.n	8001b08 <xQueueGenericSend+0x120>
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <xQueueGenericSend+0x120>
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <xQueueGenericSend+0x1f8>)
 8001afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	f002 f83a 	bl	8003b80 <vPortExitCritical>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e063      	b.n	8001bd8 <xQueueGenericSend+0x1f0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <xQueueGenericSend+0x136>
 8001b16:	f002 f833 	bl	8003b80 <vPortExitCritical>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e05c      	b.n	8001bd8 <xQueueGenericSend+0x1f0>
 8001b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <xQueueGenericSend+0x14a>
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f001 f91d 	bl	8002d68 <vTaskInternalSetTimeOutState>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
 8001b32:	f002 f825 	bl	8003b80 <vPortExitCritical>
 8001b36:	f000 fcb9 	bl	80024ac <vTaskSuspendAll>
 8001b3a:	f001 fff1 	bl	8003b20 <vPortEnterCritical>
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4a:	d103      	bne.n	8001b54 <xQueueGenericSend+0x16c>
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b5a:	b25b      	sxtb	r3, r3
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d103      	bne.n	8001b6a <xQueueGenericSend+0x182>
 8001b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b6a:	f002 f809 	bl	8003b80 <vPortExitCritical>
 8001b6e:	1d3a      	adds	r2, r7, #4
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4611      	mov	r1, r2
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 f90c 	bl	8002d94 <xTaskCheckForTimeOut>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d124      	bne.n	8001bcc <xQueueGenericSend+0x1e4>
 8001b82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b84:	f000 fa06 	bl	8001f94 <prvIsQueueFull>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d018      	beq.n	8001bc0 <xQueueGenericSend+0x1d8>
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b90:	3310      	adds	r3, #16
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 ffa4 	bl	8002ae4 <vTaskPlaceOnEventList>
 8001b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b9e:	f000 f991 	bl	8001ec4 <prvUnlockQueue>
 8001ba2:	f000 fcc7 	bl	8002534 <xTaskResumeAll>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f47f af7c 	bne.w	8001aa6 <xQueueGenericSend+0xbe>
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <xQueueGenericSend+0x1f8>)
 8001bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f3bf 8f4f 	dsb	sy
 8001bba:	f3bf 8f6f 	isb	sy
 8001bbe:	e772      	b.n	8001aa6 <xQueueGenericSend+0xbe>
 8001bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bc2:	f000 f97f 	bl	8001ec4 <prvUnlockQueue>
 8001bc6:	f000 fcb5 	bl	8002534 <xTaskResumeAll>
 8001bca:	e76c      	b.n	8001aa6 <xQueueGenericSend+0xbe>
 8001bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bce:	f000 f979 	bl	8001ec4 <prvUnlockQueue>
 8001bd2:	f000 fcaf 	bl	8002534 <xTaskResumeAll>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3738      	adds	r7, #56	; 0x38
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	e000ed04 	.word	0xe000ed04

08001be4 <xQueueReceive>:
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <xQueueReceive+0x30>
 8001bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c02:	f383 8811 	msr	BASEPRI, r3
 8001c06:	f3bf 8f6f 	isb	sy
 8001c0a:	f3bf 8f4f 	dsb	sy
 8001c0e:	623b      	str	r3, [r7, #32]
 8001c10:	bf00      	nop
 8001c12:	e7fe      	b.n	8001c12 <xQueueReceive+0x2e>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <xQueueReceive+0x3e>
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <xQueueReceive+0x42>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <xQueueReceive+0x44>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <xQueueReceive+0x5e>
 8001c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c30:	f383 8811 	msr	BASEPRI, r3
 8001c34:	f3bf 8f6f 	isb	sy
 8001c38:	f3bf 8f4f 	dsb	sy
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	bf00      	nop
 8001c40:	e7fe      	b.n	8001c40 <xQueueReceive+0x5c>
 8001c42:	f001 fa27 	bl	8003094 <xTaskGetSchedulerState>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <xQueueReceive+0x6e>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <xQueueReceive+0x72>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <xQueueReceive+0x74>
 8001c56:	2300      	movs	r3, #0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10a      	bne.n	8001c72 <xQueueReceive+0x8e>
 8001c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	bf00      	nop
 8001c70:	e7fe      	b.n	8001c70 <xQueueReceive+0x8c>
 8001c72:	f001 ff55 	bl	8003b20 <vPortEnterCritical>
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01f      	beq.n	8001cc2 <xQueueReceive+0xde>
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c86:	f000 f8f7 	bl	8001e78 <prvCopyDataFromQueue>
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
 8001c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00f      	beq.n	8001cba <xQueueReceive+0xd6>
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 ff8a 	bl	8002bb8 <xTaskRemoveFromEventList>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <xQueueReceive+0xd6>
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <xQueueReceive+0x1bc>)
 8001cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	f3bf 8f6f 	isb	sy
 8001cba:	f001 ff61 	bl	8003b80 <vPortExitCritical>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e069      	b.n	8001d96 <xQueueReceive+0x1b2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d103      	bne.n	8001cd0 <xQueueReceive+0xec>
 8001cc8:	f001 ff5a 	bl	8003b80 <vPortExitCritical>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e062      	b.n	8001d96 <xQueueReceive+0x1b2>
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <xQueueReceive+0x100>
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 f844 	bl	8002d68 <vTaskInternalSetTimeOutState>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce4:	f001 ff4c 	bl	8003b80 <vPortExitCritical>
 8001ce8:	f000 fbe0 	bl	80024ac <vTaskSuspendAll>
 8001cec:	f001 ff18 	bl	8003b20 <vPortEnterCritical>
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d103      	bne.n	8001d06 <xQueueReceive+0x122>
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d12:	d103      	bne.n	8001d1c <xQueueReceive+0x138>
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d1c:	f001 ff30 	bl	8003b80 <vPortExitCritical>
 8001d20:	1d3a      	adds	r2, r7, #4
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 f833 	bl	8002d94 <xTaskCheckForTimeOut>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d123      	bne.n	8001d7c <xQueueReceive+0x198>
 8001d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d36:	f000 f917 	bl	8001f68 <prvIsQueueEmpty>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d017      	beq.n	8001d70 <xQueueReceive+0x18c>
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	3324      	adds	r3, #36	; 0x24
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fecb 	bl	8002ae4 <vTaskPlaceOnEventList>
 8001d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d50:	f000 f8b8 	bl	8001ec4 <prvUnlockQueue>
 8001d54:	f000 fbee 	bl	8002534 <xTaskResumeAll>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d189      	bne.n	8001c72 <xQueueReceive+0x8e>
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <xQueueReceive+0x1bc>)
 8001d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f3bf 8f4f 	dsb	sy
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	e780      	b.n	8001c72 <xQueueReceive+0x8e>
 8001d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d72:	f000 f8a7 	bl	8001ec4 <prvUnlockQueue>
 8001d76:	f000 fbdd 	bl	8002534 <xTaskResumeAll>
 8001d7a:	e77a      	b.n	8001c72 <xQueueReceive+0x8e>
 8001d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d7e:	f000 f8a1 	bl	8001ec4 <prvUnlockQueue>
 8001d82:	f000 fbd7 	bl	8002534 <xTaskResumeAll>
 8001d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d88:	f000 f8ee 	bl	8001f68 <prvIsQueueEmpty>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f43f af6f 	beq.w	8001c72 <xQueueReceive+0x8e>
 8001d94:	2300      	movs	r3, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	3730      	adds	r7, #48	; 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000ed04 	.word	0xe000ed04

08001da4 <prvCopyDataToQueue>:
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <prvCopyDataToQueue+0x3a>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d14d      	bne.n	8001e66 <prvCopyDataToQueue+0xc2>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 f97e 	bl	80030d0 <xTaskPriorityDisinherit>
 8001dd4:	6178      	str	r0, [r7, #20]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	e043      	b.n	8001e66 <prvCopyDataToQueue+0xc2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d119      	bne.n	8001e18 <prvCopyDataToQueue+0x74>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6858      	ldr	r0, [r3, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	461a      	mov	r2, r3
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	f002 f874 	bl	8003edc <memcpy>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	441a      	add	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d32b      	bcc.n	8001e66 <prvCopyDataToQueue+0xc2>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	e026      	b.n	8001e66 <prvCopyDataToQueue+0xc2>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	68d8      	ldr	r0, [r3, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	461a      	mov	r2, r3
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	f002 f85a 	bl	8003edc <memcpy>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	425b      	negs	r3, r3
 8001e32:	441a      	add	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d207      	bcs.n	8001e54 <prvCopyDataToQueue+0xb0>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	425b      	negs	r3, r3
 8001e4e:	441a      	add	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d105      	bne.n	8001e66 <prvCopyDataToQueue+0xc2>
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <prvCopyDataToQueue+0xc2>
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <prvCopyDataFromQueue>:
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d018      	beq.n	8001ebc <prvCopyDataFromQueue+0x44>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	441a      	add	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d303      	bcc.n	8001eac <prvCopyDataFromQueue+0x34>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68d9      	ldr	r1, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6838      	ldr	r0, [r7, #0]
 8001eb8:	f002 f810 	bl	8003edc <memcpy>
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <prvUnlockQueue>:
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	f001 fe28 	bl	8003b20 <vPortEnterCritical>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e011      	b.n	8001efe <prvUnlockQueue+0x3a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d012      	beq.n	8001f08 <prvUnlockQueue+0x44>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3324      	adds	r3, #36	; 0x24
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fe66 	bl	8002bb8 <xTaskRemoveFromEventList>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <prvUnlockQueue+0x32>
 8001ef2:	f000 ffb5 	bl	8002e60 <vTaskMissedYield>
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	dce9      	bgt.n	8001eda <prvUnlockQueue+0x16>
 8001f06:	e000      	b.n	8001f0a <prvUnlockQueue+0x46>
 8001f08:	bf00      	nop
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	22ff      	movs	r2, #255	; 0xff
 8001f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f12:	f001 fe35 	bl	8003b80 <vPortExitCritical>
 8001f16:	f001 fe03 	bl	8003b20 <vPortEnterCritical>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f20:	73bb      	strb	r3, [r7, #14]
 8001f22:	e011      	b.n	8001f48 <prvUnlockQueue+0x84>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d012      	beq.n	8001f52 <prvUnlockQueue+0x8e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3310      	adds	r3, #16
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fe41 	bl	8002bb8 <xTaskRemoveFromEventList>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <prvUnlockQueue+0x7c>
 8001f3c:	f000 ff90 	bl	8002e60 <vTaskMissedYield>
 8001f40:	7bbb      	ldrb	r3, [r7, #14]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	73bb      	strb	r3, [r7, #14]
 8001f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	dce9      	bgt.n	8001f24 <prvUnlockQueue+0x60>
 8001f50:	e000      	b.n	8001f54 <prvUnlockQueue+0x90>
 8001f52:	bf00      	nop
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	22ff      	movs	r2, #255	; 0xff
 8001f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f5c:	f001 fe10 	bl	8003b80 <vPortExitCritical>
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <prvIsQueueEmpty>:
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	f001 fdd6 	bl	8003b20 <vPortEnterCritical>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <prvIsQueueEmpty+0x1a>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	e001      	b.n	8001f86 <prvIsQueueEmpty+0x1e>
 8001f82:	2300      	movs	r3, #0
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	f001 fdfb 	bl	8003b80 <vPortExitCritical>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <prvIsQueueFull>:
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	f001 fdc0 	bl	8003b20 <vPortEnterCritical>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d102      	bne.n	8001fb2 <prvIsQueueFull+0x1e>
 8001fac:	2301      	movs	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e001      	b.n	8001fb6 <prvIsQueueFull+0x22>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	f001 fde3 	bl	8003b80 <vPortExitCritical>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <vQueueAddToRegistry>:
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10a      	bne.n	8001fee <vQueueAddToRegistry+0x2a>
 8001fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fdc:	f383 8811 	msr	BASEPRI, r3
 8001fe0:	f3bf 8f6f 	isb	sy
 8001fe4:	f3bf 8f4f 	dsb	sy
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	bf00      	nop
 8001fec:	e7fe      	b.n	8001fec <vQueueAddToRegistry+0x28>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d024      	beq.n	800203e <vQueueAddToRegistry+0x7a>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e01e      	b.n	8002038 <vQueueAddToRegistry+0x74>
 8001ffa:	4a18      	ldr	r2, [pc, #96]	; (800205c <vQueueAddToRegistry+0x98>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	d105      	bne.n	8002016 <vQueueAddToRegistry+0x52>
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4a13      	ldr	r2, [pc, #76]	; (800205c <vQueueAddToRegistry+0x98>)
 8002010:	4413      	add	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	e013      	b.n	800203e <vQueueAddToRegistry+0x7a>
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10a      	bne.n	8002032 <vQueueAddToRegistry+0x6e>
 800201c:	4a0f      	ldr	r2, [pc, #60]	; (800205c <vQueueAddToRegistry+0x98>)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <vQueueAddToRegistry+0x6e>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <vQueueAddToRegistry+0x98>)
 800202e:	4413      	add	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b07      	cmp	r3, #7
 800203c:	d9dd      	bls.n	8001ffa <vQueueAddToRegistry+0x36>
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <vQueueAddToRegistry+0x8c>
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	bf00      	nop
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000244 	.word	0x20000244

08002060 <vQueueWaitForMessageRestricted>:
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	f001 fd56 	bl	8003b20 <vPortEnterCritical>
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800207a:	b25b      	sxtb	r3, r3
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d103      	bne.n	800208a <vQueueWaitForMessageRestricted+0x2a>
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002090:	b25b      	sxtb	r3, r3
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d103      	bne.n	80020a0 <vQueueWaitForMessageRestricted+0x40>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020a0:	f001 fd6e 	bl	8003b80 <vPortExitCritical>
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d106      	bne.n	80020ba <vQueueWaitForMessageRestricted+0x5a>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3324      	adds	r3, #36	; 0x24
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fd39 	bl	8002b2c <vTaskPlaceOnEventListRestricted>
 80020ba:	6978      	ldr	r0, [r7, #20]
 80020bc:	f7ff ff02 	bl	8001ec4 <prvUnlockQueue>
 80020c0:	bf00      	nop
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <xTaskCreate>:
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08c      	sub	sp, #48	; 0x30
 80020cc:	af04      	add	r7, sp, #16
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 fb7e 	bl	80037dc <pvPortMalloc>
 80020e0:	6178      	str	r0, [r7, #20]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <xTaskCreate+0x48>
 80020e8:	207c      	movs	r0, #124	; 0x7c
 80020ea:	f001 fb77 	bl	80037dc <pvPortMalloc>
 80020ee:	61f8      	str	r0, [r7, #28]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <xTaskCreate+0x40>
 80020f6:	227c      	movs	r2, #124	; 0x7c
 80020f8:	2100      	movs	r1, #0
 80020fa:	69f8      	ldr	r0, [r7, #28]
 80020fc:	f001 fefc 	bl	8003ef8 <memset>
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
 8002106:	e005      	b.n	8002114 <xTaskCreate+0x4c>
 8002108:	6978      	ldr	r0, [r7, #20]
 800210a:	f001 fb79 	bl	8003800 <vPortFree>
 800210e:	e001      	b.n	8002114 <xTaskCreate+0x4c>
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d013      	beq.n	8002142 <xTaskCreate+0x7a>
 800211a:	2300      	movs	r3, #0
 800211c:	9303      	str	r3, [sp, #12]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	9302      	str	r3, [sp, #8]
 8002122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 f80e 	bl	8002152 <prvInitialiseNewTask>
 8002136:	69f8      	ldr	r0, [r7, #28]
 8002138:	f000 f89a 	bl	8002270 <prvAddNewTaskToReadyList>
 800213c:	2301      	movs	r3, #1
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	e002      	b.n	8002148 <xTaskCreate+0x80>
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	4618      	mov	r0, r3
 800214c:	3720      	adds	r7, #32
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <prvInitialiseNewTask>:
 8002152:	b580      	push	{r7, lr}
 8002154:	b088      	sub	sp, #32
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002162:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	461a      	mov	r2, r3
 800216a:	21a5      	movs	r1, #165	; 0xa5
 800216c:	f001 fec4 	bl	8003ef8 <memset>
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800217a:	3b01      	subs	r3, #1
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	f023 0307 	bic.w	r3, r3, #7
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <prvInitialiseNewTask+0x58>
 8002194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002198:	f383 8811 	msr	BASEPRI, r3
 800219c:	f3bf 8f6f 	isb	sy
 80021a0:	f3bf 8f4f 	dsb	sy
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	bf00      	nop
 80021a8:	e7fe      	b.n	80021a8 <prvInitialiseNewTask+0x56>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01e      	beq.n	80021ee <prvInitialiseNewTask+0x9c>
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	e012      	b.n	80021dc <prvInitialiseNewTask+0x8a>
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	4413      	add	r3, r2
 80021bc:	7819      	ldrb	r1, [r3, #0]
 80021be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	4413      	add	r3, r2
 80021c4:	3334      	adds	r3, #52	; 0x34
 80021c6:	460a      	mov	r2, r1
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d006      	beq.n	80021e4 <prvInitialiseNewTask+0x92>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b13      	cmp	r3, #19
 80021e0:	d9e9      	bls.n	80021b6 <prvInitialiseNewTask+0x64>
 80021e2:	e000      	b.n	80021e6 <prvInitialiseNewTask+0x94>
 80021e4:	bf00      	nop
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80021ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d90a      	bls.n	800220a <prvInitialiseNewTask+0xb8>
 80021f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f8:	f383 8811 	msr	BASEPRI, r3
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	bf00      	nop
 8002208:	e7fe      	b.n	8002208 <prvInitialiseNewTask+0xb6>
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	2b04      	cmp	r3, #4
 800220e:	d901      	bls.n	8002214 <prvInitialiseNewTask+0xc2>
 8002210:	2304      	movs	r3, #4
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800221e:	651a      	str	r2, [r3, #80]	; 0x50
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	3304      	adds	r3, #4
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fb1c 	bl	8003862 <vListInitialiseItem>
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	3318      	adds	r3, #24
 800222e:	4618      	mov	r0, r3
 8002230:	f001 fb17 	bl	8003862 <vListInitialiseItem>
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002238:	611a      	str	r2, [r3, #16]
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	f1c3 0205 	rsb	r2, r3, #5
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	619a      	str	r2, [r3, #24]
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	69b8      	ldr	r0, [r7, #24]
 8002250:	f001 fb74 	bl	800393c <pxPortInitialiseStack>
 8002254:	4602      	mov	r2, r0
 8002256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <prvInitialiseNewTask+0x114>
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	bf00      	nop
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <prvAddNewTaskToReadyList>:
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	f001 fc52 	bl	8003b20 <vPortEnterCritical>
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <prvAddNewTaskToReadyList+0x114>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a40      	ldr	r2, [pc, #256]	; (8002384 <prvAddNewTaskToReadyList+0x114>)
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b40      	ldr	r3, [pc, #256]	; (8002388 <prvAddNewTaskToReadyList+0x118>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <prvAddNewTaskToReadyList+0x32>
 800228e:	4a3e      	ldr	r2, [pc, #248]	; (8002388 <prvAddNewTaskToReadyList+0x118>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <prvAddNewTaskToReadyList+0x114>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d110      	bne.n	80022be <prvAddNewTaskToReadyList+0x4e>
 800229c:	f000 fe62 	bl	8002f64 <prvInitialiseTaskLists>
 80022a0:	e00d      	b.n	80022be <prvAddNewTaskToReadyList+0x4e>
 80022a2:	4b3a      	ldr	r3, [pc, #232]	; (800238c <prvAddNewTaskToReadyList+0x11c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <prvAddNewTaskToReadyList+0x4e>
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <prvAddNewTaskToReadyList+0x118>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d802      	bhi.n	80022be <prvAddNewTaskToReadyList+0x4e>
 80022b8:	4a33      	ldr	r2, [pc, #204]	; (8002388 <prvAddNewTaskToReadyList+0x118>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b34      	ldr	r3, [pc, #208]	; (8002390 <prvAddNewTaskToReadyList+0x120>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4a32      	ldr	r2, [pc, #200]	; (8002390 <prvAddNewTaskToReadyList+0x120>)
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b31      	ldr	r3, [pc, #196]	; (8002390 <prvAddNewTaskToReadyList+0x120>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	649a      	str	r2, [r3, #72]	; 0x48
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <prvAddNewTaskToReadyList+0x124>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d903      	bls.n	80022e4 <prvAddNewTaskToReadyList+0x74>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <prvAddNewTaskToReadyList+0x124>)
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e8:	492b      	ldr	r1, [pc, #172]	; (8002398 <prvAddNewTaskToReadyList+0x128>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3304      	adds	r3, #4
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	3204      	adds	r2, #4
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1d1a      	adds	r2, r3, #4
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <prvAddNewTaskToReadyList+0x128>)
 8002328:	441a      	add	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	615a      	str	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002332:	4919      	ldr	r1, [pc, #100]	; (8002398 <prvAddNewTaskToReadyList+0x128>)
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	1c59      	adds	r1, r3, #1
 8002342:	4815      	ldr	r0, [pc, #84]	; (8002398 <prvAddNewTaskToReadyList+0x128>)
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4403      	add	r3, r0
 800234e:	6019      	str	r1, [r3, #0]
 8002350:	f001 fc16 	bl	8003b80 <vPortExitCritical>
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <prvAddNewTaskToReadyList+0x11c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00e      	beq.n	800237a <prvAddNewTaskToReadyList+0x10a>
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <prvAddNewTaskToReadyList+0x118>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	429a      	cmp	r2, r3
 8002368:	d207      	bcs.n	800237a <prvAddNewTaskToReadyList+0x10a>
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <prvAddNewTaskToReadyList+0x12c>)
 800236c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	f3bf 8f4f 	dsb	sy
 8002376:	f3bf 8f6f 	isb	sy
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000170 	.word	0x20000170
 8002388:	20000098 	.word	0x20000098
 800238c:	2000017c 	.word	0x2000017c
 8002390:	2000018c 	.word	0x2000018c
 8002394:	20000178 	.word	0x20000178
 8002398:	2000009c 	.word	0x2000009c
 800239c:	e000ed04 	.word	0xe000ed04

080023a0 <vTaskDelay>:
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d017      	beq.n	80023e2 <vTaskDelay+0x42>
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <vTaskDelay+0x60>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <vTaskDelay+0x30>
 80023ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	bf00      	nop
 80023ce:	e7fe      	b.n	80023ce <vTaskDelay+0x2e>
 80023d0:	f000 f86c 	bl	80024ac <vTaskSuspendAll>
 80023d4:	2100      	movs	r1, #0
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 ff10 	bl	80031fc <prvAddCurrentTaskToDelayedList>
 80023dc:	f000 f8aa 	bl	8002534 <xTaskResumeAll>
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <vTaskDelay+0x58>
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <vTaskDelay+0x64>)
 80023ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	f3bf 8f4f 	dsb	sy
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000198 	.word	0x20000198
 8002404:	e000ed04 	.word	0xe000ed04

08002408 <vTaskStartScheduler>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af02      	add	r7, sp, #8
 800240e:	4b20      	ldr	r3, [pc, #128]	; (8002490 <vTaskStartScheduler+0x88>)
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2300      	movs	r3, #0
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2300      	movs	r3, #0
 8002418:	2280      	movs	r2, #128	; 0x80
 800241a:	491e      	ldr	r1, [pc, #120]	; (8002494 <vTaskStartScheduler+0x8c>)
 800241c:	481e      	ldr	r0, [pc, #120]	; (8002498 <vTaskStartScheduler+0x90>)
 800241e:	f7ff fe53 	bl	80020c8 <xTaskCreate>
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <vTaskStartScheduler+0x28>
 800242a:	f000 ff55 	bl	80032d8 <xTimerCreateTimerTask>
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d116      	bne.n	8002464 <vTaskStartScheduler+0x5c>
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	bf00      	nop
 800244a:	4b14      	ldr	r3, [pc, #80]	; (800249c <vTaskStartScheduler+0x94>)
 800244c:	f04f 32ff 	mov.w	r2, #4294967295
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <vTaskStartScheduler+0x98>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <vTaskStartScheduler+0x9c>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	f001 faed 	bl	8003a3c <xPortStartScheduler>
 8002462:	e00e      	b.n	8002482 <vTaskStartScheduler+0x7a>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246a:	d10a      	bne.n	8002482 <vTaskStartScheduler+0x7a>
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <vTaskStartScheduler+0x78>
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <vTaskStartScheduler+0xa0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000194 	.word	0x20000194
 8002494:	080040ac 	.word	0x080040ac
 8002498:	08002e79 	.word	0x08002e79
 800249c:	20000190 	.word	0x20000190
 80024a0:	2000017c 	.word	0x2000017c
 80024a4:	20000174 	.word	0x20000174
 80024a8:	2000000c 	.word	0x2000000c

080024ac <vTaskSuspendAll>:
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <vTaskSuspendAll+0x18>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	4a03      	ldr	r2, [pc, #12]	; (80024c4 <vTaskSuspendAll+0x18>)
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000198 	.word	0x20000198

080024c8 <prvGetExpectedIdleTime>:
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <prvGetExpectedIdleTime+0x58>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <prvGetExpectedIdleTime+0x16>
 80024da:	2301      	movs	r3, #1
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <prvGetExpectedIdleTime+0x5c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <prvGetExpectedIdleTime+0x26>
 80024e8:	2300      	movs	r3, #0
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	e012      	b.n	8002514 <prvGetExpectedIdleTime+0x4c>
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <prvGetExpectedIdleTime+0x60>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d902      	bls.n	80024fc <prvGetExpectedIdleTime+0x34>
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	e00b      	b.n	8002514 <prvGetExpectedIdleTime+0x4c>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <prvGetExpectedIdleTime+0x40>
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	e005      	b.n	8002514 <prvGetExpectedIdleTime+0x4c>
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <prvGetExpectedIdleTime+0x64>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <prvGetExpectedIdleTime+0x68>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	20000178 	.word	0x20000178
 8002524:	20000098 	.word	0x20000098
 8002528:	2000009c 	.word	0x2000009c
 800252c:	20000190 	.word	0x20000190
 8002530:	20000174 	.word	0x20000174

08002534 <xTaskResumeAll>:
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	4b71      	ldr	r3, [pc, #452]	; (8002708 <xTaskResumeAll+0x1d4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <xTaskResumeAll+0x2c>
 800254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	bf00      	nop
 800255e:	e7fe      	b.n	800255e <xTaskResumeAll+0x2a>
 8002560:	f001 fade 	bl	8003b20 <vPortEnterCritical>
 8002564:	4b68      	ldr	r3, [pc, #416]	; (8002708 <xTaskResumeAll+0x1d4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3b01      	subs	r3, #1
 800256a:	4a67      	ldr	r2, [pc, #412]	; (8002708 <xTaskResumeAll+0x1d4>)
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b66      	ldr	r3, [pc, #408]	; (8002708 <xTaskResumeAll+0x1d4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 80c1 	bne.w	80026fa <xTaskResumeAll+0x1c6>
 8002578:	4b64      	ldr	r3, [pc, #400]	; (800270c <xTaskResumeAll+0x1d8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80bc 	beq.w	80026fa <xTaskResumeAll+0x1c6>
 8002582:	e08b      	b.n	800269c <xTaskResumeAll+0x168>
 8002584:	4b62      	ldr	r3, [pc, #392]	; (8002710 <xTaskResumeAll+0x1dc>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	6a12      	ldr	r2, [r2, #32]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	69d2      	ldr	r2, [r2, #28]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3318      	adds	r3, #24
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d103      	bne.n	80025ba <xTaskResumeAll+0x86>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	6a1a      	ldr	r2, [r3, #32]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2200      	movs	r2, #0
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	68d2      	ldr	r2, [r2, #12]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	6892      	ldr	r2, [r2, #8]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3304      	adds	r3, #4
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d103      	bne.n	80025f8 <xTaskResumeAll+0xc4>
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2200      	movs	r2, #0
 80025fc:	615a      	str	r2, [r3, #20]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1e5a      	subs	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260c:	4b41      	ldr	r3, [pc, #260]	; (8002714 <xTaskResumeAll+0x1e0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d903      	bls.n	800261c <xTaskResumeAll+0xe8>
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	4a3e      	ldr	r2, [pc, #248]	; (8002714 <xTaskResumeAll+0x1e0>)
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002620:	493d      	ldr	r1, [pc, #244]	; (8002718 <xTaskResumeAll+0x1e4>)
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3304      	adds	r3, #4
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	3204      	adds	r2, #4
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	1d1a      	adds	r2, r3, #4
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	609a      	str	r2, [r3, #8]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <xTaskResumeAll+0x1e4>)
 8002660:	441a      	add	r2, r3
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	615a      	str	r2, [r3, #20]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266a:	492b      	ldr	r1, [pc, #172]	; (8002718 <xTaskResumeAll+0x1e4>)
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	1c59      	adds	r1, r3, #1
 800267a:	4827      	ldr	r0, [pc, #156]	; (8002718 <xTaskResumeAll+0x1e4>)
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4403      	add	r3, r0
 8002686:	6019      	str	r1, [r3, #0]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <xTaskResumeAll+0x1e8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <xTaskResumeAll+0x168>
 8002696:	4b22      	ldr	r3, [pc, #136]	; (8002720 <xTaskResumeAll+0x1ec>)
 8002698:	2201      	movs	r2, #1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <xTaskResumeAll+0x1dc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f af6f 	bne.w	8002584 <xTaskResumeAll+0x50>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <xTaskResumeAll+0x17c>
 80026ac:	f000 fcd8 	bl	8003060 <prvResetNextTaskUnblockTime>
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <xTaskResumeAll+0x1f0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d010      	beq.n	80026de <xTaskResumeAll+0x1aa>
 80026bc:	f000 f89e 	bl	80027fc <xTaskIncrementTick>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <xTaskResumeAll+0x198>
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <xTaskResumeAll+0x1ec>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f1      	bne.n	80026bc <xTaskResumeAll+0x188>
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <xTaskResumeAll+0x1f0>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <xTaskResumeAll+0x1ec>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <xTaskResumeAll+0x1c6>
 80026e6:	2301      	movs	r3, #1
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <xTaskResumeAll+0x1f4>)
 80026ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f001 fa41 	bl	8003b80 <vPortExitCritical>
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4618      	mov	r0, r3
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	20000198 	.word	0x20000198
 800270c:	20000170 	.word	0x20000170
 8002710:	20000130 	.word	0x20000130
 8002714:	20000178 	.word	0x20000178
 8002718:	2000009c 	.word	0x2000009c
 800271c:	20000098 	.word	0x20000098
 8002720:	20000184 	.word	0x20000184
 8002724:	20000180 	.word	0x20000180
 8002728:	e000ed04 	.word	0xe000ed04

0800272c <xTaskGetTickCount>:
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4b04      	ldr	r3, [pc, #16]	; (8002744 <xTaskGetTickCount+0x18>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	20000174 	.word	0x20000174

08002748 <vTaskStepTick>:
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <vTaskStepTick+0xa4>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	441a      	add	r2, r3
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <vTaskStepTick+0xa8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d90a      	bls.n	8002776 <vTaskStepTick+0x2e>
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	bf00      	nop
 8002774:	e7fe      	b.n	8002774 <vTaskStepTick+0x2c>
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <vTaskStepTick+0xa4>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	441a      	add	r2, r3
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <vTaskStepTick+0xa8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d128      	bne.n	80027d8 <vTaskStepTick+0x90>
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <vTaskStepTick+0xac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <vTaskStepTick+0x5c>
 800278e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	bf00      	nop
 80027a2:	e7fe      	b.n	80027a2 <vTaskStepTick+0x5a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10a      	bne.n	80027c0 <vTaskStepTick+0x78>
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	bf00      	nop
 80027be:	e7fe      	b.n	80027be <vTaskStepTick+0x76>
 80027c0:	f001 f9ae 	bl	8003b20 <vPortEnterCritical>
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <vTaskStepTick+0xb0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	4a0b      	ldr	r2, [pc, #44]	; (80027f8 <vTaskStepTick+0xb0>)
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	f001 f9d7 	bl	8003b80 <vPortExitCritical>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <vTaskStepTick+0xa4>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	4a02      	ldr	r2, [pc, #8]	; (80027ec <vTaskStepTick+0xa4>)
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000174 	.word	0x20000174
 80027f0:	20000190 	.word	0x20000190
 80027f4:	20000198 	.word	0x20000198
 80027f8:	20000180 	.word	0x20000180

080027fc <xTaskIncrementTick>:
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
 8002806:	4b7e      	ldr	r3, [pc, #504]	; (8002a00 <xTaskIncrementTick+0x204>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 80ed 	bne.w	80029ea <xTaskIncrementTick+0x1ee>
 8002810:	4b7c      	ldr	r3, [pc, #496]	; (8002a04 <xTaskIncrementTick+0x208>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	623b      	str	r3, [r7, #32]
 8002818:	4a7a      	ldr	r2, [pc, #488]	; (8002a04 <xTaskIncrementTick+0x208>)
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d120      	bne.n	8002866 <xTaskIncrementTick+0x6a>
 8002824:	4b78      	ldr	r3, [pc, #480]	; (8002a08 <xTaskIncrementTick+0x20c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <xTaskIncrementTick+0x48>
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	bf00      	nop
 8002842:	e7fe      	b.n	8002842 <xTaskIncrementTick+0x46>
 8002844:	4b70      	ldr	r3, [pc, #448]	; (8002a08 <xTaskIncrementTick+0x20c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <xTaskIncrementTick+0x210>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a6e      	ldr	r2, [pc, #440]	; (8002a08 <xTaskIncrementTick+0x20c>)
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	4a6e      	ldr	r2, [pc, #440]	; (8002a0c <xTaskIncrementTick+0x210>)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <xTaskIncrementTick+0x214>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	4a6c      	ldr	r2, [pc, #432]	; (8002a10 <xTaskIncrementTick+0x214>)
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	f000 fbfd 	bl	8003060 <prvResetNextTaskUnblockTime>
 8002866:	4b6b      	ldr	r3, [pc, #428]	; (8002a14 <xTaskIncrementTick+0x218>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a3a      	ldr	r2, [r7, #32]
 800286c:	429a      	cmp	r2, r3
 800286e:	f0c0 80a7 	bcc.w	80029c0 <xTaskIncrementTick+0x1c4>
 8002872:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <xTaskIncrementTick+0x20c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <xTaskIncrementTick+0x8a>
 800287c:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <xTaskIncrementTick+0x218>)
 800287e:	f04f 32ff 	mov.w	r2, #4294967295
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e09c      	b.n	80029c0 <xTaskIncrementTick+0x1c4>
 8002886:	4b60      	ldr	r3, [pc, #384]	; (8002a08 <xTaskIncrementTick+0x20c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	6a3a      	ldr	r2, [r7, #32]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	429a      	cmp	r2, r3
 800289c:	d203      	bcs.n	80028a6 <xTaskIncrementTick+0xaa>
 800289e:	4a5d      	ldr	r2, [pc, #372]	; (8002a14 <xTaskIncrementTick+0x218>)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	e08c      	b.n	80029c0 <xTaskIncrementTick+0x1c4>
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	68d2      	ldr	r2, [r2, #12]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	6892      	ldr	r2, [r2, #8]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	3304      	adds	r3, #4
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d103      	bne.n	80028d4 <xTaskIncrementTick+0xd8>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01e      	beq.n	800292a <xTaskIncrementTick+0x12e>
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	6a12      	ldr	r2, [r2, #32]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	69d2      	ldr	r2, [r2, #28]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	3318      	adds	r3, #24
 800290e:	429a      	cmp	r2, r3
 8002910:	d103      	bne.n	800291a <xTaskIncrementTick+0x11e>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	6a1a      	ldr	r2, [r3, #32]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2200      	movs	r2, #0
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292e:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <xTaskIncrementTick+0x21c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d903      	bls.n	800293e <xTaskIncrementTick+0x142>
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	4a37      	ldr	r2, [pc, #220]	; (8002a18 <xTaskIncrementTick+0x21c>)
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002942:	4936      	ldr	r1, [pc, #216]	; (8002a1c <xTaskIncrementTick+0x220>)
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3304      	adds	r3, #4
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	3204      	adds	r2, #4
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1d1a      	adds	r2, r3, #4
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <xTaskIncrementTick+0x220>)
 8002982:	441a      	add	r2, r3
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	615a      	str	r2, [r3, #20]
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	4923      	ldr	r1, [pc, #140]	; (8002a1c <xTaskIncrementTick+0x220>)
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1c59      	adds	r1, r3, #1
 800299c:	481f      	ldr	r0, [pc, #124]	; (8002a1c <xTaskIncrementTick+0x220>)
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4403      	add	r3, r0
 80029a8:	6019      	str	r1, [r3, #0]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ae:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <xTaskIncrementTick+0x224>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	429a      	cmp	r2, r3
 80029b6:	f67f af5c 	bls.w	8002872 <xTaskIncrementTick+0x76>
 80029ba:	2301      	movs	r3, #1
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
 80029be:	e758      	b.n	8002872 <xTaskIncrementTick+0x76>
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <xTaskIncrementTick+0x224>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c6:	4915      	ldr	r1, [pc, #84]	; (8002a1c <xTaskIncrementTick+0x220>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d901      	bls.n	80029dc <xTaskIncrementTick+0x1e0>
 80029d8:	2301      	movs	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <xTaskIncrementTick+0x228>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <xTaskIncrementTick+0x1f8>
 80029e4:	2301      	movs	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
 80029e8:	e004      	b.n	80029f4 <xTaskIncrementTick+0x1f8>
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <xTaskIncrementTick+0x22c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	4a0d      	ldr	r2, [pc, #52]	; (8002a28 <xTaskIncrementTick+0x22c>)
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	4618      	mov	r0, r3
 80029f8:	3728      	adds	r7, #40	; 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000198 	.word	0x20000198
 8002a04:	20000174 	.word	0x20000174
 8002a08:	20000128 	.word	0x20000128
 8002a0c:	2000012c 	.word	0x2000012c
 8002a10:	20000188 	.word	0x20000188
 8002a14:	20000190 	.word	0x20000190
 8002a18:	20000178 	.word	0x20000178
 8002a1c:	2000009c 	.word	0x2000009c
 8002a20:	20000098 	.word	0x20000098
 8002a24:	20000184 	.word	0x20000184
 8002a28:	20000180 	.word	0x20000180

08002a2c <vTaskSwitchContext>:
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <vTaskSwitchContext+0xa4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <vTaskSwitchContext+0x16>
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <vTaskSwitchContext+0xa8>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e041      	b.n	8002ac6 <vTaskSwitchContext+0x9a>
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <vTaskSwitchContext+0xa8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <vTaskSwitchContext+0xac>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e010      	b.n	8002a72 <vTaskSwitchContext+0x46>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <vTaskSwitchContext+0x40>
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	bf00      	nop
 8002a6a:	e7fe      	b.n	8002a6a <vTaskSwitchContext+0x3e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	491a      	ldr	r1, [pc, #104]	; (8002adc <vTaskSwitchContext+0xb0>)
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0e4      	beq.n	8002a50 <vTaskSwitchContext+0x24>
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4a12      	ldr	r2, [pc, #72]	; (8002adc <vTaskSwitchContext+0xb0>)
 8002a92:	4413      	add	r3, r2
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d104      	bne.n	8002ab6 <vTaskSwitchContext+0x8a>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <vTaskSwitchContext+0xb4>)
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <vTaskSwitchContext+0xac>)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	20000198 	.word	0x20000198
 8002ad4:	20000184 	.word	0x20000184
 8002ad8:	20000178 	.word	0x20000178
 8002adc:	2000009c 	.word	0x2000009c
 8002ae0:	20000098 	.word	0x20000098

08002ae4 <vTaskPlaceOnEventList>:
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <vTaskPlaceOnEventList+0x26>
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	bf00      	nop
 8002b08:	e7fe      	b.n	8002b08 <vTaskPlaceOnEventList+0x24>
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <vTaskPlaceOnEventList+0x44>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3318      	adds	r3, #24
 8002b10:	4619      	mov	r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 feb1 	bl	800387a <vListInsert>
 8002b18:	2101      	movs	r1, #1
 8002b1a:	6838      	ldr	r0, [r7, #0]
 8002b1c:	f000 fb6e 	bl	80031fc <prvAddCurrentTaskToDelayedList>
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000098 	.word	0x20000098

08002b2c <vTaskPlaceOnEventListRestricted>:
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <vTaskPlaceOnEventListRestricted+0x28>
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	bf00      	nop
 8002b52:	e7fe      	b.n	8002b52 <vTaskPlaceOnEventListRestricted+0x26>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	61da      	str	r2, [r3, #28]
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	6892      	ldr	r2, [r2, #8]
 8002b6a:	621a      	str	r2, [r3, #32]
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	3218      	adds	r2, #24
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f103 0218 	add.w	r2, r3, #24
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <vTaskPlaceOnEventListRestricted+0x76>
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	68b8      	ldr	r0, [r7, #8]
 8002ba6:	f000 fb29 	bl	80031fc <prvAddCurrentTaskToDelayedList>
 8002baa:	bf00      	nop
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000098 	.word	0x20000098

08002bb8 <xTaskRemoveFromEventList>:
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	623b      	str	r3, [r7, #32]
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <xTaskRemoveFromEventList+0x2c>
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <xTaskRemoveFromEventList+0x2a>
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	6a3a      	ldr	r2, [r7, #32]
 8002bf0:	6a12      	ldr	r2, [r2, #32]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	6a3a      	ldr	r2, [r7, #32]
 8002bfa:	69d2      	ldr	r2, [r2, #28]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	3318      	adds	r3, #24
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d103      	bne.n	8002c12 <xTaskRemoveFromEventList+0x5a>
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	2200      	movs	r2, #0
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1e5a      	subs	r2, r3, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <xTaskRemoveFromEventList+0x198>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d161      	bne.n	8002cee <xTaskRemoveFromEventList+0x136>
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	68d2      	ldr	r2, [r2, #12]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	6a3a      	ldr	r2, [r7, #32]
 8002c40:	6892      	ldr	r2, [r2, #8]
 8002c42:	605a      	str	r2, [r3, #4]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d103      	bne.n	8002c58 <xTaskRemoveFromEventList+0xa0>
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	615a      	str	r2, [r3, #20]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	1e5a      	subs	r2, r3, #1
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <xTaskRemoveFromEventList+0x19c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d903      	bls.n	8002c7c <xTaskRemoveFromEventList+0xc4>
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	4a36      	ldr	r2, [pc, #216]	; (8002d54 <xTaskRemoveFromEventList+0x19c>)
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	4935      	ldr	r1, [pc, #212]	; (8002d58 <xTaskRemoveFromEventList+0x1a0>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	3204      	adds	r2, #4
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	1d1a      	adds	r2, r3, #4
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <xTaskRemoveFromEventList+0x1a0>)
 8002cc0:	441a      	add	r2, r3
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	615a      	str	r2, [r3, #20]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	4923      	ldr	r1, [pc, #140]	; (8002d58 <xTaskRemoveFromEventList+0x1a0>)
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	1c59      	adds	r1, r3, #1
 8002cda:	481f      	ldr	r0, [pc, #124]	; (8002d58 <xTaskRemoveFromEventList+0x1a0>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4403      	add	r3, r0
 8002ce6:	6019      	str	r1, [r3, #0]
 8002ce8:	f000 f9ba 	bl	8003060 <prvResetNextTaskUnblockTime>
 8002cec:	e01b      	b.n	8002d26 <xTaskRemoveFromEventList+0x16e>
 8002cee:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <xTaskRemoveFromEventList+0x1a4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	61da      	str	r2, [r3, #28]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	621a      	str	r2, [r3, #32]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	6a3a      	ldr	r2, [r7, #32]
 8002d08:	3218      	adds	r2, #24
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f103 0218 	add.w	r2, r3, #24
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <xTaskRemoveFromEventList+0x1a4>)
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <xTaskRemoveFromEventList+0x1a4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	4a0e      	ldr	r2, [pc, #56]	; (8002d5c <xTaskRemoveFromEventList+0x1a4>)
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <xTaskRemoveFromEventList+0x1a8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d905      	bls.n	8002d40 <xTaskRemoveFromEventList+0x188>
 8002d34:	2301      	movs	r3, #1
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <xTaskRemoveFromEventList+0x1ac>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e001      	b.n	8002d44 <xTaskRemoveFromEventList+0x18c>
 8002d40:	2300      	movs	r3, #0
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	4618      	mov	r0, r3
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000198 	.word	0x20000198
 8002d54:	20000178 	.word	0x20000178
 8002d58:	2000009c 	.word	0x2000009c
 8002d5c:	20000130 	.word	0x20000130
 8002d60:	20000098 	.word	0x20000098
 8002d64:	20000184 	.word	0x20000184

08002d68 <vTaskInternalSetTimeOutState>:
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <vTaskInternalSetTimeOutState+0x24>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <vTaskInternalSetTimeOutState+0x28>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000188 	.word	0x20000188
 8002d90:	20000174 	.word	0x20000174

08002d94 <xTaskCheckForTimeOut>:
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <xTaskCheckForTimeOut+0x26>
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xTaskCheckForTimeOut+0x24>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xTaskCheckForTimeOut+0x42>
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xTaskCheckForTimeOut+0x40>
 8002dd6:	f000 fea3 	bl	8003b20 <vPortEnterCritical>
 8002dda:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <xTaskCheckForTimeOut+0xc4>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d102      	bne.n	8002dfa <xTaskCheckForTimeOut+0x66>
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	e026      	b.n	8002e48 <xTaskCheckForTimeOut+0xb4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <xTaskCheckForTimeOut+0xc8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d00a      	beq.n	8002e1c <xTaskCheckForTimeOut+0x88>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d305      	bcc.n	8002e1c <xTaskCheckForTimeOut+0x88>
 8002e10:	2301      	movs	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e015      	b.n	8002e48 <xTaskCheckForTimeOut+0xb4>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d20b      	bcs.n	8002e3e <xTaskCheckForTimeOut+0xaa>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	1ad2      	subs	r2, r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff98 	bl	8002d68 <vTaskInternalSetTimeOutState>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	e004      	b.n	8002e48 <xTaskCheckForTimeOut+0xb4>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	2301      	movs	r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	f000 fe9a 	bl	8003b80 <vPortExitCritical>
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000174 	.word	0x20000174
 8002e5c:	20000188 	.word	0x20000188

08002e60 <vTaskMissedYield>:
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <vTaskMissedYield+0x14>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000184 	.word	0x20000184

08002e78 <prvIdleTask>:
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	f000 f8b0 	bl	8002fe4 <prvCheckTasksWaitingTermination>
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <prvIdleTask+0x70>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d907      	bls.n	8002e9c <prvIdleTask+0x24>
 8002e8c:	4b17      	ldr	r3, [pc, #92]	; (8002eec <prvIdleTask+0x74>)
 8002e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f7ff fb14 	bl	80024c8 <prvGetExpectedIdleTime>
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d9eb      	bls.n	8002e80 <prvIdleTask+0x8>
 8002ea8:	f7ff fb00 	bl	80024ac <vTaskSuspendAll>
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <prvIdleTask+0x78>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <prvIdleTask+0x7c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d20a      	bcs.n	8002ece <prvIdleTask+0x56>
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <prvIdleTask+0x54>
 8002ece:	f7ff fafb 	bl	80024c8 <prvGetExpectedIdleTime>
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d902      	bls.n	8002ee0 <prvIdleTask+0x68>
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 febe 	bl	8003c5c <vPortSuppressTicksAndSleep>
 8002ee0:	f7ff fb28 	bl	8002534 <xTaskResumeAll>
 8002ee4:	e7cc      	b.n	8002e80 <prvIdleTask+0x8>
 8002ee6:	bf00      	nop
 8002ee8:	2000009c 	.word	0x2000009c
 8002eec:	e000ed04 	.word	0xe000ed04
 8002ef0:	20000190 	.word	0x20000190
 8002ef4:	20000174 	.word	0x20000174

08002ef8 <eTaskConfirmSleepModeStatus>:
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	2301      	movs	r3, #1
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	2301      	movs	r3, #1
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <eTaskConfirmSleepModeStatus+0x58>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <eTaskConfirmSleepModeStatus+0x1c>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	71fb      	strb	r3, [r7, #7]
 8002f12:	e017      	b.n	8002f44 <eTaskConfirmSleepModeStatus+0x4c>
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <eTaskConfirmSleepModeStatus+0x5c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <eTaskConfirmSleepModeStatus+0x2a>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	e010      	b.n	8002f44 <eTaskConfirmSleepModeStatus+0x4c>
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <eTaskConfirmSleepModeStatus+0x60>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <eTaskConfirmSleepModeStatus+0x38>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	71fb      	strb	r3, [r7, #7]
 8002f2e:	e009      	b.n	8002f44 <eTaskConfirmSleepModeStatus+0x4c>
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <eTaskConfirmSleepModeStatus+0x64>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <eTaskConfirmSleepModeStatus+0x68>)
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	1acb      	subs	r3, r1, r3
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d101      	bne.n	8002f44 <eTaskConfirmSleepModeStatus+0x4c>
 8002f40:	2302      	movs	r3, #2
 8002f42:	71fb      	strb	r3, [r7, #7]
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	20000130 	.word	0x20000130
 8002f54:	20000184 	.word	0x20000184
 8002f58:	20000180 	.word	0x20000180
 8002f5c:	2000015c 	.word	0x2000015c
 8002f60:	20000170 	.word	0x20000170

08002f64 <prvInitialiseTaskLists>:
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	e00c      	b.n	8002f8a <prvInitialiseTaskLists+0x26>
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <prvInitialiseTaskLists+0x60>)
 8002f7c:	4413      	add	r3, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fc50 	bl	8003824 <vListInitialise>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3301      	adds	r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d9ef      	bls.n	8002f70 <prvInitialiseTaskLists+0xc>
 8002f90:	480d      	ldr	r0, [pc, #52]	; (8002fc8 <prvInitialiseTaskLists+0x64>)
 8002f92:	f000 fc47 	bl	8003824 <vListInitialise>
 8002f96:	480d      	ldr	r0, [pc, #52]	; (8002fcc <prvInitialiseTaskLists+0x68>)
 8002f98:	f000 fc44 	bl	8003824 <vListInitialise>
 8002f9c:	480c      	ldr	r0, [pc, #48]	; (8002fd0 <prvInitialiseTaskLists+0x6c>)
 8002f9e:	f000 fc41 	bl	8003824 <vListInitialise>
 8002fa2:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <prvInitialiseTaskLists+0x70>)
 8002fa4:	f000 fc3e 	bl	8003824 <vListInitialise>
 8002fa8:	480b      	ldr	r0, [pc, #44]	; (8002fd8 <prvInitialiseTaskLists+0x74>)
 8002faa:	f000 fc3b 	bl	8003824 <vListInitialise>
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <prvInitialiseTaskLists+0x78>)
 8002fb0:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <prvInitialiseTaskLists+0x64>)
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <prvInitialiseTaskLists+0x7c>)
 8002fb6:	4a05      	ldr	r2, [pc, #20]	; (8002fcc <prvInitialiseTaskLists+0x68>)
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2000009c 	.word	0x2000009c
 8002fc8:	20000100 	.word	0x20000100
 8002fcc:	20000114 	.word	0x20000114
 8002fd0:	20000130 	.word	0x20000130
 8002fd4:	20000144 	.word	0x20000144
 8002fd8:	2000015c 	.word	0x2000015c
 8002fdc:	20000128 	.word	0x20000128
 8002fe0:	2000012c 	.word	0x2000012c

08002fe4 <prvCheckTasksWaitingTermination>:
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	e019      	b.n	8003020 <prvCheckTasksWaitingTermination+0x3c>
 8002fec:	f000 fd98 	bl	8003b20 <vPortEnterCritical>
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <prvCheckTasksWaitingTermination+0x50>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fc74 	bl	80038ea <uxListRemove>
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <prvCheckTasksWaitingTermination+0x54>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3b01      	subs	r3, #1
 8003008:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <prvCheckTasksWaitingTermination+0x54>)
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <prvCheckTasksWaitingTermination+0x58>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3b01      	subs	r3, #1
 8003012:	4a0a      	ldr	r2, [pc, #40]	; (800303c <prvCheckTasksWaitingTermination+0x58>)
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	f000 fdb3 	bl	8003b80 <vPortExitCritical>
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f810 	bl	8003040 <prvDeleteTCB>
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <prvCheckTasksWaitingTermination+0x58>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e1      	bne.n	8002fec <prvCheckTasksWaitingTermination+0x8>
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000144 	.word	0x20000144
 8003038:	20000170 	.word	0x20000170
 800303c:	20000158 	.word	0x20000158

08003040 <prvDeleteTCB>:
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fbd7 	bl	8003800 <vPortFree>
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fbd4 	bl	8003800 <vPortFree>
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <prvResetNextTaskUnblockTime>:
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <prvResetNextTaskUnblockTime+0x2c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d104      	bne.n	8003078 <prvResetNextTaskUnblockTime+0x18>
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <prvResetNextTaskUnblockTime+0x30>)
 8003070:	f04f 32ff 	mov.w	r2, #4294967295
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e005      	b.n	8003084 <prvResetNextTaskUnblockTime+0x24>
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <prvResetNextTaskUnblockTime+0x2c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a03      	ldr	r2, [pc, #12]	; (8003090 <prvResetNextTaskUnblockTime+0x30>)
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	20000128 	.word	0x20000128
 8003090:	20000190 	.word	0x20000190

08003094 <xTaskGetSchedulerState>:
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <xTaskGetSchedulerState+0x34>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <xTaskGetSchedulerState+0x14>
 80030a2:	2301      	movs	r3, #1
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	e008      	b.n	80030ba <xTaskGetSchedulerState+0x26>
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <xTaskGetSchedulerState+0x38>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <xTaskGetSchedulerState+0x22>
 80030b0:	2302      	movs	r3, #2
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	e001      	b.n	80030ba <xTaskGetSchedulerState+0x26>
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	2000017c 	.word	0x2000017c
 80030cc:	20000198 	.word	0x20000198

080030d0 <xTaskPriorityDisinherit>:
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d07e      	beq.n	80031e4 <xTaskPriorityDisinherit+0x114>
 80030e6:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <xTaskPriorityDisinherit+0x120>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d00a      	beq.n	8003106 <xTaskPriorityDisinherit+0x36>
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	bf00      	nop
 8003104:	e7fe      	b.n	8003104 <xTaskPriorityDisinherit+0x34>
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <xTaskPriorityDisinherit+0x54>
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	bf00      	nop
 8003122:	e7fe      	b.n	8003122 <xTaskPriorityDisinherit+0x52>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	1e5a      	subs	r2, r3, #1
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003136:	429a      	cmp	r2, r3
 8003138:	d054      	beq.n	80031e4 <xTaskPriorityDisinherit+0x114>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	2b00      	cmp	r3, #0
 8003140:	d150      	bne.n	80031e4 <xTaskPriorityDisinherit+0x114>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	3304      	adds	r3, #4
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fbcf 	bl	80038ea <uxListRemove>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	f1c3 0205 	rsb	r2, r3, #5
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	619a      	str	r2, [r3, #24]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003164:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <xTaskPriorityDisinherit+0x124>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d903      	bls.n	8003174 <xTaskPriorityDisinherit+0xa4>
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <xTaskPriorityDisinherit+0x124>)
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003178:	491f      	ldr	r1, [pc, #124]	; (80031f8 <xTaskPriorityDisinherit+0x128>)
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3304      	adds	r3, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	3204      	adds	r2, #4
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	1d1a      	adds	r2, r3, #4
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <xTaskPriorityDisinherit+0x128>)
 80031b8:	441a      	add	r2, r3
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	615a      	str	r2, [r3, #20]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c2:	490d      	ldr	r1, [pc, #52]	; (80031f8 <xTaskPriorityDisinherit+0x128>)
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1c59      	adds	r1, r3, #1
 80031d2:	4809      	ldr	r0, [pc, #36]	; (80031f8 <xTaskPriorityDisinherit+0x128>)
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4403      	add	r3, r0
 80031de:	6019      	str	r1, [r3, #0]
 80031e0:	2301      	movs	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4618      	mov	r0, r3
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000098 	.word	0x20000098
 80031f4:	20000178 	.word	0x20000178
 80031f8:	2000009c 	.word	0x2000009c

080031fc <prvAddCurrentTaskToDelayedList>:
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
 8003206:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3304      	adds	r3, #4
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fb69 	bl	80038ea <uxListRemove>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d124      	bne.n	800326a <prvAddCurrentTaskToDelayedList+0x6e>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d021      	beq.n	800326a <prvAddCurrentTaskToDelayedList+0x6e>
 8003226:	4b28      	ldr	r3, [pc, #160]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	6892      	ldr	r2, [r2, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	3204      	adds	r2, #4
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1d1a      	adds	r2, r3, #4
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800325a:	615a      	str	r2, [r3, #20]
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xcc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	4a19      	ldr	r2, [pc, #100]	; (80032c8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	bf00      	nop
 8003268:	e026      	b.n	80032b8 <prvAddCurrentTaskToDelayedList+0xbc>
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	429a      	cmp	r2, r3
 8003280:	d209      	bcs.n	8003296 <prvAddCurrentTaskToDelayedList+0x9a>
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <prvAddCurrentTaskToDelayedList+0xd0>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3304      	adds	r3, #4
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 faf3 	bl	800387a <vListInsert>
 8003294:	e010      	b.n	80032b8 <prvAddCurrentTaskToDelayedList+0xbc>
 8003296:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f000 fae9 	bl	800387a <vListInsert>
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d202      	bcs.n	80032b8 <prvAddCurrentTaskToDelayedList+0xbc>
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000174 	.word	0x20000174
 80032c4:	20000098 	.word	0x20000098
 80032c8:	2000015c 	.word	0x2000015c
 80032cc:	2000012c 	.word	0x2000012c
 80032d0:	20000128 	.word	0x20000128
 80032d4:	20000190 	.word	0x20000190

080032d8 <xTimerCreateTimerTask>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af02      	add	r7, sp, #8
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	f000 fa45 	bl	8003770 <prvCheckForValidListAndQueue>
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <xTimerCreateTimerTask+0x54>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <xTimerCreateTimerTask+0x2c>
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <xTimerCreateTimerTask+0x58>)
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	2303      	movs	r3, #3
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	2300      	movs	r3, #0
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	490e      	ldr	r1, [pc, #56]	; (8003334 <xTimerCreateTimerTask+0x5c>)
 80032fc:	480e      	ldr	r0, [pc, #56]	; (8003338 <xTimerCreateTimerTask+0x60>)
 80032fe:	f7fe fee3 	bl	80020c8 <xTaskCreate>
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <xTimerCreateTimerTask+0x48>
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <xTimerCreateTimerTask+0x46>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200001cc 	.word	0x200001cc
 8003330:	200001d0 	.word	0x200001d0
 8003334:	080040b4 	.word	0x080040b4
 8003338:	080033e1 	.word	0x080033e1

0800333c <prvReloadTimer>:
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	e008      	b.n	800335c <prvReloadTimer+0x20>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	4413      	add	r3, r2
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	4798      	blx	r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	18d1      	adds	r1, r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f8db 	bl	8003524 <prvInsertTimerInActiveList>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ea      	bne.n	800334a <prvReloadTimer+0xe>
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <prvProcessExpiredTimer>:
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	4b14      	ldr	r3, [pc, #80]	; (80033dc <prvProcessExpiredTimer+0x5c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3304      	adds	r3, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f000 faa6 	bl	80038ea <uxListRemove>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <prvProcessExpiredTimer+0x38>
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff ffc3 	bl	800333c <prvReloadTimer>
 80033b6:	e008      	b.n	80033ca <prvProcessExpiredTimer+0x4a>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	4798      	blx	r3
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200001c4 	.word	0x200001c4

080033e0 <prvTimerTask>:
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	f107 0308 	add.w	r3, r7, #8
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f857 	bl	80034a0 <prvGetNextExpireTime>
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4619      	mov	r1, r3
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f803 	bl	8003404 <prvProcessTimerOrBlockTask>
 80033fe:	f000 f8d3 	bl	80035a8 <prvProcessReceivedCommands>
 8003402:	e7f1      	b.n	80033e8 <prvTimerTask+0x8>

08003404 <prvProcessTimerOrBlockTask>:
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	f7ff f84d 	bl	80024ac <vTaskSuspendAll>
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f864 	bl	80034e4 <prvSampleTimeNow>
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d130      	bne.n	8003486 <prvProcessTimerOrBlockTask+0x82>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10a      	bne.n	8003440 <prvProcessTimerOrBlockTask+0x3c>
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	429a      	cmp	r2, r3
 8003430:	d806      	bhi.n	8003440 <prvProcessTimerOrBlockTask+0x3c>
 8003432:	f7ff f87f 	bl	8002534 <xTaskResumeAll>
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ffa1 	bl	8003380 <prvProcessExpiredTimer>
 800343e:	e024      	b.n	800348a <prvProcessTimerOrBlockTask+0x86>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <prvProcessTimerOrBlockTask+0x54>
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <prvProcessTimerOrBlockTask+0x90>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <prvProcessTimerOrBlockTask+0x50>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <prvProcessTimerOrBlockTask+0x52>
 8003454:	2300      	movs	r3, #0
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <prvProcessTimerOrBlockTask+0x94>)
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	4619      	mov	r1, r3
 8003466:	f7fe fdfb 	bl	8002060 <vQueueWaitForMessageRestricted>
 800346a:	f7ff f863 	bl	8002534 <xTaskResumeAll>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <prvProcessTimerOrBlockTask+0x86>
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <prvProcessTimerOrBlockTask+0x98>)
 8003476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	f3bf 8f6f 	isb	sy
 8003484:	e001      	b.n	800348a <prvProcessTimerOrBlockTask+0x86>
 8003486:	f7ff f855 	bl	8002534 <xTaskResumeAll>
 800348a:	bf00      	nop
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200001c8 	.word	0x200001c8
 8003498:	200001cc 	.word	0x200001cc
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <prvGetNextExpireTime>:
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <prvGetNextExpireTime+0x40>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <prvGetNextExpireTime+0x16>
 80034b2:	2201      	movs	r2, #1
 80034b4:	e000      	b.n	80034b8 <prvGetNextExpireTime+0x18>
 80034b6:	2200      	movs	r2, #0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <prvGetNextExpireTime+0x30>
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <prvGetNextExpireTime+0x40>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	e001      	b.n	80034d4 <prvGetNextExpireTime+0x34>
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	200001c4 	.word	0x200001c4

080034e4 <prvSampleTimeNow>:
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	f7ff f91e 	bl	800272c <xTaskGetTickCount>
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <prvSampleTimeNow+0x3c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d205      	bcs.n	8003508 <prvSampleTimeNow+0x24>
 80034fc:	f000 f912 	bl	8003724 <prvSwitchTimerLists>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e002      	b.n	800350e <prvSampleTimeNow+0x2a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	4a04      	ldr	r2, [pc, #16]	; (8003520 <prvSampleTimeNow+0x3c>)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200001d4 	.word	0x200001d4

08003524 <prvInsertTimerInActiveList>:
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d812      	bhi.n	8003570 <prvInsertTimerInActiveList+0x4c>
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	1ad2      	subs	r2, r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	429a      	cmp	r2, r3
 8003556:	d302      	bcc.n	800355e <prvInsertTimerInActiveList+0x3a>
 8003558:	2301      	movs	r3, #1
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e01b      	b.n	8003596 <prvInsertTimerInActiveList+0x72>
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <prvInsertTimerInActiveList+0x7c>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3304      	adds	r3, #4
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f000 f986 	bl	800387a <vListInsert>
 800356e:	e012      	b.n	8003596 <prvInsertTimerInActiveList+0x72>
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d206      	bcs.n	8003586 <prvInsertTimerInActiveList+0x62>
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d302      	bcc.n	8003586 <prvInsertTimerInActiveList+0x62>
 8003580:	2301      	movs	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e007      	b.n	8003596 <prvInsertTimerInActiveList+0x72>
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <prvInsertTimerInActiveList+0x80>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f000 f972 	bl	800387a <vListInsert>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200001c8 	.word	0x200001c8
 80035a4:	200001c4 	.word	0x200001c4

080035a8 <prvProcessReceivedCommands>:
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	e0a6      	b.n	80036fe <prvProcessReceivedCommands+0x156>
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f2c0 80a2 	blt.w	80036fc <prvProcessReceivedCommands+0x154>
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <prvProcessReceivedCommands+0x26>
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 f98e 	bl	80038ea <uxListRemove>
 80035ce:	1d3b      	adds	r3, r7, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff87 	bl	80034e4 <prvSampleTimeNow>
 80035d6:	61b8      	str	r0, [r7, #24]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	3b01      	subs	r3, #1
 80035dc:	2b08      	cmp	r3, #8
 80035de:	f200 808e 	bhi.w	80036fe <prvProcessReceivedCommands+0x156>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <prvProcessReceivedCommands+0x40>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	0800360d 	.word	0x0800360d
 80035ec:	0800360d 	.word	0x0800360d
 80035f0:	08003675 	.word	0x08003675
 80035f4:	08003689 	.word	0x08003689
 80035f8:	080036d3 	.word	0x080036d3
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	0800360d 	.word	0x0800360d
 8003604:	08003675 	.word	0x08003675
 8003608:	08003689 	.word	0x08003689
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	18d1      	adds	r1, r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	69f8      	ldr	r0, [r7, #28]
 800362c:	f7ff ff7a 	bl	8003524 <prvInsertTimerInActiveList>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d063      	beq.n	80036fe <prvProcessReceivedCommands+0x156>
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <prvProcessReceivedCommands+0xb0>
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	4413      	add	r3, r2
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4619      	mov	r1, r3
 8003650:	69f8      	ldr	r0, [r7, #28]
 8003652:	f7ff fe73 	bl	800333c <prvReloadTimer>
 8003656:	e008      	b.n	800366a <prvProcessReceivedCommands+0xc2>
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800365e:	f023 0301 	bic.w	r3, r3, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	69f8      	ldr	r0, [r7, #28]
 8003670:	4798      	blx	r3
 8003672:	e044      	b.n	80036fe <prvProcessReceivedCommands+0x156>
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003686:	e03a      	b.n	80036fe <prvProcessReceivedCommands+0x156>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	619a      	str	r2, [r3, #24]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <prvProcessReceivedCommands+0x116>
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <prvProcessReceivedCommands+0x114>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	18d1      	adds	r1, r2, r3
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	69f8      	ldr	r0, [r7, #28]
 80036cc:	f7ff ff2a 	bl	8003524 <prvInsertTimerInActiveList>
 80036d0:	e015      	b.n	80036fe <prvProcessReceivedCommands+0x156>
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <prvProcessReceivedCommands+0x140>
 80036e0:	69f8      	ldr	r0, [r7, #28]
 80036e2:	f000 f88d 	bl	8003800 <vPortFree>
 80036e6:	e00a      	b.n	80036fe <prvProcessReceivedCommands+0x156>
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80036fa:	e000      	b.n	80036fe <prvProcessReceivedCommands+0x156>
 80036fc:	bf00      	nop
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <prvProcessReceivedCommands+0x178>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f107 0108 	add.w	r1, r7, #8
 8003706:	2200      	movs	r2, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f7fe fa6b 	bl	8001be4 <xQueueReceive>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	f47f af4d 	bne.w	80035b0 <prvProcessReceivedCommands+0x8>
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200001cc 	.word	0x200001cc

08003724 <prvSwitchTimerLists>:
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	e009      	b.n	8003740 <prvSwitchTimerLists+0x1c>
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <prvSwitchTimerLists+0x44>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	f04f 31ff 	mov.w	r1, #4294967295
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	f7ff fe20 	bl	8003380 <prvProcessExpiredTimer>
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <prvSwitchTimerLists+0x44>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <prvSwitchTimerLists+0x8>
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <prvSwitchTimerLists+0x44>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <prvSwitchTimerLists+0x48>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <prvSwitchTimerLists+0x44>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <prvSwitchTimerLists+0x48>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200001c4 	.word	0x200001c4
 800376c:	200001c8 	.word	0x200001c8

08003770 <prvCheckForValidListAndQueue>:
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
 8003774:	f000 f9d4 	bl	8003b20 <vPortEnterCritical>
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <prvCheckForValidListAndQueue+0x54>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d11d      	bne.n	80037bc <prvCheckForValidListAndQueue+0x4c>
 8003780:	4811      	ldr	r0, [pc, #68]	; (80037c8 <prvCheckForValidListAndQueue+0x58>)
 8003782:	f000 f84f 	bl	8003824 <vListInitialise>
 8003786:	4811      	ldr	r0, [pc, #68]	; (80037cc <prvCheckForValidListAndQueue+0x5c>)
 8003788:	f000 f84c 	bl	8003824 <vListInitialise>
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <prvCheckForValidListAndQueue+0x60>)
 800378e:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <prvCheckForValidListAndQueue+0x58>)
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <prvCheckForValidListAndQueue+0x64>)
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <prvCheckForValidListAndQueue+0x5c>)
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	2200      	movs	r2, #0
 800379a:	210c      	movs	r1, #12
 800379c:	200a      	movs	r0, #10
 800379e:	f7fe f8b1 	bl	8001904 <xQueueGenericCreate>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <prvCheckForValidListAndQueue+0x54>)
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <prvCheckForValidListAndQueue+0x54>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <prvCheckForValidListAndQueue+0x4c>
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <prvCheckForValidListAndQueue+0x54>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4908      	ldr	r1, [pc, #32]	; (80037d8 <prvCheckForValidListAndQueue+0x68>)
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fc04 	bl	8001fc4 <vQueueAddToRegistry>
 80037bc:	f000 f9e0 	bl	8003b80 <vPortExitCritical>
 80037c0:	bf00      	nop
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	200001cc 	.word	0x200001cc
 80037c8:	2000019c 	.word	0x2000019c
 80037cc:	200001b0 	.word	0x200001b0
 80037d0:	200001c4 	.word	0x200001c4
 80037d4:	200001c8 	.word	0x200001c8
 80037d8:	080040bc 	.word	0x080040bc

080037dc <pvPortMalloc>:
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	f7fe fe62 	bl	80024ac <vTaskSuspendAll>
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fb67 	bl	8003ebc <malloc>
 80037ee:	4603      	mov	r3, r0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	f7fe fe9f 	bl	8002534 <xTaskResumeAll>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <vPortFree>:
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <vPortFree+0x1c>
 800380e:	f7fe fe4d 	bl	80024ac <vTaskSuspendAll>
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fb5a 	bl	8003ecc <free>
 8003818:	f7fe fe8c 	bl	8002534 <xTaskResumeAll>
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <vListInitialise>:
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f103 0208 	add.w	r2, r3, #8
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f04f 32ff 	mov.w	r2, #4294967295
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f103 0208 	add.w	r2, r3, #8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	60da      	str	r2, [r3, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f103 0208 	add.w	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	611a      	str	r2, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <vListInitialiseItem>:
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <vListInsert>:
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d103      	bne.n	800389a <vListInsert+0x20>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	e00c      	b.n	80038b4 <vListInsert+0x3a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3308      	adds	r3, #8
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e002      	b.n	80038a8 <vListInsert+0x2e>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d2f6      	bcs.n	80038a2 <vListInsert+0x28>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	605a      	str	r2, [r3, #4]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	611a      	str	r2, [r3, #16]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <uxListRemove>:
 80038ea:	b480      	push	{r7}
 80038ec:	b085      	sub	sp, #20
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6892      	ldr	r2, [r2, #8]
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6852      	ldr	r2, [r2, #4]
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d103      	bne.n	800391e <uxListRemove+0x34>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	611a      	str	r2, [r3, #16]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	1e5a      	subs	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <pxPortInitialiseStack>:
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3b04      	subs	r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3b04      	subs	r3, #4
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f023 0201 	bic.w	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3b04      	subs	r3, #4
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	4a08      	ldr	r2, [pc, #32]	; (8003990 <pxPortInitialiseStack+0x54>)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3b14      	subs	r3, #20
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3b20      	subs	r3, #32
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	08003995 	.word	0x08003995

08003994 <prvTaskExitError>:
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <prvTaskExitError+0x54>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a6:	d00a      	beq.n	80039be <prvTaskExitError+0x2a>
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <prvTaskExitError+0x28>
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0fc      	beq.n	80039d4 <prvTaskExitError+0x40>
 80039da:	bf00      	nop
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000010 	.word	0x20000010
 80039ec:	00000000 	.word	0x00000000

080039f0 <SVC_Handler>:
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <pxCurrentTCBConst2>)
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	6808      	ldr	r0, [r1, #0]
 80039f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039fa:	f380 8809 	msr	PSP, r0
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f380 8811 	msr	BASEPRI, r0
 8003a0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003a0e:	4770      	bx	lr

08003a10 <pxCurrentTCBConst2>:
 8003a10:	20000098 	.word	0x20000098
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop

08003a18 <prvPortStartFirstTask>:
 8003a18:	4806      	ldr	r0, [pc, #24]	; (8003a34 <prvPortStartFirstTask+0x1c>)
 8003a1a:	6800      	ldr	r0, [r0, #0]
 8003a1c:	6800      	ldr	r0, [r0, #0]
 8003a1e:	f380 8808 	msr	MSP, r0
 8003a22:	b662      	cpsie	i
 8003a24:	b661      	cpsie	f
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	df00      	svc	0
 8003a30:	bf00      	nop
 8003a32:	0000      	.short	0x0000
 8003a34:	e000ed08 	.word	0xe000ed08
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop

08003a3c <xPortStartScheduler>:
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <xPortStartScheduler+0xd0>)
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	22ff      	movs	r2, #255	; 0xff
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	70fb      	strb	r3, [r7, #3]
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	4b2a      	ldr	r3, [pc, #168]	; (8003b10 <xPortStartScheduler+0xd4>)
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <xPortStartScheduler+0xd8>)
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e009      	b.n	8003a86 <xPortStartScheduler+0x4a>
 8003a72:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <xPortStartScheduler+0xd8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	4a26      	ldr	r2, [pc, #152]	; (8003b14 <xPortStartScheduler+0xd8>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	70fb      	strb	r3, [r7, #3]
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	2b80      	cmp	r3, #128	; 0x80
 8003a90:	d0ef      	beq.n	8003a72 <xPortStartScheduler+0x36>
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <xPortStartScheduler+0xd8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f1c3 0307 	rsb	r3, r3, #7
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d00a      	beq.n	8003ab4 <xPortStartScheduler+0x78>
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <xPortStartScheduler+0x76>
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <xPortStartScheduler+0xd8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <xPortStartScheduler+0xd8>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <xPortStartScheduler+0xd8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ac6:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <xPortStartScheduler+0xd8>)
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <xPortStartScheduler+0xdc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <xPortStartScheduler+0xdc>)
 8003ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <xPortStartScheduler+0xdc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a0d      	ldr	r2, [pc, #52]	; (8003b18 <xPortStartScheduler+0xdc>)
 8003ae4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	f000 f981 	bl	8003df0 <vPortSetupTimerInterrupt>
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <xPortStartScheduler+0xe0>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f7ff ff90 	bl	8003a18 <prvPortStartFirstTask>
 8003af8:	f7fe ff98 	bl	8002a2c <vTaskSwitchContext>
 8003afc:	f7ff ff4a 	bl	8003994 <prvTaskExitError>
 8003b00:	2300      	movs	r3, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000e400 	.word	0xe000e400
 8003b10:	200001e4 	.word	0x200001e4
 8003b14:	200001e8 	.word	0x200001e8
 8003b18:	e000ed20 	.word	0xe000ed20
 8003b1c:	20000010 	.word	0x20000010

08003b20 <vPortEnterCritical>:
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	607b      	str	r3, [r7, #4]
 8003b38:	bf00      	nop
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <vPortEnterCritical+0x58>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <vPortEnterCritical+0x58>)
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <vPortEnterCritical+0x58>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10f      	bne.n	8003b6c <vPortEnterCritical+0x4c>
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <vPortEnterCritical+0x5c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <vPortEnterCritical+0x4c>
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	603b      	str	r3, [r7, #0]
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <vPortEnterCritical+0x4a>
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000010 	.word	0x20000010
 8003b7c:	e000ed04 	.word	0xe000ed04

08003b80 <vPortExitCritical>:
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <vPortExitCritical+0x4c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10a      	bne.n	8003ba4 <vPortExitCritical+0x24>
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <vPortExitCritical+0x22>
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <vPortExitCritical+0x4c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <vPortExitCritical+0x4c>)
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <vPortExitCritical+0x4c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <vPortExitCritical+0x42>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	20000010 	.word	0x20000010

08003bd0 <PendSV_Handler>:
 8003bd0:	f3ef 8009 	mrs	r0, PSP
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <pxCurrentTCBConst>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003be0:	6010      	str	r0, [r2, #0]
 8003be2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003be6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003bea:	f380 8811 	msr	BASEPRI, r0
 8003bee:	f7fe ff1d 	bl	8002a2c <vTaskSwitchContext>
 8003bf2:	f04f 0000 	mov.w	r0, #0
 8003bf6:	f380 8811 	msr	BASEPRI, r0
 8003bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	6808      	ldr	r0, [r1, #0]
 8003c02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003c06:	f380 8809 	msr	PSP, r0
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	4770      	bx	lr

08003c10 <pxCurrentTCBConst>:
 8003c10:	20000098 	.word	0x20000098
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop

08003c18 <SysTick_Handler>:
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	bf00      	nop
 8003c32:	f7fe fde3 	bl	80027fc <xTaskIncrementTick>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <SysTick_Handler+0x2c>
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <SysTick_Handler+0x40>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	2300      	movs	r3, #0
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <vPortSuppressTicksAndSleep>:
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	4b5b      	ldr	r3, [pc, #364]	; (8003dd4 <vPortSuppressTicksAndSleep+0x178>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d902      	bls.n	8003c74 <vPortSuppressTicksAndSleep+0x18>
 8003c6e:	4b59      	ldr	r3, [pc, #356]	; (8003dd4 <vPortSuppressTicksAndSleep+0x178>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	b672      	cpsid	i
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f7ff f93b 	bl	8002ef8 <eTaskConfirmSleepModeStatus>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <vPortSuppressTicksAndSleep+0x30>
 8003c88:	b662      	cpsie	i
 8003c8a:	e09e      	b.n	8003dca <vPortSuppressTicksAndSleep+0x16e>
 8003c8c:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <vPortSuppressTicksAndSleep+0x17c>)
 8003c8e:	2206      	movs	r2, #6
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <vPortSuppressTicksAndSleep+0x180>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <vPortSuppressTicksAndSleep+0x48>
 8003c9e:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	4a4d      	ldr	r2, [pc, #308]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <vPortSuppressTicksAndSleep+0x188>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d008      	beq.n	8003cd4 <vPortSuppressTicksAndSleep+0x78>
 8003cc2:	4b48      	ldr	r3, [pc, #288]	; (8003de4 <vPortSuppressTicksAndSleep+0x188>)
 8003cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	4b45      	ldr	r3, [pc, #276]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <vPortSuppressTicksAndSleep+0x18c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d904      	bls.n	8003ce8 <vPortSuppressTicksAndSleep+0x8c>
 8003cde:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <vPortSuppressTicksAndSleep+0x18c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	4a40      	ldr	r2, [pc, #256]	; (8003dec <vPortSuppressTicksAndSleep+0x190>)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <vPortSuppressTicksAndSleep+0x180>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	4b38      	ldr	r3, [pc, #224]	; (8003dd8 <vPortSuppressTicksAndSleep+0x17c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a37      	ldr	r2, [pc, #220]	; (8003dd8 <vPortSuppressTicksAndSleep+0x17c>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <vPortSuppressTicksAndSleep+0xb8>
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	bf30      	wfi
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	b662      	cpsie	i
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	b672      	cpsid	i
 8003d20:	f3bf 8f4f 	dsb	sy
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <vPortSuppressTicksAndSleep+0x17c>)
 8003d2a:	2206      	movs	r2, #6
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <vPortSuppressTicksAndSleep+0x17c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01d      	beq.n	8003d76 <vPortSuppressTicksAndSleep+0x11a>
 8003d3a:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <vPortSuppressTicksAndSleep+0x180>)
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	1acb      	subs	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <vPortSuppressTicksAndSleep+0x18c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d904      	bls.n	8003d60 <vPortSuppressTicksAndSleep+0x104>
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d903      	bls.n	8003d68 <vPortSuppressTicksAndSleep+0x10c>
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	4a20      	ldr	r2, [pc, #128]	; (8003dec <vPortSuppressTicksAndSleep+0x190>)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	e01a      	b.n	8003dac <vPortSuppressTicksAndSleep+0x150>
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <vPortSuppressTicksAndSleep+0x180>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	4b18      	ldr	r3, [pc, #96]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	fb02 f203 	mul.w	r2, r2, r3
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	fb02 f203 	mul.w	r2, r2, r3
 8003da4:	4911      	ldr	r1, [pc, #68]	; (8003dec <vPortSuppressTicksAndSleep+0x190>)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	600b      	str	r3, [r1, #0]
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <vPortSuppressTicksAndSleep+0x180>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <vPortSuppressTicksAndSleep+0x17c>)
 8003db4:	2207      	movs	r2, #7
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <vPortSuppressTicksAndSleep+0x184>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a0b      	ldr	r2, [pc, #44]	; (8003dec <vPortSuppressTicksAndSleep+0x190>)
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	69b8      	ldr	r0, [r7, #24]
 8003dc4:	f7fe fcc0 	bl	8002748 <vTaskStepTick>
 8003dc8:	b662      	cpsie	i
 8003dca:	bf00      	nop
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	200001dc 	.word	0x200001dc
 8003dd8:	e000e010 	.word	0xe000e010
 8003ddc:	e000e018 	.word	0xe000e018
 8003de0:	200001d8 	.word	0x200001d8
 8003de4:	e000ed04 	.word	0xe000ed04
 8003de8:	200001e0 	.word	0x200001e0
 8003dec:	e000e014 	.word	0xe000e014

08003df0 <vPortSetupTimerInterrupt>:
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <vPortSetupTimerInterrupt+0x58>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <vPortSetupTimerInterrupt+0x5c>)
 8003dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <vPortSetupTimerInterrupt+0x60>)
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <vPortSetupTimerInterrupt+0x60>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	4a10      	ldr	r2, [pc, #64]	; (8003e54 <vPortSetupTimerInterrupt+0x64>)
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <vPortSetupTimerInterrupt+0x68>)
 8003e16:	225e      	movs	r2, #94	; 0x5e
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <vPortSetupTimerInterrupt+0x6c>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <vPortSetupTimerInterrupt+0x70>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	4b08      	ldr	r3, [pc, #32]	; (8003e48 <vPortSetupTimerInterrupt+0x58>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <vPortSetupTimerInterrupt+0x5c>)
 8003e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e30:	099b      	lsrs	r3, r3, #6
 8003e32:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <vPortSetupTimerInterrupt+0x74>)
 8003e34:	3b01      	subs	r3, #1
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <vPortSetupTimerInterrupt+0x6c>)
 8003e3a:	2207      	movs	r2, #7
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	bf00      	nop
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	10624dd3 	.word	0x10624dd3
 8003e50:	200001d8 	.word	0x200001d8
 8003e54:	200001dc 	.word	0x200001dc
 8003e58:	200001e0 	.word	0x200001e0
 8003e5c:	e000e010 	.word	0xe000e010
 8003e60:	e000e018 	.word	0xe000e018
 8003e64:	e000e014 	.word	0xe000e014

08003e68 <__errno>:
 8003e68:	4b01      	ldr	r3, [pc, #4]	; (8003e70 <__errno+0x8>)
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000014 	.word	0x20000014

08003e74 <__libc_init_array>:
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	2600      	movs	r6, #0
 8003e78:	4d0c      	ldr	r5, [pc, #48]	; (8003eac <__libc_init_array+0x38>)
 8003e7a:	4c0d      	ldr	r4, [pc, #52]	; (8003eb0 <__libc_init_array+0x3c>)
 8003e7c:	1b64      	subs	r4, r4, r5
 8003e7e:	10a4      	asrs	r4, r4, #2
 8003e80:	42a6      	cmp	r6, r4
 8003e82:	d109      	bne.n	8003e98 <__libc_init_array+0x24>
 8003e84:	f000 f904 	bl	8004090 <_init>
 8003e88:	2600      	movs	r6, #0
 8003e8a:	4d0a      	ldr	r5, [pc, #40]	; (8003eb4 <__libc_init_array+0x40>)
 8003e8c:	4c0a      	ldr	r4, [pc, #40]	; (8003eb8 <__libc_init_array+0x44>)
 8003e8e:	1b64      	subs	r4, r4, r5
 8003e90:	10a4      	asrs	r4, r4, #2
 8003e92:	42a6      	cmp	r6, r4
 8003e94:	d105      	bne.n	8003ea2 <__libc_init_array+0x2e>
 8003e96:	bd70      	pop	{r4, r5, r6, pc}
 8003e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e9c:	4798      	blx	r3
 8003e9e:	3601      	adds	r6, #1
 8003ea0:	e7ee      	b.n	8003e80 <__libc_init_array+0xc>
 8003ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea6:	4798      	blx	r3
 8003ea8:	3601      	adds	r6, #1
 8003eaa:	e7f2      	b.n	8003e92 <__libc_init_array+0x1e>
 8003eac:	080040f0 	.word	0x080040f0
 8003eb0:	080040f0 	.word	0x080040f0
 8003eb4:	080040f0 	.word	0x080040f0
 8003eb8:	080040f4 	.word	0x080040f4

08003ebc <malloc>:
 8003ebc:	4b02      	ldr	r3, [pc, #8]	; (8003ec8 <malloc+0xc>)
 8003ebe:	4601      	mov	r1, r0
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	f000 b86d 	b.w	8003fa0 <_malloc_r>
 8003ec6:	bf00      	nop
 8003ec8:	20000014 	.word	0x20000014

08003ecc <free>:
 8003ecc:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <free+0xc>)
 8003ece:	4601      	mov	r1, r0
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	f000 b819 	b.w	8003f08 <_free_r>
 8003ed6:	bf00      	nop
 8003ed8:	20000014 	.word	0x20000014

08003edc <memcpy>:
 8003edc:	440a      	add	r2, r1
 8003ede:	4291      	cmp	r1, r2
 8003ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ee4:	d100      	bne.n	8003ee8 <memcpy+0xc>
 8003ee6:	4770      	bx	lr
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ef4:	d1f9      	bne.n	8003eea <memcpy+0xe>
 8003ef6:	bd10      	pop	{r4, pc}

08003ef8 <memset>:
 8003ef8:	4603      	mov	r3, r0
 8003efa:	4402      	add	r2, r0
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d100      	bne.n	8003f02 <memset+0xa>
 8003f00:	4770      	bx	lr
 8003f02:	f803 1b01 	strb.w	r1, [r3], #1
 8003f06:	e7f9      	b.n	8003efc <memset+0x4>

08003f08 <_free_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	2900      	cmp	r1, #0
 8003f0e:	d043      	beq.n	8003f98 <_free_r+0x90>
 8003f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f14:	1f0c      	subs	r4, r1, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	bfb8      	it	lt
 8003f1a:	18e4      	addlt	r4, r4, r3
 8003f1c:	f000 f8aa 	bl	8004074 <__malloc_lock>
 8003f20:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <_free_r+0x94>)
 8003f22:	6813      	ldr	r3, [r2, #0]
 8003f24:	4610      	mov	r0, r2
 8003f26:	b933      	cbnz	r3, 8003f36 <_free_r+0x2e>
 8003f28:	6063      	str	r3, [r4, #4]
 8003f2a:	6014      	str	r4, [r2, #0]
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f32:	f000 b8a5 	b.w	8004080 <__malloc_unlock>
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	d90a      	bls.n	8003f50 <_free_r+0x48>
 8003f3a:	6821      	ldr	r1, [r4, #0]
 8003f3c:	1862      	adds	r2, r4, r1
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	bf01      	itttt	eq
 8003f42:	681a      	ldreq	r2, [r3, #0]
 8003f44:	685b      	ldreq	r3, [r3, #4]
 8003f46:	1852      	addeq	r2, r2, r1
 8003f48:	6022      	streq	r2, [r4, #0]
 8003f4a:	6063      	str	r3, [r4, #4]
 8003f4c:	6004      	str	r4, [r0, #0]
 8003f4e:	e7ed      	b.n	8003f2c <_free_r+0x24>
 8003f50:	461a      	mov	r2, r3
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	b10b      	cbz	r3, 8003f5a <_free_r+0x52>
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	d9fa      	bls.n	8003f50 <_free_r+0x48>
 8003f5a:	6811      	ldr	r1, [r2, #0]
 8003f5c:	1850      	adds	r0, r2, r1
 8003f5e:	42a0      	cmp	r0, r4
 8003f60:	d10b      	bne.n	8003f7a <_free_r+0x72>
 8003f62:	6820      	ldr	r0, [r4, #0]
 8003f64:	4401      	add	r1, r0
 8003f66:	1850      	adds	r0, r2, r1
 8003f68:	4283      	cmp	r3, r0
 8003f6a:	6011      	str	r1, [r2, #0]
 8003f6c:	d1de      	bne.n	8003f2c <_free_r+0x24>
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4401      	add	r1, r0
 8003f74:	6011      	str	r1, [r2, #0]
 8003f76:	6053      	str	r3, [r2, #4]
 8003f78:	e7d8      	b.n	8003f2c <_free_r+0x24>
 8003f7a:	d902      	bls.n	8003f82 <_free_r+0x7a>
 8003f7c:	230c      	movs	r3, #12
 8003f7e:	602b      	str	r3, [r5, #0]
 8003f80:	e7d4      	b.n	8003f2c <_free_r+0x24>
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	1821      	adds	r1, r4, r0
 8003f86:	428b      	cmp	r3, r1
 8003f88:	bf01      	itttt	eq
 8003f8a:	6819      	ldreq	r1, [r3, #0]
 8003f8c:	685b      	ldreq	r3, [r3, #4]
 8003f8e:	1809      	addeq	r1, r1, r0
 8003f90:	6021      	streq	r1, [r4, #0]
 8003f92:	6063      	str	r3, [r4, #4]
 8003f94:	6054      	str	r4, [r2, #4]
 8003f96:	e7c9      	b.n	8003f2c <_free_r+0x24>
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200001ec 	.word	0x200001ec

08003fa0 <_malloc_r>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	1ccd      	adds	r5, r1, #3
 8003fa4:	f025 0503 	bic.w	r5, r5, #3
 8003fa8:	3508      	adds	r5, #8
 8003faa:	2d0c      	cmp	r5, #12
 8003fac:	bf38      	it	cc
 8003fae:	250c      	movcc	r5, #12
 8003fb0:	2d00      	cmp	r5, #0
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	db01      	blt.n	8003fba <_malloc_r+0x1a>
 8003fb6:	42a9      	cmp	r1, r5
 8003fb8:	d903      	bls.n	8003fc2 <_malloc_r+0x22>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	6033      	str	r3, [r6, #0]
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc2:	f000 f857 	bl	8004074 <__malloc_lock>
 8003fc6:	4921      	ldr	r1, [pc, #132]	; (800404c <_malloc_r+0xac>)
 8003fc8:	680a      	ldr	r2, [r1, #0]
 8003fca:	4614      	mov	r4, r2
 8003fcc:	b99c      	cbnz	r4, 8003ff6 <_malloc_r+0x56>
 8003fce:	4f20      	ldr	r7, [pc, #128]	; (8004050 <_malloc_r+0xb0>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	b923      	cbnz	r3, 8003fde <_malloc_r+0x3e>
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f000 f83c 	bl	8004054 <_sbrk_r>
 8003fdc:	6038      	str	r0, [r7, #0]
 8003fde:	4629      	mov	r1, r5
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f000 f837 	bl	8004054 <_sbrk_r>
 8003fe6:	1c43      	adds	r3, r0, #1
 8003fe8:	d123      	bne.n	8004032 <_malloc_r+0x92>
 8003fea:	230c      	movs	r3, #12
 8003fec:	4630      	mov	r0, r6
 8003fee:	6033      	str	r3, [r6, #0]
 8003ff0:	f000 f846 	bl	8004080 <__malloc_unlock>
 8003ff4:	e7e3      	b.n	8003fbe <_malloc_r+0x1e>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	1b5b      	subs	r3, r3, r5
 8003ffa:	d417      	bmi.n	800402c <_malloc_r+0x8c>
 8003ffc:	2b0b      	cmp	r3, #11
 8003ffe:	d903      	bls.n	8004008 <_malloc_r+0x68>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	441c      	add	r4, r3
 8004004:	6025      	str	r5, [r4, #0]
 8004006:	e004      	b.n	8004012 <_malloc_r+0x72>
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	42a2      	cmp	r2, r4
 800400c:	bf0c      	ite	eq
 800400e:	600b      	streq	r3, [r1, #0]
 8004010:	6053      	strne	r3, [r2, #4]
 8004012:	4630      	mov	r0, r6
 8004014:	f000 f834 	bl	8004080 <__malloc_unlock>
 8004018:	f104 000b 	add.w	r0, r4, #11
 800401c:	1d23      	adds	r3, r4, #4
 800401e:	f020 0007 	bic.w	r0, r0, #7
 8004022:	1ac2      	subs	r2, r0, r3
 8004024:	d0cc      	beq.n	8003fc0 <_malloc_r+0x20>
 8004026:	1a1b      	subs	r3, r3, r0
 8004028:	50a3      	str	r3, [r4, r2]
 800402a:	e7c9      	b.n	8003fc0 <_malloc_r+0x20>
 800402c:	4622      	mov	r2, r4
 800402e:	6864      	ldr	r4, [r4, #4]
 8004030:	e7cc      	b.n	8003fcc <_malloc_r+0x2c>
 8004032:	1cc4      	adds	r4, r0, #3
 8004034:	f024 0403 	bic.w	r4, r4, #3
 8004038:	42a0      	cmp	r0, r4
 800403a:	d0e3      	beq.n	8004004 <_malloc_r+0x64>
 800403c:	1a21      	subs	r1, r4, r0
 800403e:	4630      	mov	r0, r6
 8004040:	f000 f808 	bl	8004054 <_sbrk_r>
 8004044:	3001      	adds	r0, #1
 8004046:	d1dd      	bne.n	8004004 <_malloc_r+0x64>
 8004048:	e7cf      	b.n	8003fea <_malloc_r+0x4a>
 800404a:	bf00      	nop
 800404c:	200001ec 	.word	0x200001ec
 8004050:	200001f0 	.word	0x200001f0

08004054 <_sbrk_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	2300      	movs	r3, #0
 8004058:	4d05      	ldr	r5, [pc, #20]	; (8004070 <_sbrk_r+0x1c>)
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	602b      	str	r3, [r5, #0]
 8004060:	f7fc fa3c 	bl	80004dc <_sbrk>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_sbrk_r+0x1a>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_sbrk_r+0x1a>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	20000284 	.word	0x20000284

08004074 <__malloc_lock>:
 8004074:	4801      	ldr	r0, [pc, #4]	; (800407c <__malloc_lock+0x8>)
 8004076:	f000 b809 	b.w	800408c <__retarget_lock_acquire_recursive>
 800407a:	bf00      	nop
 800407c:	2000028c 	.word	0x2000028c

08004080 <__malloc_unlock>:
 8004080:	4801      	ldr	r0, [pc, #4]	; (8004088 <__malloc_unlock+0x8>)
 8004082:	f000 b804 	b.w	800408e <__retarget_lock_release_recursive>
 8004086:	bf00      	nop
 8004088:	2000028c 	.word	0x2000028c

0800408c <__retarget_lock_acquire_recursive>:
 800408c:	4770      	bx	lr

0800408e <__retarget_lock_release_recursive>:
 800408e:	4770      	bx	lr

08004090 <_init>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	bf00      	nop
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr

0800409c <_fini>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr
