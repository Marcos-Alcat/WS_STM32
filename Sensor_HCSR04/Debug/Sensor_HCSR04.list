
Sensor_HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003508  08003508  00013508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035dc  080035dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080035dc  080035dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035dc  080035dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035dc  080035dc  000135dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000070  08003654  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003654  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009840  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188e  00000000  00000000  000298d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0002b168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d9b  00000000  00000000  0002c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0df  00000000  00000000  0004420b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089896  00000000  00000000  0004e2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d7b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003328  00000000  00000000  000d7bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080034f0 	.word	0x080034f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080034f0 	.word	0x080034f0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b598      	push	{r3, r4, r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fac6 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f89c 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 f930 	bl	8000ba0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000940:	f000 f8de 	bl	8000b00 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000944:	4842      	ldr	r0, [pc, #264]	; (8000a50 <main+0x120>)
 8000946:	f001 fa07 	bl	8001d58 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2108      	movs	r1, #8
 800094e:	4841      	ldr	r0, [pc, #260]	; (8000a54 <main+0x124>)
 8000950:	f000 fdbd 	bl	80014ce <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2108      	movs	r1, #8
 8000958:	483e      	ldr	r0, [pc, #248]	; (8000a54 <main+0x124>)
 800095a:	f000 fdb8 	bl	80014ce <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800095e:	4b3c      	ldr	r3, [pc, #240]	; (8000a50 <main+0x120>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
	   while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000966:	bf00      	nop
 8000968:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <main+0x120>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	2b09      	cmp	r3, #9
 8000970:	d9fa      	bls.n	8000968 <main+0x38>
	   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	4837      	ldr	r0, [pc, #220]	; (8000a54 <main+0x124>)
 8000978:	f000 fda9 	bl	80014ce <HAL_GPIO_WritePin>

	   pMillis = HAL_GetTick();
 800097c:	f000 fafa 	bl	8000f74 <HAL_GetTick>
 8000980:	4603      	mov	r3, r0
 8000982:	4a35      	ldr	r2, [pc, #212]	; (8000a58 <main+0x128>)
 8000984:	6013      	str	r3, [r2, #0]
	   while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000986:	bf00      	nop
 8000988:	2110      	movs	r1, #16
 800098a:	4832      	ldr	r0, [pc, #200]	; (8000a54 <main+0x124>)
 800098c:	f000 fd88 	bl	80014a0 <HAL_GPIO_ReadPin>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d108      	bne.n	80009a8 <main+0x78>
 8000996:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <main+0x128>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f103 040a 	add.w	r4, r3, #10
 800099e:	f000 fae9 	bl	8000f74 <HAL_GetTick>
 80009a2:	4603      	mov	r3, r0
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d8ef      	bhi.n	8000988 <main+0x58>
	   val1 = __HAL_TIM_GET_COUNTER (&htim1);
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <main+0x120>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ae:	4a2b      	ldr	r2, [pc, #172]	; (8000a5c <main+0x12c>)
 80009b0:	6013      	str	r3, [r2, #0]

	   pMillis = HAL_GetTick();
 80009b2:	f000 fadf 	bl	8000f74 <HAL_GetTick>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <main+0x128>)
 80009ba:	6013      	str	r3, [r2, #0]
	   while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 80009bc:	bf00      	nop
 80009be:	2110      	movs	r1, #16
 80009c0:	4824      	ldr	r0, [pc, #144]	; (8000a54 <main+0x124>)
 80009c2:	f000 fd6d 	bl	80014a0 <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <main+0xae>
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <main+0x128>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80009d4:	f000 face 	bl	8000f74 <HAL_GetTick>
 80009d8:	4603      	mov	r3, r0
 80009da:	429c      	cmp	r4, r3
 80009dc:	d8ef      	bhi.n	80009be <main+0x8e>
	   val2 = __HAL_TIM_GET_COUNTER (&htim1);
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <main+0x120>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <main+0x130>)
 80009e6:	6013      	str	r3, [r2, #0]

	   distance = (val2-val1)* 0.034/2;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <main+0x130>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <main+0x12c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fcee 	bl	80003d4 <__aeabi_ui2d>
 80009f8:	a313      	add	r3, pc, #76	; (adr r3, 8000a48 <main+0x118>)
 80009fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fe:	f7ff fd63 	bl	80004c8 <__aeabi_dmul>
 8000a02:	4602      	mov	r2, r0
 8000a04:	460b      	mov	r3, r1
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 0200 	mov.w	r2, #0
 8000a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a12:	f7ff fe83 	bl	800071c <__aeabi_ddiv>
 8000a16:	4602      	mov	r2, r0
 8000a18:	460b      	mov	r3, r1
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f7ff ff65 	bl	80008ec <__aeabi_d2uiz>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <main+0x134>)
 8000a28:	801a      	strh	r2, [r3, #0]
	   sprintf(string,"%d    ", distance);
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <main+0x134>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	490d      	ldr	r1, [pc, #52]	; (8000a68 <main+0x138>)
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <main+0x13c>)
 8000a34:	f001 fc42 	bl	80022bc <siprintf>
	   printf("Hello World\n\r");
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <main+0x140>)
 8000a3a:	f001 fc27 	bl	800228c <iprintf>
	   HAL_Delay(50);
 8000a3e:	2032      	movs	r0, #50	; 0x32
 8000a40:	f000 faa2 	bl	8000f88 <HAL_Delay>
  {
 8000a44:	e786      	b.n	8000954 <main+0x24>
 8000a46:	bf00      	nop
 8000a48:	b020c49c 	.word	0xb020c49c
 8000a4c:	3fa16872 	.word	0x3fa16872
 8000a50:	200000b8 	.word	0x200000b8
 8000a54:	40010800 	.word	0x40010800
 8000a58:	200000a4 	.word	0x200000a4
 8000a5c:	2000008c 	.word	0x2000008c
 8000a60:	20000090 	.word	0x20000090
 8000a64:	20000094 	.word	0x20000094
 8000a68:	08003508 	.word	0x08003508
 8000a6c:	200000a8 	.word	0x200000a8
 8000a70:	08003510 	.word	0x08003510

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	; 0x40
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	2228      	movs	r2, #40	; 0x28
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fbfa 	bl	800227c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ab2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab8:	f107 0318 	add.w	r3, r7, #24
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fd1f 	bl	8001500 <HAL_RCC_OscConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ac8:	f000 f8b4 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000acc:	230f      	movs	r3, #15
 8000ace:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000adc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 ff8a 	bl	8001a00 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000af2:	f000 f89f 	bl	8000c34 <Error_Handler>
  }
}
 8000af6:	bf00      	nop
 8000af8:	3740      	adds	r7, #64	; 0x40
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <MX_TIM1_Init+0x9c>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b24:	2247      	movs	r2, #71	; 0x47
 8000b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b48:	4813      	ldr	r0, [pc, #76]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b4a:	f001 f8b5 	bl	8001cb8 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b54:	f000 f86e 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b66:	f001 f941 	bl	8001dec <HAL_TIM_ConfigClockSource>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b70:	f000 f860 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_TIM1_Init+0x98>)
 8000b82:	f001 faf3 	bl	800216c <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b8c:	f000 f852 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000b8 	.word	0x200000b8
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bba:	f043 0320 	orr.w	r3, r3, #32
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0320 	and.w	r3, r3, #32
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_GPIO_Init+0x8c>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2108      	movs	r1, #8
 8000be8:	4811      	ldr	r0, [pc, #68]	; (8000c30 <MX_GPIO_Init+0x90>)
 8000bea:	f000 fc70 	bl	80014ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bee:	2308      	movs	r3, #8
 8000bf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <MX_GPIO_Init+0x90>)
 8000c06:	f000 fac7 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <MX_GPIO_Init+0x90>)
 8000c1e:	f000 fabb 	bl	8001198 <HAL_GPIO_Init>

}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6193      	str	r3, [r2, #24]
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	61d3      	str	r3, [r2, #28]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x5c>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_MspInit+0x60>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_MspInit+0x60>)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010000 	.word	0x40010000

08000ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <HAL_TIM_Base_MspInit+0x34>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10b      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_TIM_Base_MspInit+0x38>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_TIM_Base_MspInit+0x38>)
 8000cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_TIM_Base_MspInit+0x38>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 f913 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e00a      	b.n	8000d56 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d40:	f3af 8000 	nop.w
 8000d44:	4601      	mov	r1, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	60ba      	str	r2, [r7, #8]
 8000d4c:	b2ca      	uxtb	r2, r1
 8000d4e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	dbf0      	blt.n	8000d40 <_read+0x12>
	}

return len;
 8000d5e:	687b      	ldr	r3, [r7, #4]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	e009      	b.n	8000d8e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	60ba      	str	r2, [r7, #8]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	dbf1      	blt.n	8000d7a <_write+0x12>
	}
	return len;
 8000d96:	687b      	ldr	r3, [r7, #4]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_close>:

int _close(int file)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	return -1;
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <_isatty>:

int _isatty(int file)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	return 1;
 8000ddc:	2301      	movs	r3, #1
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
	return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f001 f9fa 	bl	8002228 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20005000 	.word	0x20005000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	20000098 	.word	0x20000098
 8000e68:	20000118 	.word	0x20000118

08000e6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e78:	f7ff fff8 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e7e:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e80:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e94:	4c09      	ldr	r4, [pc, #36]	; (8000ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f001 f9c7 	bl	8002234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea6:	f7ff fd43 	bl	8000930 <main>
  bx lr
 8000eaa:	4770      	bx	lr
  ldr r0, =_sdata
 8000eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eb4:	080035e4 	.word	0x080035e4
  ldr r2, =_sbss
 8000eb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ebc:	20000114 	.word	0x20000114

08000ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC1_2_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x28>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x28>)
 8000ece:	f043 0310 	orr.w	r3, r3, #16
 8000ed2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f92b 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff feae 	bl	8000c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40022000 	.word	0x40022000

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f935 	bl	800117e <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f90b 	bl	8001146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_IncTick+0x1c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_IncTick+0x20>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <HAL_IncTick+0x20>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000100 	.word	0x20000100

08000f74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <HAL_GetTick+0x10>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000100 	.word	0x20000100

08000f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff fff0 	bl	8000f74 <HAL_GetTick>
 8000f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa0:	d005      	beq.n	8000fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_Delay+0x44>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fae:	bf00      	nop
 8000fb0:	f7ff ffe0 	bl	8000f74 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d8f7      	bhi.n	8000fb0 <HAL_Delay+0x28>
  {
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010fc:	d301      	bcc.n	8001102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fe:	2301      	movs	r3, #1
 8001100:	e00f      	b.n	8001122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <SysTick_Config+0x40>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110a:	210f      	movs	r1, #15
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f7ff ff90 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <SysTick_Config+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <SysTick_Config+0x40>)
 800111c:	2207      	movs	r2, #7
 800111e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff49 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff5e 	bl	8001018 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff90 	bl	8001088 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffb0 	bl	80010ec <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b08b      	sub	sp, #44	; 0x2c
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	e169      	b.n	8001480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ac:	2201      	movs	r2, #1
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8158 	bne.w	800147a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a9a      	ldr	r2, [pc, #616]	; (8001438 <HAL_GPIO_Init+0x2a0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d05e      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011d4:	4a98      	ldr	r2, [pc, #608]	; (8001438 <HAL_GPIO_Init+0x2a0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d875      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011da:	4a98      	ldr	r2, [pc, #608]	; (800143c <HAL_GPIO_Init+0x2a4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d058      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011e0:	4a96      	ldr	r2, [pc, #600]	; (800143c <HAL_GPIO_Init+0x2a4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d86f      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011e6:	4a96      	ldr	r2, [pc, #600]	; (8001440 <HAL_GPIO_Init+0x2a8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d052      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011ec:	4a94      	ldr	r2, [pc, #592]	; (8001440 <HAL_GPIO_Init+0x2a8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d869      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011f2:	4a94      	ldr	r2, [pc, #592]	; (8001444 <HAL_GPIO_Init+0x2ac>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d04c      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011f8:	4a92      	ldr	r2, [pc, #584]	; (8001444 <HAL_GPIO_Init+0x2ac>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d863      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011fe:	4a92      	ldr	r2, [pc, #584]	; (8001448 <HAL_GPIO_Init+0x2b0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d046      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 8001204:	4a90      	ldr	r2, [pc, #576]	; (8001448 <HAL_GPIO_Init+0x2b0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d85d      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 800120a:	2b12      	cmp	r3, #18
 800120c:	d82a      	bhi.n	8001264 <HAL_GPIO_Init+0xcc>
 800120e:	2b12      	cmp	r3, #18
 8001210:	d859      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <HAL_GPIO_Init+0x80>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	08001293 	.word	0x08001293
 800121c:	0800126d 	.word	0x0800126d
 8001220:	0800127f 	.word	0x0800127f
 8001224:	080012c1 	.word	0x080012c1
 8001228:	080012c7 	.word	0x080012c7
 800122c:	080012c7 	.word	0x080012c7
 8001230:	080012c7 	.word	0x080012c7
 8001234:	080012c7 	.word	0x080012c7
 8001238:	080012c7 	.word	0x080012c7
 800123c:	080012c7 	.word	0x080012c7
 8001240:	080012c7 	.word	0x080012c7
 8001244:	080012c7 	.word	0x080012c7
 8001248:	080012c7 	.word	0x080012c7
 800124c:	080012c7 	.word	0x080012c7
 8001250:	080012c7 	.word	0x080012c7
 8001254:	080012c7 	.word	0x080012c7
 8001258:	080012c7 	.word	0x080012c7
 800125c:	08001275 	.word	0x08001275
 8001260:	08001289 	.word	0x08001289
 8001264:	4a79      	ldr	r2, [pc, #484]	; (800144c <HAL_GPIO_Init+0x2b4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800126a:	e02c      	b.n	80012c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e029      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	3304      	adds	r3, #4
 800127a:	623b      	str	r3, [r7, #32]
          break;
 800127c:	e024      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	3308      	adds	r3, #8
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e01f      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	330c      	adds	r3, #12
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e01a      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800129a:	2304      	movs	r3, #4
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e013      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a8:	2308      	movs	r3, #8
 80012aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	611a      	str	r2, [r3, #16]
          break;
 80012b2:	e009      	b.n	80012c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b4:	2308      	movs	r3, #8
 80012b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	615a      	str	r2, [r3, #20]
          break;
 80012be:	e003      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          break;
 80012c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d801      	bhi.n	80012d2 <HAL_GPIO_Init+0x13a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	e001      	b.n	80012d6 <HAL_GPIO_Init+0x13e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3304      	adds	r3, #4
 80012d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	d802      	bhi.n	80012e4 <HAL_GPIO_Init+0x14c>
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x152>
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	3b08      	subs	r3, #8
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	210f      	movs	r1, #15
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	6a39      	ldr	r1, [r7, #32]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	431a      	orrs	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80b1 	beq.w	800147a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <HAL_GPIO_Init+0x2b8>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001330:	4a48      	ldr	r2, [pc, #288]	; (8001454 <HAL_GPIO_Init+0x2bc>)
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a40      	ldr	r2, [pc, #256]	; (8001458 <HAL_GPIO_Init+0x2c0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d013      	beq.n	8001384 <HAL_GPIO_Init+0x1ec>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a3f      	ldr	r2, [pc, #252]	; (800145c <HAL_GPIO_Init+0x2c4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d00d      	beq.n	8001380 <HAL_GPIO_Init+0x1e8>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a3e      	ldr	r2, [pc, #248]	; (8001460 <HAL_GPIO_Init+0x2c8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d007      	beq.n	800137c <HAL_GPIO_Init+0x1e4>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a3d      	ldr	r2, [pc, #244]	; (8001464 <HAL_GPIO_Init+0x2cc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d101      	bne.n	8001378 <HAL_GPIO_Init+0x1e0>
 8001374:	2303      	movs	r3, #3
 8001376:	e006      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 8001378:	2304      	movs	r3, #4
 800137a:	e004      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 800137c:	2302      	movs	r3, #2
 800137e:	e002      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 8001380:	2301      	movs	r3, #1
 8001382:	e000      	b.n	8001386 <HAL_GPIO_Init+0x1ee>
 8001384:	2300      	movs	r3, #0
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	f002 0203 	and.w	r2, r2, #3
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	4093      	lsls	r3, r2
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	4313      	orrs	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001396:	492f      	ldr	r1, [pc, #188]	; (8001454 <HAL_GPIO_Init+0x2bc>)
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d006      	beq.n	80013be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	492c      	ldr	r1, [pc, #176]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	608b      	str	r3, [r1, #8]
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	4928      	ldr	r1, [pc, #160]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	4922      	ldr	r1, [pc, #136]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	60cb      	str	r3, [r1, #12]
 80013e4:	e006      	b.n	80013f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	491e      	ldr	r1, [pc, #120]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4918      	ldr	r1, [pc, #96]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	43db      	mvns	r3, r3
 8001416:	4914      	ldr	r1, [pc, #80]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 8001418:	4013      	ands	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d021      	beq.n	800146c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	490e      	ldr	r1, [pc, #56]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
 8001434:	e021      	b.n	800147a <HAL_GPIO_Init+0x2e2>
 8001436:	bf00      	nop
 8001438:	10320000 	.word	0x10320000
 800143c:	10310000 	.word	0x10310000
 8001440:	10220000 	.word	0x10220000
 8001444:	10210000 	.word	0x10210000
 8001448:	10120000 	.word	0x10120000
 800144c:	10110000 	.word	0x10110000
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000
 8001458:	40010800 	.word	0x40010800
 800145c:	40010c00 	.word	0x40010c00
 8001460:	40011000 	.word	0x40011000
 8001464:	40011400 	.word	0x40011400
 8001468:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_GPIO_Init+0x304>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	43db      	mvns	r3, r3
 8001474:	4909      	ldr	r1, [pc, #36]	; (800149c <HAL_GPIO_Init+0x304>)
 8001476:	4013      	ands	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	3301      	adds	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	fa22 f303 	lsr.w	r3, r2, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	f47f ae8e 	bne.w	80011ac <HAL_GPIO_Init+0x14>
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	372c      	adds	r7, #44	; 0x2c
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	40010400 	.word	0x40010400

080014a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014b8:	2301      	movs	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e001      	b.n	80014c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	807b      	strh	r3, [r7, #2]
 80014da:	4613      	mov	r3, r2
 80014dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014de:	787b      	ldrb	r3, [r7, #1]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e4:	887a      	ldrh	r2, [r7, #2]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014ea:	e003      	b.n	80014f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	041a      	lsls	r2, r3, #16
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	611a      	str	r2, [r3, #16]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e26c      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8087 	beq.w	800162e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001520:	4b92      	ldr	r3, [pc, #584]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 030c 	and.w	r3, r3, #12
 8001528:	2b04      	cmp	r3, #4
 800152a:	d00c      	beq.n	8001546 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800152c:	4b8f      	ldr	r3, [pc, #572]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 030c 	and.w	r3, r3, #12
 8001534:	2b08      	cmp	r3, #8
 8001536:	d112      	bne.n	800155e <HAL_RCC_OscConfig+0x5e>
 8001538:	4b8c      	ldr	r3, [pc, #560]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001544:	d10b      	bne.n	800155e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001546:	4b89      	ldr	r3, [pc, #548]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d06c      	beq.n	800162c <HAL_RCC_OscConfig+0x12c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d168      	bne.n	800162c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e246      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x76>
 8001568:	4b80      	ldr	r3, [pc, #512]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a7f      	ldr	r2, [pc, #508]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800156e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e02e      	b.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x98>
 800157e:	4b7b      	ldr	r3, [pc, #492]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7a      	ldr	r2, [pc, #488]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b78      	ldr	r3, [pc, #480]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a77      	ldr	r2, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001590:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e01d      	b.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0xbc>
 80015a2:	4b72      	ldr	r3, [pc, #456]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a71      	ldr	r2, [pc, #452]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b6f      	ldr	r3, [pc, #444]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6e      	ldr	r2, [pc, #440]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0xd4>
 80015bc:	4b6b      	ldr	r3, [pc, #428]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a6a      	ldr	r2, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b68      	ldr	r3, [pc, #416]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a67      	ldr	r2, [pc, #412]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d013      	beq.n	8001604 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fcca 	bl	8000f74 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fcc6 	bl	8000f74 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1fa      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b5d      	ldr	r3, [pc, #372]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0xe4>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fcb6 	bl	8000f74 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fcb2 	bl	8000f74 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1e6      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x10c>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d063      	beq.n	8001702 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163a:	4b4c      	ldr	r3, [pc, #304]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d11c      	bne.n	800168c <HAL_RCC_OscConfig+0x18c>
 8001652:	4b46      	ldr	r3, [pc, #280]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d116      	bne.n	800168c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	4b43      	ldr	r3, [pc, #268]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x176>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e1ba      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4939      	ldr	r1, [pc, #228]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	e03a      	b.n	8001702 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001694:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCC_OscConfig+0x270>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fc6b 	bl	8000f74 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fc67 	bl	8000f74 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e19b      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4927      	ldr	r1, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_RCC_OscConfig+0x270>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fc4a 	bl	8000f74 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e4:	f7ff fc46 	bl	8000f74 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e17a      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d03a      	beq.n	8001784 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d019      	beq.n	800174a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7ff fc2a 	bl	8000f74 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fc26 	bl	8000f74 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e15a      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <HAL_RCC_OscConfig+0x26c>)
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f000 fa9a 	bl	8001c7c <RCC_Delay>
 8001748:	e01c      	b.n	8001784 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_RCC_OscConfig+0x274>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001750:	f7ff fc10 	bl	8000f74 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001756:	e00f      	b.n	8001778 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff fc0c 	bl	8000f74 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d908      	bls.n	8001778 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e140      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	42420000 	.word	0x42420000
 8001774:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	4b9e      	ldr	r3, [pc, #632]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e9      	bne.n	8001758 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a6 	beq.w	80018de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001796:	4b97      	ldr	r3, [pc, #604]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10d      	bne.n	80017be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b94      	ldr	r3, [pc, #592]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a93      	ldr	r2, [pc, #588]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]
 80017ae:	4b91      	ldr	r3, [pc, #580]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	4b8e      	ldr	r3, [pc, #568]	; (80019f8 <HAL_RCC_OscConfig+0x4f8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d118      	bne.n	80017fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ca:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <HAL_RCC_OscConfig+0x4f8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a8a      	ldr	r2, [pc, #552]	; (80019f8 <HAL_RCC_OscConfig+0x4f8>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fbcd 	bl	8000f74 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017de:	f7ff fbc9 	bl	8000f74 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b64      	cmp	r3, #100	; 0x64
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0fd      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f0:	4b81      	ldr	r3, [pc, #516]	; (80019f8 <HAL_RCC_OscConfig+0x4f8>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x312>
 8001804:	4b7b      	ldr	r3, [pc, #492]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4a7a      	ldr	r2, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6213      	str	r3, [r2, #32]
 8001810:	e02d      	b.n	800186e <HAL_RCC_OscConfig+0x36e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x334>
 800181a:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4a75      	ldr	r2, [pc, #468]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a72      	ldr	r2, [pc, #456]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	e01c      	b.n	800186e <HAL_RCC_OscConfig+0x36e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	2b05      	cmp	r3, #5
 800183a:	d10c      	bne.n	8001856 <HAL_RCC_OscConfig+0x356>
 800183c:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	4a6c      	ldr	r2, [pc, #432]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6213      	str	r3, [r2, #32]
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4a69      	ldr	r2, [pc, #420]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6213      	str	r3, [r2, #32]
 8001854:	e00b      	b.n	800186e <HAL_RCC_OscConfig+0x36e>
 8001856:	4b67      	ldr	r3, [pc, #412]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a66      	ldr	r2, [pc, #408]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a63      	ldr	r2, [pc, #396]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d015      	beq.n	80018a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff fb7d 	bl	8000f74 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff fb79 	bl	8000f74 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0ab      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	4b57      	ldr	r3, [pc, #348]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ee      	beq.n	800187e <HAL_RCC_OscConfig+0x37e>
 80018a0:	e014      	b.n	80018cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fb67 	bl	8000f74 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff fb63 	bl	8000f74 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e095      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1ee      	bne.n	80018aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d105      	bne.n	80018de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d2:	4b48      	ldr	r3, [pc, #288]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a47      	ldr	r2, [pc, #284]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8081 	beq.w	80019ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e8:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d061      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d146      	bne.n	800198a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fc:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCC_OscConfig+0x4fc>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff fb37 	bl	8000f74 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff fb33 	bl	8000f74 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e067      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d108      	bne.n	8001944 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	492d      	ldr	r1, [pc, #180]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a19      	ldr	r1, [r3, #32]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	430b      	orrs	r3, r1
 8001956:	4927      	ldr	r1, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <HAL_RCC_OscConfig+0x4fc>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff fb07 	bl	8000f74 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff fb03 	bl	8000f74 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e037      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x46a>
 8001988:	e02f      	b.n	80019ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <HAL_RCC_OscConfig+0x4fc>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff faf0 	bl	8000f74 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001998:	f7ff faec 	bl	8000f74 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e020      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x498>
 80019b6:	e018      	b.n	80019ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e013      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	40007000 	.word	0x40007000
 80019fc:	42420060 	.word	0x42420060

08001a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0d0      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d910      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0207 	bic.w	r2, r3, #7
 8001a2a:	4965      	ldr	r1, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d040      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d115      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e073      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06b      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f023 0203 	bic.w	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4936      	ldr	r1, [pc, #216]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af0:	f7ff fa40 	bl	8000f74 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff fa3c 	bl	8000f74 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e053      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 020c 	and.w	r2, r3, #12
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1eb      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d210      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0207 	bic.w	r2, r3, #7
 8001b36:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1cc>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f99e 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08003520 	.word	0x08003520
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bee:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d002      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x30>
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_GetSysClockFreq+0x36>
 8001c02:	e027      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c06:	613b      	str	r3, [r7, #16]
      break;
 8001c08:	e027      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	0c9b      	lsrs	r3, r3, #18
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c14:	5cd3      	ldrb	r3, [r2, r3]
 8001c16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d010      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	0c5b      	lsrs	r3, r3, #17
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c36:	fb02 f203 	mul.w	r2, r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e004      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c48:	fb02 f303 	mul.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	613b      	str	r3, [r7, #16]
      break;
 8001c52:	e002      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c56:	613b      	str	r3, [r7, #16]
      break;
 8001c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5a:	693b      	ldr	r3, [r7, #16]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	007a1200 	.word	0x007a1200
 8001c70:	08003530 	.word	0x08003530
 8001c74:	08003540 	.word	0x08003540
 8001c78:	003d0900 	.word	0x003d0900

08001c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <RCC_Delay+0x34>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <RCC_Delay+0x38>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0a5b      	lsrs	r3, r3, #9
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c98:	bf00      	nop
  }
  while (Delay --);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1e5a      	subs	r2, r3, #1
 8001c9e:	60fa      	str	r2, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f9      	bne.n	8001c98 <RCC_Delay+0x1c>
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	10624dd3 	.word	0x10624dd3

08001cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e041      	b.n	8001d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe ffe0 	bl	8000ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f000 f940 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d001      	beq.n	8001d70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e032      	b.n	8001dd6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_TIM_Base_Start+0x88>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00e      	beq.n	8001da0 <HAL_TIM_Base_Start+0x48>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8a:	d009      	beq.n	8001da0 <HAL_TIM_Base_Start+0x48>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_TIM_Base_Start+0x8c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_TIM_Base_Start+0x48>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_TIM_Base_Start+0x90>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d111      	bne.n	8001dc4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d010      	beq.n	8001dd4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc2:	e007      	b.n	8001dd4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40000400 	.word	0x40000400
 8001de8:	40000800 	.word	0x40000800

08001dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_TIM_ConfigClockSource+0x1c>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0b4      	b.n	8001f72 <HAL_TIM_ConfigClockSource+0x186>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e40:	d03e      	beq.n	8001ec0 <HAL_TIM_ConfigClockSource+0xd4>
 8001e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e46:	f200 8087 	bhi.w	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e4e:	f000 8086 	beq.w	8001f5e <HAL_TIM_ConfigClockSource+0x172>
 8001e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e56:	d87f      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b70      	cmp	r3, #112	; 0x70
 8001e5a:	d01a      	beq.n	8001e92 <HAL_TIM_ConfigClockSource+0xa6>
 8001e5c:	2b70      	cmp	r3, #112	; 0x70
 8001e5e:	d87b      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e60:	2b60      	cmp	r3, #96	; 0x60
 8001e62:	d050      	beq.n	8001f06 <HAL_TIM_ConfigClockSource+0x11a>
 8001e64:	2b60      	cmp	r3, #96	; 0x60
 8001e66:	d877      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e68:	2b50      	cmp	r3, #80	; 0x50
 8001e6a:	d03c      	beq.n	8001ee6 <HAL_TIM_ConfigClockSource+0xfa>
 8001e6c:	2b50      	cmp	r3, #80	; 0x50
 8001e6e:	d873      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	d058      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0x13a>
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d86f      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e78:	2b30      	cmp	r3, #48	; 0x30
 8001e7a:	d064      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x15a>
 8001e7c:	2b30      	cmp	r3, #48	; 0x30
 8001e7e:	d86b      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e80:	2b20      	cmp	r3, #32
 8001e82:	d060      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x15a>
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d867      	bhi.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d05c      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x15a>
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d05a      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0x15a>
 8001e90:	e062      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f000 f944 	bl	800212e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001eb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	609a      	str	r2, [r3, #8]
      break;
 8001ebe:	e04f      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f000 f92d 	bl	800212e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ee2:	609a      	str	r2, [r3, #8]
      break;
 8001ee4:	e03c      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f000 f8a4 	bl	8002040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2150      	movs	r1, #80	; 0x50
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f8fb 	bl	80020fa <TIM_ITRx_SetConfig>
      break;
 8001f04:	e02c      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	461a      	mov	r2, r3
 8001f14:	f000 f8c2 	bl	800209c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2160      	movs	r1, #96	; 0x60
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f8eb 	bl	80020fa <TIM_ITRx_SetConfig>
      break;
 8001f24:	e01c      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f000 f884 	bl	8002040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2140      	movs	r1, #64	; 0x40
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f8db 	bl	80020fa <TIM_ITRx_SetConfig>
      break;
 8001f44:	e00c      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4610      	mov	r0, r2
 8001f52:	f000 f8d2 	bl	80020fa <TIM_ITRx_SetConfig>
      break;
 8001f56:	e003      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5c:	e000      	b.n	8001f60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a29      	ldr	r2, [pc, #164]	; (8002034 <TIM_Base_SetConfig+0xb8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00b      	beq.n	8001fac <TIM_Base_SetConfig+0x30>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9a:	d007      	beq.n	8001fac <TIM_Base_SetConfig+0x30>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a26      	ldr	r2, [pc, #152]	; (8002038 <TIM_Base_SetConfig+0xbc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <TIM_Base_SetConfig+0x30>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a25      	ldr	r2, [pc, #148]	; (800203c <TIM_Base_SetConfig+0xc0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d108      	bne.n	8001fbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <TIM_Base_SetConfig+0xb8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00b      	beq.n	8001fde <TIM_Base_SetConfig+0x62>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fcc:	d007      	beq.n	8001fde <TIM_Base_SetConfig+0x62>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <TIM_Base_SetConfig+0xbc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <TIM_Base_SetConfig+0x62>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <TIM_Base_SetConfig+0xc0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d108      	bne.n	8001ff0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <TIM_Base_SetConfig+0xb8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d103      	bne.n	8002024 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	615a      	str	r2, [r3, #20]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40000400 	.word	0x40000400
 800203c:	40000800 	.word	0x40000800

08002040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f023 0201 	bic.w	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f023 030a 	bic.w	r3, r3, #10
 800207c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	621a      	str	r2, [r3, #32]
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f023 0210 	bic.w	r2, r3, #16
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	031b      	lsls	r3, r3, #12
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	621a      	str	r2, [r3, #32]
}
 80020f0:	bf00      	nop
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	f043 0307 	orr.w	r3, r3, #7
 800211c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	609a      	str	r2, [r3, #8]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800212e:	b480      	push	{r7}
 8002130:	b087      	sub	sp, #28
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002148:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	021a      	lsls	r2, r3, #8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	431a      	orrs	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4313      	orrs	r3, r2
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	609a      	str	r2, [r3, #8]
}
 8002162:	bf00      	nop
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002180:	2302      	movs	r3, #2
 8002182:	e046      	b.n	8002212 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a16      	ldr	r2, [pc, #88]	; (800221c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d00e      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d0:	d009      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d004      	beq.n	80021e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a10      	ldr	r2, [pc, #64]	; (8002224 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10c      	bne.n	8002200 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr
 800221c:	40012c00 	.word	0x40012c00
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800

08002228 <__errno>:
 8002228:	4b01      	ldr	r3, [pc, #4]	; (8002230 <__errno+0x8>)
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000000c 	.word	0x2000000c

08002234 <__libc_init_array>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	2600      	movs	r6, #0
 8002238:	4d0c      	ldr	r5, [pc, #48]	; (800226c <__libc_init_array+0x38>)
 800223a:	4c0d      	ldr	r4, [pc, #52]	; (8002270 <__libc_init_array+0x3c>)
 800223c:	1b64      	subs	r4, r4, r5
 800223e:	10a4      	asrs	r4, r4, #2
 8002240:	42a6      	cmp	r6, r4
 8002242:	d109      	bne.n	8002258 <__libc_init_array+0x24>
 8002244:	f001 f954 	bl	80034f0 <_init>
 8002248:	2600      	movs	r6, #0
 800224a:	4d0a      	ldr	r5, [pc, #40]	; (8002274 <__libc_init_array+0x40>)
 800224c:	4c0a      	ldr	r4, [pc, #40]	; (8002278 <__libc_init_array+0x44>)
 800224e:	1b64      	subs	r4, r4, r5
 8002250:	10a4      	asrs	r4, r4, #2
 8002252:	42a6      	cmp	r6, r4
 8002254:	d105      	bne.n	8002262 <__libc_init_array+0x2e>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	f855 3b04 	ldr.w	r3, [r5], #4
 800225c:	4798      	blx	r3
 800225e:	3601      	adds	r6, #1
 8002260:	e7ee      	b.n	8002240 <__libc_init_array+0xc>
 8002262:	f855 3b04 	ldr.w	r3, [r5], #4
 8002266:	4798      	blx	r3
 8002268:	3601      	adds	r6, #1
 800226a:	e7f2      	b.n	8002252 <__libc_init_array+0x1e>
 800226c:	080035dc 	.word	0x080035dc
 8002270:	080035dc 	.word	0x080035dc
 8002274:	080035dc 	.word	0x080035dc
 8002278:	080035e0 	.word	0x080035e0

0800227c <memset>:
 800227c:	4603      	mov	r3, r0
 800227e:	4402      	add	r2, r0
 8002280:	4293      	cmp	r3, r2
 8002282:	d100      	bne.n	8002286 <memset+0xa>
 8002284:	4770      	bx	lr
 8002286:	f803 1b01 	strb.w	r1, [r3], #1
 800228a:	e7f9      	b.n	8002280 <memset+0x4>

0800228c <iprintf>:
 800228c:	b40f      	push	{r0, r1, r2, r3}
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <iprintf+0x2c>)
 8002290:	b513      	push	{r0, r1, r4, lr}
 8002292:	681c      	ldr	r4, [r3, #0]
 8002294:	b124      	cbz	r4, 80022a0 <iprintf+0x14>
 8002296:	69a3      	ldr	r3, [r4, #24]
 8002298:	b913      	cbnz	r3, 80022a0 <iprintf+0x14>
 800229a:	4620      	mov	r0, r4
 800229c:	f000 f886 	bl	80023ac <__sinit>
 80022a0:	ab05      	add	r3, sp, #20
 80022a2:	4620      	mov	r0, r4
 80022a4:	9a04      	ldr	r2, [sp, #16]
 80022a6:	68a1      	ldr	r1, [r4, #8]
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	f000 fafd 	bl	80028a8 <_vfiprintf_r>
 80022ae:	b002      	add	sp, #8
 80022b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022b4:	b004      	add	sp, #16
 80022b6:	4770      	bx	lr
 80022b8:	2000000c 	.word	0x2000000c

080022bc <siprintf>:
 80022bc:	b40e      	push	{r1, r2, r3}
 80022be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022c2:	b500      	push	{lr}
 80022c4:	b09c      	sub	sp, #112	; 0x70
 80022c6:	ab1d      	add	r3, sp, #116	; 0x74
 80022c8:	9002      	str	r0, [sp, #8]
 80022ca:	9006      	str	r0, [sp, #24]
 80022cc:	9107      	str	r1, [sp, #28]
 80022ce:	9104      	str	r1, [sp, #16]
 80022d0:	4808      	ldr	r0, [pc, #32]	; (80022f4 <siprintf+0x38>)
 80022d2:	4909      	ldr	r1, [pc, #36]	; (80022f8 <siprintf+0x3c>)
 80022d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80022d8:	9105      	str	r1, [sp, #20]
 80022da:	6800      	ldr	r0, [r0, #0]
 80022dc:	a902      	add	r1, sp, #8
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	f000 f9ba 	bl	8002658 <_svfiprintf_r>
 80022e4:	2200      	movs	r2, #0
 80022e6:	9b02      	ldr	r3, [sp, #8]
 80022e8:	701a      	strb	r2, [r3, #0]
 80022ea:	b01c      	add	sp, #112	; 0x70
 80022ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80022f0:	b003      	add	sp, #12
 80022f2:	4770      	bx	lr
 80022f4:	2000000c 	.word	0x2000000c
 80022f8:	ffff0208 	.word	0xffff0208

080022fc <std>:
 80022fc:	2300      	movs	r3, #0
 80022fe:	b510      	push	{r4, lr}
 8002300:	4604      	mov	r4, r0
 8002302:	e9c0 3300 	strd	r3, r3, [r0]
 8002306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800230a:	6083      	str	r3, [r0, #8]
 800230c:	8181      	strh	r1, [r0, #12]
 800230e:	6643      	str	r3, [r0, #100]	; 0x64
 8002310:	81c2      	strh	r2, [r0, #14]
 8002312:	6183      	str	r3, [r0, #24]
 8002314:	4619      	mov	r1, r3
 8002316:	2208      	movs	r2, #8
 8002318:	305c      	adds	r0, #92	; 0x5c
 800231a:	f7ff ffaf 	bl	800227c <memset>
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <std+0x38>)
 8002320:	6224      	str	r4, [r4, #32]
 8002322:	6263      	str	r3, [r4, #36]	; 0x24
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <std+0x3c>)
 8002326:	62a3      	str	r3, [r4, #40]	; 0x28
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <std+0x40>)
 800232a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <std+0x44>)
 800232e:	6323      	str	r3, [r4, #48]	; 0x30
 8002330:	bd10      	pop	{r4, pc}
 8002332:	bf00      	nop
 8002334:	08002e55 	.word	0x08002e55
 8002338:	08002e77 	.word	0x08002e77
 800233c:	08002eaf 	.word	0x08002eaf
 8002340:	08002ed3 	.word	0x08002ed3

08002344 <_cleanup_r>:
 8002344:	4901      	ldr	r1, [pc, #4]	; (800234c <_cleanup_r+0x8>)
 8002346:	f000 b8af 	b.w	80024a8 <_fwalk_reent>
 800234a:	bf00      	nop
 800234c:	080031ad 	.word	0x080031ad

08002350 <__sfmoreglue>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	2568      	movs	r5, #104	; 0x68
 8002354:	1e4a      	subs	r2, r1, #1
 8002356:	4355      	muls	r5, r2
 8002358:	460e      	mov	r6, r1
 800235a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800235e:	f000 f8c5 	bl	80024ec <_malloc_r>
 8002362:	4604      	mov	r4, r0
 8002364:	b140      	cbz	r0, 8002378 <__sfmoreglue+0x28>
 8002366:	2100      	movs	r1, #0
 8002368:	e9c0 1600 	strd	r1, r6, [r0]
 800236c:	300c      	adds	r0, #12
 800236e:	60a0      	str	r0, [r4, #8]
 8002370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002374:	f7ff ff82 	bl	800227c <memset>
 8002378:	4620      	mov	r0, r4
 800237a:	bd70      	pop	{r4, r5, r6, pc}

0800237c <__sfp_lock_acquire>:
 800237c:	4801      	ldr	r0, [pc, #4]	; (8002384 <__sfp_lock_acquire+0x8>)
 800237e:	f000 b8b3 	b.w	80024e8 <__retarget_lock_acquire_recursive>
 8002382:	bf00      	nop
 8002384:	2000010c 	.word	0x2000010c

08002388 <__sfp_lock_release>:
 8002388:	4801      	ldr	r0, [pc, #4]	; (8002390 <__sfp_lock_release+0x8>)
 800238a:	f000 b8ae 	b.w	80024ea <__retarget_lock_release_recursive>
 800238e:	bf00      	nop
 8002390:	2000010c 	.word	0x2000010c

08002394 <__sinit_lock_acquire>:
 8002394:	4801      	ldr	r0, [pc, #4]	; (800239c <__sinit_lock_acquire+0x8>)
 8002396:	f000 b8a7 	b.w	80024e8 <__retarget_lock_acquire_recursive>
 800239a:	bf00      	nop
 800239c:	20000107 	.word	0x20000107

080023a0 <__sinit_lock_release>:
 80023a0:	4801      	ldr	r0, [pc, #4]	; (80023a8 <__sinit_lock_release+0x8>)
 80023a2:	f000 b8a2 	b.w	80024ea <__retarget_lock_release_recursive>
 80023a6:	bf00      	nop
 80023a8:	20000107 	.word	0x20000107

080023ac <__sinit>:
 80023ac:	b510      	push	{r4, lr}
 80023ae:	4604      	mov	r4, r0
 80023b0:	f7ff fff0 	bl	8002394 <__sinit_lock_acquire>
 80023b4:	69a3      	ldr	r3, [r4, #24]
 80023b6:	b11b      	cbz	r3, 80023c0 <__sinit+0x14>
 80023b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023bc:	f7ff bff0 	b.w	80023a0 <__sinit_lock_release>
 80023c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80023c4:	6523      	str	r3, [r4, #80]	; 0x50
 80023c6:	4b13      	ldr	r3, [pc, #76]	; (8002414 <__sinit+0x68>)
 80023c8:	4a13      	ldr	r2, [pc, #76]	; (8002418 <__sinit+0x6c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80023ce:	42a3      	cmp	r3, r4
 80023d0:	bf08      	it	eq
 80023d2:	2301      	moveq	r3, #1
 80023d4:	4620      	mov	r0, r4
 80023d6:	bf08      	it	eq
 80023d8:	61a3      	streq	r3, [r4, #24]
 80023da:	f000 f81f 	bl	800241c <__sfp>
 80023de:	6060      	str	r0, [r4, #4]
 80023e0:	4620      	mov	r0, r4
 80023e2:	f000 f81b 	bl	800241c <__sfp>
 80023e6:	60a0      	str	r0, [r4, #8]
 80023e8:	4620      	mov	r0, r4
 80023ea:	f000 f817 	bl	800241c <__sfp>
 80023ee:	2200      	movs	r2, #0
 80023f0:	2104      	movs	r1, #4
 80023f2:	60e0      	str	r0, [r4, #12]
 80023f4:	6860      	ldr	r0, [r4, #4]
 80023f6:	f7ff ff81 	bl	80022fc <std>
 80023fa:	2201      	movs	r2, #1
 80023fc:	2109      	movs	r1, #9
 80023fe:	68a0      	ldr	r0, [r4, #8]
 8002400:	f7ff ff7c 	bl	80022fc <std>
 8002404:	2202      	movs	r2, #2
 8002406:	2112      	movs	r1, #18
 8002408:	68e0      	ldr	r0, [r4, #12]
 800240a:	f7ff ff77 	bl	80022fc <std>
 800240e:	2301      	movs	r3, #1
 8002410:	61a3      	str	r3, [r4, #24]
 8002412:	e7d1      	b.n	80023b8 <__sinit+0xc>
 8002414:	08003544 	.word	0x08003544
 8002418:	08002345 	.word	0x08002345

0800241c <__sfp>:
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241e:	4607      	mov	r7, r0
 8002420:	f7ff ffac 	bl	800237c <__sfp_lock_acquire>
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <__sfp+0x84>)
 8002426:	681e      	ldr	r6, [r3, #0]
 8002428:	69b3      	ldr	r3, [r6, #24]
 800242a:	b913      	cbnz	r3, 8002432 <__sfp+0x16>
 800242c:	4630      	mov	r0, r6
 800242e:	f7ff ffbd 	bl	80023ac <__sinit>
 8002432:	3648      	adds	r6, #72	; 0x48
 8002434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002438:	3b01      	subs	r3, #1
 800243a:	d503      	bpl.n	8002444 <__sfp+0x28>
 800243c:	6833      	ldr	r3, [r6, #0]
 800243e:	b30b      	cbz	r3, 8002484 <__sfp+0x68>
 8002440:	6836      	ldr	r6, [r6, #0]
 8002442:	e7f7      	b.n	8002434 <__sfp+0x18>
 8002444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002448:	b9d5      	cbnz	r5, 8002480 <__sfp+0x64>
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <__sfp+0x88>)
 800244c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002450:	60e3      	str	r3, [r4, #12]
 8002452:	6665      	str	r5, [r4, #100]	; 0x64
 8002454:	f000 f847 	bl	80024e6 <__retarget_lock_init_recursive>
 8002458:	f7ff ff96 	bl	8002388 <__sfp_lock_release>
 800245c:	2208      	movs	r2, #8
 800245e:	4629      	mov	r1, r5
 8002460:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002464:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002468:	6025      	str	r5, [r4, #0]
 800246a:	61a5      	str	r5, [r4, #24]
 800246c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002470:	f7ff ff04 	bl	800227c <memset>
 8002474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800247c:	4620      	mov	r0, r4
 800247e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002480:	3468      	adds	r4, #104	; 0x68
 8002482:	e7d9      	b.n	8002438 <__sfp+0x1c>
 8002484:	2104      	movs	r1, #4
 8002486:	4638      	mov	r0, r7
 8002488:	f7ff ff62 	bl	8002350 <__sfmoreglue>
 800248c:	4604      	mov	r4, r0
 800248e:	6030      	str	r0, [r6, #0]
 8002490:	2800      	cmp	r0, #0
 8002492:	d1d5      	bne.n	8002440 <__sfp+0x24>
 8002494:	f7ff ff78 	bl	8002388 <__sfp_lock_release>
 8002498:	230c      	movs	r3, #12
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	e7ee      	b.n	800247c <__sfp+0x60>
 800249e:	bf00      	nop
 80024a0:	08003544 	.word	0x08003544
 80024a4:	ffff0001 	.word	0xffff0001

080024a8 <_fwalk_reent>:
 80024a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024ac:	4606      	mov	r6, r0
 80024ae:	4688      	mov	r8, r1
 80024b0:	2700      	movs	r7, #0
 80024b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024ba:	f1b9 0901 	subs.w	r9, r9, #1
 80024be:	d505      	bpl.n	80024cc <_fwalk_reent+0x24>
 80024c0:	6824      	ldr	r4, [r4, #0]
 80024c2:	2c00      	cmp	r4, #0
 80024c4:	d1f7      	bne.n	80024b6 <_fwalk_reent+0xe>
 80024c6:	4638      	mov	r0, r7
 80024c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024cc:	89ab      	ldrh	r3, [r5, #12]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d907      	bls.n	80024e2 <_fwalk_reent+0x3a>
 80024d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024d6:	3301      	adds	r3, #1
 80024d8:	d003      	beq.n	80024e2 <_fwalk_reent+0x3a>
 80024da:	4629      	mov	r1, r5
 80024dc:	4630      	mov	r0, r6
 80024de:	47c0      	blx	r8
 80024e0:	4307      	orrs	r7, r0
 80024e2:	3568      	adds	r5, #104	; 0x68
 80024e4:	e7e9      	b.n	80024ba <_fwalk_reent+0x12>

080024e6 <__retarget_lock_init_recursive>:
 80024e6:	4770      	bx	lr

080024e8 <__retarget_lock_acquire_recursive>:
 80024e8:	4770      	bx	lr

080024ea <__retarget_lock_release_recursive>:
 80024ea:	4770      	bx	lr

080024ec <_malloc_r>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	1ccd      	adds	r5, r1, #3
 80024f0:	f025 0503 	bic.w	r5, r5, #3
 80024f4:	3508      	adds	r5, #8
 80024f6:	2d0c      	cmp	r5, #12
 80024f8:	bf38      	it	cc
 80024fa:	250c      	movcc	r5, #12
 80024fc:	2d00      	cmp	r5, #0
 80024fe:	4606      	mov	r6, r0
 8002500:	db01      	blt.n	8002506 <_malloc_r+0x1a>
 8002502:	42a9      	cmp	r1, r5
 8002504:	d903      	bls.n	800250e <_malloc_r+0x22>
 8002506:	230c      	movs	r3, #12
 8002508:	6033      	str	r3, [r6, #0]
 800250a:	2000      	movs	r0, #0
 800250c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800250e:	f000 ff35 	bl	800337c <__malloc_lock>
 8002512:	4921      	ldr	r1, [pc, #132]	; (8002598 <_malloc_r+0xac>)
 8002514:	680a      	ldr	r2, [r1, #0]
 8002516:	4614      	mov	r4, r2
 8002518:	b99c      	cbnz	r4, 8002542 <_malloc_r+0x56>
 800251a:	4f20      	ldr	r7, [pc, #128]	; (800259c <_malloc_r+0xb0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	b923      	cbnz	r3, 800252a <_malloc_r+0x3e>
 8002520:	4621      	mov	r1, r4
 8002522:	4630      	mov	r0, r6
 8002524:	f000 fc86 	bl	8002e34 <_sbrk_r>
 8002528:	6038      	str	r0, [r7, #0]
 800252a:	4629      	mov	r1, r5
 800252c:	4630      	mov	r0, r6
 800252e:	f000 fc81 	bl	8002e34 <_sbrk_r>
 8002532:	1c43      	adds	r3, r0, #1
 8002534:	d123      	bne.n	800257e <_malloc_r+0x92>
 8002536:	230c      	movs	r3, #12
 8002538:	4630      	mov	r0, r6
 800253a:	6033      	str	r3, [r6, #0]
 800253c:	f000 ff24 	bl	8003388 <__malloc_unlock>
 8002540:	e7e3      	b.n	800250a <_malloc_r+0x1e>
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	1b5b      	subs	r3, r3, r5
 8002546:	d417      	bmi.n	8002578 <_malloc_r+0x8c>
 8002548:	2b0b      	cmp	r3, #11
 800254a:	d903      	bls.n	8002554 <_malloc_r+0x68>
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	441c      	add	r4, r3
 8002550:	6025      	str	r5, [r4, #0]
 8002552:	e004      	b.n	800255e <_malloc_r+0x72>
 8002554:	6863      	ldr	r3, [r4, #4]
 8002556:	42a2      	cmp	r2, r4
 8002558:	bf0c      	ite	eq
 800255a:	600b      	streq	r3, [r1, #0]
 800255c:	6053      	strne	r3, [r2, #4]
 800255e:	4630      	mov	r0, r6
 8002560:	f000 ff12 	bl	8003388 <__malloc_unlock>
 8002564:	f104 000b 	add.w	r0, r4, #11
 8002568:	1d23      	adds	r3, r4, #4
 800256a:	f020 0007 	bic.w	r0, r0, #7
 800256e:	1ac2      	subs	r2, r0, r3
 8002570:	d0cc      	beq.n	800250c <_malloc_r+0x20>
 8002572:	1a1b      	subs	r3, r3, r0
 8002574:	50a3      	str	r3, [r4, r2]
 8002576:	e7c9      	b.n	800250c <_malloc_r+0x20>
 8002578:	4622      	mov	r2, r4
 800257a:	6864      	ldr	r4, [r4, #4]
 800257c:	e7cc      	b.n	8002518 <_malloc_r+0x2c>
 800257e:	1cc4      	adds	r4, r0, #3
 8002580:	f024 0403 	bic.w	r4, r4, #3
 8002584:	42a0      	cmp	r0, r4
 8002586:	d0e3      	beq.n	8002550 <_malloc_r+0x64>
 8002588:	1a21      	subs	r1, r4, r0
 800258a:	4630      	mov	r0, r6
 800258c:	f000 fc52 	bl	8002e34 <_sbrk_r>
 8002590:	3001      	adds	r0, #1
 8002592:	d1dd      	bne.n	8002550 <_malloc_r+0x64>
 8002594:	e7cf      	b.n	8002536 <_malloc_r+0x4a>
 8002596:	bf00      	nop
 8002598:	2000009c 	.word	0x2000009c
 800259c:	200000a0 	.word	0x200000a0

080025a0 <__ssputs_r>:
 80025a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025a4:	688e      	ldr	r6, [r1, #8]
 80025a6:	4682      	mov	sl, r0
 80025a8:	429e      	cmp	r6, r3
 80025aa:	460c      	mov	r4, r1
 80025ac:	4690      	mov	r8, r2
 80025ae:	461f      	mov	r7, r3
 80025b0:	d838      	bhi.n	8002624 <__ssputs_r+0x84>
 80025b2:	898a      	ldrh	r2, [r1, #12]
 80025b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80025b8:	d032      	beq.n	8002620 <__ssputs_r+0x80>
 80025ba:	6825      	ldr	r5, [r4, #0]
 80025bc:	6909      	ldr	r1, [r1, #16]
 80025be:	3301      	adds	r3, #1
 80025c0:	eba5 0901 	sub.w	r9, r5, r1
 80025c4:	6965      	ldr	r5, [r4, #20]
 80025c6:	444b      	add	r3, r9
 80025c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025d0:	106d      	asrs	r5, r5, #1
 80025d2:	429d      	cmp	r5, r3
 80025d4:	bf38      	it	cc
 80025d6:	461d      	movcc	r5, r3
 80025d8:	0553      	lsls	r3, r2, #21
 80025da:	d531      	bpl.n	8002640 <__ssputs_r+0xa0>
 80025dc:	4629      	mov	r1, r5
 80025de:	f7ff ff85 	bl	80024ec <_malloc_r>
 80025e2:	4606      	mov	r6, r0
 80025e4:	b950      	cbnz	r0, 80025fc <__ssputs_r+0x5c>
 80025e6:	230c      	movs	r3, #12
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f8ca 3000 	str.w	r3, [sl]
 80025f0:	89a3      	ldrh	r3, [r4, #12]
 80025f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f6:	81a3      	strh	r3, [r4, #12]
 80025f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025fc:	464a      	mov	r2, r9
 80025fe:	6921      	ldr	r1, [r4, #16]
 8002600:	f000 fe94 	bl	800332c <memcpy>
 8002604:	89a3      	ldrh	r3, [r4, #12]
 8002606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800260a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260e:	81a3      	strh	r3, [r4, #12]
 8002610:	6126      	str	r6, [r4, #16]
 8002612:	444e      	add	r6, r9
 8002614:	6026      	str	r6, [r4, #0]
 8002616:	463e      	mov	r6, r7
 8002618:	6165      	str	r5, [r4, #20]
 800261a:	eba5 0509 	sub.w	r5, r5, r9
 800261e:	60a5      	str	r5, [r4, #8]
 8002620:	42be      	cmp	r6, r7
 8002622:	d900      	bls.n	8002626 <__ssputs_r+0x86>
 8002624:	463e      	mov	r6, r7
 8002626:	4632      	mov	r2, r6
 8002628:	4641      	mov	r1, r8
 800262a:	6820      	ldr	r0, [r4, #0]
 800262c:	f000 fe8c 	bl	8003348 <memmove>
 8002630:	68a3      	ldr	r3, [r4, #8]
 8002632:	6822      	ldr	r2, [r4, #0]
 8002634:	1b9b      	subs	r3, r3, r6
 8002636:	4432      	add	r2, r6
 8002638:	2000      	movs	r0, #0
 800263a:	60a3      	str	r3, [r4, #8]
 800263c:	6022      	str	r2, [r4, #0]
 800263e:	e7db      	b.n	80025f8 <__ssputs_r+0x58>
 8002640:	462a      	mov	r2, r5
 8002642:	f000 fef3 	bl	800342c <_realloc_r>
 8002646:	4606      	mov	r6, r0
 8002648:	2800      	cmp	r0, #0
 800264a:	d1e1      	bne.n	8002610 <__ssputs_r+0x70>
 800264c:	4650      	mov	r0, sl
 800264e:	6921      	ldr	r1, [r4, #16]
 8002650:	f000 fea0 	bl	8003394 <_free_r>
 8002654:	e7c7      	b.n	80025e6 <__ssputs_r+0x46>
	...

08002658 <_svfiprintf_r>:
 8002658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800265c:	4698      	mov	r8, r3
 800265e:	898b      	ldrh	r3, [r1, #12]
 8002660:	4607      	mov	r7, r0
 8002662:	061b      	lsls	r3, r3, #24
 8002664:	460d      	mov	r5, r1
 8002666:	4614      	mov	r4, r2
 8002668:	b09d      	sub	sp, #116	; 0x74
 800266a:	d50e      	bpl.n	800268a <_svfiprintf_r+0x32>
 800266c:	690b      	ldr	r3, [r1, #16]
 800266e:	b963      	cbnz	r3, 800268a <_svfiprintf_r+0x32>
 8002670:	2140      	movs	r1, #64	; 0x40
 8002672:	f7ff ff3b 	bl	80024ec <_malloc_r>
 8002676:	6028      	str	r0, [r5, #0]
 8002678:	6128      	str	r0, [r5, #16]
 800267a:	b920      	cbnz	r0, 8002686 <_svfiprintf_r+0x2e>
 800267c:	230c      	movs	r3, #12
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	e0d1      	b.n	800282a <_svfiprintf_r+0x1d2>
 8002686:	2340      	movs	r3, #64	; 0x40
 8002688:	616b      	str	r3, [r5, #20]
 800268a:	2300      	movs	r3, #0
 800268c:	9309      	str	r3, [sp, #36]	; 0x24
 800268e:	2320      	movs	r3, #32
 8002690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002694:	2330      	movs	r3, #48	; 0x30
 8002696:	f04f 0901 	mov.w	r9, #1
 800269a:	f8cd 800c 	str.w	r8, [sp, #12]
 800269e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002844 <_svfiprintf_r+0x1ec>
 80026a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026a6:	4623      	mov	r3, r4
 80026a8:	469a      	mov	sl, r3
 80026aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80026ae:	b10a      	cbz	r2, 80026b4 <_svfiprintf_r+0x5c>
 80026b0:	2a25      	cmp	r2, #37	; 0x25
 80026b2:	d1f9      	bne.n	80026a8 <_svfiprintf_r+0x50>
 80026b4:	ebba 0b04 	subs.w	fp, sl, r4
 80026b8:	d00b      	beq.n	80026d2 <_svfiprintf_r+0x7a>
 80026ba:	465b      	mov	r3, fp
 80026bc:	4622      	mov	r2, r4
 80026be:	4629      	mov	r1, r5
 80026c0:	4638      	mov	r0, r7
 80026c2:	f7ff ff6d 	bl	80025a0 <__ssputs_r>
 80026c6:	3001      	adds	r0, #1
 80026c8:	f000 80aa 	beq.w	8002820 <_svfiprintf_r+0x1c8>
 80026cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026ce:	445a      	add	r2, fp
 80026d0:	9209      	str	r2, [sp, #36]	; 0x24
 80026d2:	f89a 3000 	ldrb.w	r3, [sl]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80a2 	beq.w	8002820 <_svfiprintf_r+0x1c8>
 80026dc:	2300      	movs	r3, #0
 80026de:	f04f 32ff 	mov.w	r2, #4294967295
 80026e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026e6:	f10a 0a01 	add.w	sl, sl, #1
 80026ea:	9304      	str	r3, [sp, #16]
 80026ec:	9307      	str	r3, [sp, #28]
 80026ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026f2:	931a      	str	r3, [sp, #104]	; 0x68
 80026f4:	4654      	mov	r4, sl
 80026f6:	2205      	movs	r2, #5
 80026f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026fc:	4851      	ldr	r0, [pc, #324]	; (8002844 <_svfiprintf_r+0x1ec>)
 80026fe:	f000 fe07 	bl	8003310 <memchr>
 8002702:	9a04      	ldr	r2, [sp, #16]
 8002704:	b9d8      	cbnz	r0, 800273e <_svfiprintf_r+0xe6>
 8002706:	06d0      	lsls	r0, r2, #27
 8002708:	bf44      	itt	mi
 800270a:	2320      	movmi	r3, #32
 800270c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002710:	0711      	lsls	r1, r2, #28
 8002712:	bf44      	itt	mi
 8002714:	232b      	movmi	r3, #43	; 0x2b
 8002716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800271a:	f89a 3000 	ldrb.w	r3, [sl]
 800271e:	2b2a      	cmp	r3, #42	; 0x2a
 8002720:	d015      	beq.n	800274e <_svfiprintf_r+0xf6>
 8002722:	4654      	mov	r4, sl
 8002724:	2000      	movs	r0, #0
 8002726:	f04f 0c0a 	mov.w	ip, #10
 800272a:	9a07      	ldr	r2, [sp, #28]
 800272c:	4621      	mov	r1, r4
 800272e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002732:	3b30      	subs	r3, #48	; 0x30
 8002734:	2b09      	cmp	r3, #9
 8002736:	d94e      	bls.n	80027d6 <_svfiprintf_r+0x17e>
 8002738:	b1b0      	cbz	r0, 8002768 <_svfiprintf_r+0x110>
 800273a:	9207      	str	r2, [sp, #28]
 800273c:	e014      	b.n	8002768 <_svfiprintf_r+0x110>
 800273e:	eba0 0308 	sub.w	r3, r0, r8
 8002742:	fa09 f303 	lsl.w	r3, r9, r3
 8002746:	4313      	orrs	r3, r2
 8002748:	46a2      	mov	sl, r4
 800274a:	9304      	str	r3, [sp, #16]
 800274c:	e7d2      	b.n	80026f4 <_svfiprintf_r+0x9c>
 800274e:	9b03      	ldr	r3, [sp, #12]
 8002750:	1d19      	adds	r1, r3, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	9103      	str	r1, [sp, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	bfbb      	ittet	lt
 800275a:	425b      	neglt	r3, r3
 800275c:	f042 0202 	orrlt.w	r2, r2, #2
 8002760:	9307      	strge	r3, [sp, #28]
 8002762:	9307      	strlt	r3, [sp, #28]
 8002764:	bfb8      	it	lt
 8002766:	9204      	strlt	r2, [sp, #16]
 8002768:	7823      	ldrb	r3, [r4, #0]
 800276a:	2b2e      	cmp	r3, #46	; 0x2e
 800276c:	d10c      	bne.n	8002788 <_svfiprintf_r+0x130>
 800276e:	7863      	ldrb	r3, [r4, #1]
 8002770:	2b2a      	cmp	r3, #42	; 0x2a
 8002772:	d135      	bne.n	80027e0 <_svfiprintf_r+0x188>
 8002774:	9b03      	ldr	r3, [sp, #12]
 8002776:	3402      	adds	r4, #2
 8002778:	1d1a      	adds	r2, r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	9203      	str	r2, [sp, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	bfb8      	it	lt
 8002782:	f04f 33ff 	movlt.w	r3, #4294967295
 8002786:	9305      	str	r3, [sp, #20]
 8002788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002854 <_svfiprintf_r+0x1fc>
 800278c:	2203      	movs	r2, #3
 800278e:	4650      	mov	r0, sl
 8002790:	7821      	ldrb	r1, [r4, #0]
 8002792:	f000 fdbd 	bl	8003310 <memchr>
 8002796:	b140      	cbz	r0, 80027aa <_svfiprintf_r+0x152>
 8002798:	2340      	movs	r3, #64	; 0x40
 800279a:	eba0 000a 	sub.w	r0, r0, sl
 800279e:	fa03 f000 	lsl.w	r0, r3, r0
 80027a2:	9b04      	ldr	r3, [sp, #16]
 80027a4:	3401      	adds	r4, #1
 80027a6:	4303      	orrs	r3, r0
 80027a8:	9304      	str	r3, [sp, #16]
 80027aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027ae:	2206      	movs	r2, #6
 80027b0:	4825      	ldr	r0, [pc, #148]	; (8002848 <_svfiprintf_r+0x1f0>)
 80027b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027b6:	f000 fdab 	bl	8003310 <memchr>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d038      	beq.n	8002830 <_svfiprintf_r+0x1d8>
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <_svfiprintf_r+0x1f4>)
 80027c0:	bb1b      	cbnz	r3, 800280a <_svfiprintf_r+0x1b2>
 80027c2:	9b03      	ldr	r3, [sp, #12]
 80027c4:	3307      	adds	r3, #7
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	3308      	adds	r3, #8
 80027cc:	9303      	str	r3, [sp, #12]
 80027ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027d0:	4433      	add	r3, r6
 80027d2:	9309      	str	r3, [sp, #36]	; 0x24
 80027d4:	e767      	b.n	80026a6 <_svfiprintf_r+0x4e>
 80027d6:	460c      	mov	r4, r1
 80027d8:	2001      	movs	r0, #1
 80027da:	fb0c 3202 	mla	r2, ip, r2, r3
 80027de:	e7a5      	b.n	800272c <_svfiprintf_r+0xd4>
 80027e0:	2300      	movs	r3, #0
 80027e2:	f04f 0c0a 	mov.w	ip, #10
 80027e6:	4619      	mov	r1, r3
 80027e8:	3401      	adds	r4, #1
 80027ea:	9305      	str	r3, [sp, #20]
 80027ec:	4620      	mov	r0, r4
 80027ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027f2:	3a30      	subs	r2, #48	; 0x30
 80027f4:	2a09      	cmp	r2, #9
 80027f6:	d903      	bls.n	8002800 <_svfiprintf_r+0x1a8>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0c5      	beq.n	8002788 <_svfiprintf_r+0x130>
 80027fc:	9105      	str	r1, [sp, #20]
 80027fe:	e7c3      	b.n	8002788 <_svfiprintf_r+0x130>
 8002800:	4604      	mov	r4, r0
 8002802:	2301      	movs	r3, #1
 8002804:	fb0c 2101 	mla	r1, ip, r1, r2
 8002808:	e7f0      	b.n	80027ec <_svfiprintf_r+0x194>
 800280a:	ab03      	add	r3, sp, #12
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	462a      	mov	r2, r5
 8002810:	4638      	mov	r0, r7
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <_svfiprintf_r+0x1f8>)
 8002814:	a904      	add	r1, sp, #16
 8002816:	f3af 8000 	nop.w
 800281a:	1c42      	adds	r2, r0, #1
 800281c:	4606      	mov	r6, r0
 800281e:	d1d6      	bne.n	80027ce <_svfiprintf_r+0x176>
 8002820:	89ab      	ldrh	r3, [r5, #12]
 8002822:	065b      	lsls	r3, r3, #25
 8002824:	f53f af2c 	bmi.w	8002680 <_svfiprintf_r+0x28>
 8002828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800282a:	b01d      	add	sp, #116	; 0x74
 800282c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002830:	ab03      	add	r3, sp, #12
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	462a      	mov	r2, r5
 8002836:	4638      	mov	r0, r7
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <_svfiprintf_r+0x1f8>)
 800283a:	a904      	add	r1, sp, #16
 800283c:	f000 f9d4 	bl	8002be8 <_printf_i>
 8002840:	e7eb      	b.n	800281a <_svfiprintf_r+0x1c2>
 8002842:	bf00      	nop
 8002844:	080035a8 	.word	0x080035a8
 8002848:	080035b2 	.word	0x080035b2
 800284c:	00000000 	.word	0x00000000
 8002850:	080025a1 	.word	0x080025a1
 8002854:	080035ae 	.word	0x080035ae

08002858 <__sfputc_r>:
 8002858:	6893      	ldr	r3, [r2, #8]
 800285a:	b410      	push	{r4}
 800285c:	3b01      	subs	r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	6093      	str	r3, [r2, #8]
 8002862:	da07      	bge.n	8002874 <__sfputc_r+0x1c>
 8002864:	6994      	ldr	r4, [r2, #24]
 8002866:	42a3      	cmp	r3, r4
 8002868:	db01      	blt.n	800286e <__sfputc_r+0x16>
 800286a:	290a      	cmp	r1, #10
 800286c:	d102      	bne.n	8002874 <__sfputc_r+0x1c>
 800286e:	bc10      	pop	{r4}
 8002870:	f000 bb34 	b.w	8002edc <__swbuf_r>
 8002874:	6813      	ldr	r3, [r2, #0]
 8002876:	1c58      	adds	r0, r3, #1
 8002878:	6010      	str	r0, [r2, #0]
 800287a:	7019      	strb	r1, [r3, #0]
 800287c:	4608      	mov	r0, r1
 800287e:	bc10      	pop	{r4}
 8002880:	4770      	bx	lr

08002882 <__sfputs_r>:
 8002882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002884:	4606      	mov	r6, r0
 8002886:	460f      	mov	r7, r1
 8002888:	4614      	mov	r4, r2
 800288a:	18d5      	adds	r5, r2, r3
 800288c:	42ac      	cmp	r4, r5
 800288e:	d101      	bne.n	8002894 <__sfputs_r+0x12>
 8002890:	2000      	movs	r0, #0
 8002892:	e007      	b.n	80028a4 <__sfputs_r+0x22>
 8002894:	463a      	mov	r2, r7
 8002896:	4630      	mov	r0, r6
 8002898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800289c:	f7ff ffdc 	bl	8002858 <__sfputc_r>
 80028a0:	1c43      	adds	r3, r0, #1
 80028a2:	d1f3      	bne.n	800288c <__sfputs_r+0xa>
 80028a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028a8 <_vfiprintf_r>:
 80028a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ac:	460d      	mov	r5, r1
 80028ae:	4614      	mov	r4, r2
 80028b0:	4698      	mov	r8, r3
 80028b2:	4606      	mov	r6, r0
 80028b4:	b09d      	sub	sp, #116	; 0x74
 80028b6:	b118      	cbz	r0, 80028c0 <_vfiprintf_r+0x18>
 80028b8:	6983      	ldr	r3, [r0, #24]
 80028ba:	b90b      	cbnz	r3, 80028c0 <_vfiprintf_r+0x18>
 80028bc:	f7ff fd76 	bl	80023ac <__sinit>
 80028c0:	4b89      	ldr	r3, [pc, #548]	; (8002ae8 <_vfiprintf_r+0x240>)
 80028c2:	429d      	cmp	r5, r3
 80028c4:	d11b      	bne.n	80028fe <_vfiprintf_r+0x56>
 80028c6:	6875      	ldr	r5, [r6, #4]
 80028c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028ca:	07d9      	lsls	r1, r3, #31
 80028cc:	d405      	bmi.n	80028da <_vfiprintf_r+0x32>
 80028ce:	89ab      	ldrh	r3, [r5, #12]
 80028d0:	059a      	lsls	r2, r3, #22
 80028d2:	d402      	bmi.n	80028da <_vfiprintf_r+0x32>
 80028d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028d6:	f7ff fe07 	bl	80024e8 <__retarget_lock_acquire_recursive>
 80028da:	89ab      	ldrh	r3, [r5, #12]
 80028dc:	071b      	lsls	r3, r3, #28
 80028de:	d501      	bpl.n	80028e4 <_vfiprintf_r+0x3c>
 80028e0:	692b      	ldr	r3, [r5, #16]
 80028e2:	b9eb      	cbnz	r3, 8002920 <_vfiprintf_r+0x78>
 80028e4:	4629      	mov	r1, r5
 80028e6:	4630      	mov	r0, r6
 80028e8:	f000 fb5c 	bl	8002fa4 <__swsetup_r>
 80028ec:	b1c0      	cbz	r0, 8002920 <_vfiprintf_r+0x78>
 80028ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028f0:	07dc      	lsls	r4, r3, #31
 80028f2:	d50e      	bpl.n	8002912 <_vfiprintf_r+0x6a>
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	b01d      	add	sp, #116	; 0x74
 80028fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028fe:	4b7b      	ldr	r3, [pc, #492]	; (8002aec <_vfiprintf_r+0x244>)
 8002900:	429d      	cmp	r5, r3
 8002902:	d101      	bne.n	8002908 <_vfiprintf_r+0x60>
 8002904:	68b5      	ldr	r5, [r6, #8]
 8002906:	e7df      	b.n	80028c8 <_vfiprintf_r+0x20>
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <_vfiprintf_r+0x248>)
 800290a:	429d      	cmp	r5, r3
 800290c:	bf08      	it	eq
 800290e:	68f5      	ldreq	r5, [r6, #12]
 8002910:	e7da      	b.n	80028c8 <_vfiprintf_r+0x20>
 8002912:	89ab      	ldrh	r3, [r5, #12]
 8002914:	0598      	lsls	r0, r3, #22
 8002916:	d4ed      	bmi.n	80028f4 <_vfiprintf_r+0x4c>
 8002918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800291a:	f7ff fde6 	bl	80024ea <__retarget_lock_release_recursive>
 800291e:	e7e9      	b.n	80028f4 <_vfiprintf_r+0x4c>
 8002920:	2300      	movs	r3, #0
 8002922:	9309      	str	r3, [sp, #36]	; 0x24
 8002924:	2320      	movs	r3, #32
 8002926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800292a:	2330      	movs	r3, #48	; 0x30
 800292c:	f04f 0901 	mov.w	r9, #1
 8002930:	f8cd 800c 	str.w	r8, [sp, #12]
 8002934:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002af4 <_vfiprintf_r+0x24c>
 8002938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800293c:	4623      	mov	r3, r4
 800293e:	469a      	mov	sl, r3
 8002940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002944:	b10a      	cbz	r2, 800294a <_vfiprintf_r+0xa2>
 8002946:	2a25      	cmp	r2, #37	; 0x25
 8002948:	d1f9      	bne.n	800293e <_vfiprintf_r+0x96>
 800294a:	ebba 0b04 	subs.w	fp, sl, r4
 800294e:	d00b      	beq.n	8002968 <_vfiprintf_r+0xc0>
 8002950:	465b      	mov	r3, fp
 8002952:	4622      	mov	r2, r4
 8002954:	4629      	mov	r1, r5
 8002956:	4630      	mov	r0, r6
 8002958:	f7ff ff93 	bl	8002882 <__sfputs_r>
 800295c:	3001      	adds	r0, #1
 800295e:	f000 80aa 	beq.w	8002ab6 <_vfiprintf_r+0x20e>
 8002962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002964:	445a      	add	r2, fp
 8002966:	9209      	str	r2, [sp, #36]	; 0x24
 8002968:	f89a 3000 	ldrb.w	r3, [sl]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80a2 	beq.w	8002ab6 <_vfiprintf_r+0x20e>
 8002972:	2300      	movs	r3, #0
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800297c:	f10a 0a01 	add.w	sl, sl, #1
 8002980:	9304      	str	r3, [sp, #16]
 8002982:	9307      	str	r3, [sp, #28]
 8002984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002988:	931a      	str	r3, [sp, #104]	; 0x68
 800298a:	4654      	mov	r4, sl
 800298c:	2205      	movs	r2, #5
 800298e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002992:	4858      	ldr	r0, [pc, #352]	; (8002af4 <_vfiprintf_r+0x24c>)
 8002994:	f000 fcbc 	bl	8003310 <memchr>
 8002998:	9a04      	ldr	r2, [sp, #16]
 800299a:	b9d8      	cbnz	r0, 80029d4 <_vfiprintf_r+0x12c>
 800299c:	06d1      	lsls	r1, r2, #27
 800299e:	bf44      	itt	mi
 80029a0:	2320      	movmi	r3, #32
 80029a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029a6:	0713      	lsls	r3, r2, #28
 80029a8:	bf44      	itt	mi
 80029aa:	232b      	movmi	r3, #43	; 0x2b
 80029ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029b0:	f89a 3000 	ldrb.w	r3, [sl]
 80029b4:	2b2a      	cmp	r3, #42	; 0x2a
 80029b6:	d015      	beq.n	80029e4 <_vfiprintf_r+0x13c>
 80029b8:	4654      	mov	r4, sl
 80029ba:	2000      	movs	r0, #0
 80029bc:	f04f 0c0a 	mov.w	ip, #10
 80029c0:	9a07      	ldr	r2, [sp, #28]
 80029c2:	4621      	mov	r1, r4
 80029c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029c8:	3b30      	subs	r3, #48	; 0x30
 80029ca:	2b09      	cmp	r3, #9
 80029cc:	d94e      	bls.n	8002a6c <_vfiprintf_r+0x1c4>
 80029ce:	b1b0      	cbz	r0, 80029fe <_vfiprintf_r+0x156>
 80029d0:	9207      	str	r2, [sp, #28]
 80029d2:	e014      	b.n	80029fe <_vfiprintf_r+0x156>
 80029d4:	eba0 0308 	sub.w	r3, r0, r8
 80029d8:	fa09 f303 	lsl.w	r3, r9, r3
 80029dc:	4313      	orrs	r3, r2
 80029de:	46a2      	mov	sl, r4
 80029e0:	9304      	str	r3, [sp, #16]
 80029e2:	e7d2      	b.n	800298a <_vfiprintf_r+0xe2>
 80029e4:	9b03      	ldr	r3, [sp, #12]
 80029e6:	1d19      	adds	r1, r3, #4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	9103      	str	r1, [sp, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bfbb      	ittet	lt
 80029f0:	425b      	neglt	r3, r3
 80029f2:	f042 0202 	orrlt.w	r2, r2, #2
 80029f6:	9307      	strge	r3, [sp, #28]
 80029f8:	9307      	strlt	r3, [sp, #28]
 80029fa:	bfb8      	it	lt
 80029fc:	9204      	strlt	r2, [sp, #16]
 80029fe:	7823      	ldrb	r3, [r4, #0]
 8002a00:	2b2e      	cmp	r3, #46	; 0x2e
 8002a02:	d10c      	bne.n	8002a1e <_vfiprintf_r+0x176>
 8002a04:	7863      	ldrb	r3, [r4, #1]
 8002a06:	2b2a      	cmp	r3, #42	; 0x2a
 8002a08:	d135      	bne.n	8002a76 <_vfiprintf_r+0x1ce>
 8002a0a:	9b03      	ldr	r3, [sp, #12]
 8002a0c:	3402      	adds	r4, #2
 8002a0e:	1d1a      	adds	r2, r3, #4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	9203      	str	r2, [sp, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bfb8      	it	lt
 8002a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a1c:	9305      	str	r3, [sp, #20]
 8002a1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002b04 <_vfiprintf_r+0x25c>
 8002a22:	2203      	movs	r2, #3
 8002a24:	4650      	mov	r0, sl
 8002a26:	7821      	ldrb	r1, [r4, #0]
 8002a28:	f000 fc72 	bl	8003310 <memchr>
 8002a2c:	b140      	cbz	r0, 8002a40 <_vfiprintf_r+0x198>
 8002a2e:	2340      	movs	r3, #64	; 0x40
 8002a30:	eba0 000a 	sub.w	r0, r0, sl
 8002a34:	fa03 f000 	lsl.w	r0, r3, r0
 8002a38:	9b04      	ldr	r3, [sp, #16]
 8002a3a:	3401      	adds	r4, #1
 8002a3c:	4303      	orrs	r3, r0
 8002a3e:	9304      	str	r3, [sp, #16]
 8002a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a44:	2206      	movs	r2, #6
 8002a46:	482c      	ldr	r0, [pc, #176]	; (8002af8 <_vfiprintf_r+0x250>)
 8002a48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a4c:	f000 fc60 	bl	8003310 <memchr>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d03f      	beq.n	8002ad4 <_vfiprintf_r+0x22c>
 8002a54:	4b29      	ldr	r3, [pc, #164]	; (8002afc <_vfiprintf_r+0x254>)
 8002a56:	bb1b      	cbnz	r3, 8002aa0 <_vfiprintf_r+0x1f8>
 8002a58:	9b03      	ldr	r3, [sp, #12]
 8002a5a:	3307      	adds	r3, #7
 8002a5c:	f023 0307 	bic.w	r3, r3, #7
 8002a60:	3308      	adds	r3, #8
 8002a62:	9303      	str	r3, [sp, #12]
 8002a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a66:	443b      	add	r3, r7
 8002a68:	9309      	str	r3, [sp, #36]	; 0x24
 8002a6a:	e767      	b.n	800293c <_vfiprintf_r+0x94>
 8002a6c:	460c      	mov	r4, r1
 8002a6e:	2001      	movs	r0, #1
 8002a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a74:	e7a5      	b.n	80029c2 <_vfiprintf_r+0x11a>
 8002a76:	2300      	movs	r3, #0
 8002a78:	f04f 0c0a 	mov.w	ip, #10
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	3401      	adds	r4, #1
 8002a80:	9305      	str	r3, [sp, #20]
 8002a82:	4620      	mov	r0, r4
 8002a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a88:	3a30      	subs	r2, #48	; 0x30
 8002a8a:	2a09      	cmp	r2, #9
 8002a8c:	d903      	bls.n	8002a96 <_vfiprintf_r+0x1ee>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0c5      	beq.n	8002a1e <_vfiprintf_r+0x176>
 8002a92:	9105      	str	r1, [sp, #20]
 8002a94:	e7c3      	b.n	8002a1e <_vfiprintf_r+0x176>
 8002a96:	4604      	mov	r4, r0
 8002a98:	2301      	movs	r3, #1
 8002a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a9e:	e7f0      	b.n	8002a82 <_vfiprintf_r+0x1da>
 8002aa0:	ab03      	add	r3, sp, #12
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	462a      	mov	r2, r5
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <_vfiprintf_r+0x258>)
 8002aaa:	a904      	add	r1, sp, #16
 8002aac:	f3af 8000 	nop.w
 8002ab0:	4607      	mov	r7, r0
 8002ab2:	1c78      	adds	r0, r7, #1
 8002ab4:	d1d6      	bne.n	8002a64 <_vfiprintf_r+0x1bc>
 8002ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ab8:	07d9      	lsls	r1, r3, #31
 8002aba:	d405      	bmi.n	8002ac8 <_vfiprintf_r+0x220>
 8002abc:	89ab      	ldrh	r3, [r5, #12]
 8002abe:	059a      	lsls	r2, r3, #22
 8002ac0:	d402      	bmi.n	8002ac8 <_vfiprintf_r+0x220>
 8002ac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ac4:	f7ff fd11 	bl	80024ea <__retarget_lock_release_recursive>
 8002ac8:	89ab      	ldrh	r3, [r5, #12]
 8002aca:	065b      	lsls	r3, r3, #25
 8002acc:	f53f af12 	bmi.w	80028f4 <_vfiprintf_r+0x4c>
 8002ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ad2:	e711      	b.n	80028f8 <_vfiprintf_r+0x50>
 8002ad4:	ab03      	add	r3, sp, #12
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	462a      	mov	r2, r5
 8002ada:	4630      	mov	r0, r6
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <_vfiprintf_r+0x258>)
 8002ade:	a904      	add	r1, sp, #16
 8002ae0:	f000 f882 	bl	8002be8 <_printf_i>
 8002ae4:	e7e4      	b.n	8002ab0 <_vfiprintf_r+0x208>
 8002ae6:	bf00      	nop
 8002ae8:	08003568 	.word	0x08003568
 8002aec:	08003588 	.word	0x08003588
 8002af0:	08003548 	.word	0x08003548
 8002af4:	080035a8 	.word	0x080035a8
 8002af8:	080035b2 	.word	0x080035b2
 8002afc:	00000000 	.word	0x00000000
 8002b00:	08002883 	.word	0x08002883
 8002b04:	080035ae 	.word	0x080035ae

08002b08 <_printf_common>:
 8002b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	4616      	mov	r6, r2
 8002b0e:	4699      	mov	r9, r3
 8002b10:	688a      	ldr	r2, [r1, #8]
 8002b12:	690b      	ldr	r3, [r1, #16]
 8002b14:	4607      	mov	r7, r0
 8002b16:	4293      	cmp	r3, r2
 8002b18:	bfb8      	it	lt
 8002b1a:	4613      	movlt	r3, r2
 8002b1c:	6033      	str	r3, [r6, #0]
 8002b1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b22:	460c      	mov	r4, r1
 8002b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b28:	b10a      	cbz	r2, 8002b2e <_printf_common+0x26>
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	6033      	str	r3, [r6, #0]
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	0699      	lsls	r1, r3, #26
 8002b32:	bf42      	ittt	mi
 8002b34:	6833      	ldrmi	r3, [r6, #0]
 8002b36:	3302      	addmi	r3, #2
 8002b38:	6033      	strmi	r3, [r6, #0]
 8002b3a:	6825      	ldr	r5, [r4, #0]
 8002b3c:	f015 0506 	ands.w	r5, r5, #6
 8002b40:	d106      	bne.n	8002b50 <_printf_common+0x48>
 8002b42:	f104 0a19 	add.w	sl, r4, #25
 8002b46:	68e3      	ldr	r3, [r4, #12]
 8002b48:	6832      	ldr	r2, [r6, #0]
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	42ab      	cmp	r3, r5
 8002b4e:	dc28      	bgt.n	8002ba2 <_printf_common+0x9a>
 8002b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b54:	1e13      	subs	r3, r2, #0
 8002b56:	6822      	ldr	r2, [r4, #0]
 8002b58:	bf18      	it	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	0692      	lsls	r2, r2, #26
 8002b5e:	d42d      	bmi.n	8002bbc <_printf_common+0xb4>
 8002b60:	4649      	mov	r1, r9
 8002b62:	4638      	mov	r0, r7
 8002b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b68:	47c0      	blx	r8
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	d020      	beq.n	8002bb0 <_printf_common+0xa8>
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	68e5      	ldr	r5, [r4, #12]
 8002b72:	f003 0306 	and.w	r3, r3, #6
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	bf18      	it	ne
 8002b7a:	2500      	movne	r5, #0
 8002b7c:	6832      	ldr	r2, [r6, #0]
 8002b7e:	f04f 0600 	mov.w	r6, #0
 8002b82:	68a3      	ldr	r3, [r4, #8]
 8002b84:	bf08      	it	eq
 8002b86:	1aad      	subeq	r5, r5, r2
 8002b88:	6922      	ldr	r2, [r4, #16]
 8002b8a:	bf08      	it	eq
 8002b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b90:	4293      	cmp	r3, r2
 8002b92:	bfc4      	itt	gt
 8002b94:	1a9b      	subgt	r3, r3, r2
 8002b96:	18ed      	addgt	r5, r5, r3
 8002b98:	341a      	adds	r4, #26
 8002b9a:	42b5      	cmp	r5, r6
 8002b9c:	d11a      	bne.n	8002bd4 <_printf_common+0xcc>
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e008      	b.n	8002bb4 <_printf_common+0xac>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	4652      	mov	r2, sl
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	4638      	mov	r0, r7
 8002baa:	47c0      	blx	r8
 8002bac:	3001      	adds	r0, #1
 8002bae:	d103      	bne.n	8002bb8 <_printf_common+0xb0>
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb8:	3501      	adds	r5, #1
 8002bba:	e7c4      	b.n	8002b46 <_printf_common+0x3e>
 8002bbc:	2030      	movs	r0, #48	; 0x30
 8002bbe:	18e1      	adds	r1, r4, r3
 8002bc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bca:	4422      	add	r2, r4
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bd2:	e7c5      	b.n	8002b60 <_printf_common+0x58>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	4649      	mov	r1, r9
 8002bda:	4638      	mov	r0, r7
 8002bdc:	47c0      	blx	r8
 8002bde:	3001      	adds	r0, #1
 8002be0:	d0e6      	beq.n	8002bb0 <_printf_common+0xa8>
 8002be2:	3601      	adds	r6, #1
 8002be4:	e7d9      	b.n	8002b9a <_printf_common+0x92>
	...

08002be8 <_printf_i>:
 8002be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002bec:	460c      	mov	r4, r1
 8002bee:	7e27      	ldrb	r7, [r4, #24]
 8002bf0:	4691      	mov	r9, r2
 8002bf2:	2f78      	cmp	r7, #120	; 0x78
 8002bf4:	4680      	mov	r8, r0
 8002bf6:	469a      	mov	sl, r3
 8002bf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002bfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002bfe:	d807      	bhi.n	8002c10 <_printf_i+0x28>
 8002c00:	2f62      	cmp	r7, #98	; 0x62
 8002c02:	d80a      	bhi.n	8002c1a <_printf_i+0x32>
 8002c04:	2f00      	cmp	r7, #0
 8002c06:	f000 80d9 	beq.w	8002dbc <_printf_i+0x1d4>
 8002c0a:	2f58      	cmp	r7, #88	; 0x58
 8002c0c:	f000 80a4 	beq.w	8002d58 <_printf_i+0x170>
 8002c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c18:	e03a      	b.n	8002c90 <_printf_i+0xa8>
 8002c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c1e:	2b15      	cmp	r3, #21
 8002c20:	d8f6      	bhi.n	8002c10 <_printf_i+0x28>
 8002c22:	a001      	add	r0, pc, #4	; (adr r0, 8002c28 <_printf_i+0x40>)
 8002c24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002c28:	08002c81 	.word	0x08002c81
 8002c2c:	08002c95 	.word	0x08002c95
 8002c30:	08002c11 	.word	0x08002c11
 8002c34:	08002c11 	.word	0x08002c11
 8002c38:	08002c11 	.word	0x08002c11
 8002c3c:	08002c11 	.word	0x08002c11
 8002c40:	08002c95 	.word	0x08002c95
 8002c44:	08002c11 	.word	0x08002c11
 8002c48:	08002c11 	.word	0x08002c11
 8002c4c:	08002c11 	.word	0x08002c11
 8002c50:	08002c11 	.word	0x08002c11
 8002c54:	08002da3 	.word	0x08002da3
 8002c58:	08002cc5 	.word	0x08002cc5
 8002c5c:	08002d85 	.word	0x08002d85
 8002c60:	08002c11 	.word	0x08002c11
 8002c64:	08002c11 	.word	0x08002c11
 8002c68:	08002dc5 	.word	0x08002dc5
 8002c6c:	08002c11 	.word	0x08002c11
 8002c70:	08002cc5 	.word	0x08002cc5
 8002c74:	08002c11 	.word	0x08002c11
 8002c78:	08002c11 	.word	0x08002c11
 8002c7c:	08002d8d 	.word	0x08002d8d
 8002c80:	680b      	ldr	r3, [r1, #0]
 8002c82:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c86:	1d1a      	adds	r2, r3, #4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	600a      	str	r2, [r1, #0]
 8002c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0a4      	b.n	8002dde <_printf_i+0x1f6>
 8002c94:	6825      	ldr	r5, [r4, #0]
 8002c96:	6808      	ldr	r0, [r1, #0]
 8002c98:	062e      	lsls	r6, r5, #24
 8002c9a:	f100 0304 	add.w	r3, r0, #4
 8002c9e:	d50a      	bpl.n	8002cb6 <_printf_i+0xce>
 8002ca0:	6805      	ldr	r5, [r0, #0]
 8002ca2:	600b      	str	r3, [r1, #0]
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	da03      	bge.n	8002cb0 <_printf_i+0xc8>
 8002ca8:	232d      	movs	r3, #45	; 0x2d
 8002caa:	426d      	negs	r5, r5
 8002cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cb0:	230a      	movs	r3, #10
 8002cb2:	485e      	ldr	r0, [pc, #376]	; (8002e2c <_printf_i+0x244>)
 8002cb4:	e019      	b.n	8002cea <_printf_i+0x102>
 8002cb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002cba:	6805      	ldr	r5, [r0, #0]
 8002cbc:	600b      	str	r3, [r1, #0]
 8002cbe:	bf18      	it	ne
 8002cc0:	b22d      	sxthne	r5, r5
 8002cc2:	e7ef      	b.n	8002ca4 <_printf_i+0xbc>
 8002cc4:	680b      	ldr	r3, [r1, #0]
 8002cc6:	6825      	ldr	r5, [r4, #0]
 8002cc8:	1d18      	adds	r0, r3, #4
 8002cca:	6008      	str	r0, [r1, #0]
 8002ccc:	0628      	lsls	r0, r5, #24
 8002cce:	d501      	bpl.n	8002cd4 <_printf_i+0xec>
 8002cd0:	681d      	ldr	r5, [r3, #0]
 8002cd2:	e002      	b.n	8002cda <_printf_i+0xf2>
 8002cd4:	0669      	lsls	r1, r5, #25
 8002cd6:	d5fb      	bpl.n	8002cd0 <_printf_i+0xe8>
 8002cd8:	881d      	ldrh	r5, [r3, #0]
 8002cda:	2f6f      	cmp	r7, #111	; 0x6f
 8002cdc:	bf0c      	ite	eq
 8002cde:	2308      	moveq	r3, #8
 8002ce0:	230a      	movne	r3, #10
 8002ce2:	4852      	ldr	r0, [pc, #328]	; (8002e2c <_printf_i+0x244>)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cea:	6866      	ldr	r6, [r4, #4]
 8002cec:	2e00      	cmp	r6, #0
 8002cee:	bfa8      	it	ge
 8002cf0:	6821      	ldrge	r1, [r4, #0]
 8002cf2:	60a6      	str	r6, [r4, #8]
 8002cf4:	bfa4      	itt	ge
 8002cf6:	f021 0104 	bicge.w	r1, r1, #4
 8002cfa:	6021      	strge	r1, [r4, #0]
 8002cfc:	b90d      	cbnz	r5, 8002d02 <_printf_i+0x11a>
 8002cfe:	2e00      	cmp	r6, #0
 8002d00:	d04d      	beq.n	8002d9e <_printf_i+0x1b6>
 8002d02:	4616      	mov	r6, r2
 8002d04:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d08:	fb03 5711 	mls	r7, r3, r1, r5
 8002d0c:	5dc7      	ldrb	r7, [r0, r7]
 8002d0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d12:	462f      	mov	r7, r5
 8002d14:	42bb      	cmp	r3, r7
 8002d16:	460d      	mov	r5, r1
 8002d18:	d9f4      	bls.n	8002d04 <_printf_i+0x11c>
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d10b      	bne.n	8002d36 <_printf_i+0x14e>
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	07df      	lsls	r7, r3, #31
 8002d22:	d508      	bpl.n	8002d36 <_printf_i+0x14e>
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	6861      	ldr	r1, [r4, #4]
 8002d28:	4299      	cmp	r1, r3
 8002d2a:	bfde      	ittt	le
 8002d2c:	2330      	movle	r3, #48	; 0x30
 8002d2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d36:	1b92      	subs	r2, r2, r6
 8002d38:	6122      	str	r2, [r4, #16]
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	4640      	mov	r0, r8
 8002d40:	f8cd a000 	str.w	sl, [sp]
 8002d44:	aa03      	add	r2, sp, #12
 8002d46:	f7ff fedf 	bl	8002b08 <_printf_common>
 8002d4a:	3001      	adds	r0, #1
 8002d4c:	d14c      	bne.n	8002de8 <_printf_i+0x200>
 8002d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d52:	b004      	add	sp, #16
 8002d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d58:	4834      	ldr	r0, [pc, #208]	; (8002e2c <_printf_i+0x244>)
 8002d5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d5e:	680e      	ldr	r6, [r1, #0]
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	f856 5b04 	ldr.w	r5, [r6], #4
 8002d66:	061f      	lsls	r7, r3, #24
 8002d68:	600e      	str	r6, [r1, #0]
 8002d6a:	d514      	bpl.n	8002d96 <_printf_i+0x1ae>
 8002d6c:	07d9      	lsls	r1, r3, #31
 8002d6e:	bf44      	itt	mi
 8002d70:	f043 0320 	orrmi.w	r3, r3, #32
 8002d74:	6023      	strmi	r3, [r4, #0]
 8002d76:	b91d      	cbnz	r5, 8002d80 <_printf_i+0x198>
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	f023 0320 	bic.w	r3, r3, #32
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	2310      	movs	r3, #16
 8002d82:	e7af      	b.n	8002ce4 <_printf_i+0xfc>
 8002d84:	6823      	ldr	r3, [r4, #0]
 8002d86:	f043 0320 	orr.w	r3, r3, #32
 8002d8a:	6023      	str	r3, [r4, #0]
 8002d8c:	2378      	movs	r3, #120	; 0x78
 8002d8e:	4828      	ldr	r0, [pc, #160]	; (8002e30 <_printf_i+0x248>)
 8002d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d94:	e7e3      	b.n	8002d5e <_printf_i+0x176>
 8002d96:	065e      	lsls	r6, r3, #25
 8002d98:	bf48      	it	mi
 8002d9a:	b2ad      	uxthmi	r5, r5
 8002d9c:	e7e6      	b.n	8002d6c <_printf_i+0x184>
 8002d9e:	4616      	mov	r6, r2
 8002da0:	e7bb      	b.n	8002d1a <_printf_i+0x132>
 8002da2:	680b      	ldr	r3, [r1, #0]
 8002da4:	6826      	ldr	r6, [r4, #0]
 8002da6:	1d1d      	adds	r5, r3, #4
 8002da8:	6960      	ldr	r0, [r4, #20]
 8002daa:	600d      	str	r5, [r1, #0]
 8002dac:	0635      	lsls	r5, r6, #24
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	d501      	bpl.n	8002db6 <_printf_i+0x1ce>
 8002db2:	6018      	str	r0, [r3, #0]
 8002db4:	e002      	b.n	8002dbc <_printf_i+0x1d4>
 8002db6:	0671      	lsls	r1, r6, #25
 8002db8:	d5fb      	bpl.n	8002db2 <_printf_i+0x1ca>
 8002dba:	8018      	strh	r0, [r3, #0]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	4616      	mov	r6, r2
 8002dc0:	6123      	str	r3, [r4, #16]
 8002dc2:	e7ba      	b.n	8002d3a <_printf_i+0x152>
 8002dc4:	680b      	ldr	r3, [r1, #0]
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	600a      	str	r2, [r1, #0]
 8002dca:	681e      	ldr	r6, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4630      	mov	r0, r6
 8002dd0:	6862      	ldr	r2, [r4, #4]
 8002dd2:	f000 fa9d 	bl	8003310 <memchr>
 8002dd6:	b108      	cbz	r0, 8002ddc <_printf_i+0x1f4>
 8002dd8:	1b80      	subs	r0, r0, r6
 8002dda:	6060      	str	r0, [r4, #4]
 8002ddc:	6863      	ldr	r3, [r4, #4]
 8002dde:	6123      	str	r3, [r4, #16]
 8002de0:	2300      	movs	r3, #0
 8002de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de6:	e7a8      	b.n	8002d3a <_printf_i+0x152>
 8002de8:	4632      	mov	r2, r6
 8002dea:	4649      	mov	r1, r9
 8002dec:	4640      	mov	r0, r8
 8002dee:	6923      	ldr	r3, [r4, #16]
 8002df0:	47d0      	blx	sl
 8002df2:	3001      	adds	r0, #1
 8002df4:	d0ab      	beq.n	8002d4e <_printf_i+0x166>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	079b      	lsls	r3, r3, #30
 8002dfa:	d413      	bmi.n	8002e24 <_printf_i+0x23c>
 8002dfc:	68e0      	ldr	r0, [r4, #12]
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	4298      	cmp	r0, r3
 8002e02:	bfb8      	it	lt
 8002e04:	4618      	movlt	r0, r3
 8002e06:	e7a4      	b.n	8002d52 <_printf_i+0x16a>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	4632      	mov	r2, r6
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	4640      	mov	r0, r8
 8002e10:	47d0      	blx	sl
 8002e12:	3001      	adds	r0, #1
 8002e14:	d09b      	beq.n	8002d4e <_printf_i+0x166>
 8002e16:	3501      	adds	r5, #1
 8002e18:	68e3      	ldr	r3, [r4, #12]
 8002e1a:	9903      	ldr	r1, [sp, #12]
 8002e1c:	1a5b      	subs	r3, r3, r1
 8002e1e:	42ab      	cmp	r3, r5
 8002e20:	dcf2      	bgt.n	8002e08 <_printf_i+0x220>
 8002e22:	e7eb      	b.n	8002dfc <_printf_i+0x214>
 8002e24:	2500      	movs	r5, #0
 8002e26:	f104 0619 	add.w	r6, r4, #25
 8002e2a:	e7f5      	b.n	8002e18 <_printf_i+0x230>
 8002e2c:	080035b9 	.word	0x080035b9
 8002e30:	080035ca 	.word	0x080035ca

08002e34 <_sbrk_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	2300      	movs	r3, #0
 8002e38:	4d05      	ldr	r5, [pc, #20]	; (8002e50 <_sbrk_r+0x1c>)
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	602b      	str	r3, [r5, #0]
 8002e40:	f7fd ffde 	bl	8000e00 <_sbrk>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d102      	bne.n	8002e4e <_sbrk_r+0x1a>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	b103      	cbz	r3, 8002e4e <_sbrk_r+0x1a>
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	bd38      	pop	{r3, r4, r5, pc}
 8002e50:	20000110 	.word	0x20000110

08002e54 <__sread>:
 8002e54:	b510      	push	{r4, lr}
 8002e56:	460c      	mov	r4, r1
 8002e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e5c:	f000 fb0c 	bl	8003478 <_read_r>
 8002e60:	2800      	cmp	r0, #0
 8002e62:	bfab      	itete	ge
 8002e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e66:	89a3      	ldrhlt	r3, [r4, #12]
 8002e68:	181b      	addge	r3, r3, r0
 8002e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e6e:	bfac      	ite	ge
 8002e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e72:	81a3      	strhlt	r3, [r4, #12]
 8002e74:	bd10      	pop	{r4, pc}

08002e76 <__swrite>:
 8002e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e7a:	461f      	mov	r7, r3
 8002e7c:	898b      	ldrh	r3, [r1, #12]
 8002e7e:	4605      	mov	r5, r0
 8002e80:	05db      	lsls	r3, r3, #23
 8002e82:	460c      	mov	r4, r1
 8002e84:	4616      	mov	r6, r2
 8002e86:	d505      	bpl.n	8002e94 <__swrite+0x1e>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e90:	f000 f9c8 	bl	8003224 <_lseek_r>
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	4632      	mov	r2, r6
 8002e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e9c:	81a3      	strh	r3, [r4, #12]
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eaa:	f000 b869 	b.w	8002f80 <_write_r>

08002eae <__sseek>:
 8002eae:	b510      	push	{r4, lr}
 8002eb0:	460c      	mov	r4, r1
 8002eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb6:	f000 f9b5 	bl	8003224 <_lseek_r>
 8002eba:	1c43      	adds	r3, r0, #1
 8002ebc:	89a3      	ldrh	r3, [r4, #12]
 8002ebe:	bf15      	itete	ne
 8002ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002eca:	81a3      	strheq	r3, [r4, #12]
 8002ecc:	bf18      	it	ne
 8002ece:	81a3      	strhne	r3, [r4, #12]
 8002ed0:	bd10      	pop	{r4, pc}

08002ed2 <__sclose>:
 8002ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed6:	f000 b8d3 	b.w	8003080 <_close_r>
	...

08002edc <__swbuf_r>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	460e      	mov	r6, r1
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	4605      	mov	r5, r0
 8002ee4:	b118      	cbz	r0, 8002eee <__swbuf_r+0x12>
 8002ee6:	6983      	ldr	r3, [r0, #24]
 8002ee8:	b90b      	cbnz	r3, 8002eee <__swbuf_r+0x12>
 8002eea:	f7ff fa5f 	bl	80023ac <__sinit>
 8002eee:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <__swbuf_r+0x98>)
 8002ef0:	429c      	cmp	r4, r3
 8002ef2:	d12b      	bne.n	8002f4c <__swbuf_r+0x70>
 8002ef4:	686c      	ldr	r4, [r5, #4]
 8002ef6:	69a3      	ldr	r3, [r4, #24]
 8002ef8:	60a3      	str	r3, [r4, #8]
 8002efa:	89a3      	ldrh	r3, [r4, #12]
 8002efc:	071a      	lsls	r2, r3, #28
 8002efe:	d52f      	bpl.n	8002f60 <__swbuf_r+0x84>
 8002f00:	6923      	ldr	r3, [r4, #16]
 8002f02:	b36b      	cbz	r3, 8002f60 <__swbuf_r+0x84>
 8002f04:	6923      	ldr	r3, [r4, #16]
 8002f06:	6820      	ldr	r0, [r4, #0]
 8002f08:	b2f6      	uxtb	r6, r6
 8002f0a:	1ac0      	subs	r0, r0, r3
 8002f0c:	6963      	ldr	r3, [r4, #20]
 8002f0e:	4637      	mov	r7, r6
 8002f10:	4283      	cmp	r3, r0
 8002f12:	dc04      	bgt.n	8002f1e <__swbuf_r+0x42>
 8002f14:	4621      	mov	r1, r4
 8002f16:	4628      	mov	r0, r5
 8002f18:	f000 f948 	bl	80031ac <_fflush_r>
 8002f1c:	bb30      	cbnz	r0, 8002f6c <__swbuf_r+0x90>
 8002f1e:	68a3      	ldr	r3, [r4, #8]
 8002f20:	3001      	adds	r0, #1
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60a3      	str	r3, [r4, #8]
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	6022      	str	r2, [r4, #0]
 8002f2c:	701e      	strb	r6, [r3, #0]
 8002f2e:	6963      	ldr	r3, [r4, #20]
 8002f30:	4283      	cmp	r3, r0
 8002f32:	d004      	beq.n	8002f3e <__swbuf_r+0x62>
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	07db      	lsls	r3, r3, #31
 8002f38:	d506      	bpl.n	8002f48 <__swbuf_r+0x6c>
 8002f3a:	2e0a      	cmp	r6, #10
 8002f3c:	d104      	bne.n	8002f48 <__swbuf_r+0x6c>
 8002f3e:	4621      	mov	r1, r4
 8002f40:	4628      	mov	r0, r5
 8002f42:	f000 f933 	bl	80031ac <_fflush_r>
 8002f46:	b988      	cbnz	r0, 8002f6c <__swbuf_r+0x90>
 8002f48:	4638      	mov	r0, r7
 8002f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <__swbuf_r+0x9c>)
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d101      	bne.n	8002f56 <__swbuf_r+0x7a>
 8002f52:	68ac      	ldr	r4, [r5, #8]
 8002f54:	e7cf      	b.n	8002ef6 <__swbuf_r+0x1a>
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <__swbuf_r+0xa0>)
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	bf08      	it	eq
 8002f5c:	68ec      	ldreq	r4, [r5, #12]
 8002f5e:	e7ca      	b.n	8002ef6 <__swbuf_r+0x1a>
 8002f60:	4621      	mov	r1, r4
 8002f62:	4628      	mov	r0, r5
 8002f64:	f000 f81e 	bl	8002fa4 <__swsetup_r>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d0cb      	beq.n	8002f04 <__swbuf_r+0x28>
 8002f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8002f70:	e7ea      	b.n	8002f48 <__swbuf_r+0x6c>
 8002f72:	bf00      	nop
 8002f74:	08003568 	.word	0x08003568
 8002f78:	08003588 	.word	0x08003588
 8002f7c:	08003548 	.word	0x08003548

08002f80 <_write_r>:
 8002f80:	b538      	push	{r3, r4, r5, lr}
 8002f82:	4604      	mov	r4, r0
 8002f84:	4608      	mov	r0, r1
 8002f86:	4611      	mov	r1, r2
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4d05      	ldr	r5, [pc, #20]	; (8002fa0 <_write_r+0x20>)
 8002f8c:	602a      	str	r2, [r5, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f7fd feea 	bl	8000d68 <_write>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d102      	bne.n	8002f9e <_write_r+0x1e>
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	b103      	cbz	r3, 8002f9e <_write_r+0x1e>
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	20000110 	.word	0x20000110

08002fa4 <__swsetup_r>:
 8002fa4:	4b32      	ldr	r3, [pc, #200]	; (8003070 <__swsetup_r+0xcc>)
 8002fa6:	b570      	push	{r4, r5, r6, lr}
 8002fa8:	681d      	ldr	r5, [r3, #0]
 8002faa:	4606      	mov	r6, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	b125      	cbz	r5, 8002fba <__swsetup_r+0x16>
 8002fb0:	69ab      	ldr	r3, [r5, #24]
 8002fb2:	b913      	cbnz	r3, 8002fba <__swsetup_r+0x16>
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	f7ff f9f9 	bl	80023ac <__sinit>
 8002fba:	4b2e      	ldr	r3, [pc, #184]	; (8003074 <__swsetup_r+0xd0>)
 8002fbc:	429c      	cmp	r4, r3
 8002fbe:	d10f      	bne.n	8002fe0 <__swsetup_r+0x3c>
 8002fc0:	686c      	ldr	r4, [r5, #4]
 8002fc2:	89a3      	ldrh	r3, [r4, #12]
 8002fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fc8:	0719      	lsls	r1, r3, #28
 8002fca:	d42c      	bmi.n	8003026 <__swsetup_r+0x82>
 8002fcc:	06dd      	lsls	r5, r3, #27
 8002fce:	d411      	bmi.n	8002ff4 <__swsetup_r+0x50>
 8002fd0:	2309      	movs	r3, #9
 8002fd2:	6033      	str	r3, [r6, #0]
 8002fd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	e03e      	b.n	800305e <__swsetup_r+0xba>
 8002fe0:	4b25      	ldr	r3, [pc, #148]	; (8003078 <__swsetup_r+0xd4>)
 8002fe2:	429c      	cmp	r4, r3
 8002fe4:	d101      	bne.n	8002fea <__swsetup_r+0x46>
 8002fe6:	68ac      	ldr	r4, [r5, #8]
 8002fe8:	e7eb      	b.n	8002fc2 <__swsetup_r+0x1e>
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <__swsetup_r+0xd8>)
 8002fec:	429c      	cmp	r4, r3
 8002fee:	bf08      	it	eq
 8002ff0:	68ec      	ldreq	r4, [r5, #12]
 8002ff2:	e7e6      	b.n	8002fc2 <__swsetup_r+0x1e>
 8002ff4:	0758      	lsls	r0, r3, #29
 8002ff6:	d512      	bpl.n	800301e <__swsetup_r+0x7a>
 8002ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ffa:	b141      	cbz	r1, 800300e <__swsetup_r+0x6a>
 8002ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003000:	4299      	cmp	r1, r3
 8003002:	d002      	beq.n	800300a <__swsetup_r+0x66>
 8003004:	4630      	mov	r0, r6
 8003006:	f000 f9c5 	bl	8003394 <_free_r>
 800300a:	2300      	movs	r3, #0
 800300c:	6363      	str	r3, [r4, #52]	; 0x34
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003014:	81a3      	strh	r3, [r4, #12]
 8003016:	2300      	movs	r3, #0
 8003018:	6063      	str	r3, [r4, #4]
 800301a:	6923      	ldr	r3, [r4, #16]
 800301c:	6023      	str	r3, [r4, #0]
 800301e:	89a3      	ldrh	r3, [r4, #12]
 8003020:	f043 0308 	orr.w	r3, r3, #8
 8003024:	81a3      	strh	r3, [r4, #12]
 8003026:	6923      	ldr	r3, [r4, #16]
 8003028:	b94b      	cbnz	r3, 800303e <__swsetup_r+0x9a>
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003034:	d003      	beq.n	800303e <__swsetup_r+0x9a>
 8003036:	4621      	mov	r1, r4
 8003038:	4630      	mov	r0, r6
 800303a:	f000 f929 	bl	8003290 <__smakebuf_r>
 800303e:	89a0      	ldrh	r0, [r4, #12]
 8003040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003044:	f010 0301 	ands.w	r3, r0, #1
 8003048:	d00a      	beq.n	8003060 <__swsetup_r+0xbc>
 800304a:	2300      	movs	r3, #0
 800304c:	60a3      	str	r3, [r4, #8]
 800304e:	6963      	ldr	r3, [r4, #20]
 8003050:	425b      	negs	r3, r3
 8003052:	61a3      	str	r3, [r4, #24]
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	b943      	cbnz	r3, 800306a <__swsetup_r+0xc6>
 8003058:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800305c:	d1ba      	bne.n	8002fd4 <__swsetup_r+0x30>
 800305e:	bd70      	pop	{r4, r5, r6, pc}
 8003060:	0781      	lsls	r1, r0, #30
 8003062:	bf58      	it	pl
 8003064:	6963      	ldrpl	r3, [r4, #20]
 8003066:	60a3      	str	r3, [r4, #8]
 8003068:	e7f4      	b.n	8003054 <__swsetup_r+0xb0>
 800306a:	2000      	movs	r0, #0
 800306c:	e7f7      	b.n	800305e <__swsetup_r+0xba>
 800306e:	bf00      	nop
 8003070:	2000000c 	.word	0x2000000c
 8003074:	08003568 	.word	0x08003568
 8003078:	08003588 	.word	0x08003588
 800307c:	08003548 	.word	0x08003548

08003080 <_close_r>:
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	2300      	movs	r3, #0
 8003084:	4d05      	ldr	r5, [pc, #20]	; (800309c <_close_r+0x1c>)
 8003086:	4604      	mov	r4, r0
 8003088:	4608      	mov	r0, r1
 800308a:	602b      	str	r3, [r5, #0]
 800308c:	f7fd fe88 	bl	8000da0 <_close>
 8003090:	1c43      	adds	r3, r0, #1
 8003092:	d102      	bne.n	800309a <_close_r+0x1a>
 8003094:	682b      	ldr	r3, [r5, #0]
 8003096:	b103      	cbz	r3, 800309a <_close_r+0x1a>
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	bd38      	pop	{r3, r4, r5, pc}
 800309c:	20000110 	.word	0x20000110

080030a0 <__sflush_r>:
 80030a0:	898a      	ldrh	r2, [r1, #12]
 80030a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030a6:	4605      	mov	r5, r0
 80030a8:	0710      	lsls	r0, r2, #28
 80030aa:	460c      	mov	r4, r1
 80030ac:	d458      	bmi.n	8003160 <__sflush_r+0xc0>
 80030ae:	684b      	ldr	r3, [r1, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	dc05      	bgt.n	80030c0 <__sflush_r+0x20>
 80030b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	dc02      	bgt.n	80030c0 <__sflush_r+0x20>
 80030ba:	2000      	movs	r0, #0
 80030bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030c2:	2e00      	cmp	r6, #0
 80030c4:	d0f9      	beq.n	80030ba <__sflush_r+0x1a>
 80030c6:	2300      	movs	r3, #0
 80030c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030cc:	682f      	ldr	r7, [r5, #0]
 80030ce:	602b      	str	r3, [r5, #0]
 80030d0:	d032      	beq.n	8003138 <__sflush_r+0x98>
 80030d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	075a      	lsls	r2, r3, #29
 80030d8:	d505      	bpl.n	80030e6 <__sflush_r+0x46>
 80030da:	6863      	ldr	r3, [r4, #4]
 80030dc:	1ac0      	subs	r0, r0, r3
 80030de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030e0:	b10b      	cbz	r3, 80030e6 <__sflush_r+0x46>
 80030e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030e4:	1ac0      	subs	r0, r0, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	4602      	mov	r2, r0
 80030ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030ec:	4628      	mov	r0, r5
 80030ee:	6a21      	ldr	r1, [r4, #32]
 80030f0:	47b0      	blx	r6
 80030f2:	1c43      	adds	r3, r0, #1
 80030f4:	89a3      	ldrh	r3, [r4, #12]
 80030f6:	d106      	bne.n	8003106 <__sflush_r+0x66>
 80030f8:	6829      	ldr	r1, [r5, #0]
 80030fa:	291d      	cmp	r1, #29
 80030fc:	d82c      	bhi.n	8003158 <__sflush_r+0xb8>
 80030fe:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <__sflush_r+0x108>)
 8003100:	40ca      	lsrs	r2, r1
 8003102:	07d6      	lsls	r6, r2, #31
 8003104:	d528      	bpl.n	8003158 <__sflush_r+0xb8>
 8003106:	2200      	movs	r2, #0
 8003108:	6062      	str	r2, [r4, #4]
 800310a:	6922      	ldr	r2, [r4, #16]
 800310c:	04d9      	lsls	r1, r3, #19
 800310e:	6022      	str	r2, [r4, #0]
 8003110:	d504      	bpl.n	800311c <__sflush_r+0x7c>
 8003112:	1c42      	adds	r2, r0, #1
 8003114:	d101      	bne.n	800311a <__sflush_r+0x7a>
 8003116:	682b      	ldr	r3, [r5, #0]
 8003118:	b903      	cbnz	r3, 800311c <__sflush_r+0x7c>
 800311a:	6560      	str	r0, [r4, #84]	; 0x54
 800311c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800311e:	602f      	str	r7, [r5, #0]
 8003120:	2900      	cmp	r1, #0
 8003122:	d0ca      	beq.n	80030ba <__sflush_r+0x1a>
 8003124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003128:	4299      	cmp	r1, r3
 800312a:	d002      	beq.n	8003132 <__sflush_r+0x92>
 800312c:	4628      	mov	r0, r5
 800312e:	f000 f931 	bl	8003394 <_free_r>
 8003132:	2000      	movs	r0, #0
 8003134:	6360      	str	r0, [r4, #52]	; 0x34
 8003136:	e7c1      	b.n	80030bc <__sflush_r+0x1c>
 8003138:	6a21      	ldr	r1, [r4, #32]
 800313a:	2301      	movs	r3, #1
 800313c:	4628      	mov	r0, r5
 800313e:	47b0      	blx	r6
 8003140:	1c41      	adds	r1, r0, #1
 8003142:	d1c7      	bne.n	80030d4 <__sflush_r+0x34>
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0c4      	beq.n	80030d4 <__sflush_r+0x34>
 800314a:	2b1d      	cmp	r3, #29
 800314c:	d001      	beq.n	8003152 <__sflush_r+0xb2>
 800314e:	2b16      	cmp	r3, #22
 8003150:	d101      	bne.n	8003156 <__sflush_r+0xb6>
 8003152:	602f      	str	r7, [r5, #0]
 8003154:	e7b1      	b.n	80030ba <__sflush_r+0x1a>
 8003156:	89a3      	ldrh	r3, [r4, #12]
 8003158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800315c:	81a3      	strh	r3, [r4, #12]
 800315e:	e7ad      	b.n	80030bc <__sflush_r+0x1c>
 8003160:	690f      	ldr	r7, [r1, #16]
 8003162:	2f00      	cmp	r7, #0
 8003164:	d0a9      	beq.n	80030ba <__sflush_r+0x1a>
 8003166:	0793      	lsls	r3, r2, #30
 8003168:	bf18      	it	ne
 800316a:	2300      	movne	r3, #0
 800316c:	680e      	ldr	r6, [r1, #0]
 800316e:	bf08      	it	eq
 8003170:	694b      	ldreq	r3, [r1, #20]
 8003172:	eba6 0807 	sub.w	r8, r6, r7
 8003176:	600f      	str	r7, [r1, #0]
 8003178:	608b      	str	r3, [r1, #8]
 800317a:	f1b8 0f00 	cmp.w	r8, #0
 800317e:	dd9c      	ble.n	80030ba <__sflush_r+0x1a>
 8003180:	4643      	mov	r3, r8
 8003182:	463a      	mov	r2, r7
 8003184:	4628      	mov	r0, r5
 8003186:	6a21      	ldr	r1, [r4, #32]
 8003188:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800318a:	47b0      	blx	r6
 800318c:	2800      	cmp	r0, #0
 800318e:	dc06      	bgt.n	800319e <__sflush_r+0xfe>
 8003190:	89a3      	ldrh	r3, [r4, #12]
 8003192:	f04f 30ff 	mov.w	r0, #4294967295
 8003196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800319a:	81a3      	strh	r3, [r4, #12]
 800319c:	e78e      	b.n	80030bc <__sflush_r+0x1c>
 800319e:	4407      	add	r7, r0
 80031a0:	eba8 0800 	sub.w	r8, r8, r0
 80031a4:	e7e9      	b.n	800317a <__sflush_r+0xda>
 80031a6:	bf00      	nop
 80031a8:	20400001 	.word	0x20400001

080031ac <_fflush_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	690b      	ldr	r3, [r1, #16]
 80031b0:	4605      	mov	r5, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	b913      	cbnz	r3, 80031bc <_fflush_r+0x10>
 80031b6:	2500      	movs	r5, #0
 80031b8:	4628      	mov	r0, r5
 80031ba:	bd38      	pop	{r3, r4, r5, pc}
 80031bc:	b118      	cbz	r0, 80031c6 <_fflush_r+0x1a>
 80031be:	6983      	ldr	r3, [r0, #24]
 80031c0:	b90b      	cbnz	r3, 80031c6 <_fflush_r+0x1a>
 80031c2:	f7ff f8f3 	bl	80023ac <__sinit>
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <_fflush_r+0x6c>)
 80031c8:	429c      	cmp	r4, r3
 80031ca:	d11b      	bne.n	8003204 <_fflush_r+0x58>
 80031cc:	686c      	ldr	r4, [r5, #4]
 80031ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ef      	beq.n	80031b6 <_fflush_r+0xa>
 80031d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031d8:	07d0      	lsls	r0, r2, #31
 80031da:	d404      	bmi.n	80031e6 <_fflush_r+0x3a>
 80031dc:	0599      	lsls	r1, r3, #22
 80031de:	d402      	bmi.n	80031e6 <_fflush_r+0x3a>
 80031e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031e2:	f7ff f981 	bl	80024e8 <__retarget_lock_acquire_recursive>
 80031e6:	4628      	mov	r0, r5
 80031e8:	4621      	mov	r1, r4
 80031ea:	f7ff ff59 	bl	80030a0 <__sflush_r>
 80031ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031f0:	4605      	mov	r5, r0
 80031f2:	07da      	lsls	r2, r3, #31
 80031f4:	d4e0      	bmi.n	80031b8 <_fflush_r+0xc>
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	059b      	lsls	r3, r3, #22
 80031fa:	d4dd      	bmi.n	80031b8 <_fflush_r+0xc>
 80031fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031fe:	f7ff f974 	bl	80024ea <__retarget_lock_release_recursive>
 8003202:	e7d9      	b.n	80031b8 <_fflush_r+0xc>
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <_fflush_r+0x70>)
 8003206:	429c      	cmp	r4, r3
 8003208:	d101      	bne.n	800320e <_fflush_r+0x62>
 800320a:	68ac      	ldr	r4, [r5, #8]
 800320c:	e7df      	b.n	80031ce <_fflush_r+0x22>
 800320e:	4b04      	ldr	r3, [pc, #16]	; (8003220 <_fflush_r+0x74>)
 8003210:	429c      	cmp	r4, r3
 8003212:	bf08      	it	eq
 8003214:	68ec      	ldreq	r4, [r5, #12]
 8003216:	e7da      	b.n	80031ce <_fflush_r+0x22>
 8003218:	08003568 	.word	0x08003568
 800321c:	08003588 	.word	0x08003588
 8003220:	08003548 	.word	0x08003548

08003224 <_lseek_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4604      	mov	r4, r0
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	2200      	movs	r2, #0
 800322e:	4d05      	ldr	r5, [pc, #20]	; (8003244 <_lseek_r+0x20>)
 8003230:	602a      	str	r2, [r5, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	f7fd fdd8 	bl	8000de8 <_lseek>
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	d102      	bne.n	8003242 <_lseek_r+0x1e>
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	b103      	cbz	r3, 8003242 <_lseek_r+0x1e>
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	bd38      	pop	{r3, r4, r5, pc}
 8003244:	20000110 	.word	0x20000110

08003248 <__swhatbuf_r>:
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	460e      	mov	r6, r1
 800324c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003250:	4614      	mov	r4, r2
 8003252:	2900      	cmp	r1, #0
 8003254:	461d      	mov	r5, r3
 8003256:	b096      	sub	sp, #88	; 0x58
 8003258:	da07      	bge.n	800326a <__swhatbuf_r+0x22>
 800325a:	2300      	movs	r3, #0
 800325c:	602b      	str	r3, [r5, #0]
 800325e:	89b3      	ldrh	r3, [r6, #12]
 8003260:	061a      	lsls	r2, r3, #24
 8003262:	d410      	bmi.n	8003286 <__swhatbuf_r+0x3e>
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	e00e      	b.n	8003288 <__swhatbuf_r+0x40>
 800326a:	466a      	mov	r2, sp
 800326c:	f000 f916 	bl	800349c <_fstat_r>
 8003270:	2800      	cmp	r0, #0
 8003272:	dbf2      	blt.n	800325a <__swhatbuf_r+0x12>
 8003274:	9a01      	ldr	r2, [sp, #4]
 8003276:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800327a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800327e:	425a      	negs	r2, r3
 8003280:	415a      	adcs	r2, r3
 8003282:	602a      	str	r2, [r5, #0]
 8003284:	e7ee      	b.n	8003264 <__swhatbuf_r+0x1c>
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	2000      	movs	r0, #0
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	b016      	add	sp, #88	; 0x58
 800328e:	bd70      	pop	{r4, r5, r6, pc}

08003290 <__smakebuf_r>:
 8003290:	898b      	ldrh	r3, [r1, #12]
 8003292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003294:	079d      	lsls	r5, r3, #30
 8003296:	4606      	mov	r6, r0
 8003298:	460c      	mov	r4, r1
 800329a:	d507      	bpl.n	80032ac <__smakebuf_r+0x1c>
 800329c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	6123      	str	r3, [r4, #16]
 80032a4:	2301      	movs	r3, #1
 80032a6:	6163      	str	r3, [r4, #20]
 80032a8:	b002      	add	sp, #8
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	466a      	mov	r2, sp
 80032ae:	ab01      	add	r3, sp, #4
 80032b0:	f7ff ffca 	bl	8003248 <__swhatbuf_r>
 80032b4:	9900      	ldr	r1, [sp, #0]
 80032b6:	4605      	mov	r5, r0
 80032b8:	4630      	mov	r0, r6
 80032ba:	f7ff f917 	bl	80024ec <_malloc_r>
 80032be:	b948      	cbnz	r0, 80032d4 <__smakebuf_r+0x44>
 80032c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032c4:	059a      	lsls	r2, r3, #22
 80032c6:	d4ef      	bmi.n	80032a8 <__smakebuf_r+0x18>
 80032c8:	f023 0303 	bic.w	r3, r3, #3
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	81a3      	strh	r3, [r4, #12]
 80032d2:	e7e3      	b.n	800329c <__smakebuf_r+0xc>
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <__smakebuf_r+0x7c>)
 80032d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	6020      	str	r0, [r4, #0]
 80032dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	9b00      	ldr	r3, [sp, #0]
 80032e4:	6120      	str	r0, [r4, #16]
 80032e6:	6163      	str	r3, [r4, #20]
 80032e8:	9b01      	ldr	r3, [sp, #4]
 80032ea:	b15b      	cbz	r3, 8003304 <__smakebuf_r+0x74>
 80032ec:	4630      	mov	r0, r6
 80032ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032f2:	f000 f8e5 	bl	80034c0 <_isatty_r>
 80032f6:	b128      	cbz	r0, 8003304 <__smakebuf_r+0x74>
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	89a0      	ldrh	r0, [r4, #12]
 8003306:	4305      	orrs	r5, r0
 8003308:	81a5      	strh	r5, [r4, #12]
 800330a:	e7cd      	b.n	80032a8 <__smakebuf_r+0x18>
 800330c:	08002345 	.word	0x08002345

08003310 <memchr>:
 8003310:	4603      	mov	r3, r0
 8003312:	b510      	push	{r4, lr}
 8003314:	b2c9      	uxtb	r1, r1
 8003316:	4402      	add	r2, r0
 8003318:	4293      	cmp	r3, r2
 800331a:	4618      	mov	r0, r3
 800331c:	d101      	bne.n	8003322 <memchr+0x12>
 800331e:	2000      	movs	r0, #0
 8003320:	e003      	b.n	800332a <memchr+0x1a>
 8003322:	7804      	ldrb	r4, [r0, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	428c      	cmp	r4, r1
 8003328:	d1f6      	bne.n	8003318 <memchr+0x8>
 800332a:	bd10      	pop	{r4, pc}

0800332c <memcpy>:
 800332c:	440a      	add	r2, r1
 800332e:	4291      	cmp	r1, r2
 8003330:	f100 33ff 	add.w	r3, r0, #4294967295
 8003334:	d100      	bne.n	8003338 <memcpy+0xc>
 8003336:	4770      	bx	lr
 8003338:	b510      	push	{r4, lr}
 800333a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800333e:	4291      	cmp	r1, r2
 8003340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003344:	d1f9      	bne.n	800333a <memcpy+0xe>
 8003346:	bd10      	pop	{r4, pc}

08003348 <memmove>:
 8003348:	4288      	cmp	r0, r1
 800334a:	b510      	push	{r4, lr}
 800334c:	eb01 0402 	add.w	r4, r1, r2
 8003350:	d902      	bls.n	8003358 <memmove+0x10>
 8003352:	4284      	cmp	r4, r0
 8003354:	4623      	mov	r3, r4
 8003356:	d807      	bhi.n	8003368 <memmove+0x20>
 8003358:	1e43      	subs	r3, r0, #1
 800335a:	42a1      	cmp	r1, r4
 800335c:	d008      	beq.n	8003370 <memmove+0x28>
 800335e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003366:	e7f8      	b.n	800335a <memmove+0x12>
 8003368:	4601      	mov	r1, r0
 800336a:	4402      	add	r2, r0
 800336c:	428a      	cmp	r2, r1
 800336e:	d100      	bne.n	8003372 <memmove+0x2a>
 8003370:	bd10      	pop	{r4, pc}
 8003372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800337a:	e7f7      	b.n	800336c <memmove+0x24>

0800337c <__malloc_lock>:
 800337c:	4801      	ldr	r0, [pc, #4]	; (8003384 <__malloc_lock+0x8>)
 800337e:	f7ff b8b3 	b.w	80024e8 <__retarget_lock_acquire_recursive>
 8003382:	bf00      	nop
 8003384:	20000108 	.word	0x20000108

08003388 <__malloc_unlock>:
 8003388:	4801      	ldr	r0, [pc, #4]	; (8003390 <__malloc_unlock+0x8>)
 800338a:	f7ff b8ae 	b.w	80024ea <__retarget_lock_release_recursive>
 800338e:	bf00      	nop
 8003390:	20000108 	.word	0x20000108

08003394 <_free_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	4605      	mov	r5, r0
 8003398:	2900      	cmp	r1, #0
 800339a:	d043      	beq.n	8003424 <_free_r+0x90>
 800339c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033a0:	1f0c      	subs	r4, r1, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bfb8      	it	lt
 80033a6:	18e4      	addlt	r4, r4, r3
 80033a8:	f7ff ffe8 	bl	800337c <__malloc_lock>
 80033ac:	4a1e      	ldr	r2, [pc, #120]	; (8003428 <_free_r+0x94>)
 80033ae:	6813      	ldr	r3, [r2, #0]
 80033b0:	4610      	mov	r0, r2
 80033b2:	b933      	cbnz	r3, 80033c2 <_free_r+0x2e>
 80033b4:	6063      	str	r3, [r4, #4]
 80033b6:	6014      	str	r4, [r2, #0]
 80033b8:	4628      	mov	r0, r5
 80033ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033be:	f7ff bfe3 	b.w	8003388 <__malloc_unlock>
 80033c2:	42a3      	cmp	r3, r4
 80033c4:	d90a      	bls.n	80033dc <_free_r+0x48>
 80033c6:	6821      	ldr	r1, [r4, #0]
 80033c8:	1862      	adds	r2, r4, r1
 80033ca:	4293      	cmp	r3, r2
 80033cc:	bf01      	itttt	eq
 80033ce:	681a      	ldreq	r2, [r3, #0]
 80033d0:	685b      	ldreq	r3, [r3, #4]
 80033d2:	1852      	addeq	r2, r2, r1
 80033d4:	6022      	streq	r2, [r4, #0]
 80033d6:	6063      	str	r3, [r4, #4]
 80033d8:	6004      	str	r4, [r0, #0]
 80033da:	e7ed      	b.n	80033b8 <_free_r+0x24>
 80033dc:	461a      	mov	r2, r3
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	b10b      	cbz	r3, 80033e6 <_free_r+0x52>
 80033e2:	42a3      	cmp	r3, r4
 80033e4:	d9fa      	bls.n	80033dc <_free_r+0x48>
 80033e6:	6811      	ldr	r1, [r2, #0]
 80033e8:	1850      	adds	r0, r2, r1
 80033ea:	42a0      	cmp	r0, r4
 80033ec:	d10b      	bne.n	8003406 <_free_r+0x72>
 80033ee:	6820      	ldr	r0, [r4, #0]
 80033f0:	4401      	add	r1, r0
 80033f2:	1850      	adds	r0, r2, r1
 80033f4:	4283      	cmp	r3, r0
 80033f6:	6011      	str	r1, [r2, #0]
 80033f8:	d1de      	bne.n	80033b8 <_free_r+0x24>
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4401      	add	r1, r0
 8003400:	6011      	str	r1, [r2, #0]
 8003402:	6053      	str	r3, [r2, #4]
 8003404:	e7d8      	b.n	80033b8 <_free_r+0x24>
 8003406:	d902      	bls.n	800340e <_free_r+0x7a>
 8003408:	230c      	movs	r3, #12
 800340a:	602b      	str	r3, [r5, #0]
 800340c:	e7d4      	b.n	80033b8 <_free_r+0x24>
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	1821      	adds	r1, r4, r0
 8003412:	428b      	cmp	r3, r1
 8003414:	bf01      	itttt	eq
 8003416:	6819      	ldreq	r1, [r3, #0]
 8003418:	685b      	ldreq	r3, [r3, #4]
 800341a:	1809      	addeq	r1, r1, r0
 800341c:	6021      	streq	r1, [r4, #0]
 800341e:	6063      	str	r3, [r4, #4]
 8003420:	6054      	str	r4, [r2, #4]
 8003422:	e7c9      	b.n	80033b8 <_free_r+0x24>
 8003424:	bd38      	pop	{r3, r4, r5, pc}
 8003426:	bf00      	nop
 8003428:	2000009c 	.word	0x2000009c

0800342c <_realloc_r>:
 800342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342e:	4607      	mov	r7, r0
 8003430:	4614      	mov	r4, r2
 8003432:	460e      	mov	r6, r1
 8003434:	b921      	cbnz	r1, 8003440 <_realloc_r+0x14>
 8003436:	4611      	mov	r1, r2
 8003438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800343c:	f7ff b856 	b.w	80024ec <_malloc_r>
 8003440:	b922      	cbnz	r2, 800344c <_realloc_r+0x20>
 8003442:	f7ff ffa7 	bl	8003394 <_free_r>
 8003446:	4625      	mov	r5, r4
 8003448:	4628      	mov	r0, r5
 800344a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800344c:	f000 f848 	bl	80034e0 <_malloc_usable_size_r>
 8003450:	42a0      	cmp	r0, r4
 8003452:	d20f      	bcs.n	8003474 <_realloc_r+0x48>
 8003454:	4621      	mov	r1, r4
 8003456:	4638      	mov	r0, r7
 8003458:	f7ff f848 	bl	80024ec <_malloc_r>
 800345c:	4605      	mov	r5, r0
 800345e:	2800      	cmp	r0, #0
 8003460:	d0f2      	beq.n	8003448 <_realloc_r+0x1c>
 8003462:	4631      	mov	r1, r6
 8003464:	4622      	mov	r2, r4
 8003466:	f7ff ff61 	bl	800332c <memcpy>
 800346a:	4631      	mov	r1, r6
 800346c:	4638      	mov	r0, r7
 800346e:	f7ff ff91 	bl	8003394 <_free_r>
 8003472:	e7e9      	b.n	8003448 <_realloc_r+0x1c>
 8003474:	4635      	mov	r5, r6
 8003476:	e7e7      	b.n	8003448 <_realloc_r+0x1c>

08003478 <_read_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	4604      	mov	r4, r0
 800347c:	4608      	mov	r0, r1
 800347e:	4611      	mov	r1, r2
 8003480:	2200      	movs	r2, #0
 8003482:	4d05      	ldr	r5, [pc, #20]	; (8003498 <_read_r+0x20>)
 8003484:	602a      	str	r2, [r5, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	f7fd fc51 	bl	8000d2e <_read>
 800348c:	1c43      	adds	r3, r0, #1
 800348e:	d102      	bne.n	8003496 <_read_r+0x1e>
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	b103      	cbz	r3, 8003496 <_read_r+0x1e>
 8003494:	6023      	str	r3, [r4, #0]
 8003496:	bd38      	pop	{r3, r4, r5, pc}
 8003498:	20000110 	.word	0x20000110

0800349c <_fstat_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	2300      	movs	r3, #0
 80034a0:	4d06      	ldr	r5, [pc, #24]	; (80034bc <_fstat_r+0x20>)
 80034a2:	4604      	mov	r4, r0
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	602b      	str	r3, [r5, #0]
 80034aa:	f7fd fc84 	bl	8000db6 <_fstat>
 80034ae:	1c43      	adds	r3, r0, #1
 80034b0:	d102      	bne.n	80034b8 <_fstat_r+0x1c>
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	b103      	cbz	r3, 80034b8 <_fstat_r+0x1c>
 80034b6:	6023      	str	r3, [r4, #0]
 80034b8:	bd38      	pop	{r3, r4, r5, pc}
 80034ba:	bf00      	nop
 80034bc:	20000110 	.word	0x20000110

080034c0 <_isatty_r>:
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	2300      	movs	r3, #0
 80034c4:	4d05      	ldr	r5, [pc, #20]	; (80034dc <_isatty_r+0x1c>)
 80034c6:	4604      	mov	r4, r0
 80034c8:	4608      	mov	r0, r1
 80034ca:	602b      	str	r3, [r5, #0]
 80034cc:	f7fd fc82 	bl	8000dd4 <_isatty>
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	d102      	bne.n	80034da <_isatty_r+0x1a>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	b103      	cbz	r3, 80034da <_isatty_r+0x1a>
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	bd38      	pop	{r3, r4, r5, pc}
 80034dc:	20000110 	.word	0x20000110

080034e0 <_malloc_usable_size_r>:
 80034e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034e4:	1f18      	subs	r0, r3, #4
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bfbc      	itt	lt
 80034ea:	580b      	ldrlt	r3, [r1, r0]
 80034ec:	18c0      	addlt	r0, r0, r3
 80034ee:	4770      	bx	lr

080034f0 <_init>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	bf00      	nop
 80034f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f6:	bc08      	pop	{r3}
 80034f8:	469e      	mov	lr, r3
 80034fa:	4770      	bx	lr

080034fc <_fini>:
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fe:	bf00      	nop
 8003500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003502:	bc08      	pop	{r3}
 8003504:	469e      	mov	lr, r3
 8003506:	4770      	bx	lr
