
blinky_semphr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004610  08004610  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004610  08004610  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004610  08004610  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000078  08004690  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004690  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001116c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b2  00000000  00000000  0003120d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000339c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00034848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019129  00000000  00000000  000355a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8ea  00000000  00000000  0004e6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009089b  00000000  00000000  0005dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee856  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000ee8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080045b0 	.word	0x080045b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080045b0 	.word	0x080045b0

08000150 <LedOn>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void LedOn(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]

	while(1){
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000158:	4b0c      	ldr	r3, [pc, #48]	; (800018c <LedOn+0x3c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	f04f 31ff 	mov.w	r1, #4294967295
 8000160:	4618      	mov	r0, r3
 8000162:	f001 fe4d 	bl	8001e00 <xQueueSemaphoreTake>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000166:	2200      	movs	r2, #0
 8000168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016c:	4808      	ldr	r0, [pc, #32]	; (8000190 <LedOn+0x40>)
 800016e:	f000 fcdb 	bl	8000b28 <HAL_GPIO_WritePin>
		vTaskDelay(1000);
 8000172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000176:	f002 fa57 	bl	8002628 <vTaskDelay>
		xSemaphoreGive(my_semph2);
 800017a:	4b06      	ldr	r3, [pc, #24]	; (8000194 <LedOn+0x44>)
 800017c:	6818      	ldr	r0, [r3, #0]
 800017e:	2300      	movs	r3, #0
 8000180:	2200      	movs	r2, #0
 8000182:	2100      	movs	r1, #0
 8000184:	f001 fc5e 	bl	8001a44 <xQueueGenericSend>
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000188:	e7e6      	b.n	8000158 <LedOn+0x8>
 800018a:	bf00      	nop
 800018c:	200001f8 	.word	0x200001f8
 8000190:	40011000 	.word	0x40011000
 8000194:	200001f4 	.word	0x200001f4

08000198 <LedOff>:
	  }
}

static void LedOff(void *pvParameters){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]

	while(1){
		xSemaphoreTake(my_semph2, portMAX_DELAY);
 80001a0:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <LedOff+0x3c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	f04f 31ff 	mov.w	r1, #4294967295
 80001a8:	4618      	mov	r0, r3
 80001aa:	f001 fe29 	bl	8001e00 <xQueueSemaphoreTake>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001ae:	2201      	movs	r2, #1
 80001b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b4:	4808      	ldr	r0, [pc, #32]	; (80001d8 <LedOff+0x40>)
 80001b6:	f000 fcb7 	bl	8000b28 <HAL_GPIO_WritePin>
		vTaskDelay(1000);
 80001ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001be:	f002 fa33 	bl	8002628 <vTaskDelay>
		xSemaphoreGive(my_semph1);
 80001c2:	4b06      	ldr	r3, [pc, #24]	; (80001dc <LedOff+0x44>)
 80001c4:	6818      	ldr	r0, [r3, #0]
 80001c6:	2300      	movs	r3, #0
 80001c8:	2200      	movs	r2, #0
 80001ca:	2100      	movs	r1, #0
 80001cc:	f001 fc3a 	bl	8001a44 <xQueueGenericSend>
		xSemaphoreTake(my_semph2, portMAX_DELAY);
 80001d0:	e7e6      	b.n	80001a0 <LedOff+0x8>
 80001d2:	bf00      	nop
 80001d4:	200001f4 	.word	0x200001f4
 80001d8:	40011000 	.word	0x40011000
 80001dc:	200001f8 	.word	0x200001f8

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e6:	f000 fa09 	bl	80005fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ea:	f000 f853 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ee:	f000 f897 	bl	8000320 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(LedOn, "", 100, NULL, 1, NULL);
 80001f2:	2300      	movs	r3, #0
 80001f4:	9301      	str	r3, [sp, #4]
 80001f6:	2301      	movs	r3, #1
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	2300      	movs	r3, #0
 80001fc:	2264      	movs	r2, #100	; 0x64
 80001fe:	4920      	ldr	r1, [pc, #128]	; (8000280 <main+0xa0>)
 8000200:	4820      	ldr	r0, [pc, #128]	; (8000284 <main+0xa4>)
 8000202:	f002 f8a5 	bl	8002350 <xTaskCreate>
  xTaskCreate(LedOff, "", 100, NULL, 1, NULL);
 8000206:	2300      	movs	r3, #0
 8000208:	9301      	str	r3, [sp, #4]
 800020a:	2301      	movs	r3, #1
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2300      	movs	r3, #0
 8000210:	2264      	movs	r2, #100	; 0x64
 8000212:	491b      	ldr	r1, [pc, #108]	; (8000280 <main+0xa0>)
 8000214:	481c      	ldr	r0, [pc, #112]	; (8000288 <main+0xa8>)
 8000216:	f002 f89b 	bl	8002350 <xTaskCreate>
  vSemaphoreCreateBinary(my_semph1);
 800021a:	2203      	movs	r2, #3
 800021c:	2100      	movs	r1, #0
 800021e:	2001      	movs	r0, #1
 8000220:	f001 fb9e 	bl	8001960 <xQueueGenericCreate>
 8000224:	4603      	mov	r3, r0
 8000226:	4a19      	ldr	r2, [pc, #100]	; (800028c <main+0xac>)
 8000228:	6013      	str	r3, [r2, #0]
 800022a:	4b18      	ldr	r3, [pc, #96]	; (800028c <main+0xac>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d006      	beq.n	8000240 <main+0x60>
 8000232:	4b16      	ldr	r3, [pc, #88]	; (800028c <main+0xac>)
 8000234:	6818      	ldr	r0, [r3, #0]
 8000236:	2300      	movs	r3, #0
 8000238:	2200      	movs	r2, #0
 800023a:	2100      	movs	r1, #0
 800023c:	f001 fc02 	bl	8001a44 <xQueueGenericSend>
  vSemaphoreCreateBinary(my_semph2);
 8000240:	2203      	movs	r2, #3
 8000242:	2100      	movs	r1, #0
 8000244:	2001      	movs	r0, #1
 8000246:	f001 fb8b 	bl	8001960 <xQueueGenericCreate>
 800024a:	4603      	mov	r3, r0
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <main+0xb0>)
 800024e:	6013      	str	r3, [r2, #0]
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <main+0xb0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d006      	beq.n	8000266 <main+0x86>
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <main+0xb0>)
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	2300      	movs	r3, #0
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	f001 fbef 	bl	8001a44 <xQueueGenericSend>
  xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <main+0xac>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f04f 31ff 	mov.w	r1, #4294967295
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fdc6 	bl	8001e00 <xQueueSemaphoreTake>
  vTaskStartScheduler();
 8000274:	f002 fa0c 	bl	8002690 <vTaskStartScheduler>
 8000278:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 800027a:	4618      	mov	r0, r3
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	080045c8 	.word	0x080045c8
 8000284:	08000151 	.word	0x08000151
 8000288:	08000199 	.word	0x08000199
 800028c:	200001f8 	.word	0x200001f8
 8000290:	200001f4 	.word	0x200001f4

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b090      	sub	sp, #64	; 0x40
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	2228      	movs	r2, #40	; 0x28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f004 f8b8 	bl	8004418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b6:	2301      	movs	r3, #1
 80002b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c8:	2302      	movs	r3, #2
 80002ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 0318 	add.w	r3, r7, #24
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fc3b 	bl	8000b58 <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002e8:	f000 f878 	bl	80003dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	2302      	movs	r3, #2
 80002f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2102      	movs	r1, #2
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fea6 	bl	8001058 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000312:	f000 f863 	bl	80003dc <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3740      	adds	r7, #64	; 0x40
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000334:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <MX_GPIO_Init+0x90>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a1d      	ldr	r2, [pc, #116]	; (80003b0 <MX_GPIO_Init+0x90>)
 800033a:	f043 0310 	orr.w	r3, r3, #16
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <MX_GPIO_Init+0x90>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0310 	and.w	r3, r3, #16
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_GPIO_Init+0x90>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a17      	ldr	r2, [pc, #92]	; (80003b0 <MX_GPIO_Init+0x90>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_GPIO_Init+0x90>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0320 	and.w	r3, r3, #32
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_GPIO_Init+0x90>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a11      	ldr	r2, [pc, #68]	; (80003b0 <MX_GPIO_Init+0x90>)
 800036a:	f043 0304 	orr.w	r3, r3, #4
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_GPIO_Init+0x90>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0304 	and.w	r3, r3, #4
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <MX_GPIO_Init+0x94>)
 8000384:	f000 fbd0 	bl	8000b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <MX_GPIO_Init+0x94>)
 80003a2:	f000 fa3d 	bl	8000820 <HAL_GPIO_Init>

}
 80003a6:	bf00      	nop
 80003a8:	3720      	adds	r7, #32
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40011000 	.word	0x40011000

080003b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d101      	bne.n	80003ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ca:	f000 f92d 	bl	8000628 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40012c00 	.word	0x40012c00

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <Error_Handler+0x8>
	...

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a14      	ldr	r2, [pc, #80]	; (8000444 <HAL_MspInit+0x5c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <HAL_MspInit+0x5c>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_MspInit+0x60>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_MspInit+0x60>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000
 8000448:	40010000 	.word	0x40010000

0800044c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b08c      	sub	sp, #48	; 0x30
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800045c:	2200      	movs	r2, #0
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	2019      	movs	r0, #25
 8000462:	f000 f9b2 	bl	80007ca <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000466:	2019      	movs	r0, #25
 8000468:	f000 f9cb 	bl	8000802 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <HAL_InitTick+0x9c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <HAL_InitTick+0x9c>)
 8000472:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <HAL_InitTick+0x9c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000484:	f107 0210 	add.w	r2, r7, #16
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	4611      	mov	r1, r2
 800048e:	4618      	mov	r0, r3
 8000490:	f000 ff3e 	bl	8001310 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000494:	f000 ff28 	bl	80012e8 <HAL_RCC_GetPCLK2Freq>
 8000498:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800049c:	4a13      	ldr	r2, [pc, #76]	; (80004ec <HAL_InitTick+0xa0>)
 800049e:	fba2 2303 	umull	r2, r3, r2, r3
 80004a2:	0c9b      	lsrs	r3, r3, #18
 80004a4:	3b01      	subs	r3, #1
 80004a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <HAL_InitTick+0xa4>)
 80004aa:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <HAL_InitTick+0xa8>)
 80004ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <HAL_InitTick+0xa4>)
 80004b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_InitTick+0xa4>)
 80004b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_InitTick+0xa4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <HAL_InitTick+0xa4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <HAL_InitTick+0xa4>)
 80004ca:	f000 ff6f 	bl	80013ac <HAL_TIM_Base_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d104      	bne.n	80004de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004d4:	4806      	ldr	r0, [pc, #24]	; (80004f0 <HAL_InitTick+0xa4>)
 80004d6:	f000 ffc1 	bl	800145c <HAL_TIM_Base_Start_IT>
 80004da:	4603      	mov	r3, r0
 80004dc:	e000      	b.n	80004e0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3730      	adds	r7, #48	; 0x30
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	431bde83 	.word	0x431bde83
 80004f0:	200001fc 	.word	0x200001fc
 80004f4:	40012c00 	.word	0x40012c00

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
	...

08000524 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000528:	4802      	ldr	r0, [pc, #8]	; (8000534 <TIM1_UP_IRQHandler+0x10>)
 800052a:	f000 ffe9 	bl	8001500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200001fc 	.word	0x200001fc

08000538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000540:	4a14      	ldr	r2, [pc, #80]	; (8000594 <_sbrk+0x5c>)
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <_sbrk+0x60>)
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d102      	bne.n	800055a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <_sbrk+0x64>)
 8000556:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <_sbrk+0x68>)
 8000558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	429a      	cmp	r2, r3
 8000566:	d207      	bcs.n	8000578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000568:	f003 ff0e 	bl	8004388 <__errno>
 800056c:	4603      	mov	r3, r0
 800056e:	220c      	movs	r2, #12
 8000570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	e009      	b.n	800058c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	4a05      	ldr	r2, [pc, #20]	; (800059c <_sbrk+0x64>)
 8000588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20005000 	.word	0x20005000
 8000598:	00000400 	.word	0x00000400
 800059c:	20000094 	.word	0x20000094
 80005a0:	20000298 	.word	0x20000298

080005a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b0:	f7ff fff8 	bl	80005a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005b6:	490c      	ldr	r1, [pc, #48]	; (80005e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005b8:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005cc:	4c09      	ldr	r4, [pc, #36]	; (80005f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005da:	f003 fedb 	bl	8004394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005de:	f7ff fdff 	bl	80001e0 <main>
  bx lr
 80005e2:	4770      	bx	lr
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005ec:	08004618 	.word	0x08004618
  ldr r2, =_sbss
 80005f0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005f4:	20000298 	.word	0x20000298

080005f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_2_IRQHandler>
	...

080005fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_Init+0x28>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <HAL_Init+0x28>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060c:	2003      	movs	r0, #3
 800060e:	f000 f8d1 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000612:	2000      	movs	r0, #0
 8000614:	f7ff ff1a 	bl	800044c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000618:	f7ff fee6 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40022000 	.word	0x40022000

08000628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x1c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_IncTick+0x20>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a03      	ldr	r2, [pc, #12]	; (8000648 <HAL_IncTick+0x20>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000008 	.word	0x20000008
 8000648:	20000244 	.word	0x20000244

0800064c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <HAL_GetTick+0x10>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000244 	.word	0x20000244

08000660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800067c:	4013      	ands	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	60d3      	str	r3, [r2, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	f003 0307 	and.w	r3, r3, #7
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db0b      	blt.n	80006ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 021f 	and.w	r2, r3, #31
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <__NVIC_EnableIRQ+0x34>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	095b      	lsrs	r3, r3, #5
 80006e4:	2001      	movs	r0, #1
 80006e6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	; (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	2b06      	cmp	r3, #6
 8000778:	d902      	bls.n	8000780 <NVIC_EncodePriority+0x30>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3b03      	subs	r3, #3
 800077e:	e000      	b.n	8000782 <NVIC_EncodePriority+0x32>
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43da      	mvns	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43d9      	mvns	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff4f 	bl	8000660 <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff64 	bl	80006a8 <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ffb2 	bl	8000750 <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff81 	bl	80006fc <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff57 	bl	80006c4 <__NVIC_EnableIRQ>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b08b      	sub	sp, #44	; 0x2c
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000832:	e169      	b.n	8000b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000834:	2201      	movs	r2, #1
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	69fa      	ldr	r2, [r7, #28]
 8000844:	4013      	ands	r3, r2
 8000846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 8158 	bne.w	8000b02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	4a9a      	ldr	r2, [pc, #616]	; (8000ac0 <HAL_GPIO_Init+0x2a0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d05e      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 800085c:	4a98      	ldr	r2, [pc, #608]	; (8000ac0 <HAL_GPIO_Init+0x2a0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d875      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 8000862:	4a98      	ldr	r2, [pc, #608]	; (8000ac4 <HAL_GPIO_Init+0x2a4>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d058      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 8000868:	4a96      	ldr	r2, [pc, #600]	; (8000ac4 <HAL_GPIO_Init+0x2a4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d86f      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 800086e:	4a96      	ldr	r2, [pc, #600]	; (8000ac8 <HAL_GPIO_Init+0x2a8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d052      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 8000874:	4a94      	ldr	r2, [pc, #592]	; (8000ac8 <HAL_GPIO_Init+0x2a8>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d869      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 800087a:	4a94      	ldr	r2, [pc, #592]	; (8000acc <HAL_GPIO_Init+0x2ac>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d04c      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 8000880:	4a92      	ldr	r2, [pc, #584]	; (8000acc <HAL_GPIO_Init+0x2ac>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d863      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 8000886:	4a92      	ldr	r2, [pc, #584]	; (8000ad0 <HAL_GPIO_Init+0x2b0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d046      	beq.n	800091a <HAL_GPIO_Init+0xfa>
 800088c:	4a90      	ldr	r2, [pc, #576]	; (8000ad0 <HAL_GPIO_Init+0x2b0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d85d      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 8000892:	2b12      	cmp	r3, #18
 8000894:	d82a      	bhi.n	80008ec <HAL_GPIO_Init+0xcc>
 8000896:	2b12      	cmp	r3, #18
 8000898:	d859      	bhi.n	800094e <HAL_GPIO_Init+0x12e>
 800089a:	a201      	add	r2, pc, #4	; (adr r2, 80008a0 <HAL_GPIO_Init+0x80>)
 800089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a0:	0800091b 	.word	0x0800091b
 80008a4:	080008f5 	.word	0x080008f5
 80008a8:	08000907 	.word	0x08000907
 80008ac:	08000949 	.word	0x08000949
 80008b0:	0800094f 	.word	0x0800094f
 80008b4:	0800094f 	.word	0x0800094f
 80008b8:	0800094f 	.word	0x0800094f
 80008bc:	0800094f 	.word	0x0800094f
 80008c0:	0800094f 	.word	0x0800094f
 80008c4:	0800094f 	.word	0x0800094f
 80008c8:	0800094f 	.word	0x0800094f
 80008cc:	0800094f 	.word	0x0800094f
 80008d0:	0800094f 	.word	0x0800094f
 80008d4:	0800094f 	.word	0x0800094f
 80008d8:	0800094f 	.word	0x0800094f
 80008dc:	0800094f 	.word	0x0800094f
 80008e0:	0800094f 	.word	0x0800094f
 80008e4:	080008fd 	.word	0x080008fd
 80008e8:	08000911 	.word	0x08000911
 80008ec:	4a79      	ldr	r2, [pc, #484]	; (8000ad4 <HAL_GPIO_Init+0x2b4>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d013      	beq.n	800091a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008f2:	e02c      	b.n	800094e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	623b      	str	r3, [r7, #32]
          break;
 80008fa:	e029      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	3304      	adds	r3, #4
 8000902:	623b      	str	r3, [r7, #32]
          break;
 8000904:	e024      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	3308      	adds	r3, #8
 800090c:	623b      	str	r3, [r7, #32]
          break;
 800090e:	e01f      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	330c      	adds	r3, #12
 8000916:	623b      	str	r3, [r7, #32]
          break;
 8000918:	e01a      	b.n	8000950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d102      	bne.n	8000928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000922:	2304      	movs	r3, #4
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e013      	b.n	8000950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d105      	bne.n	800093c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000930:	2308      	movs	r3, #8
 8000932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69fa      	ldr	r2, [r7, #28]
 8000938:	611a      	str	r2, [r3, #16]
          break;
 800093a:	e009      	b.n	8000950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800093c:	2308      	movs	r3, #8
 800093e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	615a      	str	r2, [r3, #20]
          break;
 8000946:	e003      	b.n	8000950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e000      	b.n	8000950 <HAL_GPIO_Init+0x130>
          break;
 800094e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	2bff      	cmp	r3, #255	; 0xff
 8000954:	d801      	bhi.n	800095a <HAL_GPIO_Init+0x13a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	e001      	b.n	800095e <HAL_GPIO_Init+0x13e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3304      	adds	r3, #4
 800095e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	2bff      	cmp	r3, #255	; 0xff
 8000964:	d802      	bhi.n	800096c <HAL_GPIO_Init+0x14c>
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	e002      	b.n	8000972 <HAL_GPIO_Init+0x152>
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	3b08      	subs	r3, #8
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	210f      	movs	r1, #15
 800097a:	693b      	ldr	r3, [r7, #16]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	401a      	ands	r2, r3
 8000984:	6a39      	ldr	r1, [r7, #32]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	fa01 f303 	lsl.w	r3, r1, r3
 800098c:	431a      	orrs	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 80b1 	beq.w	8000b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a0:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	4a4c      	ldr	r2, [pc, #304]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6193      	str	r3, [r2, #24]
 80009ac:	4b4a      	ldr	r3, [pc, #296]	; (8000ad8 <HAL_GPIO_Init+0x2b8>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009b8:	4a48      	ldr	r2, [pc, #288]	; (8000adc <HAL_GPIO_Init+0x2bc>)
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	089b      	lsrs	r3, r3, #2
 80009be:	3302      	adds	r3, #2
 80009c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	220f      	movs	r2, #15
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a40      	ldr	r2, [pc, #256]	; (8000ae0 <HAL_GPIO_Init+0x2c0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d013      	beq.n	8000a0c <HAL_GPIO_Init+0x1ec>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a3f      	ldr	r2, [pc, #252]	; (8000ae4 <HAL_GPIO_Init+0x2c4>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d00d      	beq.n	8000a08 <HAL_GPIO_Init+0x1e8>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a3e      	ldr	r2, [pc, #248]	; (8000ae8 <HAL_GPIO_Init+0x2c8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d007      	beq.n	8000a04 <HAL_GPIO_Init+0x1e4>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a3d      	ldr	r2, [pc, #244]	; (8000aec <HAL_GPIO_Init+0x2cc>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d101      	bne.n	8000a00 <HAL_GPIO_Init+0x1e0>
 80009fc:	2303      	movs	r3, #3
 80009fe:	e006      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a00:	2304      	movs	r3, #4
 8000a02:	e004      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a04:	2302      	movs	r3, #2
 8000a06:	e002      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <HAL_GPIO_Init+0x1ee>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a10:	f002 0203 	and.w	r2, r2, #3
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	68fa      	ldr	r2, [r7, #12]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a1e:	492f      	ldr	r1, [pc, #188]	; (8000adc <HAL_GPIO_Init+0x2bc>)
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	3302      	adds	r3, #2
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	492c      	ldr	r1, [pc, #176]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4928      	ldr	r1, [pc, #160]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a50:	4013      	ands	r3, r2
 8000a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	4922      	ldr	r1, [pc, #136]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	60cb      	str	r3, [r1, #12]
 8000a6c:	e006      	b.n	8000a7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	491e      	ldr	r1, [pc, #120]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d006      	beq.n	8000a96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	4918      	ldr	r1, [pc, #96]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	604b      	str	r3, [r1, #4]
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000a98:	685a      	ldr	r2, [r3, #4]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4914      	ldr	r1, [pc, #80]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d021      	beq.n	8000af4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	490e      	ldr	r1, [pc, #56]	; (8000af0 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	600b      	str	r3, [r1, #0]
 8000abc:	e021      	b.n	8000b02 <HAL_GPIO_Init+0x2e2>
 8000abe:	bf00      	nop
 8000ac0:	10320000 	.word	0x10320000
 8000ac4:	10310000 	.word	0x10310000
 8000ac8:	10220000 	.word	0x10220000
 8000acc:	10210000 	.word	0x10210000
 8000ad0:	10120000 	.word	0x10120000
 8000ad4:	10110000 	.word	0x10110000
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010000 	.word	0x40010000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40011400 	.word	0x40011400
 8000af0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4909      	ldr	r1, [pc, #36]	; (8000b24 <HAL_GPIO_Init+0x304>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	3301      	adds	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f47f ae8e 	bne.w	8000834 <HAL_GPIO_Init+0x14>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	372c      	adds	r7, #44	; 0x2c
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40010400 	.word	0x40010400

08000b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
 8000b34:	4613      	mov	r3, r2
 8000b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b38:	787b      	ldrb	r3, [r7, #1]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3e:	887a      	ldrh	r2, [r7, #2]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b44:	e003      	b.n	8000b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	041a      	lsls	r2, r3, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	611a      	str	r2, [r3, #16]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e26c      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 8087 	beq.w	8000c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b78:	4b92      	ldr	r3, [pc, #584]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d00c      	beq.n	8000b9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b84:	4b8f      	ldr	r3, [pc, #572]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 030c 	and.w	r3, r3, #12
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	d112      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x5e>
 8000b90:	4b8c      	ldr	r3, [pc, #560]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9c:	d10b      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9e:	4b89      	ldr	r3, [pc, #548]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d06c      	beq.n	8000c84 <HAL_RCC_OscConfig+0x12c>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d168      	bne.n	8000c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e246      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bbe:	d106      	bne.n	8000bce <HAL_RCC_OscConfig+0x76>
 8000bc0:	4b80      	ldr	r3, [pc, #512]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a7f      	ldr	r2, [pc, #508]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	e02e      	b.n	8000c2c <HAL_RCC_OscConfig+0xd4>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10c      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x98>
 8000bd6:	4b7b      	ldr	r3, [pc, #492]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a7a      	ldr	r2, [pc, #488]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	4b78      	ldr	r3, [pc, #480]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a77      	ldr	r2, [pc, #476]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e01d      	b.n	8000c2c <HAL_RCC_OscConfig+0xd4>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf8:	d10c      	bne.n	8000c14 <HAL_RCC_OscConfig+0xbc>
 8000bfa:	4b72      	ldr	r3, [pc, #456]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a71      	ldr	r2, [pc, #452]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	4b6f      	ldr	r3, [pc, #444]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a6e      	ldr	r2, [pc, #440]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e00b      	b.n	8000c2c <HAL_RCC_OscConfig+0xd4>
 8000c14:	4b6b      	ldr	r3, [pc, #428]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a6a      	ldr	r2, [pc, #424]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b68      	ldr	r3, [pc, #416]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a67      	ldr	r2, [pc, #412]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d013      	beq.n	8000c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c34:	f7ff fd0a 	bl	800064c <HAL_GetTick>
 8000c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3a:	e008      	b.n	8000c4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c3c:	f7ff fd06 	bl	800064c <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	2b64      	cmp	r3, #100	; 0x64
 8000c48:	d901      	bls.n	8000c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e1fa      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4e:	4b5d      	ldr	r3, [pc, #372]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f0      	beq.n	8000c3c <HAL_RCC_OscConfig+0xe4>
 8000c5a:	e014      	b.n	8000c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fcf6 	bl	800064c <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c64:	f7ff fcf2 	bl	800064c <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b64      	cmp	r3, #100	; 0x64
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e1e6      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c76:	4b53      	ldr	r3, [pc, #332]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f0      	bne.n	8000c64 <HAL_RCC_OscConfig+0x10c>
 8000c82:	e000      	b.n	8000c86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d063      	beq.n	8000d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c92:	4b4c      	ldr	r3, [pc, #304]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00b      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c9e:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	2b08      	cmp	r3, #8
 8000ca8:	d11c      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x18c>
 8000caa:	4b46      	ldr	r3, [pc, #280]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d116      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb6:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d005      	beq.n	8000cce <HAL_RCC_OscConfig+0x176>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d001      	beq.n	8000cce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e1ba      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cce:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	4939      	ldr	r1, [pc, #228]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce2:	e03a      	b.n	8000d5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d020      	beq.n	8000d2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cec:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <HAL_RCC_OscConfig+0x270>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf2:	f7ff fcab 	bl	800064c <HAL_GetTick>
 8000cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	e008      	b.n	8000d0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cfa:	f7ff fca7 	bl	800064c <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d901      	bls.n	8000d0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e19b      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f0      	beq.n	8000cfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4927      	ldr	r1, [pc, #156]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
 8000d2c:	e015      	b.n	8000d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <HAL_RCC_OscConfig+0x270>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fc8a 	bl	800064c <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d3c:	f7ff fc86 	bl	800064c <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e17a      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0308 	and.w	r3, r3, #8
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d03a      	beq.n	8000ddc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d019      	beq.n	8000da2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_RCC_OscConfig+0x274>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d74:	f7ff fc6a 	bl	800064c <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc66 	bl	800064c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e15a      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f0      	beq.n	8000d7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 fae8 	bl	8001370 <RCC_Delay>
 8000da0:	e01c      	b.n	8000ddc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_RCC_OscConfig+0x274>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da8:	f7ff fc50 	bl	800064c <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dae:	e00f      	b.n	8000dd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db0:	f7ff fc4c 	bl	800064c <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d908      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e140      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	42420000 	.word	0x42420000
 8000dcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd0:	4b9e      	ldr	r3, [pc, #632]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e9      	bne.n	8000db0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80a6 	beq.w	8000f36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dee:	4b97      	ldr	r3, [pc, #604]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10d      	bne.n	8000e16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	4b94      	ldr	r3, [pc, #592]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	4a93      	ldr	r2, [pc, #588]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e04:	61d3      	str	r3, [r2, #28]
 8000e06:	4b91      	ldr	r3, [pc, #580]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e12:	2301      	movs	r3, #1
 8000e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e16:	4b8e      	ldr	r3, [pc, #568]	; (8001050 <HAL_RCC_OscConfig+0x4f8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d118      	bne.n	8000e54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e22:	4b8b      	ldr	r3, [pc, #556]	; (8001050 <HAL_RCC_OscConfig+0x4f8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a8a      	ldr	r2, [pc, #552]	; (8001050 <HAL_RCC_OscConfig+0x4f8>)
 8000e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fc0d 	bl	800064c <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e36:	f7ff fc09 	bl	800064c <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b64      	cmp	r3, #100	; 0x64
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e0fd      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e48:	4b81      	ldr	r3, [pc, #516]	; (8001050 <HAL_RCC_OscConfig+0x4f8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f0      	beq.n	8000e36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d106      	bne.n	8000e6a <HAL_RCC_OscConfig+0x312>
 8000e5c:	4b7b      	ldr	r3, [pc, #492]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	4a7a      	ldr	r2, [pc, #488]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6213      	str	r3, [r2, #32]
 8000e68:	e02d      	b.n	8000ec6 <HAL_RCC_OscConfig+0x36e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d10c      	bne.n	8000e8c <HAL_RCC_OscConfig+0x334>
 8000e72:	4b76      	ldr	r3, [pc, #472]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	6a1b      	ldr	r3, [r3, #32]
 8000e76:	4a75      	ldr	r2, [pc, #468]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	6213      	str	r3, [r2, #32]
 8000e7e:	4b73      	ldr	r3, [pc, #460]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	4a72      	ldr	r2, [pc, #456]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	f023 0304 	bic.w	r3, r3, #4
 8000e88:	6213      	str	r3, [r2, #32]
 8000e8a:	e01c      	b.n	8000ec6 <HAL_RCC_OscConfig+0x36e>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d10c      	bne.n	8000eae <HAL_RCC_OscConfig+0x356>
 8000e94:	4b6d      	ldr	r3, [pc, #436]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a6c      	ldr	r2, [pc, #432]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6213      	str	r3, [r2, #32]
 8000ea0:	4b6a      	ldr	r3, [pc, #424]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	4a69      	ldr	r2, [pc, #420]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6213      	str	r3, [r2, #32]
 8000eac:	e00b      	b.n	8000ec6 <HAL_RCC_OscConfig+0x36e>
 8000eae:	4b67      	ldr	r3, [pc, #412]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000eb0:	6a1b      	ldr	r3, [r3, #32]
 8000eb2:	4a66      	ldr	r2, [pc, #408]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6213      	str	r3, [r2, #32]
 8000eba:	4b64      	ldr	r3, [pc, #400]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000ebc:	6a1b      	ldr	r3, [r3, #32]
 8000ebe:	4a63      	ldr	r2, [pc, #396]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	f023 0304 	bic.w	r3, r3, #4
 8000ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d015      	beq.n	8000efa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fbbd 	bl	800064c <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fbb9 	bl	800064c <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e0ab      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eec:	4b57      	ldr	r3, [pc, #348]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0ee      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x37e>
 8000ef8:	e014      	b.n	8000f24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efa:	f7ff fba7 	bl	800064c <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f00:	e00a      	b.n	8000f18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f02:	f7ff fba3 	bl	800064c <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e095      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f18:	4b4c      	ldr	r3, [pc, #304]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ee      	bne.n	8000f02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d105      	bne.n	8000f36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2a:	4b48      	ldr	r3, [pc, #288]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	4a47      	ldr	r2, [pc, #284]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8081 	beq.w	8001042 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f40:	4b42      	ldr	r3, [pc, #264]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 030c 	and.w	r3, r3, #12
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d061      	beq.n	8001010 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d146      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <HAL_RCC_OscConfig+0x4fc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fb77 	bl	800064c <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f62:	f7ff fb73 	bl	800064c <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e067      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f0      	bne.n	8000f62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f88:	d108      	bne.n	8000f9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f8a:	4b30      	ldr	r3, [pc, #192]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	492d      	ldr	r1, [pc, #180]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a19      	ldr	r1, [r3, #32]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	430b      	orrs	r3, r1
 8000fae:	4927      	ldr	r1, [pc, #156]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <HAL_RCC_OscConfig+0x4fc>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fb47 	bl	800064c <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff fb43 	bl	800064c <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e037      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f0      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x46a>
 8000fe0:	e02f      	b.n	8001042 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_RCC_OscConfig+0x4fc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fb30 	bl	800064c <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff0:	f7ff fb2c 	bl	800064c <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e020      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x498>
 800100e:	e018      	b.n	8001042 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69db      	ldr	r3, [r3, #28]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e013      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_RCC_OscConfig+0x4f4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	429a      	cmp	r2, r3
 800102e:	d106      	bne.n	800103e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103a:	429a      	cmp	r2, r3
 800103c:	d001      	beq.n	8001042 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	40007000 	.word	0x40007000
 8001054:	42420060 	.word	0x42420060

08001058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0d0      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800106c:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d910      	bls.n	800109c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b67      	ldr	r3, [pc, #412]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 0207 	bic.w	r2, r3, #7
 8001082:	4965      	ldr	r1, [pc, #404]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800108a:	4b63      	ldr	r3, [pc, #396]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d001      	beq.n	800109c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0b8      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b4:	4b59      	ldr	r3, [pc, #356]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4a58      	ldr	r2, [pc, #352]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010cc:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a52      	ldr	r2, [pc, #328]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d8:	4b50      	ldr	r3, [pc, #320]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	494d      	ldr	r1, [pc, #308]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d040      	beq.n	8001178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d115      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e07f      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d107      	bne.n	8001126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e073      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e06b      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001136:	4b39      	ldr	r3, [pc, #228]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f023 0203 	bic.w	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4936      	ldr	r1, [pc, #216]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001148:	f7ff fa80 	bl	800064c <HAL_GetTick>
 800114c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114e:	e00a      	b.n	8001166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001150:	f7ff fa7c 	bl	800064c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	f241 3288 	movw	r2, #5000	; 0x1388
 800115e:	4293      	cmp	r3, r2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e053      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 020c 	and.w	r2, r3, #12
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	429a      	cmp	r2, r3
 8001176:	d1eb      	bne.n	8001150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0307 	and.w	r3, r3, #7
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d210      	bcs.n	80011a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 0207 	bic.w	r2, r3, #7
 800118e:	4922      	ldr	r1, [pc, #136]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e032      	b.n	800120e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d008      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4916      	ldr	r1, [pc, #88]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	490e      	ldr	r1, [pc, #56]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011e6:	f000 f821 	bl	800122c <HAL_RCC_GetSysClockFreq>
 80011ea:	4602      	mov	r2, r0
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_RCC_ClockConfig+0x1c4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	490a      	ldr	r1, [pc, #40]	; (8001220 <HAL_RCC_ClockConfig+0x1c8>)
 80011f8:	5ccb      	ldrb	r3, [r1, r3]
 80011fa:	fa22 f303 	lsr.w	r3, r2, r3
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <HAL_RCC_ClockConfig+0x1cc>)
 8001200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_RCC_ClockConfig+0x1d0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f920 	bl	800044c <HAL_InitTick>

  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000
 800121c:	40021000 	.word	0x40021000
 8001220:	080045e4 	.word	0x080045e4
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b087      	sub	sp, #28
 8001230:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b04      	cmp	r3, #4
 8001254:	d002      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0x30>
 8001256:	2b08      	cmp	r3, #8
 8001258:	d003      	beq.n	8001262 <HAL_RCC_GetSysClockFreq+0x36>
 800125a:	e027      	b.n	80012ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800125e:	613b      	str	r3, [r7, #16]
      break;
 8001260:	e027      	b.n	80012b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	0c9b      	lsrs	r3, r3, #18
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d010      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	0c5b      	lsrs	r3, r3, #17
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	4a11      	ldr	r2, [pc, #68]	; (80012cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800128e:	fb02 f203 	mul.w	r2, r2, r3
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	fbb2 f3f3 	udiv	r3, r2, r3
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e004      	b.n	80012a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80012a0:	fb02 f303 	mul.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	613b      	str	r3, [r7, #16]
      break;
 80012aa:	e002      	b.n	80012b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ae:	613b      	str	r3, [r7, #16]
      break;
 80012b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012b2:	693b      	ldr	r3, [r7, #16]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40021000 	.word	0x40021000
 80012c4:	007a1200 	.word	0x007a1200
 80012c8:	080045fc 	.word	0x080045fc
 80012cc:	0800460c 	.word	0x0800460c
 80012d0:	003d0900 	.word	0x003d0900

080012d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d8:	4b02      	ldr	r3, [pc, #8]	; (80012e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	20000000 	.word	0x20000000

080012e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012ec:	f7ff fff2 	bl	80012d4 <HAL_RCC_GetHCLKFreq>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	0adb      	lsrs	r3, r3, #11
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	4903      	ldr	r1, [pc, #12]	; (800130c <HAL_RCC_GetPCLK2Freq+0x24>)
 80012fe:	5ccb      	ldrb	r3, [r1, r3]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000
 800130c:	080045f4 	.word	0x080045f4

08001310 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	220f      	movs	r2, #15
 800131e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_RCC_GetClockConfig+0x58>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0203 	and.w	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_RCC_GetClockConfig+0x58>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_RCC_GetClockConfig+0x58>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_RCC_GetClockConfig+0x58>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_RCC_GetClockConfig+0x5c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0207 	and.w	r2, r3, #7
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	40022000 	.word	0x40022000

08001370 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <RCC_Delay+0x34>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <RCC_Delay+0x38>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0a5b      	lsrs	r3, r3, #9
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800138c:	bf00      	nop
  }
  while (Delay --);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	60fa      	str	r2, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f9      	bne.n	800138c <RCC_Delay+0x1c>
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	20000000 	.word	0x20000000
 80013a8:	10624dd3 	.word	0x10624dd3

080013ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e041      	b.n	8001442 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f839 	bl	800144a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3304      	adds	r3, #4
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f000 f9b4 	bl	8001758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d001      	beq.n	8001474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e03a      	b.n	80014ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <HAL_TIM_Base_Start_IT+0x98>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00e      	beq.n	80014b4 <HAL_TIM_Base_Start_IT+0x58>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800149e:	d009      	beq.n	80014b4 <HAL_TIM_Base_Start_IT+0x58>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d004      	beq.n	80014b4 <HAL_TIM_Base_Start_IT+0x58>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a13      	ldr	r2, [pc, #76]	; (80014fc <HAL_TIM_Base_Start_IT+0xa0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d111      	bne.n	80014d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d010      	beq.n	80014e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014d6:	e007      	b.n	80014e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	40012c00 	.word	0x40012c00
 80014f8:	40000400 	.word	0x40000400
 80014fc:	40000800 	.word	0x40000800

08001500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b02      	cmp	r3, #2
 8001514:	d122      	bne.n	800155c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b02      	cmp	r3, #2
 8001522:	d11b      	bne.n	800155c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f06f 0202 	mvn.w	r2, #2
 800152c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f8ed 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 8001548:	e005      	b.n	8001556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f8e0 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f8ef 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b04      	cmp	r3, #4
 8001568:	d122      	bne.n	80015b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b04      	cmp	r3, #4
 8001576:	d11b      	bne.n	80015b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f06f 0204 	mvn.w	r2, #4
 8001580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2202      	movs	r2, #2
 8001586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f8c3 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 800159c:	e005      	b.n	80015aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8b6 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 f8c5 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d122      	bne.n	8001604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d11b      	bne.n	8001604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0208 	mvn.w	r2, #8
 80015d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2204      	movs	r2, #4
 80015da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f899 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 80015f0:	e005      	b.n	80015fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 f88c 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f89b 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f003 0310 	and.w	r3, r3, #16
 800160e:	2b10      	cmp	r3, #16
 8001610:	d122      	bne.n	8001658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2b10      	cmp	r3, #16
 800161e:	d11b      	bne.n	8001658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0210 	mvn.w	r2, #16
 8001628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2208      	movs	r2, #8
 800162e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f86f 	bl	8001722 <HAL_TIM_IC_CaptureCallback>
 8001644:	e005      	b.n	8001652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 f862 	bl	8001710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f871 	bl	8001734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b01      	cmp	r3, #1
 8001664:	d10e      	bne.n	8001684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d107      	bne.n	8001684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f06f 0201 	mvn.w	r2, #1
 800167c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7fe fe9a 	bl	80003b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	2b80      	cmp	r3, #128	; 0x80
 8001690:	d10e      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169c:	2b80      	cmp	r3, #128	; 0x80
 800169e:	d107      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f8bf 	bl	800182e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ba:	2b40      	cmp	r3, #64	; 0x40
 80016bc:	d10e      	bne.n	80016dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c8:	2b40      	cmp	r3, #64	; 0x40
 80016ca:	d107      	bne.n	80016dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f835 	bl	8001746 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d10e      	bne.n	8001708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b20      	cmp	r3, #32
 80016f6:	d107      	bne.n	8001708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0220 	mvn.w	r2, #32
 8001700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f88a 	bl	800181c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr

08001746 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a29      	ldr	r2, [pc, #164]	; (8001810 <TIM_Base_SetConfig+0xb8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00b      	beq.n	8001788 <TIM_Base_SetConfig+0x30>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001776:	d007      	beq.n	8001788 <TIM_Base_SetConfig+0x30>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a26      	ldr	r2, [pc, #152]	; (8001814 <TIM_Base_SetConfig+0xbc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d003      	beq.n	8001788 <TIM_Base_SetConfig+0x30>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a25      	ldr	r2, [pc, #148]	; (8001818 <TIM_Base_SetConfig+0xc0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d108      	bne.n	800179a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <TIM_Base_SetConfig+0xb8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00b      	beq.n	80017ba <TIM_Base_SetConfig+0x62>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a8:	d007      	beq.n	80017ba <TIM_Base_SetConfig+0x62>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a19      	ldr	r2, [pc, #100]	; (8001814 <TIM_Base_SetConfig+0xbc>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d003      	beq.n	80017ba <TIM_Base_SetConfig+0x62>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a18      	ldr	r2, [pc, #96]	; (8001818 <TIM_Base_SetConfig+0xc0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d108      	bne.n	80017cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <TIM_Base_SetConfig+0xb8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d103      	bne.n	8001800 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	691a      	ldr	r2, [r3, #16]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	615a      	str	r2, [r3, #20]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	40012c00 	.word	0x40012c00
 8001814:	40000400 	.word	0x40000400
 8001818:	40000800 	.word	0x40000800

0800181c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <xQueueGenericReset>:
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	2301      	movs	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10a      	bne.n	800186e <xQueueGenericReset+0x2e>
 8001858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185c:	f383 8811 	msr	BASEPRI, r3
 8001860:	f3bf 8f6f 	isb	sy
 8001864:	f3bf 8f4f 	dsb	sy
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	bf00      	nop
 800186c:	e7fe      	b.n	800186c <xQueueGenericReset+0x2c>
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d05d      	beq.n	8001930 <xQueueGenericReset+0xf0>
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001878:	2b00      	cmp	r3, #0
 800187a:	d059      	beq.n	8001930 <xQueueGenericReset+0xf0>
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001884:	2100      	movs	r1, #0
 8001886:	fba3 2302 	umull	r2, r3, r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d000      	beq.n	8001890 <xQueueGenericReset+0x50>
 800188e:	2101      	movs	r1, #1
 8001890:	460b      	mov	r3, r1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d14c      	bne.n	8001930 <xQueueGenericReset+0xf0>
 8001896:	f002 fbd3 	bl	8004040 <vPortEnterCritical>
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a2:	6939      	ldr	r1, [r7, #16]
 80018a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	441a      	add	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	2200      	movs	r2, #0
 80018b4:	639a      	str	r2, [r3, #56]	; 0x38
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6939      	ldr	r1, [r7, #16]
 80018ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	441a      	add	r2, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	22ff      	movs	r2, #255	; 0xff
 80018da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	22ff      	movs	r2, #255	; 0xff
 80018e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d114      	bne.n	8001916 <xQueueGenericReset+0xd6>
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d01a      	beq.n	800192a <xQueueGenericReset+0xea>
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	3310      	adds	r3, #16
 80018f8:	4618      	mov	r0, r3
 80018fa:	f001 faa1 	bl	8002e40 <xTaskRemoveFromEventList>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d012      	beq.n	800192a <xQueueGenericReset+0xea>
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <xQueueGenericReset+0x11c>)
 8001906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	f3bf 8f4f 	dsb	sy
 8001910:	f3bf 8f6f 	isb	sy
 8001914:	e009      	b.n	800192a <xQueueGenericReset+0xea>
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	3310      	adds	r3, #16
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fa14 	bl	8003d48 <vListInitialise>
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	3324      	adds	r3, #36	; 0x24
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fa0f 	bl	8003d48 <vListInitialise>
 800192a:	f002 fbb9 	bl	80040a0 <vPortExitCritical>
 800192e:	e001      	b.n	8001934 <xQueueGenericReset+0xf4>
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10a      	bne.n	8001950 <xQueueGenericReset+0x110>
 800193a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193e:	f383 8811 	msr	BASEPRI, r3
 8001942:	f3bf 8f6f 	isb	sy
 8001946:	f3bf 8f4f 	dsb	sy
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	bf00      	nop
 800194e:	e7fe      	b.n	800194e <xQueueGenericReset+0x10e>
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000ed04 	.word	0xe000ed04

08001960 <xQueueGenericCreate>:
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d02e      	beq.n	80019d6 <xQueueGenericCreate+0x76>
 8001978:	2100      	movs	r1, #0
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	fba3 2302 	umull	r2, r3, r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d000      	beq.n	8001988 <xQueueGenericCreate+0x28>
 8001986:	2101      	movs	r1, #1
 8001988:	460b      	mov	r3, r1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d123      	bne.n	80019d6 <xQueueGenericCreate+0x76>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800199a:	d81c      	bhi.n	80019d6 <xQueueGenericCreate+0x76>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	3350      	adds	r3, #80	; 0x50
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 f9a8 	bl	8003d00 <pvPortMalloc>
 80019b0:	61f8      	str	r0, [r7, #28]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01c      	beq.n	80019f2 <xQueueGenericCreate+0x92>
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3350      	adds	r3, #80	; 0x50
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f814 	bl	80019fc <prvInitialiseNewQueue>
 80019d4:	e00d      	b.n	80019f2 <xQueueGenericCreate+0x92>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10a      	bne.n	80019f2 <xQueueGenericCreate+0x92>
 80019dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	bf00      	nop
 80019f0:	e7fe      	b.n	80019f0 <xQueueGenericCreate+0x90>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	4618      	mov	r0, r3
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <prvInitialiseNewQueue>:
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	70fb      	strb	r3, [r7, #3]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d103      	bne.n	8001a18 <prvInitialiseNewQueue+0x1c>
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e002      	b.n	8001a1e <prvInitialiseNewQueue+0x22>
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	69b8      	ldr	r0, [r7, #24]
 8001a2e:	f7ff ff07 	bl	8001840 <xQueueGenericReset>
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <xQueueGenericSend>:
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08e      	sub	sp, #56	; 0x38
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	2300      	movs	r3, #0
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10a      	bne.n	8001a76 <xQueueGenericSend+0x32>
 8001a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a72:	bf00      	nop
 8001a74:	e7fe      	b.n	8001a74 <xQueueGenericSend+0x30>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d103      	bne.n	8001a84 <xQueueGenericSend+0x40>
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <xQueueGenericSend+0x44>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <xQueueGenericSend+0x46>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10a      	bne.n	8001aa4 <xQueueGenericSend+0x60>
 8001a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a92:	f383 8811 	msr	BASEPRI, r3
 8001a96:	f3bf 8f6f 	isb	sy
 8001a9a:	f3bf 8f4f 	dsb	sy
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa0:	bf00      	nop
 8001aa2:	e7fe      	b.n	8001aa2 <xQueueGenericSend+0x5e>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d103      	bne.n	8001ab2 <xQueueGenericSend+0x6e>
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <xQueueGenericSend+0x72>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <xQueueGenericSend+0x74>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <xQueueGenericSend+0x8e>
 8001abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac0:	f383 8811 	msr	BASEPRI, r3
 8001ac4:	f3bf 8f6f 	isb	sy
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	623b      	str	r3, [r7, #32]
 8001ace:	bf00      	nop
 8001ad0:	e7fe      	b.n	8001ad0 <xQueueGenericSend+0x8c>
 8001ad2:	f001 fc23 	bl	800331c <xTaskGetSchedulerState>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <xQueueGenericSend+0x9e>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <xQueueGenericSend+0xa2>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <xQueueGenericSend+0xa4>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10a      	bne.n	8001b02 <xQueueGenericSend+0xbe>
 8001aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af0:	f383 8811 	msr	BASEPRI, r3
 8001af4:	f3bf 8f6f 	isb	sy
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	bf00      	nop
 8001b00:	e7fe      	b.n	8001b00 <xQueueGenericSend+0xbc>
 8001b02:	f002 fa9d 	bl	8004040 <vPortEnterCritical>
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d302      	bcc.n	8001b18 <xQueueGenericSend+0xd4>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d129      	bne.n	8001b6c <xQueueGenericSend+0x128>
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b1e:	f000 fa84 	bl	800202a <prvCopyDataToQueue>
 8001b22:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d010      	beq.n	8001b4e <xQueueGenericSend+0x10a>
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2e:	3324      	adds	r3, #36	; 0x24
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 f985 	bl	8002e40 <xTaskRemoveFromEventList>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <xQueueGenericSend+0x120>
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <xQueueGenericSend+0x1f8>)
 8001b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	f3bf 8f6f 	isb	sy
 8001b4c:	e00a      	b.n	8001b64 <xQueueGenericSend+0x120>
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <xQueueGenericSend+0x120>
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <xQueueGenericSend+0x1f8>)
 8001b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f3bf 8f4f 	dsb	sy
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f002 fa9c 	bl	80040a0 <vPortExitCritical>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e063      	b.n	8001c34 <xQueueGenericSend+0x1f0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <xQueueGenericSend+0x136>
 8001b72:	f002 fa95 	bl	80040a0 <vPortExitCritical>
 8001b76:	2300      	movs	r3, #0
 8001b78:	e05c      	b.n	8001c34 <xQueueGenericSend+0x1f0>
 8001b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d106      	bne.n	8001b8e <xQueueGenericSend+0x14a>
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fa33 	bl	8002ff0 <vTaskInternalSetTimeOutState>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b8e:	f002 fa87 	bl	80040a0 <vPortExitCritical>
 8001b92:	f000 fdcf 	bl	8002734 <vTaskSuspendAll>
 8001b96:	f002 fa53 	bl	8004040 <vPortEnterCritical>
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba6:	d103      	bne.n	8001bb0 <xQueueGenericSend+0x16c>
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d103      	bne.n	8001bc6 <xQueueGenericSend+0x182>
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001bc6:	f002 fa6b 	bl	80040a0 <vPortExitCritical>
 8001bca:	1d3a      	adds	r2, r7, #4
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f001 fa22 	bl	800301c <xTaskCheckForTimeOut>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d124      	bne.n	8001c28 <xQueueGenericSend+0x1e4>
 8001bde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001be0:	f000 fb1b 	bl	800221a <prvIsQueueFull>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d018      	beq.n	8001c1c <xQueueGenericSend+0x1d8>
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	3310      	adds	r3, #16
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 f8ba 	bl	8002d6c <vTaskPlaceOnEventList>
 8001bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bfa:	f000 faa6 	bl	800214a <prvUnlockQueue>
 8001bfe:	f000 fddd 	bl	80027bc <xTaskResumeAll>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f af7c 	bne.w	8001b02 <xQueueGenericSend+0xbe>
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <xQueueGenericSend+0x1f8>)
 8001c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f3bf 8f4f 	dsb	sy
 8001c16:	f3bf 8f6f 	isb	sy
 8001c1a:	e772      	b.n	8001b02 <xQueueGenericSend+0xbe>
 8001c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c1e:	f000 fa94 	bl	800214a <prvUnlockQueue>
 8001c22:	f000 fdcb 	bl	80027bc <xTaskResumeAll>
 8001c26:	e76c      	b.n	8001b02 <xQueueGenericSend+0xbe>
 8001c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c2a:	f000 fa8e 	bl	800214a <prvUnlockQueue>
 8001c2e:	f000 fdc5 	bl	80027bc <xTaskResumeAll>
 8001c32:	2300      	movs	r3, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	3738      	adds	r7, #56	; 0x38
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	e000ed04 	.word	0xe000ed04

08001c40 <xQueueReceive>:
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <xQueueReceive+0x30>
 8001c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
 8001c6a:	623b      	str	r3, [r7, #32]
 8001c6c:	bf00      	nop
 8001c6e:	e7fe      	b.n	8001c6e <xQueueReceive+0x2e>
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d103      	bne.n	8001c7e <xQueueReceive+0x3e>
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <xQueueReceive+0x42>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <xQueueReceive+0x44>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10a      	bne.n	8001c9e <xQueueReceive+0x5e>
 8001c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8c:	f383 8811 	msr	BASEPRI, r3
 8001c90:	f3bf 8f6f 	isb	sy
 8001c94:	f3bf 8f4f 	dsb	sy
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	bf00      	nop
 8001c9c:	e7fe      	b.n	8001c9c <xQueueReceive+0x5c>
 8001c9e:	f001 fb3d 	bl	800331c <xTaskGetSchedulerState>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <xQueueReceive+0x6e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <xQueueReceive+0x72>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <xQueueReceive+0x74>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10a      	bne.n	8001cce <xQueueReceive+0x8e>
 8001cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cbc:	f383 8811 	msr	BASEPRI, r3
 8001cc0:	f3bf 8f6f 	isb	sy
 8001cc4:	f3bf 8f4f 	dsb	sy
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	bf00      	nop
 8001ccc:	e7fe      	b.n	8001ccc <xQueueReceive+0x8c>
 8001cce:	f002 f9b7 	bl	8004040 <vPortEnterCritical>
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01f      	beq.n	8001d1e <xQueueReceive+0xde>
 8001cde:	68b9      	ldr	r1, [r7, #8]
 8001ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ce2:	f000 fa0c 	bl	80020fe <prvCopyDataFromQueue>
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	1e5a      	subs	r2, r3, #1
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00f      	beq.n	8001d16 <xQueueReceive+0xd6>
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	3310      	adds	r3, #16
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f001 f8a0 	bl	8002e40 <xTaskRemoveFromEventList>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <xQueueReceive+0xd6>
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <xQueueReceive+0x1bc>)
 8001d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f3bf 8f4f 	dsb	sy
 8001d12:	f3bf 8f6f 	isb	sy
 8001d16:	f002 f9c3 	bl	80040a0 <vPortExitCritical>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e069      	b.n	8001df2 <xQueueReceive+0x1b2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d103      	bne.n	8001d2c <xQueueReceive+0xec>
 8001d24:	f002 f9bc 	bl	80040a0 <vPortExitCritical>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e062      	b.n	8001df2 <xQueueReceive+0x1b2>
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <xQueueReceive+0x100>
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 f95a 	bl	8002ff0 <vTaskInternalSetTimeOutState>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d40:	f002 f9ae 	bl	80040a0 <vPortExitCritical>
 8001d44:	f000 fcf6 	bl	8002734 <vTaskSuspendAll>
 8001d48:	f002 f97a 	bl	8004040 <vPortEnterCritical>
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d103      	bne.n	8001d62 <xQueueReceive+0x122>
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d68:	b25b      	sxtb	r3, r3
 8001d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6e:	d103      	bne.n	8001d78 <xQueueReceive+0x138>
 8001d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d78:	f002 f992 	bl	80040a0 <vPortExitCritical>
 8001d7c:	1d3a      	adds	r2, r7, #4
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f001 f949 	bl	800301c <xTaskCheckForTimeOut>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d123      	bne.n	8001dd8 <xQueueReceive+0x198>
 8001d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d92:	f000 fa2c 	bl	80021ee <prvIsQueueEmpty>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d017      	beq.n	8001dcc <xQueueReceive+0x18c>
 8001d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9e:	3324      	adds	r3, #36	; 0x24
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 ffe1 	bl	8002d6c <vTaskPlaceOnEventList>
 8001daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dac:	f000 f9cd 	bl	800214a <prvUnlockQueue>
 8001db0:	f000 fd04 	bl	80027bc <xTaskResumeAll>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d189      	bne.n	8001cce <xQueueReceive+0x8e>
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <xQueueReceive+0x1bc>)
 8001dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f3bf 8f4f 	dsb	sy
 8001dc6:	f3bf 8f6f 	isb	sy
 8001dca:	e780      	b.n	8001cce <xQueueReceive+0x8e>
 8001dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dce:	f000 f9bc 	bl	800214a <prvUnlockQueue>
 8001dd2:	f000 fcf3 	bl	80027bc <xTaskResumeAll>
 8001dd6:	e77a      	b.n	8001cce <xQueueReceive+0x8e>
 8001dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dda:	f000 f9b6 	bl	800214a <prvUnlockQueue>
 8001dde:	f000 fced 	bl	80027bc <xTaskResumeAll>
 8001de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001de4:	f000 fa03 	bl	80021ee <prvIsQueueEmpty>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f43f af6f 	beq.w	8001cce <xQueueReceive+0x8e>
 8001df0:	2300      	movs	r3, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	3730      	adds	r7, #48	; 0x30
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000ed04 	.word	0xe000ed04

08001e00 <xQueueSemaphoreTake>:
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
 8001e12:	2300      	movs	r3, #0
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10a      	bne.n	8001e32 <xQueueSemaphoreTake+0x32>
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	bf00      	nop
 8001e30:	e7fe      	b.n	8001e30 <xQueueSemaphoreTake+0x30>
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <xQueueSemaphoreTake+0x50>
 8001e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	bf00      	nop
 8001e4e:	e7fe      	b.n	8001e4e <xQueueSemaphoreTake+0x4e>
 8001e50:	f001 fa64 	bl	800331c <xTaskGetSchedulerState>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <xQueueSemaphoreTake+0x60>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <xQueueSemaphoreTake+0x64>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <xQueueSemaphoreTake+0x66>
 8001e64:	2300      	movs	r3, #0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10a      	bne.n	8001e80 <xQueueSemaphoreTake+0x80>
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	bf00      	nop
 8001e7e:	e7fe      	b.n	8001e7e <xQueueSemaphoreTake+0x7e>
 8001e80:	f002 f8de 	bl	8004040 <vPortEnterCritical>
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	623b      	str	r3, [r7, #32]
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d024      	beq.n	8001eda <xQueueSemaphoreTake+0xda>
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	1e5a      	subs	r2, r3, #1
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	639a      	str	r2, [r3, #56]	; 0x38
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d104      	bne.n	8001eaa <xQueueSemaphoreTake+0xaa>
 8001ea0:	f001 fc2a 	bl	80036f8 <pvTaskIncrementMutexHeldCount>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00f      	beq.n	8001ed2 <xQueueSemaphoreTake+0xd2>
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	3310      	adds	r3, #16
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 ffc2 	bl	8002e40 <xTaskRemoveFromEventList>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <xQueueSemaphoreTake+0xd2>
 8001ec2:	4b4d      	ldr	r3, [pc, #308]	; (8001ff8 <xQueueSemaphoreTake+0x1f8>)
 8001ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f3bf 8f4f 	dsb	sy
 8001ece:	f3bf 8f6f 	isb	sy
 8001ed2:	f002 f8e5 	bl	80040a0 <vPortExitCritical>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e089      	b.n	8001fee <xQueueSemaphoreTake+0x1ee>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d103      	bne.n	8001ee8 <xQueueSemaphoreTake+0xe8>
 8001ee0:	f002 f8de 	bl	80040a0 <vPortExitCritical>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e082      	b.n	8001fee <xQueueSemaphoreTake+0x1ee>
 8001ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <xQueueSemaphoreTake+0xfc>
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 f87c 	bl	8002ff0 <vTaskInternalSetTimeOutState>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efc:	f002 f8d0 	bl	80040a0 <vPortExitCritical>
 8001f00:	f000 fc18 	bl	8002734 <vTaskSuspendAll>
 8001f04:	f002 f89c 	bl	8004040 <vPortEnterCritical>
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d103      	bne.n	8001f1e <xQueueSemaphoreTake+0x11e>
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f24:	b25b      	sxtb	r3, r3
 8001f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2a:	d103      	bne.n	8001f34 <xQueueSemaphoreTake+0x134>
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f34:	f002 f8b4 	bl	80040a0 <vPortExitCritical>
 8001f38:	463a      	mov	r2, r7
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 f86b 	bl	800301c <xTaskCheckForTimeOut>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d132      	bne.n	8001fb2 <xQueueSemaphoreTake+0x1b2>
 8001f4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f4e:	f000 f94e 	bl	80021ee <prvIsQueueEmpty>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d026      	beq.n	8001fa6 <xQueueSemaphoreTake+0x1a6>
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <xQueueSemaphoreTake+0x174>
 8001f60:	f002 f86e 	bl	8004040 <vPortEnterCritical>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f001 f9f5 	bl	8003358 <xTaskPriorityInherit>
 8001f6e:	62b8      	str	r0, [r7, #40]	; 0x28
 8001f70:	f002 f896 	bl	80040a0 <vPortExitCritical>
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	3324      	adds	r3, #36	; 0x24
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fef5 	bl	8002d6c <vTaskPlaceOnEventList>
 8001f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f84:	f000 f8e1 	bl	800214a <prvUnlockQueue>
 8001f88:	f000 fc18 	bl	80027bc <xTaskResumeAll>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f47f af76 	bne.w	8001e80 <xQueueSemaphoreTake+0x80>
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <xQueueSemaphoreTake+0x1f8>)
 8001f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	f3bf 8f6f 	isb	sy
 8001fa4:	e76c      	b.n	8001e80 <xQueueSemaphoreTake+0x80>
 8001fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fa8:	f000 f8cf 	bl	800214a <prvUnlockQueue>
 8001fac:	f000 fc06 	bl	80027bc <xTaskResumeAll>
 8001fb0:	e766      	b.n	8001e80 <xQueueSemaphoreTake+0x80>
 8001fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb4:	f000 f8c9 	bl	800214a <prvUnlockQueue>
 8001fb8:	f000 fc00 	bl	80027bc <xTaskResumeAll>
 8001fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fbe:	f000 f916 	bl	80021ee <prvIsQueueEmpty>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f43f af5b 	beq.w	8001e80 <xQueueSemaphoreTake+0x80>
 8001fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00d      	beq.n	8001fec <xQueueSemaphoreTake+0x1ec>
 8001fd0:	f002 f836 	bl	8004040 <vPortEnterCritical>
 8001fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fd6:	f000 f811 	bl	8001ffc <prvGetDisinheritPriorityAfterTimeout>
 8001fda:	61f8      	str	r0, [r7, #28]
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	69f9      	ldr	r1, [r7, #28]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fade 	bl	80035a4 <vTaskPriorityDisinheritAfterTimeout>
 8001fe8:	f002 f85a 	bl	80040a0 <vPortExitCritical>
 8001fec:	2300      	movs	r3, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3730      	adds	r7, #48	; 0x30
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	e000ed04 	.word	0xe000ed04

08001ffc <prvGetDisinheritPriorityAfterTimeout>:
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f1c3 0305 	rsb	r3, r3, #5
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e001      	b.n	800201e <prvGetDisinheritPriorityAfterTimeout+0x22>
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <prvCopyDataToQueue>:
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <prvCopyDataToQueue+0x3a>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d14d      	bne.n	80020ec <prvCopyDataToQueue+0xc2>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4618      	mov	r0, r3
 8002056:	f001 fa0f 	bl	8003478 <xTaskPriorityDisinherit>
 800205a:	6178      	str	r0, [r7, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	e043      	b.n	80020ec <prvCopyDataToQueue+0xc2>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d119      	bne.n	800209e <prvCopyDataToQueue+0x74>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6858      	ldr	r0, [r3, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	461a      	mov	r2, r3
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	f002 f9c1 	bl	80043fc <memcpy>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	441a      	add	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	429a      	cmp	r2, r3
 8002092:	d32b      	bcc.n	80020ec <prvCopyDataToQueue+0xc2>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	e026      	b.n	80020ec <prvCopyDataToQueue+0xc2>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	68d8      	ldr	r0, [r3, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	461a      	mov	r2, r3
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	f002 f9a7 	bl	80043fc <memcpy>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	425b      	negs	r3, r3
 80020b8:	441a      	add	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d207      	bcs.n	80020da <prvCopyDataToQueue+0xb0>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	425b      	negs	r3, r3
 80020d4:	441a      	add	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d105      	bne.n	80020ec <prvCopyDataToQueue+0xc2>
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <prvCopyDataToQueue+0xc2>
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <prvCopyDataFromQueue>:
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	2b00      	cmp	r3, #0
 800210e:	d018      	beq.n	8002142 <prvCopyDataFromQueue+0x44>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	441a      	add	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	429a      	cmp	r2, r3
 8002128:	d303      	bcc.n	8002132 <prvCopyDataFromQueue+0x34>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68d9      	ldr	r1, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	461a      	mov	r2, r3
 800213c:	6838      	ldr	r0, [r7, #0]
 800213e:	f002 f95d 	bl	80043fc <memcpy>
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <prvUnlockQueue>:
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	f001 ff75 	bl	8004040 <vPortEnterCritical>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e011      	b.n	8002184 <prvUnlockQueue+0x3a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <prvUnlockQueue+0x44>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3324      	adds	r3, #36	; 0x24
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fe67 	bl	8002e40 <xTaskRemoveFromEventList>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <prvUnlockQueue+0x32>
 8002178:	f000 ffb6 	bl	80030e8 <vTaskMissedYield>
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	3b01      	subs	r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	dce9      	bgt.n	8002160 <prvUnlockQueue+0x16>
 800218c:	e000      	b.n	8002190 <prvUnlockQueue+0x46>
 800218e:	bf00      	nop
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	22ff      	movs	r2, #255	; 0xff
 8002194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002198:	f001 ff82 	bl	80040a0 <vPortExitCritical>
 800219c:	f001 ff50 	bl	8004040 <vPortEnterCritical>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021a6:	73bb      	strb	r3, [r7, #14]
 80021a8:	e011      	b.n	80021ce <prvUnlockQueue+0x84>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d012      	beq.n	80021d8 <prvUnlockQueue+0x8e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3310      	adds	r3, #16
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fe42 	bl	8002e40 <xTaskRemoveFromEventList>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <prvUnlockQueue+0x7c>
 80021c2:	f000 ff91 	bl	80030e8 <vTaskMissedYield>
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	73bb      	strb	r3, [r7, #14]
 80021ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	dce9      	bgt.n	80021aa <prvUnlockQueue+0x60>
 80021d6:	e000      	b.n	80021da <prvUnlockQueue+0x90>
 80021d8:	bf00      	nop
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	22ff      	movs	r2, #255	; 0xff
 80021de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021e2:	f001 ff5d 	bl	80040a0 <vPortExitCritical>
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <prvIsQueueEmpty>:
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	f001 ff23 	bl	8004040 <vPortEnterCritical>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <prvIsQueueEmpty+0x1a>
 8002202:	2301      	movs	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	e001      	b.n	800220c <prvIsQueueEmpty+0x1e>
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	f001 ff48 	bl	80040a0 <vPortExitCritical>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <prvIsQueueFull>:
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	f001 ff0d 	bl	8004040 <vPortEnterCritical>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	429a      	cmp	r2, r3
 8002230:	d102      	bne.n	8002238 <prvIsQueueFull+0x1e>
 8002232:	2301      	movs	r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	e001      	b.n	800223c <prvIsQueueFull+0x22>
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	f001 ff30 	bl	80040a0 <vPortExitCritical>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <vQueueAddToRegistry>:
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <vQueueAddToRegistry+0x2a>
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	bf00      	nop
 8002274:	e7fe      	b.n	8002274 <vQueueAddToRegistry+0x28>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d024      	beq.n	80022c6 <vQueueAddToRegistry+0x7a>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e01e      	b.n	80022c0 <vQueueAddToRegistry+0x74>
 8002282:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <vQueueAddToRegistry+0x98>)
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d105      	bne.n	800229e <vQueueAddToRegistry+0x52>
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4a13      	ldr	r2, [pc, #76]	; (80022e4 <vQueueAddToRegistry+0x98>)
 8002298:	4413      	add	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	e013      	b.n	80022c6 <vQueueAddToRegistry+0x7a>
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10a      	bne.n	80022ba <vQueueAddToRegistry+0x6e>
 80022a4:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <vQueueAddToRegistry+0x98>)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d104      	bne.n	80022ba <vQueueAddToRegistry+0x6e>
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <vQueueAddToRegistry+0x98>)
 80022b6:	4413      	add	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b07      	cmp	r3, #7
 80022c4:	d9dd      	bls.n	8002282 <vQueueAddToRegistry+0x36>
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <vQueueAddToRegistry+0x8c>
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	bf00      	nop
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000248 	.word	0x20000248

080022e8 <vQueueWaitForMessageRestricted>:
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	f001 fea2 	bl	8004040 <vPortEnterCritical>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002302:	b25b      	sxtb	r3, r3
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d103      	bne.n	8002312 <vQueueWaitForMessageRestricted+0x2a>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002318:	b25b      	sxtb	r3, r3
 800231a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231e:	d103      	bne.n	8002328 <vQueueWaitForMessageRestricted+0x40>
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002328:	f001 feba 	bl	80040a0 <vPortExitCritical>
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <vQueueWaitForMessageRestricted+0x5a>
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3324      	adds	r3, #36	; 0x24
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fd39 	bl	8002db4 <vTaskPlaceOnEventListRestricted>
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff01 	bl	800214a <prvUnlockQueue>
 8002348:	bf00      	nop
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <xTaskCreate>:
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	; 0x30
 8002354:	af04      	add	r7, sp, #16
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f001 fccc 	bl	8003d00 <pvPortMalloc>
 8002368:	6178      	str	r0, [r7, #20]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <xTaskCreate+0x48>
 8002370:	207c      	movs	r0, #124	; 0x7c
 8002372:	f001 fcc5 	bl	8003d00 <pvPortMalloc>
 8002376:	61f8      	str	r0, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d008      	beq.n	8002390 <xTaskCreate+0x40>
 800237e:	227c      	movs	r2, #124	; 0x7c
 8002380:	2100      	movs	r1, #0
 8002382:	69f8      	ldr	r0, [r7, #28]
 8002384:	f002 f848 	bl	8004418 <memset>
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
 800238e:	e005      	b.n	800239c <xTaskCreate+0x4c>
 8002390:	6978      	ldr	r0, [r7, #20]
 8002392:	f001 fcc7 	bl	8003d24 <vPortFree>
 8002396:	e001      	b.n	800239c <xTaskCreate+0x4c>
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d013      	beq.n	80023ca <xTaskCreate+0x7a>
 80023a2:	2300      	movs	r3, #0
 80023a4:	9303      	str	r3, [sp, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	9302      	str	r3, [sp, #8]
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f80e 	bl	80023da <prvInitialiseNewTask>
 80023be:	69f8      	ldr	r0, [r7, #28]
 80023c0:	f000 f89a 	bl	80024f8 <prvAddNewTaskToReadyList>
 80023c4:	2301      	movs	r3, #1
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	e002      	b.n	80023d0 <xTaskCreate+0x80>
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	4618      	mov	r0, r3
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <prvInitialiseNewTask>:
 80023da:	b580      	push	{r7, lr}
 80023dc:	b088      	sub	sp, #32
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	21a5      	movs	r1, #165	; 0xa5
 80023f4:	f002 f810 	bl	8004418 <memset>
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002402:	3b01      	subs	r3, #1
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	f023 0307 	bic.w	r3, r3, #7
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <prvInitialiseNewTask+0x58>
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <prvInitialiseNewTask+0x56>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01e      	beq.n	8002476 <prvInitialiseNewTask+0x9c>
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	e012      	b.n	8002464 <prvInitialiseNewTask+0x8a>
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4413      	add	r3, r2
 8002444:	7819      	ldrb	r1, [r3, #0]
 8002446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	3334      	adds	r3, #52	; 0x34
 800244e:	460a      	mov	r2, r1
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <prvInitialiseNewTask+0x92>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3301      	adds	r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b13      	cmp	r3, #19
 8002468:	d9e9      	bls.n	800243e <prvInitialiseNewTask+0x64>
 800246a:	e000      	b.n	800246e <prvInitialiseNewTask+0x94>
 800246c:	bf00      	nop
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002478:	2b04      	cmp	r3, #4
 800247a:	d90a      	bls.n	8002492 <prvInitialiseNewTask+0xb8>
 800247c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	bf00      	nop
 8002490:	e7fe      	b.n	8002490 <prvInitialiseNewTask+0xb6>
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	2b04      	cmp	r3, #4
 8002496:	d901      	bls.n	800249c <prvInitialiseNewTask+0xc2>
 8002498:	2304      	movs	r3, #4
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a6:	651a      	str	r2, [r3, #80]	; 0x50
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	3304      	adds	r3, #4
 80024ac:	4618      	mov	r0, r3
 80024ae:	f001 fc6a 	bl	8003d86 <vListInitialiseItem>
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	3318      	adds	r3, #24
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 fc65 	bl	8003d86 <vListInitialiseItem>
 80024bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c0:	611a      	str	r2, [r3, #16]
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	f1c3 0205 	rsb	r2, r3, #5
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	619a      	str	r2, [r3, #24]
 80024cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	68f9      	ldr	r1, [r7, #12]
 80024d6:	69b8      	ldr	r0, [r7, #24]
 80024d8:	f001 fcc2 	bl	8003e60 <pxPortInitialiseStack>
 80024dc:	4602      	mov	r2, r0
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <prvInitialiseNewTask+0x114>
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	bf00      	nop
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <prvAddNewTaskToReadyList>:
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	f001 fd9e 	bl	8004040 <vPortEnterCritical>
 8002504:	4b41      	ldr	r3, [pc, #260]	; (800260c <prvAddNewTaskToReadyList+0x114>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3301      	adds	r3, #1
 800250a:	4a40      	ldr	r2, [pc, #256]	; (800260c <prvAddNewTaskToReadyList+0x114>)
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b40      	ldr	r3, [pc, #256]	; (8002610 <prvAddNewTaskToReadyList+0x118>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <prvAddNewTaskToReadyList+0x32>
 8002516:	4a3e      	ldr	r2, [pc, #248]	; (8002610 <prvAddNewTaskToReadyList+0x118>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b3b      	ldr	r3, [pc, #236]	; (800260c <prvAddNewTaskToReadyList+0x114>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d110      	bne.n	8002546 <prvAddNewTaskToReadyList+0x4e>
 8002524:	f000 fe62 	bl	80031ec <prvInitialiseTaskLists>
 8002528:	e00d      	b.n	8002546 <prvAddNewTaskToReadyList+0x4e>
 800252a:	4b3a      	ldr	r3, [pc, #232]	; (8002614 <prvAddNewTaskToReadyList+0x11c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <prvAddNewTaskToReadyList+0x4e>
 8002532:	4b37      	ldr	r3, [pc, #220]	; (8002610 <prvAddNewTaskToReadyList+0x118>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	429a      	cmp	r2, r3
 800253e:	d802      	bhi.n	8002546 <prvAddNewTaskToReadyList+0x4e>
 8002540:	4a33      	ldr	r2, [pc, #204]	; (8002610 <prvAddNewTaskToReadyList+0x118>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <prvAddNewTaskToReadyList+0x120>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	4a32      	ldr	r2, [pc, #200]	; (8002618 <prvAddNewTaskToReadyList+0x120>)
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b31      	ldr	r3, [pc, #196]	; (8002618 <prvAddNewTaskToReadyList+0x120>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	649a      	str	r2, [r3, #72]	; 0x48
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255c:	4b2f      	ldr	r3, [pc, #188]	; (800261c <prvAddNewTaskToReadyList+0x124>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d903      	bls.n	800256c <prvAddNewTaskToReadyList+0x74>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	4a2c      	ldr	r2, [pc, #176]	; (800261c <prvAddNewTaskToReadyList+0x124>)
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002570:	492b      	ldr	r1, [pc, #172]	; (8002620 <prvAddNewTaskToReadyList+0x128>)
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3304      	adds	r3, #4
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	3204      	adds	r2, #4
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	1d1a      	adds	r2, r3, #4
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <prvAddNewTaskToReadyList+0x128>)
 80025b0:	441a      	add	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	615a      	str	r2, [r3, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ba:	4919      	ldr	r1, [pc, #100]	; (8002620 <prvAddNewTaskToReadyList+0x128>)
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	1c59      	adds	r1, r3, #1
 80025ca:	4815      	ldr	r0, [pc, #84]	; (8002620 <prvAddNewTaskToReadyList+0x128>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4403      	add	r3, r0
 80025d6:	6019      	str	r1, [r3, #0]
 80025d8:	f001 fd62 	bl	80040a0 <vPortExitCritical>
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <prvAddNewTaskToReadyList+0x11c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <prvAddNewTaskToReadyList+0x10a>
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <prvAddNewTaskToReadyList+0x118>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d207      	bcs.n	8002602 <prvAddNewTaskToReadyList+0x10a>
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <prvAddNewTaskToReadyList+0x12c>)
 80025f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000170 	.word	0x20000170
 8002610:	20000098 	.word	0x20000098
 8002614:	2000017c 	.word	0x2000017c
 8002618:	2000018c 	.word	0x2000018c
 800261c:	20000178 	.word	0x20000178
 8002620:	2000009c 	.word	0x2000009c
 8002624:	e000ed04 	.word	0xe000ed04

08002628 <vTaskDelay>:
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d017      	beq.n	800266a <vTaskDelay+0x42>
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <vTaskDelay+0x60>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <vTaskDelay+0x30>
 8002642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	bf00      	nop
 8002656:	e7fe      	b.n	8002656 <vTaskDelay+0x2e>
 8002658:	f000 f86c 	bl	8002734 <vTaskSuspendAll>
 800265c:	2100      	movs	r1, #0
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f001 f85e 	bl	8003720 <prvAddCurrentTaskToDelayedList>
 8002664:	f000 f8aa 	bl	80027bc <xTaskResumeAll>
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <vTaskDelay+0x58>
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <vTaskDelay+0x64>)
 8002672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000198 	.word	0x20000198
 800268c:	e000ed04 	.word	0xe000ed04

08002690 <vTaskStartScheduler>:
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af02      	add	r7, sp, #8
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <vTaskStartScheduler+0x88>)
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2300      	movs	r3, #0
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2300      	movs	r3, #0
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	491e      	ldr	r1, [pc, #120]	; (800271c <vTaskStartScheduler+0x8c>)
 80026a4:	481e      	ldr	r0, [pc, #120]	; (8002720 <vTaskStartScheduler+0x90>)
 80026a6:	f7ff fe53 	bl	8002350 <xTaskCreate>
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <vTaskStartScheduler+0x28>
 80026b2:	f001 f8a3 	bl	80037fc <xTimerCreateTimerTask>
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d116      	bne.n	80026ec <vTaskStartScheduler+0x5c>
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	bf00      	nop
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <vTaskStartScheduler+0x94>)
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <vTaskStartScheduler+0x98>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <vTaskStartScheduler+0x9c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f001 fc39 	bl	8003f5c <xPortStartScheduler>
 80026ea:	e00e      	b.n	800270a <vTaskStartScheduler+0x7a>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d10a      	bne.n	800270a <vTaskStartScheduler+0x7a>
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <vTaskStartScheduler+0x78>
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <vTaskStartScheduler+0xa0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000194 	.word	0x20000194
 800271c:	080045cc 	.word	0x080045cc
 8002720:	08003101 	.word	0x08003101
 8002724:	20000190 	.word	0x20000190
 8002728:	2000017c 	.word	0x2000017c
 800272c:	20000174 	.word	0x20000174
 8002730:	2000000c 	.word	0x2000000c

08002734 <vTaskSuspendAll>:
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <vTaskSuspendAll+0x18>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	4a03      	ldr	r2, [pc, #12]	; (800274c <vTaskSuspendAll+0x18>)
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000198 	.word	0x20000198

08002750 <prvGetExpectedIdleTime>:
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <prvGetExpectedIdleTime+0x58>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <prvGetExpectedIdleTime+0x16>
 8002762:	2301      	movs	r3, #1
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <prvGetExpectedIdleTime+0x5c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <prvGetExpectedIdleTime+0x26>
 8002770:	2300      	movs	r3, #0
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	e012      	b.n	800279c <prvGetExpectedIdleTime+0x4c>
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <prvGetExpectedIdleTime+0x60>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d902      	bls.n	8002784 <prvGetExpectedIdleTime+0x34>
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	e00b      	b.n	800279c <prvGetExpectedIdleTime+0x4c>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <prvGetExpectedIdleTime+0x40>
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	e005      	b.n	800279c <prvGetExpectedIdleTime+0x4c>
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <prvGetExpectedIdleTime+0x64>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <prvGetExpectedIdleTime+0x68>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4618      	mov	r0, r3
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	20000178 	.word	0x20000178
 80027ac:	20000098 	.word	0x20000098
 80027b0:	2000009c 	.word	0x2000009c
 80027b4:	20000190 	.word	0x20000190
 80027b8:	20000174 	.word	0x20000174

080027bc <xTaskResumeAll>:
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	4b71      	ldr	r3, [pc, #452]	; (8002990 <xTaskResumeAll+0x1d4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <xTaskResumeAll+0x2c>
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	bf00      	nop
 80027e6:	e7fe      	b.n	80027e6 <xTaskResumeAll+0x2a>
 80027e8:	f001 fc2a 	bl	8004040 <vPortEnterCritical>
 80027ec:	4b68      	ldr	r3, [pc, #416]	; (8002990 <xTaskResumeAll+0x1d4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	4a67      	ldr	r2, [pc, #412]	; (8002990 <xTaskResumeAll+0x1d4>)
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b66      	ldr	r3, [pc, #408]	; (8002990 <xTaskResumeAll+0x1d4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 80c1 	bne.w	8002982 <xTaskResumeAll+0x1c6>
 8002800:	4b64      	ldr	r3, [pc, #400]	; (8002994 <xTaskResumeAll+0x1d8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80bc 	beq.w	8002982 <xTaskResumeAll+0x1c6>
 800280a:	e08b      	b.n	8002924 <xTaskResumeAll+0x168>
 800280c:	4b62      	ldr	r3, [pc, #392]	; (8002998 <xTaskResumeAll+0x1dc>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	6a12      	ldr	r2, [r2, #32]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	69d2      	ldr	r2, [r2, #28]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3318      	adds	r3, #24
 8002836:	429a      	cmp	r2, r3
 8002838:	d103      	bne.n	8002842 <xTaskResumeAll+0x86>
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	2200      	movs	r2, #0
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1e5a      	subs	r2, r3, #1
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	68d2      	ldr	r2, [r2, #12]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	6892      	ldr	r2, [r2, #8]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	3304      	adds	r3, #4
 8002874:	429a      	cmp	r2, r3
 8002876:	d103      	bne.n	8002880 <xTaskResumeAll+0xc4>
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2200      	movs	r2, #0
 8002884:	615a      	str	r2, [r3, #20]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1e5a      	subs	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <xTaskResumeAll+0x1e0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d903      	bls.n	80028a4 <xTaskResumeAll+0xe8>
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	4a3e      	ldr	r2, [pc, #248]	; (800299c <xTaskResumeAll+0x1e0>)
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a8:	493d      	ldr	r1, [pc, #244]	; (80029a0 <xTaskResumeAll+0x1e4>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3304      	adds	r3, #4
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	3204      	adds	r2, #4
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	1d1a      	adds	r2, r3, #4
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4a2e      	ldr	r2, [pc, #184]	; (80029a0 <xTaskResumeAll+0x1e4>)
 80028e8:	441a      	add	r2, r3
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	615a      	str	r2, [r3, #20]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f2:	492b      	ldr	r1, [pc, #172]	; (80029a0 <xTaskResumeAll+0x1e4>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1c59      	adds	r1, r3, #1
 8002902:	4827      	ldr	r0, [pc, #156]	; (80029a0 <xTaskResumeAll+0x1e4>)
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4403      	add	r3, r0
 800290e:	6019      	str	r1, [r3, #0]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <xTaskResumeAll+0x1e8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <xTaskResumeAll+0x168>
 800291e:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <xTaskResumeAll+0x1ec>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <xTaskResumeAll+0x1dc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f47f af6f 	bne.w	800280c <xTaskResumeAll+0x50>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <xTaskResumeAll+0x17c>
 8002934:	f000 fcd8 	bl	80032e8 <prvResetNextTaskUnblockTime>
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <xTaskResumeAll+0x1f0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d010      	beq.n	8002966 <xTaskResumeAll+0x1aa>
 8002944:	f000 f89e 	bl	8002a84 <xTaskIncrementTick>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <xTaskResumeAll+0x198>
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <xTaskResumeAll+0x1ec>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3b01      	subs	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f1      	bne.n	8002944 <xTaskResumeAll+0x188>
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <xTaskResumeAll+0x1f0>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <xTaskResumeAll+0x1ec>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <xTaskResumeAll+0x1c6>
 800296e:	2301      	movs	r3, #1
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <xTaskResumeAll+0x1f4>)
 8002974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f3bf 8f4f 	dsb	sy
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f001 fb8d 	bl	80040a0 <vPortExitCritical>
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4618      	mov	r0, r3
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000198 	.word	0x20000198
 8002994:	20000170 	.word	0x20000170
 8002998:	20000130 	.word	0x20000130
 800299c:	20000178 	.word	0x20000178
 80029a0:	2000009c 	.word	0x2000009c
 80029a4:	20000098 	.word	0x20000098
 80029a8:	20000184 	.word	0x20000184
 80029ac:	20000180 	.word	0x20000180
 80029b0:	e000ed04 	.word	0xe000ed04

080029b4 <xTaskGetTickCount>:
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4b04      	ldr	r3, [pc, #16]	; (80029cc <xTaskGetTickCount+0x18>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000174 	.word	0x20000174

080029d0 <vTaskStepTick>:
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <vTaskStepTick+0xa4>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	441a      	add	r2, r3
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <vTaskStepTick+0xa8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d90a      	bls.n	80029fe <vTaskStepTick+0x2e>
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <vTaskStepTick+0x2c>
 80029fe:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <vTaskStepTick+0xa4>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	441a      	add	r2, r3
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <vTaskStepTick+0xa8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d128      	bne.n	8002a60 <vTaskStepTick+0x90>
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <vTaskStepTick+0xac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <vTaskStepTick+0x5c>
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	bf00      	nop
 8002a2a:	e7fe      	b.n	8002a2a <vTaskStepTick+0x5a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10a      	bne.n	8002a48 <vTaskStepTick+0x78>
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	bf00      	nop
 8002a46:	e7fe      	b.n	8002a46 <vTaskStepTick+0x76>
 8002a48:	f001 fafa 	bl	8004040 <vPortEnterCritical>
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <vTaskStepTick+0xb0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <vTaskStepTick+0xb0>)
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	f001 fb23 	bl	80040a0 <vPortExitCritical>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <vTaskStepTick+0xa4>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4413      	add	r3, r2
 8002a68:	4a02      	ldr	r2, [pc, #8]	; (8002a74 <vTaskStepTick+0xa4>)
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	bf00      	nop
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000174 	.word	0x20000174
 8002a78:	20000190 	.word	0x20000190
 8002a7c:	20000198 	.word	0x20000198
 8002a80:	20000180 	.word	0x20000180

08002a84 <xTaskIncrementTick>:
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8e:	4b7e      	ldr	r3, [pc, #504]	; (8002c88 <xTaskIncrementTick+0x204>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 80ed 	bne.w	8002c72 <xTaskIncrementTick+0x1ee>
 8002a98:	4b7c      	ldr	r3, [pc, #496]	; (8002c8c <xTaskIncrementTick+0x208>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	623b      	str	r3, [r7, #32]
 8002aa0:	4a7a      	ldr	r2, [pc, #488]	; (8002c8c <xTaskIncrementTick+0x208>)
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d120      	bne.n	8002aee <xTaskIncrementTick+0x6a>
 8002aac:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <xTaskIncrementTick+0x20c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <xTaskIncrementTick+0x48>
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <xTaskIncrementTick+0x46>
 8002acc:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <xTaskIncrementTick+0x20c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <xTaskIncrementTick+0x210>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6e      	ldr	r2, [pc, #440]	; (8002c90 <xTaskIncrementTick+0x20c>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4a6e      	ldr	r2, [pc, #440]	; (8002c94 <xTaskIncrementTick+0x210>)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b6d      	ldr	r3, [pc, #436]	; (8002c98 <xTaskIncrementTick+0x214>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	4a6c      	ldr	r2, [pc, #432]	; (8002c98 <xTaskIncrementTick+0x214>)
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	f000 fbfd 	bl	80032e8 <prvResetNextTaskUnblockTime>
 8002aee:	4b6b      	ldr	r3, [pc, #428]	; (8002c9c <xTaskIncrementTick+0x218>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6a3a      	ldr	r2, [r7, #32]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f0c0 80a7 	bcc.w	8002c48 <xTaskIncrementTick+0x1c4>
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <xTaskIncrementTick+0x20c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d104      	bne.n	8002b0e <xTaskIncrementTick+0x8a>
 8002b04:	4b65      	ldr	r3, [pc, #404]	; (8002c9c <xTaskIncrementTick+0x218>)
 8002b06:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e09c      	b.n	8002c48 <xTaskIncrementTick+0x1c4>
 8002b0e:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <xTaskIncrementTick+0x20c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	6a3a      	ldr	r2, [r7, #32]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d203      	bcs.n	8002b2e <xTaskIncrementTick+0xaa>
 8002b26:	4a5d      	ldr	r2, [pc, #372]	; (8002c9c <xTaskIncrementTick+0x218>)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e08c      	b.n	8002c48 <xTaskIncrementTick+0x1c4>
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	68d2      	ldr	r2, [r2, #12]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	6892      	ldr	r2, [r2, #8]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d103      	bne.n	8002b5c <xTaskIncrementTick+0xd8>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	615a      	str	r2, [r3, #20]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1e5a      	subs	r2, r3, #1
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01e      	beq.n	8002bb2 <xTaskIncrementTick+0x12e>
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	6a12      	ldr	r2, [r2, #32]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	69d2      	ldr	r2, [r2, #28]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	3318      	adds	r3, #24
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d103      	bne.n	8002ba2 <xTaskIncrementTick+0x11e>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	6a1a      	ldr	r2, [r3, #32]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	1e5a      	subs	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <xTaskIncrementTick+0x21c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d903      	bls.n	8002bc6 <xTaskIncrementTick+0x142>
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	4a37      	ldr	r2, [pc, #220]	; (8002ca0 <xTaskIncrementTick+0x21c>)
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	4936      	ldr	r1, [pc, #216]	; (8002ca4 <xTaskIncrementTick+0x220>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	3204      	adds	r2, #4
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	1d1a      	adds	r2, r3, #4
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <xTaskIncrementTick+0x220>)
 8002c0a:	441a      	add	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	615a      	str	r2, [r3, #20]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	4923      	ldr	r1, [pc, #140]	; (8002ca4 <xTaskIncrementTick+0x220>)
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1c59      	adds	r1, r3, #1
 8002c24:	481f      	ldr	r0, [pc, #124]	; (8002ca4 <xTaskIncrementTick+0x220>)
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4403      	add	r3, r0
 8002c30:	6019      	str	r1, [r3, #0]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <xTaskIncrementTick+0x224>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	f67f af5c 	bls.w	8002afa <xTaskIncrementTick+0x76>
 8002c42:	2301      	movs	r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	e758      	b.n	8002afa <xTaskIncrementTick+0x76>
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <xTaskIncrementTick+0x224>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4e:	4915      	ldr	r1, [pc, #84]	; (8002ca4 <xTaskIncrementTick+0x220>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d901      	bls.n	8002c64 <xTaskIncrementTick+0x1e0>
 8002c60:	2301      	movs	r3, #1
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <xTaskIncrementTick+0x228>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <xTaskIncrementTick+0x1f8>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e004      	b.n	8002c7c <xTaskIncrementTick+0x1f8>
 8002c72:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <xTaskIncrementTick+0x22c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	4a0d      	ldr	r2, [pc, #52]	; (8002cb0 <xTaskIncrementTick+0x22c>)
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3728      	adds	r7, #40	; 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000198 	.word	0x20000198
 8002c8c:	20000174 	.word	0x20000174
 8002c90:	20000128 	.word	0x20000128
 8002c94:	2000012c 	.word	0x2000012c
 8002c98:	20000188 	.word	0x20000188
 8002c9c:	20000190 	.word	0x20000190
 8002ca0:	20000178 	.word	0x20000178
 8002ca4:	2000009c 	.word	0x2000009c
 8002ca8:	20000098 	.word	0x20000098
 8002cac:	20000184 	.word	0x20000184
 8002cb0:	20000180 	.word	0x20000180

08002cb4 <vTaskSwitchContext>:
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <vTaskSwitchContext+0xa4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <vTaskSwitchContext+0x16>
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <vTaskSwitchContext+0xa8>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	e041      	b.n	8002d4e <vTaskSwitchContext+0x9a>
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <vTaskSwitchContext+0xa8>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	4b23      	ldr	r3, [pc, #140]	; (8002d60 <vTaskSwitchContext+0xac>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	e010      	b.n	8002cfa <vTaskSwitchContext+0x46>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <vTaskSwitchContext+0x40>
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	bf00      	nop
 8002cf2:	e7fe      	b.n	8002cf2 <vTaskSwitchContext+0x3e>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	491a      	ldr	r1, [pc, #104]	; (8002d64 <vTaskSwitchContext+0xb0>)
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0e4      	beq.n	8002cd8 <vTaskSwitchContext+0x24>
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <vTaskSwitchContext+0xb0>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3308      	adds	r3, #8
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d104      	bne.n	8002d3e <vTaskSwitchContext+0x8a>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a08      	ldr	r2, [pc, #32]	; (8002d68 <vTaskSwitchContext+0xb4>)
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <vTaskSwitchContext+0xac>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	20000198 	.word	0x20000198
 8002d5c:	20000184 	.word	0x20000184
 8002d60:	20000178 	.word	0x20000178
 8002d64:	2000009c 	.word	0x2000009c
 8002d68:	20000098 	.word	0x20000098

08002d6c <vTaskPlaceOnEventList>:
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10a      	bne.n	8002d92 <vTaskPlaceOnEventList+0x26>
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <vTaskPlaceOnEventList+0x24>
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <vTaskPlaceOnEventList+0x44>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3318      	adds	r3, #24
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 ffff 	bl	8003d9e <vListInsert>
 8002da0:	2101      	movs	r1, #1
 8002da2:	6838      	ldr	r0, [r7, #0]
 8002da4:	f000 fcbc 	bl	8003720 <prvAddCurrentTaskToDelayedList>
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000098 	.word	0x20000098

08002db4 <vTaskPlaceOnEventListRestricted>:
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <vTaskPlaceOnEventListRestricted+0x28>
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	bf00      	nop
 8002dda:	e7fe      	b.n	8002dda <vTaskPlaceOnEventListRestricted+0x26>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <vTaskPlaceOnEventListRestricted+0x88>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	61da      	str	r2, [r3, #28]
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <vTaskPlaceOnEventListRestricted+0x88>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	6892      	ldr	r2, [r2, #8]
 8002df2:	621a      	str	r2, [r3, #32]
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <vTaskPlaceOnEventListRestricted+0x88>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	3218      	adds	r2, #24
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <vTaskPlaceOnEventListRestricted+0x88>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f103 0218 	add.w	r2, r3, #24
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <vTaskPlaceOnEventListRestricted+0x88>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <vTaskPlaceOnEventListRestricted+0x76>
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	68b8      	ldr	r0, [r7, #8]
 8002e2e:	f000 fc77 	bl	8003720 <prvAddCurrentTaskToDelayedList>
 8002e32:	bf00      	nop
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000098 	.word	0x20000098

08002e40 <xTaskRemoveFromEventList>:
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	623b      	str	r3, [r7, #32]
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <xTaskRemoveFromEventList+0x2c>
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	bf00      	nop
 8002e6a:	e7fe      	b.n	8002e6a <xTaskRemoveFromEventList+0x2a>
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	6a3a      	ldr	r2, [r7, #32]
 8002e78:	6a12      	ldr	r2, [r2, #32]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	69d2      	ldr	r2, [r2, #28]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	3318      	adds	r3, #24
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d103      	bne.n	8002e9a <xTaskRemoveFromEventList+0x5a>
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1e5a      	subs	r2, r3, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	4b4b      	ldr	r3, [pc, #300]	; (8002fd8 <xTaskRemoveFromEventList+0x198>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d161      	bne.n	8002f76 <xTaskRemoveFromEventList+0x136>
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	6a3a      	ldr	r2, [r7, #32]
 8002ebe:	68d2      	ldr	r2, [r2, #12]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	6a3a      	ldr	r2, [r7, #32]
 8002ec8:	6892      	ldr	r2, [r2, #8]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d103      	bne.n	8002ee0 <xTaskRemoveFromEventList+0xa0>
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	615a      	str	r2, [r3, #20]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <xTaskRemoveFromEventList+0x19c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d903      	bls.n	8002f04 <xTaskRemoveFromEventList+0xc4>
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	4a36      	ldr	r2, [pc, #216]	; (8002fdc <xTaskRemoveFromEventList+0x19c>)
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	4935      	ldr	r1, [pc, #212]	; (8002fe0 <xTaskRemoveFromEventList+0x1a0>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3304      	adds	r3, #4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	3204      	adds	r2, #4
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	1d1a      	adds	r2, r3, #4
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <xTaskRemoveFromEventList+0x1a0>)
 8002f48:	441a      	add	r2, r3
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	615a      	str	r2, [r3, #20]
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f52:	4923      	ldr	r1, [pc, #140]	; (8002fe0 <xTaskRemoveFromEventList+0x1a0>)
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	1c59      	adds	r1, r3, #1
 8002f62:	481f      	ldr	r0, [pc, #124]	; (8002fe0 <xTaskRemoveFromEventList+0x1a0>)
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4403      	add	r3, r0
 8002f6e:	6019      	str	r1, [r3, #0]
 8002f70:	f000 f9ba 	bl	80032e8 <prvResetNextTaskUnblockTime>
 8002f74:	e01b      	b.n	8002fae <xTaskRemoveFromEventList+0x16e>
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <xTaskRemoveFromEventList+0x1a4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	61da      	str	r2, [r3, #28]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	621a      	str	r2, [r3, #32]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	6a3a      	ldr	r2, [r7, #32]
 8002f90:	3218      	adds	r2, #24
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f103 0218 	add.w	r2, r3, #24
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <xTaskRemoveFromEventList+0x1a4>)
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <xTaskRemoveFromEventList+0x1a4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	4a0e      	ldr	r2, [pc, #56]	; (8002fe4 <xTaskRemoveFromEventList+0x1a4>)
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <xTaskRemoveFromEventList+0x1a8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d905      	bls.n	8002fc8 <xTaskRemoveFromEventList+0x188>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <xTaskRemoveFromEventList+0x1ac>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e001      	b.n	8002fcc <xTaskRemoveFromEventList+0x18c>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3728      	adds	r7, #40	; 0x28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000198 	.word	0x20000198
 8002fdc:	20000178 	.word	0x20000178
 8002fe0:	2000009c 	.word	0x2000009c
 8002fe4:	20000130 	.word	0x20000130
 8002fe8:	20000098 	.word	0x20000098
 8002fec:	20000184 	.word	0x20000184

08002ff0 <vTaskInternalSetTimeOutState>:
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <vTaskInternalSetTimeOutState+0x24>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <vTaskInternalSetTimeOutState+0x28>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000188 	.word	0x20000188
 8003018:	20000174 	.word	0x20000174

0800301c <xTaskCheckForTimeOut>:
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <xTaskCheckForTimeOut+0x26>
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	bf00      	nop
 8003040:	e7fe      	b.n	8003040 <xTaskCheckForTimeOut+0x24>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <xTaskCheckForTimeOut+0x42>
 8003048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	bf00      	nop
 800305c:	e7fe      	b.n	800305c <xTaskCheckForTimeOut+0x40>
 800305e:	f000 ffef 	bl	8004040 <vPortEnterCritical>
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <xTaskCheckForTimeOut+0xc4>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d102      	bne.n	8003082 <xTaskCheckForTimeOut+0x66>
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
 8003080:	e026      	b.n	80030d0 <xTaskCheckForTimeOut+0xb4>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <xTaskCheckForTimeOut+0xc8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d00a      	beq.n	80030a4 <xTaskCheckForTimeOut+0x88>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	429a      	cmp	r2, r3
 8003096:	d305      	bcc.n	80030a4 <xTaskCheckForTimeOut+0x88>
 8003098:	2301      	movs	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e015      	b.n	80030d0 <xTaskCheckForTimeOut+0xb4>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d20b      	bcs.n	80030c6 <xTaskCheckForTimeOut+0xaa>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	1ad2      	subs	r2, r2, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ff98 	bl	8002ff0 <vTaskInternalSetTimeOutState>
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
 80030c4:	e004      	b.n	80030d0 <xTaskCheckForTimeOut+0xb4>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	2301      	movs	r3, #1
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	f000 ffe6 	bl	80040a0 <vPortExitCritical>
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000174 	.word	0x20000174
 80030e4:	20000188 	.word	0x20000188

080030e8 <vTaskMissedYield>:
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <vTaskMissedYield+0x14>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	bf00      	nop
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000184 	.word	0x20000184

08003100 <prvIdleTask>:
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	f000 f8b0 	bl	800326c <prvCheckTasksWaitingTermination>
 800310c:	4b18      	ldr	r3, [pc, #96]	; (8003170 <prvIdleTask+0x70>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d907      	bls.n	8003124 <prvIdleTask+0x24>
 8003114:	4b17      	ldr	r3, [pc, #92]	; (8003174 <prvIdleTask+0x74>)
 8003116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f7ff fb14 	bl	8002750 <prvGetExpectedIdleTime>
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d9eb      	bls.n	8003108 <prvIdleTask+0x8>
 8003130:	f7ff fb00 	bl	8002734 <vTaskSuspendAll>
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <prvIdleTask+0x78>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <prvIdleTask+0x7c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d20a      	bcs.n	8003156 <prvIdleTask+0x56>
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <prvIdleTask+0x54>
 8003156:	f7ff fafb 	bl	8002750 <prvGetExpectedIdleTime>
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d902      	bls.n	8003168 <prvIdleTask+0x68>
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f001 f80a 	bl	800417c <vPortSuppressTicksAndSleep>
 8003168:	f7ff fb28 	bl	80027bc <xTaskResumeAll>
 800316c:	e7cc      	b.n	8003108 <prvIdleTask+0x8>
 800316e:	bf00      	nop
 8003170:	2000009c 	.word	0x2000009c
 8003174:	e000ed04 	.word	0xe000ed04
 8003178:	20000190 	.word	0x20000190
 800317c:	20000174 	.word	0x20000174

08003180 <eTaskConfirmSleepModeStatus>:
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	2301      	movs	r3, #1
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	2301      	movs	r3, #1
 800318c:	71fb      	strb	r3, [r7, #7]
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <eTaskConfirmSleepModeStatus+0x58>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <eTaskConfirmSleepModeStatus+0x1c>
 8003196:	2300      	movs	r3, #0
 8003198:	71fb      	strb	r3, [r7, #7]
 800319a:	e017      	b.n	80031cc <eTaskConfirmSleepModeStatus+0x4c>
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <eTaskConfirmSleepModeStatus+0x5c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <eTaskConfirmSleepModeStatus+0x2a>
 80031a4:	2300      	movs	r3, #0
 80031a6:	71fb      	strb	r3, [r7, #7]
 80031a8:	e010      	b.n	80031cc <eTaskConfirmSleepModeStatus+0x4c>
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <eTaskConfirmSleepModeStatus+0x60>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <eTaskConfirmSleepModeStatus+0x38>
 80031b2:	2300      	movs	r3, #0
 80031b4:	71fb      	strb	r3, [r7, #7]
 80031b6:	e009      	b.n	80031cc <eTaskConfirmSleepModeStatus+0x4c>
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <eTaskConfirmSleepModeStatus+0x64>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <eTaskConfirmSleepModeStatus+0x68>)
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	1acb      	subs	r3, r1, r3
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d101      	bne.n	80031cc <eTaskConfirmSleepModeStatus+0x4c>
 80031c8:	2302      	movs	r3, #2
 80031ca:	71fb      	strb	r3, [r7, #7]
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	20000130 	.word	0x20000130
 80031dc:	20000184 	.word	0x20000184
 80031e0:	20000180 	.word	0x20000180
 80031e4:	2000015c 	.word	0x2000015c
 80031e8:	20000170 	.word	0x20000170

080031ec <prvInitialiseTaskLists>:
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	e00c      	b.n	8003212 <prvInitialiseTaskLists+0x26>
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4a12      	ldr	r2, [pc, #72]	; (800324c <prvInitialiseTaskLists+0x60>)
 8003204:	4413      	add	r3, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fd9e 	bl	8003d48 <vListInitialise>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3301      	adds	r3, #1
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d9ef      	bls.n	80031f8 <prvInitialiseTaskLists+0xc>
 8003218:	480d      	ldr	r0, [pc, #52]	; (8003250 <prvInitialiseTaskLists+0x64>)
 800321a:	f000 fd95 	bl	8003d48 <vListInitialise>
 800321e:	480d      	ldr	r0, [pc, #52]	; (8003254 <prvInitialiseTaskLists+0x68>)
 8003220:	f000 fd92 	bl	8003d48 <vListInitialise>
 8003224:	480c      	ldr	r0, [pc, #48]	; (8003258 <prvInitialiseTaskLists+0x6c>)
 8003226:	f000 fd8f 	bl	8003d48 <vListInitialise>
 800322a:	480c      	ldr	r0, [pc, #48]	; (800325c <prvInitialiseTaskLists+0x70>)
 800322c:	f000 fd8c 	bl	8003d48 <vListInitialise>
 8003230:	480b      	ldr	r0, [pc, #44]	; (8003260 <prvInitialiseTaskLists+0x74>)
 8003232:	f000 fd89 	bl	8003d48 <vListInitialise>
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <prvInitialiseTaskLists+0x78>)
 8003238:	4a05      	ldr	r2, [pc, #20]	; (8003250 <prvInitialiseTaskLists+0x64>)
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <prvInitialiseTaskLists+0x7c>)
 800323e:	4a05      	ldr	r2, [pc, #20]	; (8003254 <prvInitialiseTaskLists+0x68>)
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2000009c 	.word	0x2000009c
 8003250:	20000100 	.word	0x20000100
 8003254:	20000114 	.word	0x20000114
 8003258:	20000130 	.word	0x20000130
 800325c:	20000144 	.word	0x20000144
 8003260:	2000015c 	.word	0x2000015c
 8003264:	20000128 	.word	0x20000128
 8003268:	2000012c 	.word	0x2000012c

0800326c <prvCheckTasksWaitingTermination>:
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	e019      	b.n	80032a8 <prvCheckTasksWaitingTermination+0x3c>
 8003274:	f000 fee4 	bl	8004040 <vPortEnterCritical>
 8003278:	4b10      	ldr	r3, [pc, #64]	; (80032bc <prvCheckTasksWaitingTermination+0x50>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3304      	adds	r3, #4
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fdc2 	bl	8003e0e <uxListRemove>
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <prvCheckTasksWaitingTermination+0x54>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3b01      	subs	r3, #1
 8003290:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <prvCheckTasksWaitingTermination+0x54>)
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <prvCheckTasksWaitingTermination+0x58>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3b01      	subs	r3, #1
 800329a:	4a0a      	ldr	r2, [pc, #40]	; (80032c4 <prvCheckTasksWaitingTermination+0x58>)
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	f000 feff 	bl	80040a0 <vPortExitCritical>
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f810 	bl	80032c8 <prvDeleteTCB>
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <prvCheckTasksWaitingTermination+0x58>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e1      	bne.n	8003274 <prvCheckTasksWaitingTermination+0x8>
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000144 	.word	0x20000144
 80032c0:	20000170 	.word	0x20000170
 80032c4:	20000158 	.word	0x20000158

080032c8 <prvDeleteTCB>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fd25 	bl	8003d24 <vPortFree>
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fd22 	bl	8003d24 <vPortFree>
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <prvResetNextTaskUnblockTime>:
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <prvResetNextTaskUnblockTime+0x2c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d104      	bne.n	8003300 <prvResetNextTaskUnblockTime+0x18>
 80032f6:	4b08      	ldr	r3, [pc, #32]	; (8003318 <prvResetNextTaskUnblockTime+0x30>)
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e005      	b.n	800330c <prvResetNextTaskUnblockTime+0x24>
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <prvResetNextTaskUnblockTime+0x2c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a03      	ldr	r2, [pc, #12]	; (8003318 <prvResetNextTaskUnblockTime+0x30>)
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr
 8003314:	20000128 	.word	0x20000128
 8003318:	20000190 	.word	0x20000190

0800331c <xTaskGetSchedulerState>:
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <xTaskGetSchedulerState+0x34>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <xTaskGetSchedulerState+0x14>
 800332a:	2301      	movs	r3, #1
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	e008      	b.n	8003342 <xTaskGetSchedulerState+0x26>
 8003330:	4b08      	ldr	r3, [pc, #32]	; (8003354 <xTaskGetSchedulerState+0x38>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d102      	bne.n	800333e <xTaskGetSchedulerState+0x22>
 8003338:	2302      	movs	r3, #2
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e001      	b.n	8003342 <xTaskGetSchedulerState+0x26>
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	2000017c 	.word	0x2000017c
 8003354:	20000198 	.word	0x20000198

08003358 <xTaskPriorityInherit>:
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d079      	beq.n	8003462 <xTaskPriorityInherit+0x10a>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003372:	4b3e      	ldr	r3, [pc, #248]	; (800346c <xTaskPriorityInherit+0x114>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	429a      	cmp	r2, r3
 800337a:	d269      	bcs.n	8003450 <xTaskPriorityInherit+0xf8>
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b00      	cmp	r3, #0
 8003382:	db06      	blt.n	8003392 <xTaskPriorityInherit+0x3a>
 8003384:	4b39      	ldr	r3, [pc, #228]	; (800346c <xTaskPriorityInherit+0x114>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f1c3 0205 	rsb	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	619a      	str	r2, [r3, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	6959      	ldr	r1, [r3, #20]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4a33      	ldr	r2, [pc, #204]	; (8003470 <xTaskPriorityInherit+0x118>)
 80033a4:	4413      	add	r3, r2
 80033a6:	4299      	cmp	r1, r3
 80033a8:	d14a      	bne.n	8003440 <xTaskPriorityInherit+0xe8>
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fd2d 	bl	8003e0e <uxListRemove>
 80033b4:	4b2d      	ldr	r3, [pc, #180]	; (800346c <xTaskPriorityInherit+0x114>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c2:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <xTaskPriorityInherit+0x11c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d903      	bls.n	80033d2 <xTaskPriorityInherit+0x7a>
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	4a29      	ldr	r2, [pc, #164]	; (8003474 <xTaskPriorityInherit+0x11c>)
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	4926      	ldr	r1, [pc, #152]	; (8003470 <xTaskPriorityInherit+0x118>)
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3304      	adds	r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	3204      	adds	r2, #4
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4a16      	ldr	r2, [pc, #88]	; (8003470 <xTaskPriorityInherit+0x118>)
 8003416:	441a      	add	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	615a      	str	r2, [r3, #20]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	4913      	ldr	r1, [pc, #76]	; (8003470 <xTaskPriorityInherit+0x118>)
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	480f      	ldr	r0, [pc, #60]	; (8003470 <xTaskPriorityInherit+0x118>)
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4403      	add	r3, r0
 800343c:	6019      	str	r1, [r3, #0]
 800343e:	e004      	b.n	800344a <xTaskPriorityInherit+0xf2>
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <xTaskPriorityInherit+0x114>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
 800344a:	2301      	movs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e008      	b.n	8003462 <xTaskPriorityInherit+0x10a>
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <xTaskPriorityInherit+0x114>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	429a      	cmp	r2, r3
 800345c:	d201      	bcs.n	8003462 <xTaskPriorityInherit+0x10a>
 800345e:	2301      	movs	r3, #1
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000098 	.word	0x20000098
 8003470:	2000009c 	.word	0x2000009c
 8003474:	20000178 	.word	0x20000178

08003478 <xTaskPriorityDisinherit>:
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d07e      	beq.n	800358c <xTaskPriorityDisinherit+0x114>
 800348e:	4b42      	ldr	r3, [pc, #264]	; (8003598 <xTaskPriorityDisinherit+0x120>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	429a      	cmp	r2, r3
 8003496:	d00a      	beq.n	80034ae <xTaskPriorityDisinherit+0x36>
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <xTaskPriorityDisinherit+0x34>
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <xTaskPriorityDisinherit+0x54>
 80034b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	bf00      	nop
 80034ca:	e7fe      	b.n	80034ca <xTaskPriorityDisinherit+0x52>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	429a      	cmp	r2, r3
 80034e0:	d054      	beq.n	800358c <xTaskPriorityDisinherit+0x114>
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d150      	bne.n	800358c <xTaskPriorityDisinherit+0x114>
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fc8d 	bl	8003e0e <uxListRemove>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	f1c3 0205 	rsb	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	619a      	str	r2, [r3, #24]
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350c:	4b23      	ldr	r3, [pc, #140]	; (800359c <xTaskPriorityDisinherit+0x124>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d903      	bls.n	800351c <xTaskPriorityDisinherit+0xa4>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4a20      	ldr	r2, [pc, #128]	; (800359c <xTaskPriorityDisinherit+0x124>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	491f      	ldr	r1, [pc, #124]	; (80035a0 <xTaskPriorityDisinherit+0x128>)
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3304      	adds	r3, #4
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	617b      	str	r3, [r7, #20]
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	3204      	adds	r2, #4
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	1d1a      	adds	r2, r3, #4
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <xTaskPriorityDisinherit+0x128>)
 8003560:	441a      	add	r2, r3
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	615a      	str	r2, [r3, #20]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356a:	490d      	ldr	r1, [pc, #52]	; (80035a0 <xTaskPriorityDisinherit+0x128>)
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	1c59      	adds	r1, r3, #1
 800357a:	4809      	ldr	r0, [pc, #36]	; (80035a0 <xTaskPriorityDisinherit+0x128>)
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4403      	add	r3, r0
 8003586:	6019      	str	r1, [r3, #0]
 8003588:	2301      	movs	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20000098 	.word	0x20000098
 800359c:	20000178 	.word	0x20000178
 80035a0:	2000009c 	.word	0x2000009c

080035a4 <vTaskPriorityDisinheritAfterTimeout>:
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b08a      	sub	sp, #40	; 0x28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	2301      	movs	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8093 	beq.w	80036e4 <vTaskPriorityDisinheritAfterTimeout+0x140>
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10a      	bne.n	80035dc <vTaskPriorityDisinheritAfterTimeout+0x38>
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <vTaskPriorityDisinheritAfterTimeout+0x36>
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d902      	bls.n	80035ec <vTaskPriorityDisinheritAfterTimeout+0x48>
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ea:	e002      	b.n	80035f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d073      	beq.n	80036e4 <vTaskPriorityDisinheritAfterTimeout+0x140>
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	429a      	cmp	r2, r3
 8003604:	d16e      	bne.n	80036e4 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a3a      	ldr	r2, [r7, #32]
 800360c:	429a      	cmp	r2, r3
 800360e:	d10a      	bne.n	8003626 <vTaskPriorityDisinheritAfterTimeout+0x82>
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	62da      	str	r2, [r3, #44]	; 0x2c
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db04      	blt.n	8003644 <vTaskPriorityDisinheritAfterTimeout+0xa0>
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	f1c3 0205 	rsb	r2, r3, #5
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	619a      	str	r2, [r3, #24]
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	6959      	ldr	r1, [r3, #20]
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8003654:	4413      	add	r3, r2
 8003656:	4299      	cmp	r1, r3
 8003658:	d144      	bne.n	80036e4 <vTaskPriorityDisinheritAfterTimeout+0x140>
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	3304      	adds	r3, #4
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fbd5 	bl	8003e0e <uxListRemove>
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d903      	bls.n	8003678 <vTaskPriorityDisinheritAfterTimeout+0xd4>
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367c:	491c      	ldr	r1, [pc, #112]	; (80036f0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3304      	adds	r3, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	60da      	str	r2, [r3, #12]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	3204      	adds	r2, #4
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	1d1a      	adds	r2, r3, #4
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	609a      	str	r2, [r3, #8]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 80036bc:	441a      	add	r2, r3
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	615a      	str	r2, [r3, #20]
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c6:	490a      	ldr	r1, [pc, #40]	; (80036f0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1c59      	adds	r1, r3, #1
 80036d6:	4806      	ldr	r0, [pc, #24]	; (80036f0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4403      	add	r3, r0
 80036e2:	6019      	str	r1, [r3, #0]
 80036e4:	bf00      	nop
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000098 	.word	0x20000098
 80036f0:	2000009c 	.word	0x2000009c
 80036f4:	20000178 	.word	0x20000178

080036f8 <pvTaskIncrementMutexHeldCount>:
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4b07      	ldr	r3, [pc, #28]	; (800371c <pvTaskIncrementMutexHeldCount+0x24>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <pvTaskIncrementMutexHeldCount+0x16>
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <pvTaskIncrementMutexHeldCount+0x24>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800370a:	3201      	adds	r2, #1
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
 800370e:	4b03      	ldr	r3, [pc, #12]	; (800371c <pvTaskIncrementMutexHeldCount+0x24>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000098 	.word	0x20000098

08003720 <prvAddCurrentTaskToDelayedList>:
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
 800372a:	4b2e      	ldr	r3, [pc, #184]	; (80037e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	4b2d      	ldr	r3, [pc, #180]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3304      	adds	r3, #4
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fb69 	bl	8003e0e <uxListRemove>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003742:	d124      	bne.n	800378e <prvAddCurrentTaskToDelayedList+0x6e>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d021      	beq.n	800378e <prvAddCurrentTaskToDelayedList+0x6e>
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <prvAddCurrentTaskToDelayedList+0xcc>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	6892      	ldr	r2, [r2, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	3204      	adds	r2, #4
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	1d1a      	adds	r2, r3, #4
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	4b1b      	ldr	r3, [pc, #108]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <prvAddCurrentTaskToDelayedList+0xcc>)
 800377e:	615a      	str	r2, [r3, #20]
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <prvAddCurrentTaskToDelayedList+0xcc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	4a19      	ldr	r2, [pc, #100]	; (80037ec <prvAddCurrentTaskToDelayedList+0xcc>)
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	bf00      	nop
 800378c:	e026      	b.n	80037dc <prvAddCurrentTaskToDelayedList+0xbc>
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d209      	bcs.n	80037ba <prvAddCurrentTaskToDelayedList+0x9a>
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xd0>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f000 faf3 	bl	8003d9e <vListInsert>
 80037b8:	e010      	b.n	80037dc <prvAddCurrentTaskToDelayedList+0xbc>
 80037ba:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3304      	adds	r3, #4
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f000 fae9 	bl	8003d9e <vListInsert>
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d202      	bcs.n	80037dc <prvAddCurrentTaskToDelayedList+0xbc>
 80037d6:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	bf00      	nop
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000174 	.word	0x20000174
 80037e8:	20000098 	.word	0x20000098
 80037ec:	2000015c 	.word	0x2000015c
 80037f0:	2000012c 	.word	0x2000012c
 80037f4:	20000128 	.word	0x20000128
 80037f8:	20000190 	.word	0x20000190

080037fc <xTimerCreateTimerTask>:
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af02      	add	r7, sp, #8
 8003802:	2300      	movs	r3, #0
 8003804:	607b      	str	r3, [r7, #4]
 8003806:	f000 fa45 	bl	8003c94 <prvCheckForValidListAndQueue>
 800380a:	4b11      	ldr	r3, [pc, #68]	; (8003850 <xTimerCreateTimerTask+0x54>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <xTimerCreateTimerTask+0x2c>
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <xTimerCreateTimerTask+0x58>)
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2303      	movs	r3, #3
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	2280      	movs	r2, #128	; 0x80
 800381e:	490e      	ldr	r1, [pc, #56]	; (8003858 <xTimerCreateTimerTask+0x5c>)
 8003820:	480e      	ldr	r0, [pc, #56]	; (800385c <xTimerCreateTimerTask+0x60>)
 8003822:	f7fe fd95 	bl	8002350 <xTaskCreate>
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <xTimerCreateTimerTask+0x48>
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	bf00      	nop
 8003842:	e7fe      	b.n	8003842 <xTimerCreateTimerTask+0x46>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	200001cc 	.word	0x200001cc
 8003854:	200001d0 	.word	0x200001d0
 8003858:	080045d4 	.word	0x080045d4
 800385c:	08003905 	.word	0x08003905

08003860 <prvReloadTimer>:
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	e008      	b.n	8003880 <prvReloadTimer+0x20>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	4413      	add	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	4798      	blx	r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	18d1      	adds	r1, r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f8db 	bl	8003a48 <prvInsertTimerInActiveList>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ea      	bne.n	800386e <prvReloadTimer+0xe>
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <prvProcessExpiredTimer>:
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <prvProcessExpiredTimer+0x5c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 faa6 	bl	8003e0e <uxListRemove>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <prvProcessExpiredTimer+0x38>
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f7ff ffc3 	bl	8003860 <prvReloadTimer>
 80038da:	e008      	b.n	80038ee <prvProcessExpiredTimer+0x4a>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	4798      	blx	r3
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200001c4 	.word	0x200001c4

08003904 <prvTimerTask>:
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	f107 0308 	add.w	r3, r7, #8
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f857 	bl	80039c4 <prvGetNextExpireTime>
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4619      	mov	r1, r3
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f803 	bl	8003928 <prvProcessTimerOrBlockTask>
 8003922:	f000 f8d3 	bl	8003acc <prvProcessReceivedCommands>
 8003926:	e7f1      	b.n	800390c <prvTimerTask+0x8>

08003928 <prvProcessTimerOrBlockTask>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	f7fe feff 	bl	8002734 <vTaskSuspendAll>
 8003936:	f107 0308 	add.w	r3, r7, #8
 800393a:	4618      	mov	r0, r3
 800393c:	f000 f864 	bl	8003a08 <prvSampleTimeNow>
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d130      	bne.n	80039aa <prvProcessTimerOrBlockTask+0x82>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10a      	bne.n	8003964 <prvProcessTimerOrBlockTask+0x3c>
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	429a      	cmp	r2, r3
 8003954:	d806      	bhi.n	8003964 <prvProcessTimerOrBlockTask+0x3c>
 8003956:	f7fe ff31 	bl	80027bc <xTaskResumeAll>
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ffa1 	bl	80038a4 <prvProcessExpiredTimer>
 8003962:	e024      	b.n	80039ae <prvProcessTimerOrBlockTask+0x86>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d008      	beq.n	800397c <prvProcessTimerOrBlockTask+0x54>
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <prvProcessTimerOrBlockTask+0x90>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <prvProcessTimerOrBlockTask+0x50>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <prvProcessTimerOrBlockTask+0x52>
 8003978:	2300      	movs	r3, #0
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <prvProcessTimerOrBlockTask+0x94>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	f7fe fcad 	bl	80022e8 <vQueueWaitForMessageRestricted>
 800398e:	f7fe ff15 	bl	80027bc <xTaskResumeAll>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <prvProcessTimerOrBlockTask+0x86>
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <prvProcessTimerOrBlockTask+0x98>)
 800399a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	e001      	b.n	80039ae <prvProcessTimerOrBlockTask+0x86>
 80039aa:	f7fe ff07 	bl	80027bc <xTaskResumeAll>
 80039ae:	bf00      	nop
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200001c8 	.word	0x200001c8
 80039bc:	200001cc 	.word	0x200001cc
 80039c0:	e000ed04 	.word	0xe000ed04

080039c4 <prvGetNextExpireTime>:
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <prvGetNextExpireTime+0x40>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <prvGetNextExpireTime+0x16>
 80039d6:	2201      	movs	r2, #1
 80039d8:	e000      	b.n	80039dc <prvGetNextExpireTime+0x18>
 80039da:	2200      	movs	r2, #0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <prvGetNextExpireTime+0x30>
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <prvGetNextExpireTime+0x40>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e001      	b.n	80039f8 <prvGetNextExpireTime+0x34>
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr
 8003a04:	200001c4 	.word	0x200001c4

08003a08 <prvSampleTimeNow>:
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	f7fe ffd0 	bl	80029b4 <xTaskGetTickCount>
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <prvSampleTimeNow+0x3c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d205      	bcs.n	8003a2c <prvSampleTimeNow+0x24>
 8003a20:	f000 f912 	bl	8003c48 <prvSwitchTimerLists>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e002      	b.n	8003a32 <prvSampleTimeNow+0x2a>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	4a04      	ldr	r2, [pc, #16]	; (8003a44 <prvSampleTimeNow+0x3c>)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200001d4 	.word	0x200001d4

08003a48 <prvInsertTimerInActiveList>:
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	611a      	str	r2, [r3, #16]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d812      	bhi.n	8003a94 <prvInsertTimerInActiveList+0x4c>
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	1ad2      	subs	r2, r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <prvInsertTimerInActiveList+0x3a>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e01b      	b.n	8003aba <prvInsertTimerInActiveList+0x72>
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <prvInsertTimerInActiveList+0x7c>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	f000 f986 	bl	8003d9e <vListInsert>
 8003a92:	e012      	b.n	8003aba <prvInsertTimerInActiveList+0x72>
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d206      	bcs.n	8003aaa <prvInsertTimerInActiveList+0x62>
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d302      	bcc.n	8003aaa <prvInsertTimerInActiveList+0x62>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e007      	b.n	8003aba <prvInsertTimerInActiveList+0x72>
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <prvInsertTimerInActiveList+0x80>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f000 f972 	bl	8003d9e <vListInsert>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200001c8 	.word	0x200001c8
 8003ac8:	200001c4 	.word	0x200001c4

08003acc <prvProcessReceivedCommands>:
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	e0a6      	b.n	8003c22 <prvProcessReceivedCommands+0x156>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f2c0 80a2 	blt.w	8003c20 <prvProcessReceivedCommands+0x154>
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <prvProcessReceivedCommands+0x26>
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 f98e 	bl	8003e0e <uxListRemove>
 8003af2:	1d3b      	adds	r3, r7, #4
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff87 	bl	8003a08 <prvSampleTimeNow>
 8003afa:	61b8      	str	r0, [r7, #24]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	f200 808e 	bhi.w	8003c22 <prvProcessReceivedCommands+0x156>
 8003b06:	a201      	add	r2, pc, #4	; (adr r2, 8003b0c <prvProcessReceivedCommands+0x40>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b31 	.word	0x08003b31
 8003b10:	08003b31 	.word	0x08003b31
 8003b14:	08003b99 	.word	0x08003b99
 8003b18:	08003bad 	.word	0x08003bad
 8003b1c:	08003bf7 	.word	0x08003bf7
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b31 	.word	0x08003b31
 8003b28:	08003b99 	.word	0x08003b99
 8003b2c:	08003bad 	.word	0x08003bad
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	18d1      	adds	r1, r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	69f8      	ldr	r0, [r7, #28]
 8003b50:	f7ff ff7a 	bl	8003a48 <prvInsertTimerInActiveList>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d063      	beq.n	8003c22 <prvProcessReceivedCommands+0x156>
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <prvProcessReceivedCommands+0xb0>
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	4413      	add	r3, r2
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4619      	mov	r1, r3
 8003b74:	69f8      	ldr	r0, [r7, #28]
 8003b76:	f7ff fe73 	bl	8003860 <prvReloadTimer>
 8003b7a:	e008      	b.n	8003b8e <prvProcessReceivedCommands+0xc2>
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	69f8      	ldr	r0, [r7, #28]
 8003b94:	4798      	blx	r3
 8003b96:	e044      	b.n	8003c22 <prvProcessReceivedCommands+0x156>
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003baa:	e03a      	b.n	8003c22 <prvProcessReceivedCommands+0x156>
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	619a      	str	r2, [r3, #24]
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <prvProcessReceivedCommands+0x116>
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <prvProcessReceivedCommands+0x114>
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	18d1      	adds	r1, r2, r3
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	69f8      	ldr	r0, [r7, #28]
 8003bf0:	f7ff ff2a 	bl	8003a48 <prvInsertTimerInActiveList>
 8003bf4:	e015      	b.n	8003c22 <prvProcessReceivedCommands+0x156>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d103      	bne.n	8003c0c <prvProcessReceivedCommands+0x140>
 8003c04:	69f8      	ldr	r0, [r7, #28]
 8003c06:	f000 f88d 	bl	8003d24 <vPortFree>
 8003c0a:	e00a      	b.n	8003c22 <prvProcessReceivedCommands+0x156>
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003c1e:	e000      	b.n	8003c22 <prvProcessReceivedCommands+0x156>
 8003c20:	bf00      	nop
 8003c22:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <prvProcessReceivedCommands+0x178>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f107 0108 	add.w	r1, r7, #8
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe f807 	bl	8001c40 <xQueueReceive>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f47f af4d 	bne.w	8003ad4 <prvProcessReceivedCommands+0x8>
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	200001cc 	.word	0x200001cc

08003c48 <prvSwitchTimerLists>:
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	e009      	b.n	8003c64 <prvSwitchTimerLists+0x1c>
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <prvSwitchTimerLists+0x44>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f7ff fe20 	bl	80038a4 <prvProcessExpiredTimer>
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <prvSwitchTimerLists+0x44>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <prvSwitchTimerLists+0x8>
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <prvSwitchTimerLists+0x44>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <prvSwitchTimerLists+0x48>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <prvSwitchTimerLists+0x44>)
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <prvSwitchTimerLists+0x48>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	200001c4 	.word	0x200001c4
 8003c90:	200001c8 	.word	0x200001c8

08003c94 <prvCheckForValidListAndQueue>:
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	f000 f9d2 	bl	8004040 <vPortEnterCritical>
 8003c9c:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <prvCheckForValidListAndQueue+0x54>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11d      	bne.n	8003ce0 <prvCheckForValidListAndQueue+0x4c>
 8003ca4:	4811      	ldr	r0, [pc, #68]	; (8003cec <prvCheckForValidListAndQueue+0x58>)
 8003ca6:	f000 f84f 	bl	8003d48 <vListInitialise>
 8003caa:	4811      	ldr	r0, [pc, #68]	; (8003cf0 <prvCheckForValidListAndQueue+0x5c>)
 8003cac:	f000 f84c 	bl	8003d48 <vListInitialise>
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <prvCheckForValidListAndQueue+0x60>)
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <prvCheckForValidListAndQueue+0x58>)
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <prvCheckForValidListAndQueue+0x64>)
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <prvCheckForValidListAndQueue+0x5c>)
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	210c      	movs	r1, #12
 8003cc0:	200a      	movs	r0, #10
 8003cc2:	f7fd fe4d 	bl	8001960 <xQueueGenericCreate>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <prvCheckForValidListAndQueue+0x54>)
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <prvCheckForValidListAndQueue+0x54>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <prvCheckForValidListAndQueue+0x4c>
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <prvCheckForValidListAndQueue+0x54>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4908      	ldr	r1, [pc, #32]	; (8003cfc <prvCheckForValidListAndQueue+0x68>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fab6 	bl	800224c <vQueueAddToRegistry>
 8003ce0:	f000 f9de 	bl	80040a0 <vPortExitCritical>
 8003ce4:	bf00      	nop
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	200001cc 	.word	0x200001cc
 8003cec:	2000019c 	.word	0x2000019c
 8003cf0:	200001b0 	.word	0x200001b0
 8003cf4:	200001c4 	.word	0x200001c4
 8003cf8:	200001c8 	.word	0x200001c8
 8003cfc:	080045dc 	.word	0x080045dc

08003d00 <pvPortMalloc>:
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	f7fe fd14 	bl	8002734 <vTaskSuspendAll>
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fb65 	bl	80043dc <malloc>
 8003d12:	4603      	mov	r3, r0
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	f7fe fd51 	bl	80027bc <xTaskResumeAll>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <vPortFree>:
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <vPortFree+0x1c>
 8003d32:	f7fe fcff 	bl	8002734 <vTaskSuspendAll>
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fb58 	bl	80043ec <free>
 8003d3c:	f7fe fd3e 	bl	80027bc <xTaskResumeAll>
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <vListInitialise>:
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f103 0208 	add.w	r2, r3, #8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	609a      	str	r2, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f103 0208 	add.w	r2, r3, #8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f103 0208 	add.w	r2, r3, #8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <vListInitialiseItem>:
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	611a      	str	r2, [r3, #16]
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <vListInsert>:
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d103      	bne.n	8003dbe <vListInsert+0x20>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e00c      	b.n	8003dd8 <vListInsert+0x3a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e002      	b.n	8003dcc <vListInsert+0x2e>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d2f6      	bcs.n	8003dc6 <vListInsert+0x28>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	609a      	str	r2, [r3, #8]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <uxListRemove>:
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6892      	ldr	r2, [r2, #8]
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6852      	ldr	r2, [r2, #4]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d103      	bne.n	8003e42 <uxListRemove+0x34>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	611a      	str	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	1e5a      	subs	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <pxPortInitialiseStack>:
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3b04      	subs	r3, #4
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3b04      	subs	r3, #4
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f023 0201 	bic.w	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3b04      	subs	r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <pxPortInitialiseStack+0x54>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3b14      	subs	r3, #20
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3b20      	subs	r3, #32
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	08003eb9 	.word	0x08003eb9

08003eb8 <prvTaskExitError>:
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]
 8003ec2:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <prvTaskExitError+0x54>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d00a      	beq.n	8003ee2 <prvTaskExitError+0x2a>
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <prvTaskExitError+0x28>
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0fc      	beq.n	8003ef8 <prvTaskExitError+0x40>
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000010 	.word	0x20000010

08003f10 <SVC_Handler>:
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <pxCurrentTCBConst2>)
 8003f12:	6819      	ldr	r1, [r3, #0]
 8003f14:	6808      	ldr	r0, [r1, #0]
 8003f16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f1a:	f380 8809 	msr	PSP, r0
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f380 8811 	msr	BASEPRI, r0
 8003f2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003f2e:	4770      	bx	lr

08003f30 <pxCurrentTCBConst2>:
 8003f30:	20000098 	.word	0x20000098
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop

08003f38 <prvPortStartFirstTask>:
 8003f38:	4806      	ldr	r0, [pc, #24]	; (8003f54 <prvPortStartFirstTask+0x1c>)
 8003f3a:	6800      	ldr	r0, [r0, #0]
 8003f3c:	6800      	ldr	r0, [r0, #0]
 8003f3e:	f380 8808 	msr	MSP, r0
 8003f42:	b662      	cpsie	i
 8003f44:	b661      	cpsie	f
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	df00      	svc	0
 8003f50:	bf00      	nop
 8003f52:	0000      	.short	0x0000
 8003f54:	e000ed08 	.word	0xe000ed08
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop

08003f5c <xPortStartScheduler>:
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4b32      	ldr	r3, [pc, #200]	; (800402c <xPortStartScheduler+0xd0>)
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	607b      	str	r3, [r7, #4]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	22ff      	movs	r2, #255	; 0xff
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	70fb      	strb	r3, [r7, #3]
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <xPortStartScheduler+0xd4>)
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	4b2a      	ldr	r3, [pc, #168]	; (8004034 <xPortStartScheduler+0xd8>)
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e009      	b.n	8003fa6 <xPortStartScheduler+0x4a>
 8003f92:	4b28      	ldr	r3, [pc, #160]	; (8004034 <xPortStartScheduler+0xd8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	4a26      	ldr	r2, [pc, #152]	; (8004034 <xPortStartScheduler+0xd8>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	70fb      	strb	r3, [r7, #3]
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fae:	2b80      	cmp	r3, #128	; 0x80
 8003fb0:	d0ef      	beq.n	8003f92 <xPortStartScheduler+0x36>
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <xPortStartScheduler+0xd8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1c3 0307 	rsb	r3, r3, #7
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d00a      	beq.n	8003fd4 <xPortStartScheduler+0x78>
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	bf00      	nop
 8003fd2:	e7fe      	b.n	8003fd2 <xPortStartScheduler+0x76>
 8003fd4:	4b17      	ldr	r3, [pc, #92]	; (8004034 <xPortStartScheduler+0xd8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	021b      	lsls	r3, r3, #8
 8003fda:	4a16      	ldr	r2, [pc, #88]	; (8004034 <xPortStartScheduler+0xd8>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <xPortStartScheduler+0xd8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fe6:	4a13      	ldr	r2, [pc, #76]	; (8004034 <xPortStartScheduler+0xd8>)
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <xPortStartScheduler+0xdc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <xPortStartScheduler+0xdc>)
 8003ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <xPortStartScheduler+0xdc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <xPortStartScheduler+0xdc>)
 8004004:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	f000 f981 	bl	8004310 <vPortSetupTimerInterrupt>
 800400e:	4b0b      	ldr	r3, [pc, #44]	; (800403c <xPortStartScheduler+0xe0>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f7ff ff90 	bl	8003f38 <prvPortStartFirstTask>
 8004018:	f7fe fe4c 	bl	8002cb4 <vTaskSwitchContext>
 800401c:	f7ff ff4c 	bl	8003eb8 <prvTaskExitError>
 8004020:	2300      	movs	r3, #0
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	e000e400 	.word	0xe000e400
 8004030:	200001e4 	.word	0x200001e4
 8004034:	200001e8 	.word	0x200001e8
 8004038:	e000ed20 	.word	0xe000ed20
 800403c:	20000010 	.word	0x20000010

08004040 <vPortEnterCritical>:
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	607b      	str	r3, [r7, #4]
 8004058:	bf00      	nop
 800405a:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <vPortEnterCritical+0x58>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3301      	adds	r3, #1
 8004060:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <vPortEnterCritical+0x58>)
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <vPortEnterCritical+0x58>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d10f      	bne.n	800408c <vPortEnterCritical+0x4c>
 800406c:	4b0b      	ldr	r3, [pc, #44]	; (800409c <vPortEnterCritical+0x5c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <vPortEnterCritical+0x4c>
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <vPortEnterCritical+0x4a>
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000010 	.word	0x20000010
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <vPortExitCritical>:
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <vPortExitCritical+0x4c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <vPortExitCritical+0x24>
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	bf00      	nop
 80040c2:	e7fe      	b.n	80040c2 <vPortExitCritical+0x22>
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <vPortExitCritical+0x4c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	4a08      	ldr	r2, [pc, #32]	; (80040ec <vPortExitCritical+0x4c>)
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <vPortExitCritical+0x4c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <vPortExitCritical+0x42>
 80040d6:	2300      	movs	r3, #0
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	20000010 	.word	0x20000010

080040f0 <PendSV_Handler>:
 80040f0:	f3ef 8009 	mrs	r0, PSP
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <pxCurrentTCBConst>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004100:	6010      	str	r0, [r2, #0]
 8004102:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004106:	f04f 0050 	mov.w	r0, #80	; 0x50
 800410a:	f380 8811 	msr	BASEPRI, r0
 800410e:	f7fe fdd1 	bl	8002cb4 <vTaskSwitchContext>
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8811 	msr	BASEPRI, r0
 800411a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	6808      	ldr	r0, [r1, #0]
 8004122:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004126:	f380 8809 	msr	PSP, r0
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	4770      	bx	lr

08004130 <pxCurrentTCBConst>:
 8004130:	20000098 	.word	0x20000098
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <SysTick_Handler>:
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	bf00      	nop
 8004152:	f7fe fc97 	bl	8002a84 <xTaskIncrementTick>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <SysTick_Handler+0x2c>
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <SysTick_Handler+0x40>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	2300      	movs	r3, #0
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <vPortSuppressTicksAndSleep>:
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <vPortSuppressTicksAndSleep+0x178>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d902      	bls.n	8004194 <vPortSuppressTicksAndSleep+0x18>
 800418e:	4b59      	ldr	r3, [pc, #356]	; (80042f4 <vPortSuppressTicksAndSleep+0x178>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	b672      	cpsid	i
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f7fe ffef 	bl	8003180 <eTaskConfirmSleepModeStatus>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <vPortSuppressTicksAndSleep+0x30>
 80041a8:	b662      	cpsie	i
 80041aa:	e09e      	b.n	80042ea <vPortSuppressTicksAndSleep+0x16e>
 80041ac:	4b52      	ldr	r3, [pc, #328]	; (80042f8 <vPortSuppressTicksAndSleep+0x17c>)
 80041ae:	2206      	movs	r2, #6
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	4b52      	ldr	r3, [pc, #328]	; (80042fc <vPortSuppressTicksAndSleep+0x180>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <vPortSuppressTicksAndSleep+0x48>
 80041be:	4b50      	ldr	r3, [pc, #320]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	4a4d      	ldr	r2, [pc, #308]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4413      	add	r3, r2
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	4b4b      	ldr	r3, [pc, #300]	; (8004304 <vPortSuppressTicksAndSleep+0x188>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d008      	beq.n	80041f4 <vPortSuppressTicksAndSleep+0x78>
 80041e2:	4b48      	ldr	r3, [pc, #288]	; (8004304 <vPortSuppressTicksAndSleep+0x188>)
 80041e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	4b45      	ldr	r3, [pc, #276]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	4b44      	ldr	r3, [pc, #272]	; (8004308 <vPortSuppressTicksAndSleep+0x18c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d904      	bls.n	8004208 <vPortSuppressTicksAndSleep+0x8c>
 80041fe:	4b42      	ldr	r3, [pc, #264]	; (8004308 <vPortSuppressTicksAndSleep+0x18c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	4a40      	ldr	r2, [pc, #256]	; (800430c <vPortSuppressTicksAndSleep+0x190>)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <vPortSuppressTicksAndSleep+0x180>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	4b38      	ldr	r3, [pc, #224]	; (80042f8 <vPortSuppressTicksAndSleep+0x17c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a37      	ldr	r2, [pc, #220]	; (80042f8 <vPortSuppressTicksAndSleep+0x17c>)
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d004      	beq.n	8004234 <vPortSuppressTicksAndSleep+0xb8>
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	bf30      	wfi
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	b662      	cpsie	i
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	b672      	cpsid	i
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	4b2b      	ldr	r3, [pc, #172]	; (80042f8 <vPortSuppressTicksAndSleep+0x17c>)
 800424a:	2206      	movs	r2, #6
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	4b2a      	ldr	r3, [pc, #168]	; (80042f8 <vPortSuppressTicksAndSleep+0x17c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01d      	beq.n	8004296 <vPortSuppressTicksAndSleep+0x11a>
 800425a:	4b29      	ldr	r3, [pc, #164]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b27      	ldr	r3, [pc, #156]	; (80042fc <vPortSuppressTicksAndSleep+0x180>)
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	1acb      	subs	r3, r1, r3
 8004266:	4413      	add	r3, r2
 8004268:	3b01      	subs	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	4b26      	ldr	r3, [pc, #152]	; (8004308 <vPortSuppressTicksAndSleep+0x18c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	d904      	bls.n	8004280 <vPortSuppressTicksAndSleep+0x104>
 8004276:	4b22      	ldr	r3, [pc, #136]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d903      	bls.n	8004288 <vPortSuppressTicksAndSleep+0x10c>
 8004280:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3b01      	subs	r3, #1
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	4a20      	ldr	r2, [pc, #128]	; (800430c <vPortSuppressTicksAndSleep+0x190>)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3b01      	subs	r3, #1
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	e01a      	b.n	80042cc <vPortSuppressTicksAndSleep+0x150>
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <vPortSuppressTicksAndSleep+0x180>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	4b18      	ldr	r3, [pc, #96]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	fb02 f203 	mul.w	r2, r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	4b14      	ldr	r3, [pc, #80]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	3301      	adds	r3, #1
 80042bc:	4a10      	ldr	r2, [pc, #64]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	fb02 f203 	mul.w	r2, r2, r3
 80042c4:	4911      	ldr	r1, [pc, #68]	; (800430c <vPortSuppressTicksAndSleep+0x190>)
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	600b      	str	r3, [r1, #0]
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <vPortSuppressTicksAndSleep+0x180>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <vPortSuppressTicksAndSleep+0x17c>)
 80042d4:	2207      	movs	r2, #7
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <vPortSuppressTicksAndSleep+0x184>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0b      	ldr	r2, [pc, #44]	; (800430c <vPortSuppressTicksAndSleep+0x190>)
 80042de:	3b01      	subs	r3, #1
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	69b8      	ldr	r0, [r7, #24]
 80042e4:	f7fe fb74 	bl	80029d0 <vTaskStepTick>
 80042e8:	b662      	cpsie	i
 80042ea:	bf00      	nop
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200001dc 	.word	0x200001dc
 80042f8:	e000e010 	.word	0xe000e010
 80042fc:	e000e018 	.word	0xe000e018
 8004300:	200001d8 	.word	0x200001d8
 8004304:	e000ed04 	.word	0xe000ed04
 8004308:	200001e0 	.word	0x200001e0
 800430c:	e000e014 	.word	0xe000e014

08004310 <vPortSetupTimerInterrupt>:
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <vPortSetupTimerInterrupt+0x58>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <vPortSetupTimerInterrupt+0x5c>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	099b      	lsrs	r3, r3, #6
 8004320:	4a13      	ldr	r2, [pc, #76]	; (8004370 <vPortSetupTimerInterrupt+0x60>)
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <vPortSetupTimerInterrupt+0x60>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	4a10      	ldr	r2, [pc, #64]	; (8004374 <vPortSetupTimerInterrupt+0x64>)
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <vPortSetupTimerInterrupt+0x68>)
 8004336:	225e      	movs	r2, #94	; 0x5e
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <vPortSetupTimerInterrupt+0x6c>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <vPortSetupTimerInterrupt+0x70>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <vPortSetupTimerInterrupt+0x58>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a08      	ldr	r2, [pc, #32]	; (800436c <vPortSetupTimerInterrupt+0x5c>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <vPortSetupTimerInterrupt+0x74>)
 8004354:	3b01      	subs	r3, #1
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b08      	ldr	r3, [pc, #32]	; (800437c <vPortSetupTimerInterrupt+0x6c>)
 800435a:	2207      	movs	r2, #7
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	bf00      	nop
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20000000 	.word	0x20000000
 800436c:	10624dd3 	.word	0x10624dd3
 8004370:	200001d8 	.word	0x200001d8
 8004374:	200001dc 	.word	0x200001dc
 8004378:	200001e0 	.word	0x200001e0
 800437c:	e000e010 	.word	0xe000e010
 8004380:	e000e018 	.word	0xe000e018
 8004384:	e000e014 	.word	0xe000e014

08004388 <__errno>:
 8004388:	4b01      	ldr	r3, [pc, #4]	; (8004390 <__errno+0x8>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000014 	.word	0x20000014

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	2600      	movs	r6, #0
 8004398:	4d0c      	ldr	r5, [pc, #48]	; (80043cc <__libc_init_array+0x38>)
 800439a:	4c0d      	ldr	r4, [pc, #52]	; (80043d0 <__libc_init_array+0x3c>)
 800439c:	1b64      	subs	r4, r4, r5
 800439e:	10a4      	asrs	r4, r4, #2
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	f000 f904 	bl	80045b0 <_init>
 80043a8:	2600      	movs	r6, #0
 80043aa:	4d0a      	ldr	r5, [pc, #40]	; (80043d4 <__libc_init_array+0x40>)
 80043ac:	4c0a      	ldr	r4, [pc, #40]	; (80043d8 <__libc_init_array+0x44>)
 80043ae:	1b64      	subs	r4, r4, r5
 80043b0:	10a4      	asrs	r4, r4, #2
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	08004610 	.word	0x08004610
 80043d0:	08004610 	.word	0x08004610
 80043d4:	08004610 	.word	0x08004610
 80043d8:	08004614 	.word	0x08004614

080043dc <malloc>:
 80043dc:	4b02      	ldr	r3, [pc, #8]	; (80043e8 <malloc+0xc>)
 80043de:	4601      	mov	r1, r0
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	f000 b86d 	b.w	80044c0 <_malloc_r>
 80043e6:	bf00      	nop
 80043e8:	20000014 	.word	0x20000014

080043ec <free>:
 80043ec:	4b02      	ldr	r3, [pc, #8]	; (80043f8 <free+0xc>)
 80043ee:	4601      	mov	r1, r0
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	f000 b819 	b.w	8004428 <_free_r>
 80043f6:	bf00      	nop
 80043f8:	20000014 	.word	0x20000014

080043fc <memcpy>:
 80043fc:	440a      	add	r2, r1
 80043fe:	4291      	cmp	r1, r2
 8004400:	f100 33ff 	add.w	r3, r0, #4294967295
 8004404:	d100      	bne.n	8004408 <memcpy+0xc>
 8004406:	4770      	bx	lr
 8004408:	b510      	push	{r4, lr}
 800440a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800440e:	4291      	cmp	r1, r2
 8004410:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004414:	d1f9      	bne.n	800440a <memcpy+0xe>
 8004416:	bd10      	pop	{r4, pc}

08004418 <memset>:
 8004418:	4603      	mov	r3, r0
 800441a:	4402      	add	r2, r0
 800441c:	4293      	cmp	r3, r2
 800441e:	d100      	bne.n	8004422 <memset+0xa>
 8004420:	4770      	bx	lr
 8004422:	f803 1b01 	strb.w	r1, [r3], #1
 8004426:	e7f9      	b.n	800441c <memset+0x4>

08004428 <_free_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4605      	mov	r5, r0
 800442c:	2900      	cmp	r1, #0
 800442e:	d043      	beq.n	80044b8 <_free_r+0x90>
 8004430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004434:	1f0c      	subs	r4, r1, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	bfb8      	it	lt
 800443a:	18e4      	addlt	r4, r4, r3
 800443c:	f000 f8aa 	bl	8004594 <__malloc_lock>
 8004440:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <_free_r+0x94>)
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	4610      	mov	r0, r2
 8004446:	b933      	cbnz	r3, 8004456 <_free_r+0x2e>
 8004448:	6063      	str	r3, [r4, #4]
 800444a:	6014      	str	r4, [r2, #0]
 800444c:	4628      	mov	r0, r5
 800444e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004452:	f000 b8a5 	b.w	80045a0 <__malloc_unlock>
 8004456:	42a3      	cmp	r3, r4
 8004458:	d90a      	bls.n	8004470 <_free_r+0x48>
 800445a:	6821      	ldr	r1, [r4, #0]
 800445c:	1862      	adds	r2, r4, r1
 800445e:	4293      	cmp	r3, r2
 8004460:	bf01      	itttt	eq
 8004462:	681a      	ldreq	r2, [r3, #0]
 8004464:	685b      	ldreq	r3, [r3, #4]
 8004466:	1852      	addeq	r2, r2, r1
 8004468:	6022      	streq	r2, [r4, #0]
 800446a:	6063      	str	r3, [r4, #4]
 800446c:	6004      	str	r4, [r0, #0]
 800446e:	e7ed      	b.n	800444c <_free_r+0x24>
 8004470:	461a      	mov	r2, r3
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	b10b      	cbz	r3, 800447a <_free_r+0x52>
 8004476:	42a3      	cmp	r3, r4
 8004478:	d9fa      	bls.n	8004470 <_free_r+0x48>
 800447a:	6811      	ldr	r1, [r2, #0]
 800447c:	1850      	adds	r0, r2, r1
 800447e:	42a0      	cmp	r0, r4
 8004480:	d10b      	bne.n	800449a <_free_r+0x72>
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	4401      	add	r1, r0
 8004486:	1850      	adds	r0, r2, r1
 8004488:	4283      	cmp	r3, r0
 800448a:	6011      	str	r1, [r2, #0]
 800448c:	d1de      	bne.n	800444c <_free_r+0x24>
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4401      	add	r1, r0
 8004494:	6011      	str	r1, [r2, #0]
 8004496:	6053      	str	r3, [r2, #4]
 8004498:	e7d8      	b.n	800444c <_free_r+0x24>
 800449a:	d902      	bls.n	80044a2 <_free_r+0x7a>
 800449c:	230c      	movs	r3, #12
 800449e:	602b      	str	r3, [r5, #0]
 80044a0:	e7d4      	b.n	800444c <_free_r+0x24>
 80044a2:	6820      	ldr	r0, [r4, #0]
 80044a4:	1821      	adds	r1, r4, r0
 80044a6:	428b      	cmp	r3, r1
 80044a8:	bf01      	itttt	eq
 80044aa:	6819      	ldreq	r1, [r3, #0]
 80044ac:	685b      	ldreq	r3, [r3, #4]
 80044ae:	1809      	addeq	r1, r1, r0
 80044b0:	6021      	streq	r1, [r4, #0]
 80044b2:	6063      	str	r3, [r4, #4]
 80044b4:	6054      	str	r4, [r2, #4]
 80044b6:	e7c9      	b.n	800444c <_free_r+0x24>
 80044b8:	bd38      	pop	{r3, r4, r5, pc}
 80044ba:	bf00      	nop
 80044bc:	200001ec 	.word	0x200001ec

080044c0 <_malloc_r>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	1ccd      	adds	r5, r1, #3
 80044c4:	f025 0503 	bic.w	r5, r5, #3
 80044c8:	3508      	adds	r5, #8
 80044ca:	2d0c      	cmp	r5, #12
 80044cc:	bf38      	it	cc
 80044ce:	250c      	movcc	r5, #12
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	4606      	mov	r6, r0
 80044d4:	db01      	blt.n	80044da <_malloc_r+0x1a>
 80044d6:	42a9      	cmp	r1, r5
 80044d8:	d903      	bls.n	80044e2 <_malloc_r+0x22>
 80044da:	230c      	movs	r3, #12
 80044dc:	6033      	str	r3, [r6, #0]
 80044de:	2000      	movs	r0, #0
 80044e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044e2:	f000 f857 	bl	8004594 <__malloc_lock>
 80044e6:	4921      	ldr	r1, [pc, #132]	; (800456c <_malloc_r+0xac>)
 80044e8:	680a      	ldr	r2, [r1, #0]
 80044ea:	4614      	mov	r4, r2
 80044ec:	b99c      	cbnz	r4, 8004516 <_malloc_r+0x56>
 80044ee:	4f20      	ldr	r7, [pc, #128]	; (8004570 <_malloc_r+0xb0>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b923      	cbnz	r3, 80044fe <_malloc_r+0x3e>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 f83c 	bl	8004574 <_sbrk_r>
 80044fc:	6038      	str	r0, [r7, #0]
 80044fe:	4629      	mov	r1, r5
 8004500:	4630      	mov	r0, r6
 8004502:	f000 f837 	bl	8004574 <_sbrk_r>
 8004506:	1c43      	adds	r3, r0, #1
 8004508:	d123      	bne.n	8004552 <_malloc_r+0x92>
 800450a:	230c      	movs	r3, #12
 800450c:	4630      	mov	r0, r6
 800450e:	6033      	str	r3, [r6, #0]
 8004510:	f000 f846 	bl	80045a0 <__malloc_unlock>
 8004514:	e7e3      	b.n	80044de <_malloc_r+0x1e>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	1b5b      	subs	r3, r3, r5
 800451a:	d417      	bmi.n	800454c <_malloc_r+0x8c>
 800451c:	2b0b      	cmp	r3, #11
 800451e:	d903      	bls.n	8004528 <_malloc_r+0x68>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	441c      	add	r4, r3
 8004524:	6025      	str	r5, [r4, #0]
 8004526:	e004      	b.n	8004532 <_malloc_r+0x72>
 8004528:	6863      	ldr	r3, [r4, #4]
 800452a:	42a2      	cmp	r2, r4
 800452c:	bf0c      	ite	eq
 800452e:	600b      	streq	r3, [r1, #0]
 8004530:	6053      	strne	r3, [r2, #4]
 8004532:	4630      	mov	r0, r6
 8004534:	f000 f834 	bl	80045a0 <__malloc_unlock>
 8004538:	f104 000b 	add.w	r0, r4, #11
 800453c:	1d23      	adds	r3, r4, #4
 800453e:	f020 0007 	bic.w	r0, r0, #7
 8004542:	1ac2      	subs	r2, r0, r3
 8004544:	d0cc      	beq.n	80044e0 <_malloc_r+0x20>
 8004546:	1a1b      	subs	r3, r3, r0
 8004548:	50a3      	str	r3, [r4, r2]
 800454a:	e7c9      	b.n	80044e0 <_malloc_r+0x20>
 800454c:	4622      	mov	r2, r4
 800454e:	6864      	ldr	r4, [r4, #4]
 8004550:	e7cc      	b.n	80044ec <_malloc_r+0x2c>
 8004552:	1cc4      	adds	r4, r0, #3
 8004554:	f024 0403 	bic.w	r4, r4, #3
 8004558:	42a0      	cmp	r0, r4
 800455a:	d0e3      	beq.n	8004524 <_malloc_r+0x64>
 800455c:	1a21      	subs	r1, r4, r0
 800455e:	4630      	mov	r0, r6
 8004560:	f000 f808 	bl	8004574 <_sbrk_r>
 8004564:	3001      	adds	r0, #1
 8004566:	d1dd      	bne.n	8004524 <_malloc_r+0x64>
 8004568:	e7cf      	b.n	800450a <_malloc_r+0x4a>
 800456a:	bf00      	nop
 800456c:	200001ec 	.word	0x200001ec
 8004570:	200001f0 	.word	0x200001f0

08004574 <_sbrk_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	2300      	movs	r3, #0
 8004578:	4d05      	ldr	r5, [pc, #20]	; (8004590 <_sbrk_r+0x1c>)
 800457a:	4604      	mov	r4, r0
 800457c:	4608      	mov	r0, r1
 800457e:	602b      	str	r3, [r5, #0]
 8004580:	f7fb ffda 	bl	8000538 <_sbrk>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <_sbrk_r+0x1a>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	b103      	cbz	r3, 800458e <_sbrk_r+0x1a>
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	20000288 	.word	0x20000288

08004594 <__malloc_lock>:
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <__malloc_lock+0x8>)
 8004596:	f000 b809 	b.w	80045ac <__retarget_lock_acquire_recursive>
 800459a:	bf00      	nop
 800459c:	20000290 	.word	0x20000290

080045a0 <__malloc_unlock>:
 80045a0:	4801      	ldr	r0, [pc, #4]	; (80045a8 <__malloc_unlock+0x8>)
 80045a2:	f000 b804 	b.w	80045ae <__retarget_lock_release_recursive>
 80045a6:	bf00      	nop
 80045a8:	20000290 	.word	0x20000290

080045ac <__retarget_lock_acquire_recursive>:
 80045ac:	4770      	bx	lr

080045ae <__retarget_lock_release_recursive>:
 80045ae:	4770      	bx	lr

080045b0 <_init>:
 80045b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b2:	bf00      	nop
 80045b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b6:	bc08      	pop	{r3}
 80045b8:	469e      	mov	lr, r3
 80045ba:	4770      	bx	lr

080045bc <_fini>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	bf00      	nop
 80045c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c2:	bc08      	pop	{r3}
 80045c4:	469e      	mov	lr, r3
 80045c6:	4770      	bx	lr
