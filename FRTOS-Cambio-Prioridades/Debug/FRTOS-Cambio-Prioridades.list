
FRTOS-Cambio-Prioridades.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003e5c  08003e5c  00013e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb8  08003eb8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb8  08003eb8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb8  08003eb8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000078  08003f38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003f38  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001114e  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027cc  00000000  00000000  000311ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000339c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00034848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190a3  00000000  00000000  000355a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f453  00000000  00000000  0004e64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901c4  00000000  00000000  0005da9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edc62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da4  00000000  00000000  000edcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003e44 	.word	0x08003e44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003e44 	.word	0x08003e44

08000150 <Adc>:
/* USER CODE BEGIN 0 */

TaskHandle_t xTarea_Config_Handle = NULL, xTarea_ADC_Handle=NULL;
int tarea = 0;

static void Adc(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	while (1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000158:	2201      	movs	r2, #1
 800015a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015e:	4816      	ldr	r0, [pc, #88]	; (80001b8 <Adc+0x68>)
 8000160:	f000 fd14 	bl	8000b8c <HAL_GPIO_WritePin>
		HAL_Delay(80);
 8000164:	2050      	movs	r0, #80	; 0x50
 8000166:	f000 fa89 	bl	800067c <HAL_Delay>
		// This delay marks the conversion rate
		//vTaskDelay(100/portTICK_PERIOD_MS);
		if(tarea == 1){
 800016a:	4b14      	ldr	r3, [pc, #80]	; (80001bc <Adc+0x6c>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	2b01      	cmp	r3, #1
 8000170:	d106      	bne.n	8000180 <Adc+0x30>
			vTaskPrioritySet(xTarea_Config_Handle, 2);
 8000172:	4b13      	ldr	r3, [pc, #76]	; (80001c0 <Adc+0x70>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2102      	movs	r1, #2
 8000178:	4618      	mov	r0, r3
 800017a:	f001 fcff 	bl	8001b7c <vTaskPrioritySet>
 800017e:	e7eb      	b.n	8000158 <Adc+0x8>
		}
		else if(tarea == 2){
 8000180:	4b0e      	ldr	r3, [pc, #56]	; (80001bc <Adc+0x6c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b02      	cmp	r3, #2
 8000186:	d106      	bne.n	8000196 <Adc+0x46>
			vTaskPrioritySet(xTarea_ADC_Handle, 2);
 8000188:	4b0e      	ldr	r3, [pc, #56]	; (80001c4 <Adc+0x74>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2102      	movs	r1, #2
 800018e:	4618      	mov	r0, r3
 8000190:	f001 fcf4 	bl	8001b7c <vTaskPrioritySet>
 8000194:	e7e0      	b.n	8000158 <Adc+0x8>
		}
		else if(tarea == 1){
 8000196:	4b09      	ldr	r3, [pc, #36]	; (80001bc <Adc+0x6c>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	2b01      	cmp	r3, #1
 800019c:	d1dc      	bne.n	8000158 <Adc+0x8>
			vTaskPrioritySet(xTarea_Config_Handle, 3);
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <Adc+0x70>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	2103      	movs	r1, #3
 80001a4:	4618      	mov	r0, r3
 80001a6:	f001 fce9 	bl	8001b7c <vTaskPrioritySet>
			vTaskPrioritySet(xTarea_Config_Handle, 3);
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <Adc+0x70>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	2103      	movs	r1, #3
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 fce3 	bl	8001b7c <vTaskPrioritySet>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001b6:	e7cf      	b.n	8000158 <Adc+0x8>
 80001b8:	40011000 	.word	0x40011000
 80001bc:	2000009c 	.word	0x2000009c
 80001c0:	20000094 	.word	0x20000094
 80001c4:	20000098 	.word	0x20000098

080001c8 <Config>:
		}
	}
}

static void Config(void *pvParameters){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	while (1){
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	481c      	ldr	r0, [pc, #112]	; (8000248 <Config+0x80>)
 80001d8:	f000 fcd8 	bl	8000b8c <HAL_GPIO_WritePin>
			HAL_Delay(80);
 80001dc:	2050      	movs	r0, #80	; 0x50
 80001de:	f000 fa4d 	bl	800067c <HAL_Delay>
			if(tarea == 1){
 80001e2:	4b1a      	ldr	r3, [pc, #104]	; (800024c <Config+0x84>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d10c      	bne.n	8000204 <Config+0x3c>
				vTaskPrioritySet(xTarea_Config_Handle, 2);
 80001ea:	4b19      	ldr	r3, [pc, #100]	; (8000250 <Config+0x88>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2102      	movs	r1, #2
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fcc3 	bl	8001b7c <vTaskPrioritySet>
				vTaskPrioritySet(xTarea_ADC_Handle, 3);
 80001f6:	4b17      	ldr	r3, [pc, #92]	; (8000254 <Config+0x8c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2103      	movs	r1, #3
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 fcbd 	bl	8001b7c <vTaskPrioritySet>
 8000202:	e7e5      	b.n	80001d0 <Config+0x8>
			}
			else if(tarea == 2){
 8000204:	4b11      	ldr	r3, [pc, #68]	; (800024c <Config+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b02      	cmp	r3, #2
 800020a:	d10c      	bne.n	8000226 <Config+0x5e>
				vTaskPrioritySet(xTarea_Config_Handle, 3);
 800020c:	4b10      	ldr	r3, [pc, #64]	; (8000250 <Config+0x88>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2103      	movs	r1, #3
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fcb2 	bl	8001b7c <vTaskPrioritySet>
				vTaskPrioritySet(xTarea_ADC_Handle, 2);
 8000218:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <Config+0x8c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fcac 	bl	8001b7c <vTaskPrioritySet>
 8000224:	e7d4      	b.n	80001d0 <Config+0x8>
			}
			else if(tarea == 0){
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <Config+0x84>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d1d0      	bne.n	80001d0 <Config+0x8>
				vTaskPrioritySet(xTarea_Config_Handle, 3);
 800022e:	4b08      	ldr	r3, [pc, #32]	; (8000250 <Config+0x88>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2103      	movs	r1, #3
 8000234:	4618      	mov	r0, r3
 8000236:	f001 fca1 	bl	8001b7c <vTaskPrioritySet>
				vTaskPrioritySet(xTarea_ADC_Handle, 3);
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <Config+0x8c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2103      	movs	r1, #3
 8000240:	4618      	mov	r0, r3
 8000242:	f001 fc9b 	bl	8001b7c <vTaskPrioritySet>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000246:	e7c3      	b.n	80001d0 <Config+0x8>
 8000248:	40011000 	.word	0x40011000
 800024c:	2000009c 	.word	0x2000009c
 8000250:	20000094 	.word	0x20000094
 8000254:	20000098 	.word	0x20000098

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 f9db 	bl	8000618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f825 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f869 	bl	800033c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate(Adc, "ADC task", configMINIMAL_STACK_SIZE, NULL, 3, &xTarea_ADC_Handle);
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <main+0x40>)
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	2303      	movs	r3, #3
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	2300      	movs	r3, #0
 8000274:	2280      	movs	r2, #128	; 0x80
 8000276:	4909      	ldr	r1, [pc, #36]	; (800029c <main+0x44>)
 8000278:	4809      	ldr	r0, [pc, #36]	; (80002a0 <main+0x48>)
 800027a:	f001 fb13 	bl	80018a4 <xTaskCreate>
  xTaskCreate(Config, "Config task", configMINIMAL_STACK_SIZE, NULL, 3, &xTarea_Config_Handle);
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <main+0x4c>)
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	2303      	movs	r3, #3
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2300      	movs	r3, #0
 8000288:	2280      	movs	r2, #128	; 0x80
 800028a:	4907      	ldr	r1, [pc, #28]	; (80002a8 <main+0x50>)
 800028c:	4807      	ldr	r0, [pc, #28]	; (80002ac <main+0x54>)
 800028e:	f001 fb09 	bl	80018a4 <xTaskCreate>

  vTaskStartScheduler();
 8000292:	f001 fd39 	bl	8001d08 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000296:	e7fe      	b.n	8000296 <main+0x3e>
 8000298:	20000098 	.word	0x20000098
 800029c:	08003e5c 	.word	0x08003e5c
 80002a0:	08000151 	.word	0x08000151
 80002a4:	20000094 	.word	0x20000094
 80002a8:	08003e68 	.word	0x08003e68
 80002ac:	080001c9 	.word	0x080001c9

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fcf4 	bl	8003cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d2:	2301      	movs	r3, #1
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	2302      	movs	r3, #2
 80002e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fc5f 	bl	8000bbc <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000304:	f000 f878 	bl	80003f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2102      	movs	r1, #2
 8000322:	4618      	mov	r0, r3
 8000324:	f000 feca 	bl	80010bc <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800032e:	f000 f863 	bl	80003f8 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	; 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <MX_GPIO_Init+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a1d      	ldr	r2, [pc, #116]	; (80003cc <MX_GPIO_Init+0x90>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <MX_GPIO_Init+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a17      	ldr	r2, [pc, #92]	; (80003cc <MX_GPIO_Init+0x90>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <MX_GPIO_Init+0x90>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <MX_GPIO_Init+0x94>)
 80003a0:	f000 fbf4 	bl	8000b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <MX_GPIO_Init+0x94>)
 80003be:	f000 fa61 	bl	8000884 <HAL_GPIO_Init>

}
 80003c2:	bf00      	nop
 80003c4:	3720      	adds	r7, #32
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40011000 	.word	0x40011000

080003d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a04      	ldr	r2, [pc, #16]	; (80003f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d101      	bne.n	80003ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003e6:	f000 f92d 	bl	8000644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40012c00 	.word	0x40012c00

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000400:	e7fe      	b.n	8000400 <Error_Handler+0x8>
	...

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <HAL_MspInit+0x5c>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_MspInit+0x5c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <HAL_MspInit+0x5c>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800042c:	61d3      	str	r3, [r2, #28]
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <HAL_MspInit+0x5c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_MspInit+0x60>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <HAL_MspInit+0x60>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000
 8000464:	40010000 	.word	0x40010000

08000468 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b08c      	sub	sp, #48	; 0x30
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000478:	2200      	movs	r2, #0
 800047a:	6879      	ldr	r1, [r7, #4]
 800047c:	2019      	movs	r0, #25
 800047e:	f000 f9d6 	bl	800082e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000482:	2019      	movs	r0, #25
 8000484:	f000 f9ef 	bl	8000866 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <HAL_InitTick+0x9c>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a1d      	ldr	r2, [pc, #116]	; (8000504 <HAL_InitTick+0x9c>)
 800048e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <HAL_InitTick+0x9c>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800049c:	60fb      	str	r3, [r7, #12]
 800049e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004a0:	f107 0210 	add.w	r2, r7, #16
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	4611      	mov	r1, r2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 ff62 	bl	8001374 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004b0:	f000 ff4c 	bl	800134c <HAL_RCC_GetPCLK2Freq>
 80004b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004b8:	4a13      	ldr	r2, [pc, #76]	; (8000508 <HAL_InitTick+0xa0>)
 80004ba:	fba2 2303 	umull	r2, r3, r2, r3
 80004be:	0c9b      	lsrs	r3, r3, #18
 80004c0:	3b01      	subs	r3, #1
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <HAL_InitTick+0xa4>)
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <HAL_InitTick+0xa8>)
 80004c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <HAL_InitTick+0xa4>)
 80004cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_InitTick+0xa4>)
 80004d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_InitTick+0xa4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <HAL_InitTick+0xa4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004e4:	4809      	ldr	r0, [pc, #36]	; (800050c <HAL_InitTick+0xa4>)
 80004e6:	f000 ff93 	bl	8001410 <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d104      	bne.n	80004fa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <HAL_InitTick+0xa4>)
 80004f2:	f000 ffe5 	bl	80014c0 <HAL_TIM_Base_Start_IT>
 80004f6:	4603      	mov	r3, r0
 80004f8:	e000      	b.n	80004fc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004fa:	2301      	movs	r3, #1
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3730      	adds	r7, #48	; 0x30
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40021000 	.word	0x40021000
 8000508:	431bde83 	.word	0x431bde83
 800050c:	20000200 	.word	0x20000200
 8000510:	40012c00 	.word	0x40012c00

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <NMI_Handler+0x4>

0800051a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler+0x4>

08000526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <UsageFault_Handler+0x4>

08000532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
	...

08000540 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <TIM1_UP_IRQHandler+0x10>)
 8000546:	f001 f80d 	bl	8001564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000200 	.word	0x20000200

08000554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <_sbrk+0x5c>)
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <_sbrk+0x60>)
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d102      	bne.n	8000576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <_sbrk+0x64>)
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <_sbrk+0x68>)
 8000574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	429a      	cmp	r2, r3
 8000582:	d207      	bcs.n	8000594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000584:	f003 fb4a 	bl	8003c1c <__errno>
 8000588:	4603      	mov	r3, r0
 800058a:	220c      	movs	r2, #12
 800058c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	e009      	b.n	80005a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <_sbrk+0x64>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <_sbrk+0x64>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <_sbrk+0x64>)
 80005a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20005000 	.word	0x20005000
 80005b4:	00000400 	.word	0x00000400
 80005b8:	200000a0 	.word	0x200000a0
 80005bc:	200002a0 	.word	0x200002a0

080005c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005cc:	f7ff fff8 	bl	80005c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005d2:	490c      	ldr	r1, [pc, #48]	; (8000604 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a09      	ldr	r2, [pc, #36]	; (800060c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005e8:	4c09      	ldr	r4, [pc, #36]	; (8000610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005f6:	f003 fb17 	bl	8003c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fa:	f7ff fe2d 	bl	8000258 <main>
  bx lr
 80005fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000608:	08003ec0 	.word	0x08003ec0
  ldr r2, =_sbss
 800060c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000610:	2000029c 	.word	0x2000029c

08000614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_2_IRQHandler>
	...

08000618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <HAL_Init+0x28>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_Init+0x28>)
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f8f5 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ff1a 	bl	8000468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f7ff fee6 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40022000 	.word	0x40022000

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x20>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000008 	.word	0x20000008
 8000664:	20000248 	.word	0x20000248

08000668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000248 	.word	0x20000248

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff fff0 	bl	8000668 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_Delay+0x44>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffe0 	bl	8000668 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <__NVIC_EnableIRQ+0x34>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff4f 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff64 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ffb2 	bl	80007b4 <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff81 	bl	8000760 <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff57 	bl	8000728 <__NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b08b      	sub	sp, #44	; 0x2c
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000896:	e169      	b.n	8000b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000898:	2201      	movs	r2, #1
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	f040 8158 	bne.w	8000b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	4a9a      	ldr	r2, [pc, #616]	; (8000b24 <HAL_GPIO_Init+0x2a0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d05e      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008c0:	4a98      	ldr	r2, [pc, #608]	; (8000b24 <HAL_GPIO_Init+0x2a0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d875      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008c6:	4a98      	ldr	r2, [pc, #608]	; (8000b28 <HAL_GPIO_Init+0x2a4>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d058      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008cc:	4a96      	ldr	r2, [pc, #600]	; (8000b28 <HAL_GPIO_Init+0x2a4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d86f      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008d2:	4a96      	ldr	r2, [pc, #600]	; (8000b2c <HAL_GPIO_Init+0x2a8>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d052      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008d8:	4a94      	ldr	r2, [pc, #592]	; (8000b2c <HAL_GPIO_Init+0x2a8>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d869      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008de:	4a94      	ldr	r2, [pc, #592]	; (8000b30 <HAL_GPIO_Init+0x2ac>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d04c      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008e4:	4a92      	ldr	r2, [pc, #584]	; (8000b30 <HAL_GPIO_Init+0x2ac>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d863      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008ea:	4a92      	ldr	r2, [pc, #584]	; (8000b34 <HAL_GPIO_Init+0x2b0>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d046      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008f0:	4a90      	ldr	r2, [pc, #576]	; (8000b34 <HAL_GPIO_Init+0x2b0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d85d      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d82a      	bhi.n	8000950 <HAL_GPIO_Init+0xcc>
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d859      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008fe:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <HAL_GPIO_Init+0x80>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	0800097f 	.word	0x0800097f
 8000908:	08000959 	.word	0x08000959
 800090c:	0800096b 	.word	0x0800096b
 8000910:	080009ad 	.word	0x080009ad
 8000914:	080009b3 	.word	0x080009b3
 8000918:	080009b3 	.word	0x080009b3
 800091c:	080009b3 	.word	0x080009b3
 8000920:	080009b3 	.word	0x080009b3
 8000924:	080009b3 	.word	0x080009b3
 8000928:	080009b3 	.word	0x080009b3
 800092c:	080009b3 	.word	0x080009b3
 8000930:	080009b3 	.word	0x080009b3
 8000934:	080009b3 	.word	0x080009b3
 8000938:	080009b3 	.word	0x080009b3
 800093c:	080009b3 	.word	0x080009b3
 8000940:	080009b3 	.word	0x080009b3
 8000944:	080009b3 	.word	0x080009b3
 8000948:	08000961 	.word	0x08000961
 800094c:	08000975 	.word	0x08000975
 8000950:	4a79      	ldr	r2, [pc, #484]	; (8000b38 <HAL_GPIO_Init+0x2b4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d013      	beq.n	800097e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000956:	e02c      	b.n	80009b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	623b      	str	r3, [r7, #32]
          break;
 800095e:	e029      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	3304      	adds	r3, #4
 8000966:	623b      	str	r3, [r7, #32]
          break;
 8000968:	e024      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	3308      	adds	r3, #8
 8000970:	623b      	str	r3, [r7, #32]
          break;
 8000972:	e01f      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	330c      	adds	r3, #12
 800097a:	623b      	str	r3, [r7, #32]
          break;
 800097c:	e01a      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d102      	bne.n	800098c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000986:	2304      	movs	r3, #4
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e013      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d105      	bne.n	80009a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000994:	2308      	movs	r3, #8
 8000996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	611a      	str	r2, [r3, #16]
          break;
 800099e:	e009      	b.n	80009b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a0:	2308      	movs	r3, #8
 80009a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	615a      	str	r2, [r3, #20]
          break;
 80009aa:	e003      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
          break;
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          break;
 80009b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d801      	bhi.n	80009be <HAL_GPIO_Init+0x13a>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	e001      	b.n	80009c2 <HAL_GPIO_Init+0x13e>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3304      	adds	r3, #4
 80009c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	2bff      	cmp	r3, #255	; 0xff
 80009c8:	d802      	bhi.n	80009d0 <HAL_GPIO_Init+0x14c>
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0x152>
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	3b08      	subs	r3, #8
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	210f      	movs	r1, #15
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	fa01 f303 	lsl.w	r3, r1, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	401a      	ands	r2, r3
 80009e8:	6a39      	ldr	r1, [r7, #32]
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	431a      	orrs	r2, r3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 80b1 	beq.w	8000b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a04:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <HAL_GPIO_Init+0x2b8>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a4c      	ldr	r2, [pc, #304]	; (8000b3c <HAL_GPIO_Init+0x2b8>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b4a      	ldr	r3, [pc, #296]	; (8000b3c <HAL_GPIO_Init+0x2b8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a1c:	4a48      	ldr	r2, [pc, #288]	; (8000b40 <HAL_GPIO_Init+0x2bc>)
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	220f      	movs	r2, #15
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a40      	ldr	r2, [pc, #256]	; (8000b44 <HAL_GPIO_Init+0x2c0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d013      	beq.n	8000a70 <HAL_GPIO_Init+0x1ec>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a3f      	ldr	r2, [pc, #252]	; (8000b48 <HAL_GPIO_Init+0x2c4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d00d      	beq.n	8000a6c <HAL_GPIO_Init+0x1e8>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a3e      	ldr	r2, [pc, #248]	; (8000b4c <HAL_GPIO_Init+0x2c8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d007      	beq.n	8000a68 <HAL_GPIO_Init+0x1e4>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a3d      	ldr	r2, [pc, #244]	; (8000b50 <HAL_GPIO_Init+0x2cc>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d101      	bne.n	8000a64 <HAL_GPIO_Init+0x1e0>
 8000a60:	2303      	movs	r3, #3
 8000a62:	e006      	b.n	8000a72 <HAL_GPIO_Init+0x1ee>
 8000a64:	2304      	movs	r3, #4
 8000a66:	e004      	b.n	8000a72 <HAL_GPIO_Init+0x1ee>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e002      	b.n	8000a72 <HAL_GPIO_Init+0x1ee>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e000      	b.n	8000a72 <HAL_GPIO_Init+0x1ee>
 8000a70:	2300      	movs	r3, #0
 8000a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a74:	f002 0203 	and.w	r2, r2, #3
 8000a78:	0092      	lsls	r2, r2, #2
 8000a7a:	4093      	lsls	r3, r2
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a82:	492f      	ldr	r1, [pc, #188]	; (8000b40 <HAL_GPIO_Init+0x2bc>)
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	3302      	adds	r3, #2
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	492c      	ldr	r1, [pc, #176]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	608b      	str	r3, [r1, #8]
 8000aa8:	e006      	b.n	8000ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	4928      	ldr	r1, [pc, #160]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	68da      	ldr	r2, [r3, #12]
 8000ac8:	4922      	ldr	r1, [pc, #136]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60cb      	str	r3, [r1, #12]
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000ad4:	68da      	ldr	r2, [r3, #12]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	491e      	ldr	r1, [pc, #120]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	4918      	ldr	r1, [pc, #96]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	604b      	str	r3, [r1, #4]
 8000af8:	e006      	b.n	8000b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	4914      	ldr	r1, [pc, #80]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d021      	beq.n	8000b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	490e      	ldr	r1, [pc, #56]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	600b      	str	r3, [r1, #0]
 8000b20:	e021      	b.n	8000b66 <HAL_GPIO_Init+0x2e2>
 8000b22:	bf00      	nop
 8000b24:	10320000 	.word	0x10320000
 8000b28:	10310000 	.word	0x10310000
 8000b2c:	10220000 	.word	0x10220000
 8000b30:	10210000 	.word	0x10210000
 8000b34:	10120000 	.word	0x10120000
 8000b38:	10110000 	.word	0x10110000
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	40011400 	.word	0x40011400
 8000b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_GPIO_Init+0x304>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	4909      	ldr	r1, [pc, #36]	; (8000b88 <HAL_GPIO_Init+0x304>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	3301      	adds	r3, #1
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	fa22 f303 	lsr.w	r3, r2, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f47f ae8e 	bne.w	8000898 <HAL_GPIO_Init+0x14>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	372c      	adds	r7, #44	; 0x2c
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b9c:	787b      	ldrb	r3, [r7, #1]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ba8:	e003      	b.n	8000bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	041a      	lsls	r2, r3, #16
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	611a      	str	r2, [r3, #16]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d101      	bne.n	8000bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e26c      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 8087 	beq.w	8000cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bdc:	4b92      	ldr	r3, [pc, #584]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 030c 	and.w	r3, r3, #12
 8000be4:	2b04      	cmp	r3, #4
 8000be6:	d00c      	beq.n	8000c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be8:	4b8f      	ldr	r3, [pc, #572]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d112      	bne.n	8000c1a <HAL_RCC_OscConfig+0x5e>
 8000bf4:	4b8c      	ldr	r3, [pc, #560]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c00:	d10b      	bne.n	8000c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c02:	4b89      	ldr	r3, [pc, #548]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d06c      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x12c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d168      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e246      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c22:	d106      	bne.n	8000c32 <HAL_RCC_OscConfig+0x76>
 8000c24:	4b80      	ldr	r3, [pc, #512]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a7f      	ldr	r2, [pc, #508]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e02e      	b.n	8000c90 <HAL_RCC_OscConfig+0xd4>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10c      	bne.n	8000c54 <HAL_RCC_OscConfig+0x98>
 8000c3a:	4b7b      	ldr	r3, [pc, #492]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a7a      	ldr	r2, [pc, #488]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	4b78      	ldr	r3, [pc, #480]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a77      	ldr	r2, [pc, #476]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e01d      	b.n	8000c90 <HAL_RCC_OscConfig+0xd4>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c5c:	d10c      	bne.n	8000c78 <HAL_RCC_OscConfig+0xbc>
 8000c5e:	4b72      	ldr	r3, [pc, #456]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a71      	ldr	r2, [pc, #452]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c68:	6013      	str	r3, [r2, #0]
 8000c6a:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6e      	ldr	r2, [pc, #440]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e00b      	b.n	8000c90 <HAL_RCC_OscConfig+0xd4>
 8000c78:	4b6b      	ldr	r3, [pc, #428]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a6a      	ldr	r2, [pc, #424]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a67      	ldr	r2, [pc, #412]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d013      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fce6 	bl	8000668 <HAL_GetTick>
 8000c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca0:	f7ff fce2 	bl	8000668 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b64      	cmp	r3, #100	; 0x64
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e1fa      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb2:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f0      	beq.n	8000ca0 <HAL_RCC_OscConfig+0xe4>
 8000cbe:	e014      	b.n	8000cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fcd2 	bl	8000668 <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fcce 	bl	8000668 <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	; 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e1e6      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cda:	4b53      	ldr	r3, [pc, #332]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f0      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x10c>
 8000ce6:	e000      	b.n	8000cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d063      	beq.n	8000dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 030c 	and.w	r3, r3, #12
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 030c 	and.w	r3, r3, #12
 8000d0a:	2b08      	cmp	r3, #8
 8000d0c:	d11c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x18c>
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d116      	bne.n	8000d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d005      	beq.n	8000d32 <HAL_RCC_OscConfig+0x176>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d001      	beq.n	8000d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e1ba      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4939      	ldr	r1, [pc, #228]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d46:	e03a      	b.n	8000dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d020      	beq.n	8000d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d50:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <HAL_RCC_OscConfig+0x270>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d56:	f7ff fc87 	bl	8000668 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fc83 	bl	8000668 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e19b      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d70:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	4927      	ldr	r1, [pc, #156]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	600b      	str	r3, [r1, #0]
 8000d90:	e015      	b.n	8000dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <HAL_RCC_OscConfig+0x270>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fc66 	bl	8000668 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da0:	f7ff fc62 	bl	8000668 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e17a      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0308 	and.w	r3, r3, #8
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d03a      	beq.n	8000e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d019      	beq.n	8000e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd2:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <HAL_RCC_OscConfig+0x274>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fc46 	bl	8000668 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de0:	f7ff fc42 	bl	8000668 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e15a      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f000 fae8 	bl	80013d4 <RCC_Delay>
 8000e04:	e01c      	b.n	8000e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_RCC_OscConfig+0x274>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fc2c 	bl	8000668 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e12:	e00f      	b.n	8000e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fc28 	bl	8000668 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d908      	bls.n	8000e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e140      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	42420000 	.word	0x42420000
 8000e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e34:	4b9e      	ldr	r3, [pc, #632]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1e9      	bne.n	8000e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80a6 	beq.w	8000f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e52:	4b97      	ldr	r3, [pc, #604]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10d      	bne.n	8000e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b94      	ldr	r3, [pc, #592]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	4a93      	ldr	r2, [pc, #588]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	61d3      	str	r3, [r2, #28]
 8000e6a:	4b91      	ldr	r3, [pc, #580]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e76:	2301      	movs	r3, #1
 8000e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7a:	4b8e      	ldr	r3, [pc, #568]	; (80010b4 <HAL_RCC_OscConfig+0x4f8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d118      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e86:	4b8b      	ldr	r3, [pc, #556]	; (80010b4 <HAL_RCC_OscConfig+0x4f8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a8a      	ldr	r2, [pc, #552]	; (80010b4 <HAL_RCC_OscConfig+0x4f8>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e92:	f7ff fbe9 	bl	8000668 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9a:	f7ff fbe5 	bl	8000668 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b64      	cmp	r3, #100	; 0x64
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e0fd      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eac:	4b81      	ldr	r3, [pc, #516]	; (80010b4 <HAL_RCC_OscConfig+0x4f8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d106      	bne.n	8000ece <HAL_RCC_OscConfig+0x312>
 8000ec0:	4b7b      	ldr	r3, [pc, #492]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4a7a      	ldr	r2, [pc, #488]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6213      	str	r3, [r2, #32]
 8000ecc:	e02d      	b.n	8000f2a <HAL_RCC_OscConfig+0x36e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x334>
 8000ed6:	4b76      	ldr	r3, [pc, #472]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4a75      	ldr	r2, [pc, #468]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	f023 0301 	bic.w	r3, r3, #1
 8000ee0:	6213      	str	r3, [r2, #32]
 8000ee2:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	4a72      	ldr	r2, [pc, #456]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	f023 0304 	bic.w	r3, r3, #4
 8000eec:	6213      	str	r3, [r2, #32]
 8000eee:	e01c      	b.n	8000f2a <HAL_RCC_OscConfig+0x36e>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d10c      	bne.n	8000f12 <HAL_RCC_OscConfig+0x356>
 8000ef8:	4b6d      	ldr	r3, [pc, #436]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	4a6c      	ldr	r2, [pc, #432]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6213      	str	r3, [r2, #32]
 8000f04:	4b6a      	ldr	r3, [pc, #424]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	4a69      	ldr	r2, [pc, #420]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6213      	str	r3, [r2, #32]
 8000f10:	e00b      	b.n	8000f2a <HAL_RCC_OscConfig+0x36e>
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4a66      	ldr	r2, [pc, #408]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6213      	str	r3, [r2, #32]
 8000f1e:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a63      	ldr	r2, [pc, #396]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	f023 0304 	bic.w	r3, r3, #4
 8000f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d015      	beq.n	8000f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fb99 	bl	8000668 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f38:	e00a      	b.n	8000f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3a:	f7ff fb95 	bl	8000668 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e0ab      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f50:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0ee      	beq.n	8000f3a <HAL_RCC_OscConfig+0x37e>
 8000f5c:	e014      	b.n	8000f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb83 	bl	8000668 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f64:	e00a      	b.n	8000f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff fb7f 	bl	8000668 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e095      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f7c:	4b4c      	ldr	r3, [pc, #304]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1ee      	bne.n	8000f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d105      	bne.n	8000f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	4a47      	ldr	r2, [pc, #284]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8081 	beq.w	80010a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa4:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d061      	beq.n	8001074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d146      	bne.n	8001046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <HAL_RCC_OscConfig+0x4fc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fb53 	bl	8000668 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fb4f 	bl	8000668 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e067      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f0      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fec:	d108      	bne.n	8001000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fee:	4b30      	ldr	r3, [pc, #192]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	492d      	ldr	r1, [pc, #180]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a19      	ldr	r1, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	430b      	orrs	r3, r1
 8001012:	4927      	ldr	r1, [pc, #156]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_RCC_OscConfig+0x4fc>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff fb23 	bl	8000668 <HAL_GetTick>
 8001022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001024:	e008      	b.n	8001038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001026:	f7ff fb1f 	bl	8000668 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2b02      	cmp	r3, #2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e037      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f0      	beq.n	8001026 <HAL_RCC_OscConfig+0x46a>
 8001044:	e02f      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_RCC_OscConfig+0x4fc>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fb0c 	bl	8000668 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001054:	f7ff fb08 	bl	8000668 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e020      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x498>
 8001072:	e018      	b.n	80010a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e013      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_RCC_OscConfig+0x4f4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	429a      	cmp	r2, r3
 8001092:	d106      	bne.n	80010a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109e:	429a      	cmp	r2, r3
 80010a0:	d001      	beq.n	80010a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40007000 	.word	0x40007000
 80010b8:	42420060 	.word	0x42420060

080010bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e0d0      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d0:	4b6a      	ldr	r3, [pc, #424]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d910      	bls.n	8001100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b67      	ldr	r3, [pc, #412]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 0207 	bic.w	r2, r3, #7
 80010e6:	4965      	ldr	r1, [pc, #404]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e0b8      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d020      	beq.n	800114e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a58      	ldr	r2, [pc, #352]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001130:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4a52      	ldr	r2, [pc, #328]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800113a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113c:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	494d      	ldr	r1, [pc, #308]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	d040      	beq.n	80011dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	4b47      	ldr	r3, [pc, #284]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d115      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e07f      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d107      	bne.n	800118a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117a:	4b41      	ldr	r3, [pc, #260]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e073      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e06b      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119a:	4b39      	ldr	r3, [pc, #228]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f023 0203 	bic.w	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4936      	ldr	r1, [pc, #216]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fa5c 	bl	8000668 <HAL_GetTick>
 80011b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	e00a      	b.n	80011ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b4:	f7ff fa58 	bl	8000668 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e053      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 020c 	and.w	r2, r3, #12
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d1eb      	bne.n	80011b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d210      	bcs.n	800120c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 0207 	bic.w	r2, r3, #7
 80011f2:	4922      	ldr	r1, [pc, #136]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e032      	b.n	8001272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d008      	beq.n	800122a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d009      	beq.n	800124a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	490e      	ldr	r1, [pc, #56]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800124a:	f000 f821 	bl	8001290 <HAL_RCC_GetSysClockFreq>
 800124e:	4602      	mov	r2, r0
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	490a      	ldr	r1, [pc, #40]	; (8001284 <HAL_RCC_ClockConfig+0x1c8>)
 800125c:	5ccb      	ldrb	r3, [r1, r3]
 800125e:	fa22 f303 	lsr.w	r3, r2, r3
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1cc>)
 8001264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1d0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f8fc 	bl	8000468 <HAL_InitTick>

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40022000 	.word	0x40022000
 8001280:	40021000 	.word	0x40021000
 8001284:	08003e8c 	.word	0x08003e8c
 8001288:	20000000 	.word	0x20000000
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <HAL_RCC_GetSysClockFreq+0x94>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d002      	beq.n	80012c0 <HAL_RCC_GetSysClockFreq+0x30>
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d003      	beq.n	80012c6 <HAL_RCC_GetSysClockFreq+0x36>
 80012be:	e027      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_RCC_GetSysClockFreq+0x98>)
 80012c2:	613b      	str	r3, [r7, #16]
      break;
 80012c4:	e027      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_RCC_GetSysClockFreq+0x9c>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d010      	beq.n	8001300 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_RCC_GetSysClockFreq+0x94>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	0c5b      	lsrs	r3, r3, #17
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012ea:	5cd3      	ldrb	r3, [r2, r3]
 80012ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_RCC_GetSysClockFreq+0x98>)
 80012f2:	fb02 f203 	mul.w	r2, r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e004      	b.n	800130a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	613b      	str	r3, [r7, #16]
      break;
 800130e:	e002      	b.n	8001316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_RCC_GetSysClockFreq+0x98>)
 8001312:	613b      	str	r3, [r7, #16]
      break;
 8001314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001316:	693b      	ldr	r3, [r7, #16]
}
 8001318:	4618      	mov	r0, r3
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000
 8001328:	007a1200 	.word	0x007a1200
 800132c:	08003ea4 	.word	0x08003ea4
 8001330:	08003eb4 	.word	0x08003eb4
 8001334:	003d0900 	.word	0x003d0900

08001338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_RCC_GetHCLKFreq+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000000 	.word	0x20000000

0800134c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001350:	f7ff fff2 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	0adb      	lsrs	r3, r3, #11
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	4903      	ldr	r1, [pc, #12]	; (8001370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001368:	4618      	mov	r0, r3
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	08003e9c 	.word	0x08003e9c

08001374 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	220f      	movs	r2, #15
 8001382:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_RCC_GetClockConfig+0x58>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_RCC_GetClockConfig+0x58>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_GetClockConfig+0x58>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_RCC_GetClockConfig+0x58>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	08db      	lsrs	r3, r3, #3
 80013ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_RCC_GetClockConfig+0x5c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0207 	and.w	r2, r3, #7
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40022000 	.word	0x40022000

080013d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <RCC_Delay+0x34>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	; (800140c <RCC_Delay+0x38>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0a5b      	lsrs	r3, r3, #9
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013f0:	bf00      	nop
  }
  while (Delay --);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	60fa      	str	r2, [r7, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f9      	bne.n	80013f0 <RCC_Delay+0x1c>
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000000 	.word	0x20000000
 800140c:	10624dd3 	.word	0x10624dd3

08001410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e041      	b.n	80014a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f839 	bl	80014ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3304      	adds	r3, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4610      	mov	r0, r2
 8001450:	f000 f9b4 	bl	80017bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d001      	beq.n	80014d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e03a      	b.n	800154e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_TIM_Base_Start_IT+0x98>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00e      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x58>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001502:	d009      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x58>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <HAL_TIM_Base_Start_IT+0x9c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d004      	beq.n	8001518 <HAL_TIM_Base_Start_IT+0x58>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <HAL_TIM_Base_Start_IT+0xa0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d111      	bne.n	800153c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2b06      	cmp	r3, #6
 8001528:	d010      	beq.n	800154c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800153a:	e007      	b.n	800154c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40012c00 	.word	0x40012c00
 800155c:	40000400 	.word	0x40000400
 8001560:	40000800 	.word	0x40000800

08001564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b02      	cmp	r3, #2
 8001578:	d122      	bne.n	80015c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b02      	cmp	r3, #2
 8001586:	d11b      	bne.n	80015c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f06f 0202 	mvn.w	r2, #2
 8001590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f8ed 	bl	8001786 <HAL_TIM_IC_CaptureCallback>
 80015ac:	e005      	b.n	80015ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f8e0 	bl	8001774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f8ef 	bl	8001798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d122      	bne.n	8001614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d11b      	bne.n	8001614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f06f 0204 	mvn.w	r2, #4
 80015e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2202      	movs	r2, #2
 80015ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8c3 	bl	8001786 <HAL_TIM_IC_CaptureCallback>
 8001600:	e005      	b.n	800160e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f8b6 	bl	8001774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f8c5 	bl	8001798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b08      	cmp	r3, #8
 8001620:	d122      	bne.n	8001668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b08      	cmp	r3, #8
 800162e:	d11b      	bne.n	8001668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f06f 0208 	mvn.w	r2, #8
 8001638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2204      	movs	r2, #4
 800163e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f899 	bl	8001786 <HAL_TIM_IC_CaptureCallback>
 8001654:	e005      	b.n	8001662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f88c 	bl	8001774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f89b 	bl	8001798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b10      	cmp	r3, #16
 8001674:	d122      	bne.n	80016bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b10      	cmp	r3, #16
 8001682:	d11b      	bne.n	80016bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f06f 0210 	mvn.w	r2, #16
 800168c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2208      	movs	r2, #8
 8001692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f000 f86f 	bl	8001786 <HAL_TIM_IC_CaptureCallback>
 80016a8:	e005      	b.n	80016b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f862 	bl	8001774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f871 	bl	8001798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10e      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d107      	bne.n	80016e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f06f 0201 	mvn.w	r2, #1
 80016e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7fe fe76 	bl	80003d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	2b80      	cmp	r3, #128	; 0x80
 80016f4:	d10e      	bne.n	8001714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001700:	2b80      	cmp	r3, #128	; 0x80
 8001702:	d107      	bne.n	8001714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800170c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8bf 	bl	8001892 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171e:	2b40      	cmp	r3, #64	; 0x40
 8001720:	d10e      	bne.n	8001740 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172c:	2b40      	cmp	r3, #64	; 0x40
 800172e:	d107      	bne.n	8001740 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f835 	bl	80017aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	2b20      	cmp	r3, #32
 800174c:	d10e      	bne.n	800176c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	2b20      	cmp	r3, #32
 800175a:	d107      	bne.n	800176c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0220 	mvn.w	r2, #32
 8001764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f88a 	bl	8001880 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a29      	ldr	r2, [pc, #164]	; (8001874 <TIM_Base_SetConfig+0xb8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00b      	beq.n	80017ec <TIM_Base_SetConfig+0x30>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017da:	d007      	beq.n	80017ec <TIM_Base_SetConfig+0x30>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a26      	ldr	r2, [pc, #152]	; (8001878 <TIM_Base_SetConfig+0xbc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d003      	beq.n	80017ec <TIM_Base_SetConfig+0x30>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a25      	ldr	r2, [pc, #148]	; (800187c <TIM_Base_SetConfig+0xc0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d108      	bne.n	80017fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <TIM_Base_SetConfig+0xb8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00b      	beq.n	800181e <TIM_Base_SetConfig+0x62>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d007      	beq.n	800181e <TIM_Base_SetConfig+0x62>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a19      	ldr	r2, [pc, #100]	; (8001878 <TIM_Base_SetConfig+0xbc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d003      	beq.n	800181e <TIM_Base_SetConfig+0x62>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a18      	ldr	r2, [pc, #96]	; (800187c <TIM_Base_SetConfig+0xc0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d108      	bne.n	8001830 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <TIM_Base_SetConfig+0xb8>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d103      	bne.n	8001864 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	615a      	str	r2, [r3, #20]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	40012c00 	.word	0x40012c00
 8001878:	40000400 	.word	0x40000400
 800187c:	40000800 	.word	0x40000800

08001880 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <xTaskCreate>:
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af04      	add	r7, sp, #16
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fb7a 	bl	8002fb0 <pvPortMalloc>
 80018bc:	6178      	str	r0, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <xTaskCreate+0x48>
 80018c4:	207c      	movs	r0, #124	; 0x7c
 80018c6:	f001 fb73 	bl	8002fb0 <pvPortMalloc>
 80018ca:	61f8      	str	r0, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <xTaskCreate+0x40>
 80018d2:	227c      	movs	r2, #124	; 0x7c
 80018d4:	2100      	movs	r1, #0
 80018d6:	69f8      	ldr	r0, [r7, #28]
 80018d8:	f002 f9e8 	bl	8003cac <memset>
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	631a      	str	r2, [r3, #48]	; 0x30
 80018e2:	e005      	b.n	80018f0 <xTaskCreate+0x4c>
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f001 fb75 	bl	8002fd4 <vPortFree>
 80018ea:	e001      	b.n	80018f0 <xTaskCreate+0x4c>
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d013      	beq.n	800191e <xTaskCreate+0x7a>
 80018f6:	2300      	movs	r3, #0
 80018f8:	9303      	str	r3, [sp, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	9302      	str	r3, [sp, #8]
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f80e 	bl	800192e <prvInitialiseNewTask>
 8001912:	69f8      	ldr	r0, [r7, #28]
 8001914:	f000 f89a 	bl	8001a4c <prvAddNewTaskToReadyList>
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	e002      	b.n	8001924 <xTaskCreate+0x80>
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4618      	mov	r0, r3
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <prvInitialiseNewTask>:
 800192e:	b580      	push	{r7, lr}
 8001930:	b088      	sub	sp, #32
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	461a      	mov	r2, r3
 8001946:	21a5      	movs	r1, #165	; 0xa5
 8001948:	f002 f9b0 	bl	8003cac <memset>
 800194c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001956:	3b01      	subs	r3, #1
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f023 0307 	bic.w	r3, r3, #7
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00a      	beq.n	8001986 <prvInitialiseNewTask+0x58>
 8001970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001974:	f383 8811 	msr	BASEPRI, r3
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	f3bf 8f4f 	dsb	sy
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	bf00      	nop
 8001984:	e7fe      	b.n	8001984 <prvInitialiseNewTask+0x56>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01e      	beq.n	80019ca <prvInitialiseNewTask+0x9c>
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	e012      	b.n	80019b8 <prvInitialiseNewTask+0x8a>
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	4413      	add	r3, r2
 8001998:	7819      	ldrb	r1, [r3, #0]
 800199a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	4413      	add	r3, r2
 80019a0:	3334      	adds	r3, #52	; 0x34
 80019a2:	460a      	mov	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	4413      	add	r3, r2
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <prvInitialiseNewTask+0x92>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3301      	adds	r3, #1
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b13      	cmp	r3, #19
 80019bc:	d9e9      	bls.n	8001992 <prvInitialiseNewTask+0x64>
 80019be:	e000      	b.n	80019c2 <prvInitialiseNewTask+0x94>
 80019c0:	bf00      	nop
 80019c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80019ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d90a      	bls.n	80019e6 <prvInitialiseNewTask+0xb8>
 80019d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d4:	f383 8811 	msr	BASEPRI, r3
 80019d8:	f3bf 8f6f 	isb	sy
 80019dc:	f3bf 8f4f 	dsb	sy
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	bf00      	nop
 80019e4:	e7fe      	b.n	80019e4 <prvInitialiseNewTask+0xb6>
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d901      	bls.n	80019f0 <prvInitialiseNewTask+0xc2>
 80019ec:	2304      	movs	r3, #4
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019fa:	651a      	str	r2, [r3, #80]	; 0x50
 80019fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fe:	3304      	adds	r3, #4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 fb18 	bl	8003036 <vListInitialiseItem>
 8001a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a08:	3318      	adds	r3, #24
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 fb13 	bl	8003036 <vListInitialiseItem>
 8001a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a18:	f1c3 0205 	rsb	r2, r3, #5
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1e:	619a      	str	r2, [r3, #24]
 8001a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	69b8      	ldr	r0, [r7, #24]
 8001a2c:	f001 fb70 	bl	8003110 <pxPortInitialiseStack>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <prvInitialiseNewTask+0x114>
 8001a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	bf00      	nop
 8001a44:	3720      	adds	r7, #32
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <prvAddNewTaskToReadyList>:
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	f001 fc4c 	bl	80032f0 <vPortEnterCritical>
 8001a58:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <prvAddNewTaskToReadyList+0x114>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	4a40      	ldr	r2, [pc, #256]	; (8001b60 <prvAddNewTaskToReadyList+0x114>)
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b40      	ldr	r3, [pc, #256]	; (8001b64 <prvAddNewTaskToReadyList+0x118>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <prvAddNewTaskToReadyList+0x32>
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	; (8001b64 <prvAddNewTaskToReadyList+0x118>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <prvAddNewTaskToReadyList+0x114>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d110      	bne.n	8001a9a <prvAddNewTaskToReadyList+0x4e>
 8001a78:	f000 fef4 	bl	8002864 <prvInitialiseTaskLists>
 8001a7c:	e00d      	b.n	8001a9a <prvAddNewTaskToReadyList+0x4e>
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <prvAddNewTaskToReadyList+0x11c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d109      	bne.n	8001a9a <prvAddNewTaskToReadyList+0x4e>
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <prvAddNewTaskToReadyList+0x118>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d802      	bhi.n	8001a9a <prvAddNewTaskToReadyList+0x4e>
 8001a94:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <prvAddNewTaskToReadyList+0x118>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b34      	ldr	r3, [pc, #208]	; (8001b6c <prvAddNewTaskToReadyList+0x120>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <prvAddNewTaskToReadyList+0x120>)
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <prvAddNewTaskToReadyList+0x120>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	649a      	str	r2, [r3, #72]	; 0x48
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <prvAddNewTaskToReadyList+0x124>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d903      	bls.n	8001ac0 <prvAddNewTaskToReadyList+0x74>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	4a2c      	ldr	r2, [pc, #176]	; (8001b70 <prvAddNewTaskToReadyList+0x124>)
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac4:	492b      	ldr	r1, [pc, #172]	; (8001b74 <prvAddNewTaskToReadyList+0x128>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	3204      	adds	r2, #4
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	1d1a      	adds	r2, r3, #4
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4a1c      	ldr	r2, [pc, #112]	; (8001b74 <prvAddNewTaskToReadyList+0x128>)
 8001b04:	441a      	add	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	615a      	str	r2, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0e:	4919      	ldr	r1, [pc, #100]	; (8001b74 <prvAddNewTaskToReadyList+0x128>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	1c59      	adds	r1, r3, #1
 8001b1e:	4815      	ldr	r0, [pc, #84]	; (8001b74 <prvAddNewTaskToReadyList+0x128>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4403      	add	r3, r0
 8001b2a:	6019      	str	r1, [r3, #0]
 8001b2c:	f001 fc10 	bl	8003350 <vPortExitCritical>
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <prvAddNewTaskToReadyList+0x11c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00e      	beq.n	8001b56 <prvAddNewTaskToReadyList+0x10a>
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <prvAddNewTaskToReadyList+0x118>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d207      	bcs.n	8001b56 <prvAddNewTaskToReadyList+0x10a>
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <prvAddNewTaskToReadyList+0x12c>)
 8001b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f3bf 8f4f 	dsb	sy
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000017c 	.word	0x2000017c
 8001b64:	200000a4 	.word	0x200000a4
 8001b68:	20000188 	.word	0x20000188
 8001b6c:	20000198 	.word	0x20000198
 8001b70:	20000184 	.word	0x20000184
 8001b74:	200000a8 	.word	0x200000a8
 8001b78:	e000ed04 	.word	0xe000ed04

08001b7c <vTaskPrioritySet>:
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d90a      	bls.n	8001ba6 <vTaskPrioritySet+0x2a>
 8001b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b94:	f383 8811 	msr	BASEPRI, r3
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	bf00      	nop
 8001ba4:	e7fe      	b.n	8001ba4 <vTaskPrioritySet+0x28>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d901      	bls.n	8001bb0 <vTaskPrioritySet+0x34>
 8001bac:	2304      	movs	r3, #4
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	f001 fb9e 	bl	80032f0 <vPortEnterCritical>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <vTaskPrioritySet+0x44>
 8001bba:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <vTaskPrioritySet+0x17c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	e000      	b.n	8001bc2 <vTaskPrioritySet+0x46>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	f000 808c 	beq.w	8001cec <vTaskPrioritySet+0x170>
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d90d      	bls.n	8001bf8 <vTaskPrioritySet+0x7c>
 8001bdc:	4b46      	ldr	r3, [pc, #280]	; (8001cf8 <vTaskPrioritySet+0x17c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d00f      	beq.n	8001c06 <vTaskPrioritySet+0x8a>
 8001be6:	4b44      	ldr	r3, [pc, #272]	; (8001cf8 <vTaskPrioritySet+0x17c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d309      	bcc.n	8001c06 <vTaskPrioritySet+0x8a>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e006      	b.n	8001c06 <vTaskPrioritySet+0x8a>
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <vTaskPrioritySet+0x17c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d101      	bne.n	8001c06 <vTaskPrioritySet+0x8a>
 8001c02:	2301      	movs	r3, #1
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d102      	bne.n	8001c1e <vTaskPrioritySet+0xa2>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	651a      	str	r2, [r3, #80]	; 0x50
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db04      	blt.n	8001c36 <vTaskPrioritySet+0xba>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f1c3 0205 	rsb	r2, r3, #5
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	619a      	str	r2, [r3, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6959      	ldr	r1, [r3, #20]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4a2d      	ldr	r2, [pc, #180]	; (8001cfc <vTaskPrioritySet+0x180>)
 8001c46:	4413      	add	r3, r2
 8001c48:	4299      	cmp	r1, r3
 8001c4a:	d144      	bne.n	8001cd6 <vTaskPrioritySet+0x15a>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 fa34 	bl	80030be <uxListRemove>
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5a:	4b29      	ldr	r3, [pc, #164]	; (8001d00 <vTaskPrioritySet+0x184>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d903      	bls.n	8001c6a <vTaskPrioritySet+0xee>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <vTaskPrioritySet+0x184>)
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6e:	4923      	ldr	r1, [pc, #140]	; (8001cfc <vTaskPrioritySet+0x180>)
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	3204      	adds	r2, #4
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	1d1a      	adds	r2, r3, #4
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <vTaskPrioritySet+0x180>)
 8001cae:	441a      	add	r2, r3
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	615a      	str	r2, [r3, #20]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb8:	4910      	ldr	r1, [pc, #64]	; (8001cfc <vTaskPrioritySet+0x180>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	440b      	add	r3, r1
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	1c59      	adds	r1, r3, #1
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <vTaskPrioritySet+0x180>)
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4403      	add	r3, r0
 8001cd4:	6019      	str	r1, [r3, #0]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <vTaskPrioritySet+0x170>
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <vTaskPrioritySet+0x188>)
 8001cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f3bf 8f4f 	dsb	sy
 8001ce8:	f3bf 8f6f 	isb	sy
 8001cec:	f001 fb30 	bl	8003350 <vPortExitCritical>
 8001cf0:	bf00      	nop
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200000a4 	.word	0x200000a4
 8001cfc:	200000a8 	.word	0x200000a8
 8001d00:	20000184 	.word	0x20000184
 8001d04:	e000ed04 	.word	0xe000ed04

08001d08 <vTaskStartScheduler>:
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <vTaskStartScheduler+0x88>)
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	2300      	movs	r3, #0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2300      	movs	r3, #0
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	491e      	ldr	r1, [pc, #120]	; (8001d94 <vTaskStartScheduler+0x8c>)
 8001d1c:	481e      	ldr	r0, [pc, #120]	; (8001d98 <vTaskStartScheduler+0x90>)
 8001d1e:	f7ff fdc1 	bl	80018a4 <xTaskCreate>
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d102      	bne.n	8001d30 <vTaskStartScheduler+0x28>
 8001d2a:	f000 febf 	bl	8002aac <xTimerCreateTimerTask>
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d116      	bne.n	8001d64 <vTaskStartScheduler+0x5c>
 8001d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3a:	f383 8811 	msr	BASEPRI, r3
 8001d3e:	f3bf 8f6f 	isb	sy
 8001d42:	f3bf 8f4f 	dsb	sy
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	bf00      	nop
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <vTaskStartScheduler+0x94>)
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <vTaskStartScheduler+0x98>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <vTaskStartScheduler+0x9c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	f001 fa55 	bl	800320c <xPortStartScheduler>
 8001d62:	e00e      	b.n	8001d82 <vTaskStartScheduler+0x7a>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6a:	d10a      	bne.n	8001d82 <vTaskStartScheduler+0x7a>
 8001d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d70:	f383 8811 	msr	BASEPRI, r3
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	bf00      	nop
 8001d80:	e7fe      	b.n	8001d80 <vTaskStartScheduler+0x78>
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <vTaskStartScheduler+0xa0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200001a0 	.word	0x200001a0
 8001d94:	08003e74 	.word	0x08003e74
 8001d98:	08002779 	.word	0x08002779
 8001d9c:	2000019c 	.word	0x2000019c
 8001da0:	20000188 	.word	0x20000188
 8001da4:	20000180 	.word	0x20000180
 8001da8:	2000000c 	.word	0x2000000c

08001dac <vTaskSuspendAll>:
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <vTaskSuspendAll+0x18>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3301      	adds	r3, #1
 8001db6:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <vTaskSuspendAll+0x18>)
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	200001a4 	.word	0x200001a4

08001dc8 <prvGetExpectedIdleTime>:
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	2300      	movs	r3, #0
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <prvGetExpectedIdleTime+0x58>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <prvGetExpectedIdleTime+0x16>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <prvGetExpectedIdleTime+0x5c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <prvGetExpectedIdleTime+0x26>
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e012      	b.n	8001e14 <prvGetExpectedIdleTime+0x4c>
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <prvGetExpectedIdleTime+0x60>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d902      	bls.n	8001dfc <prvGetExpectedIdleTime+0x34>
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	e00b      	b.n	8001e14 <prvGetExpectedIdleTime+0x4c>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <prvGetExpectedIdleTime+0x40>
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	e005      	b.n	8001e14 <prvGetExpectedIdleTime+0x4c>
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <prvGetExpectedIdleTime+0x64>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <prvGetExpectedIdleTime+0x68>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	20000184 	.word	0x20000184
 8001e24:	200000a4 	.word	0x200000a4
 8001e28:	200000a8 	.word	0x200000a8
 8001e2c:	2000019c 	.word	0x2000019c
 8001e30:	20000180 	.word	0x20000180

08001e34 <xTaskResumeAll>:
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	4b71      	ldr	r3, [pc, #452]	; (8002008 <xTaskResumeAll+0x1d4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <xTaskResumeAll+0x2c>
 8001e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	bf00      	nop
 8001e5e:	e7fe      	b.n	8001e5e <xTaskResumeAll+0x2a>
 8001e60:	f001 fa46 	bl	80032f0 <vPortEnterCritical>
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <xTaskResumeAll+0x1d4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a67      	ldr	r2, [pc, #412]	; (8002008 <xTaskResumeAll+0x1d4>)
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b66      	ldr	r3, [pc, #408]	; (8002008 <xTaskResumeAll+0x1d4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 80c1 	bne.w	8001ffa <xTaskResumeAll+0x1c6>
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <xTaskResumeAll+0x1d8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80bc 	beq.w	8001ffa <xTaskResumeAll+0x1c6>
 8001e82:	e08b      	b.n	8001f9c <xTaskResumeAll+0x168>
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <xTaskResumeAll+0x1dc>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	6a12      	ldr	r2, [r2, #32]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	69d2      	ldr	r2, [r2, #28]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3318      	adds	r3, #24
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d103      	bne.n	8001eba <xTaskResumeAll+0x86>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	6a1a      	ldr	r2, [r3, #32]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	68d2      	ldr	r2, [r2, #12]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	6892      	ldr	r2, [r2, #8]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3304      	adds	r3, #4
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d103      	bne.n	8001ef8 <xTaskResumeAll+0xc4>
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	1e5a      	subs	r2, r3, #1
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0c:	4b41      	ldr	r3, [pc, #260]	; (8002014 <xTaskResumeAll+0x1e0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d903      	bls.n	8001f1c <xTaskResumeAll+0xe8>
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	4a3e      	ldr	r2, [pc, #248]	; (8002014 <xTaskResumeAll+0x1e0>)
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	493d      	ldr	r1, [pc, #244]	; (8002018 <xTaskResumeAll+0x1e4>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	3204      	adds	r2, #4
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	1d1a      	adds	r2, r3, #4
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <xTaskResumeAll+0x1e4>)
 8001f60:	441a      	add	r2, r3
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6a:	492b      	ldr	r1, [pc, #172]	; (8002018 <xTaskResumeAll+0x1e4>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	1c59      	adds	r1, r3, #1
 8001f7a:	4827      	ldr	r0, [pc, #156]	; (8002018 <xTaskResumeAll+0x1e4>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4403      	add	r3, r0
 8001f86:	6019      	str	r1, [r3, #0]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <xTaskResumeAll+0x1e8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d302      	bcc.n	8001f9c <xTaskResumeAll+0x168>
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <xTaskResumeAll+0x1ec>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <xTaskResumeAll+0x1dc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f47f af6f 	bne.w	8001e84 <xTaskResumeAll+0x50>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <xTaskResumeAll+0x17c>
 8001fac:	f000 fcd8 	bl	8002960 <prvResetNextTaskUnblockTime>
 8001fb0:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <xTaskResumeAll+0x1f0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d010      	beq.n	8001fde <xTaskResumeAll+0x1aa>
 8001fbc:	f000 f89e 	bl	80020fc <xTaskIncrementTick>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <xTaskResumeAll+0x198>
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <xTaskResumeAll+0x1ec>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f1      	bne.n	8001fbc <xTaskResumeAll+0x188>
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <xTaskResumeAll+0x1f0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <xTaskResumeAll+0x1ec>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <xTaskResumeAll+0x1c6>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <xTaskResumeAll+0x1f4>)
 8001fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f3bf 8f4f 	dsb	sy
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f001 f9a9 	bl	8003350 <vPortExitCritical>
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4618      	mov	r0, r3
 8002002:	3720      	adds	r7, #32
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200001a4 	.word	0x200001a4
 800200c:	2000017c 	.word	0x2000017c
 8002010:	2000013c 	.word	0x2000013c
 8002014:	20000184 	.word	0x20000184
 8002018:	200000a8 	.word	0x200000a8
 800201c:	200000a4 	.word	0x200000a4
 8002020:	20000190 	.word	0x20000190
 8002024:	2000018c 	.word	0x2000018c
 8002028:	e000ed04 	.word	0xe000ed04

0800202c <xTaskGetTickCount>:
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <xTaskGetTickCount+0x18>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000180 	.word	0x20000180

08002048 <vTaskStepTick>:
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <vTaskStepTick+0xa4>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	441a      	add	r2, r3
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <vTaskStepTick+0xa8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d90a      	bls.n	8002076 <vTaskStepTick+0x2e>
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <vTaskStepTick+0x2c>
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <vTaskStepTick+0xa4>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	441a      	add	r2, r3
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <vTaskStepTick+0xa8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d128      	bne.n	80020d8 <vTaskStepTick+0x90>
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <vTaskStepTick+0xac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <vTaskStepTick+0x5c>
 800208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	bf00      	nop
 80020a2:	e7fe      	b.n	80020a2 <vTaskStepTick+0x5a>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10a      	bne.n	80020c0 <vTaskStepTick+0x78>
 80020aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ae:	f383 8811 	msr	BASEPRI, r3
 80020b2:	f3bf 8f6f 	isb	sy
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	bf00      	nop
 80020be:	e7fe      	b.n	80020be <vTaskStepTick+0x76>
 80020c0:	f001 f916 	bl	80032f0 <vPortEnterCritical>
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <vTaskStepTick+0xb0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <vTaskStepTick+0xb0>)
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	f001 f93f 	bl	8003350 <vPortExitCritical>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <vTaskStepTick+0xa4>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	4a02      	ldr	r2, [pc, #8]	; (80020ec <vTaskStepTick+0xa4>)
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	bf00      	nop
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000180 	.word	0x20000180
 80020f0:	2000019c 	.word	0x2000019c
 80020f4:	200001a4 	.word	0x200001a4
 80020f8:	2000018c 	.word	0x2000018c

080020fc <xTaskIncrementTick>:
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
 8002106:	4b7e      	ldr	r3, [pc, #504]	; (8002300 <xTaskIncrementTick+0x204>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 80ed 	bne.w	80022ea <xTaskIncrementTick+0x1ee>
 8002110:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <xTaskIncrementTick+0x208>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	623b      	str	r3, [r7, #32]
 8002118:	4a7a      	ldr	r2, [pc, #488]	; (8002304 <xTaskIncrementTick+0x208>)
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d120      	bne.n	8002166 <xTaskIncrementTick+0x6a>
 8002124:	4b78      	ldr	r3, [pc, #480]	; (8002308 <xTaskIncrementTick+0x20c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <xTaskIncrementTick+0x48>
 800212e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002132:	f383 8811 	msr	BASEPRI, r3
 8002136:	f3bf 8f6f 	isb	sy
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	bf00      	nop
 8002142:	e7fe      	b.n	8002142 <xTaskIncrementTick+0x46>
 8002144:	4b70      	ldr	r3, [pc, #448]	; (8002308 <xTaskIncrementTick+0x20c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	4b70      	ldr	r3, [pc, #448]	; (800230c <xTaskIncrementTick+0x210>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a6e      	ldr	r2, [pc, #440]	; (8002308 <xTaskIncrementTick+0x20c>)
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4a6e      	ldr	r2, [pc, #440]	; (800230c <xTaskIncrementTick+0x210>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b6d      	ldr	r3, [pc, #436]	; (8002310 <xTaskIncrementTick+0x214>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	4a6c      	ldr	r2, [pc, #432]	; (8002310 <xTaskIncrementTick+0x214>)
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	f000 fbfd 	bl	8002960 <prvResetNextTaskUnblockTime>
 8002166:	4b6b      	ldr	r3, [pc, #428]	; (8002314 <xTaskIncrementTick+0x218>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6a3a      	ldr	r2, [r7, #32]
 800216c:	429a      	cmp	r2, r3
 800216e:	f0c0 80a7 	bcc.w	80022c0 <xTaskIncrementTick+0x1c4>
 8002172:	4b65      	ldr	r3, [pc, #404]	; (8002308 <xTaskIncrementTick+0x20c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d104      	bne.n	8002186 <xTaskIncrementTick+0x8a>
 800217c:	4b65      	ldr	r3, [pc, #404]	; (8002314 <xTaskIncrementTick+0x218>)
 800217e:	f04f 32ff 	mov.w	r2, #4294967295
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e09c      	b.n	80022c0 <xTaskIncrementTick+0x1c4>
 8002186:	4b60      	ldr	r3, [pc, #384]	; (8002308 <xTaskIncrementTick+0x20c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	6a3a      	ldr	r2, [r7, #32]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	429a      	cmp	r2, r3
 800219c:	d203      	bcs.n	80021a6 <xTaskIncrementTick+0xaa>
 800219e:	4a5d      	ldr	r2, [pc, #372]	; (8002314 <xTaskIncrementTick+0x218>)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e08c      	b.n	80022c0 <xTaskIncrementTick+0x1c4>
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	68d2      	ldr	r2, [r2, #12]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	6892      	ldr	r2, [r2, #8]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	3304      	adds	r3, #4
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d103      	bne.n	80021d4 <xTaskIncrementTick+0xd8>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	1e5a      	subs	r2, r3, #1
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01e      	beq.n	800222a <xTaskIncrementTick+0x12e>
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	6a12      	ldr	r2, [r2, #32]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	69d2      	ldr	r2, [r2, #28]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	3318      	adds	r3, #24
 800220e:	429a      	cmp	r2, r3
 8002210:	d103      	bne.n	800221a <xTaskIncrementTick+0x11e>
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	6a1a      	ldr	r2, [r3, #32]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2200      	movs	r2, #0
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222e:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <xTaskIncrementTick+0x21c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d903      	bls.n	800223e <xTaskIncrementTick+0x142>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	4a37      	ldr	r2, [pc, #220]	; (8002318 <xTaskIncrementTick+0x21c>)
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002242:	4936      	ldr	r1, [pc, #216]	; (800231c <xTaskIncrementTick+0x220>)
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3304      	adds	r3, #4
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	3204      	adds	r2, #4
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	1d1a      	adds	r2, r3, #4
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4a26      	ldr	r2, [pc, #152]	; (800231c <xTaskIncrementTick+0x220>)
 8002282:	441a      	add	r2, r3
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	615a      	str	r2, [r3, #20]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228c:	4923      	ldr	r1, [pc, #140]	; (800231c <xTaskIncrementTick+0x220>)
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	1c59      	adds	r1, r3, #1
 800229c:	481f      	ldr	r0, [pc, #124]	; (800231c <xTaskIncrementTick+0x220>)
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4403      	add	r3, r0
 80022a8:	6019      	str	r1, [r3, #0]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <xTaskIncrementTick+0x224>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f67f af5c 	bls.w	8002172 <xTaskIncrementTick+0x76>
 80022ba:	2301      	movs	r3, #1
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	e758      	b.n	8002172 <xTaskIncrementTick+0x76>
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <xTaskIncrementTick+0x224>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c6:	4915      	ldr	r1, [pc, #84]	; (800231c <xTaskIncrementTick+0x220>)
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d901      	bls.n	80022dc <xTaskIncrementTick+0x1e0>
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <xTaskIncrementTick+0x228>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <xTaskIncrementTick+0x1f8>
 80022e4:	2301      	movs	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
 80022e8:	e004      	b.n	80022f4 <xTaskIncrementTick+0x1f8>
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <xTaskIncrementTick+0x22c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <xTaskIncrementTick+0x22c>)
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	4618      	mov	r0, r3
 80022f8:	3728      	adds	r7, #40	; 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200001a4 	.word	0x200001a4
 8002304:	20000180 	.word	0x20000180
 8002308:	20000134 	.word	0x20000134
 800230c:	20000138 	.word	0x20000138
 8002310:	20000194 	.word	0x20000194
 8002314:	2000019c 	.word	0x2000019c
 8002318:	20000184 	.word	0x20000184
 800231c:	200000a8 	.word	0x200000a8
 8002320:	200000a4 	.word	0x200000a4
 8002324:	20000190 	.word	0x20000190
 8002328:	2000018c 	.word	0x2000018c

0800232c <vTaskSwitchContext>:
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <vTaskSwitchContext+0xa4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <vTaskSwitchContext+0x16>
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <vTaskSwitchContext+0xa8>)
 800233c:	2201      	movs	r2, #1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e041      	b.n	80023c6 <vTaskSwitchContext+0x9a>
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <vTaskSwitchContext+0xa8>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	4b23      	ldr	r3, [pc, #140]	; (80023d8 <vTaskSwitchContext+0xac>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	e010      	b.n	8002372 <vTaskSwitchContext+0x46>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <vTaskSwitchContext+0x40>
 8002356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235a:	f383 8811 	msr	BASEPRI, r3
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	bf00      	nop
 800236a:	e7fe      	b.n	800236a <vTaskSwitchContext+0x3e>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3b01      	subs	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	491a      	ldr	r1, [pc, #104]	; (80023dc <vTaskSwitchContext+0xb0>)
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0e4      	beq.n	8002350 <vTaskSwitchContext+0x24>
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <vTaskSwitchContext+0xb0>)
 8002392:	4413      	add	r3, r2
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3308      	adds	r3, #8
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d104      	bne.n	80023b6 <vTaskSwitchContext+0x8a>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <vTaskSwitchContext+0xb4>)
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <vTaskSwitchContext+0xac>)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	200001a4 	.word	0x200001a4
 80023d4:	20000190 	.word	0x20000190
 80023d8:	20000184 	.word	0x20000184
 80023dc:	200000a8 	.word	0x200000a8
 80023e0:	200000a4 	.word	0x200000a4

080023e4 <vTaskPlaceOnEventList>:
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <vTaskPlaceOnEventList+0x26>
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	bf00      	nop
 8002408:	e7fe      	b.n	8002408 <vTaskPlaceOnEventList+0x24>
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <vTaskPlaceOnEventList+0x44>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	3318      	adds	r3, #24
 8002410:	4619      	mov	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fe1b 	bl	800304e <vListInsert>
 8002418:	2101      	movs	r1, #1
 800241a:	6838      	ldr	r0, [r7, #0]
 800241c:	f000 fad8 	bl	80029d0 <prvAddCurrentTaskToDelayedList>
 8002420:	bf00      	nop
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200000a4 	.word	0x200000a4

0800242c <vTaskPlaceOnEventListRestricted>:
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <vTaskPlaceOnEventListRestricted+0x28>
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	bf00      	nop
 8002452:	e7fe      	b.n	8002452 <vTaskPlaceOnEventListRestricted+0x26>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	61da      	str	r2, [r3, #28]
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	6892      	ldr	r2, [r2, #8]
 800246a:	621a      	str	r2, [r3, #32]
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	3218      	adds	r2, #24
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f103 0218 	add.w	r2, r3, #24
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <vTaskPlaceOnEventListRestricted+0x76>
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68b8      	ldr	r0, [r7, #8]
 80024a6:	f000 fa93 	bl	80029d0 <prvAddCurrentTaskToDelayedList>
 80024aa:	bf00      	nop
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200000a4 	.word	0x200000a4

080024b8 <xTaskRemoveFromEventList>:
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	623b      	str	r3, [r7, #32]
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <xTaskRemoveFromEventList+0x2c>
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	bf00      	nop
 80024e2:	e7fe      	b.n	80024e2 <xTaskRemoveFromEventList+0x2a>
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	6a3a      	ldr	r2, [r7, #32]
 80024f0:	6a12      	ldr	r2, [r2, #32]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	6a3a      	ldr	r2, [r7, #32]
 80024fa:	69d2      	ldr	r2, [r2, #28]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	3318      	adds	r3, #24
 8002506:	429a      	cmp	r2, r3
 8002508:	d103      	bne.n	8002512 <xTaskRemoveFromEventList+0x5a>
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	6a1a      	ldr	r2, [r3, #32]
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2200      	movs	r2, #0
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	4b4b      	ldr	r3, [pc, #300]	; (8002650 <xTaskRemoveFromEventList+0x198>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d161      	bne.n	80025ee <xTaskRemoveFromEventList+0x136>
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	68d2      	ldr	r2, [r2, #12]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	6a3a      	ldr	r2, [r7, #32]
 8002540:	6892      	ldr	r2, [r2, #8]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	3304      	adds	r3, #4
 800254c:	429a      	cmp	r2, r3
 800254e:	d103      	bne.n	8002558 <xTaskRemoveFromEventList+0xa0>
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	2200      	movs	r2, #0
 800255c:	615a      	str	r2, [r3, #20]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	4b39      	ldr	r3, [pc, #228]	; (8002654 <xTaskRemoveFromEventList+0x19c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d903      	bls.n	800257c <xTaskRemoveFromEventList+0xc4>
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4a36      	ldr	r2, [pc, #216]	; (8002654 <xTaskRemoveFromEventList+0x19c>)
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002580:	4935      	ldr	r1, [pc, #212]	; (8002658 <xTaskRemoveFromEventList+0x1a0>)
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3304      	adds	r3, #4
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	60da      	str	r2, [r3, #12]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	6a3a      	ldr	r2, [r7, #32]
 80025a6:	3204      	adds	r2, #4
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	1d1a      	adds	r2, r3, #4
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4a26      	ldr	r2, [pc, #152]	; (8002658 <xTaskRemoveFromEventList+0x1a0>)
 80025c0:	441a      	add	r2, r3
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	615a      	str	r2, [r3, #20]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ca:	4923      	ldr	r1, [pc, #140]	; (8002658 <xTaskRemoveFromEventList+0x1a0>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	1c59      	adds	r1, r3, #1
 80025da:	481f      	ldr	r0, [pc, #124]	; (8002658 <xTaskRemoveFromEventList+0x1a0>)
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4403      	add	r3, r0
 80025e6:	6019      	str	r1, [r3, #0]
 80025e8:	f000 f9ba 	bl	8002960 <prvResetNextTaskUnblockTime>
 80025ec:	e01b      	b.n	8002626 <xTaskRemoveFromEventList+0x16e>
 80025ee:	4b1b      	ldr	r3, [pc, #108]	; (800265c <xTaskRemoveFromEventList+0x1a4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	61da      	str	r2, [r3, #28]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	621a      	str	r2, [r3, #32]
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	6a3a      	ldr	r2, [r7, #32]
 8002608:	3218      	adds	r2, #24
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f103 0218 	add.w	r2, r3, #24
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	4a10      	ldr	r2, [pc, #64]	; (800265c <xTaskRemoveFromEventList+0x1a4>)
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
 800261c:	4b0f      	ldr	r3, [pc, #60]	; (800265c <xTaskRemoveFromEventList+0x1a4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <xTaskRemoveFromEventList+0x1a4>)
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <xTaskRemoveFromEventList+0x1a8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	429a      	cmp	r2, r3
 8002632:	d905      	bls.n	8002640 <xTaskRemoveFromEventList+0x188>
 8002634:	2301      	movs	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <xTaskRemoveFromEventList+0x1ac>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e001      	b.n	8002644 <xTaskRemoveFromEventList+0x18c>
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	4618      	mov	r0, r3
 8002648:	3728      	adds	r7, #40	; 0x28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200001a4 	.word	0x200001a4
 8002654:	20000184 	.word	0x20000184
 8002658:	200000a8 	.word	0x200000a8
 800265c:	2000013c 	.word	0x2000013c
 8002660:	200000a4 	.word	0x200000a4
 8002664:	20000190 	.word	0x20000190

08002668 <vTaskInternalSetTimeOutState>:
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <vTaskInternalSetTimeOutState+0x24>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <vTaskInternalSetTimeOutState+0x28>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	605a      	str	r2, [r3, #4]
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000194 	.word	0x20000194
 8002690:	20000180 	.word	0x20000180

08002694 <xTaskCheckForTimeOut>:
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <xTaskCheckForTimeOut+0x26>
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <xTaskCheckForTimeOut+0x24>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xTaskCheckForTimeOut+0x42>
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xTaskCheckForTimeOut+0x40>
 80026d6:	f000 fe0b 	bl	80032f0 <vPortEnterCritical>
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <xTaskCheckForTimeOut+0xc4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f2:	d102      	bne.n	80026fa <xTaskCheckForTimeOut+0x66>
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	e026      	b.n	8002748 <xTaskCheckForTimeOut+0xb4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b17      	ldr	r3, [pc, #92]	; (800275c <xTaskCheckForTimeOut+0xc8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d00a      	beq.n	800271c <xTaskCheckForTimeOut+0x88>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	429a      	cmp	r2, r3
 800270e:	d305      	bcc.n	800271c <xTaskCheckForTimeOut+0x88>
 8002710:	2301      	movs	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e015      	b.n	8002748 <xTaskCheckForTimeOut+0xb4>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	429a      	cmp	r2, r3
 8002724:	d20b      	bcs.n	800273e <xTaskCheckForTimeOut+0xaa>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	1ad2      	subs	r2, r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ff98 	bl	8002668 <vTaskInternalSetTimeOutState>
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	e004      	b.n	8002748 <xTaskCheckForTimeOut+0xb4>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	2301      	movs	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	f000 fe02 	bl	8003350 <vPortExitCritical>
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4618      	mov	r0, r3
 8002750:	3720      	adds	r7, #32
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000180 	.word	0x20000180
 800275c:	20000194 	.word	0x20000194

08002760 <vTaskMissedYield>:
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <vTaskMissedYield+0x14>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000190 	.word	0x20000190

08002778 <prvIdleTask>:
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	f000 f8b0 	bl	80028e4 <prvCheckTasksWaitingTermination>
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <prvIdleTask+0x70>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d907      	bls.n	800279c <prvIdleTask+0x24>
 800278c:	4b17      	ldr	r3, [pc, #92]	; (80027ec <prvIdleTask+0x74>)
 800278e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f7ff fb14 	bl	8001dc8 <prvGetExpectedIdleTime>
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d9eb      	bls.n	8002780 <prvIdleTask+0x8>
 80027a8:	f7ff fb00 	bl	8001dac <vTaskSuspendAll>
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <prvIdleTask+0x78>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <prvIdleTask+0x7c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d20a      	bcs.n	80027ce <prvIdleTask+0x56>
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <prvIdleTask+0x54>
 80027ce:	f7ff fafb 	bl	8001dc8 <prvGetExpectedIdleTime>
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d902      	bls.n	80027e0 <prvIdleTask+0x68>
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fe26 	bl	800342c <vPortSuppressTicksAndSleep>
 80027e0:	f7ff fb28 	bl	8001e34 <xTaskResumeAll>
 80027e4:	e7cc      	b.n	8002780 <prvIdleTask+0x8>
 80027e6:	bf00      	nop
 80027e8:	200000a8 	.word	0x200000a8
 80027ec:	e000ed04 	.word	0xe000ed04
 80027f0:	2000019c 	.word	0x2000019c
 80027f4:	20000180 	.word	0x20000180

080027f8 <eTaskConfirmSleepModeStatus>:
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	2301      	movs	r3, #1
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	2301      	movs	r3, #1
 8002804:	71fb      	strb	r3, [r7, #7]
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <eTaskConfirmSleepModeStatus+0x58>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <eTaskConfirmSleepModeStatus+0x1c>
 800280e:	2300      	movs	r3, #0
 8002810:	71fb      	strb	r3, [r7, #7]
 8002812:	e017      	b.n	8002844 <eTaskConfirmSleepModeStatus+0x4c>
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <eTaskConfirmSleepModeStatus+0x5c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <eTaskConfirmSleepModeStatus+0x2a>
 800281c:	2300      	movs	r3, #0
 800281e:	71fb      	strb	r3, [r7, #7]
 8002820:	e010      	b.n	8002844 <eTaskConfirmSleepModeStatus+0x4c>
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <eTaskConfirmSleepModeStatus+0x60>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <eTaskConfirmSleepModeStatus+0x38>
 800282a:	2300      	movs	r3, #0
 800282c:	71fb      	strb	r3, [r7, #7]
 800282e:	e009      	b.n	8002844 <eTaskConfirmSleepModeStatus+0x4c>
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <eTaskConfirmSleepModeStatus+0x64>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b0a      	ldr	r3, [pc, #40]	; (8002860 <eTaskConfirmSleepModeStatus+0x68>)
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	1acb      	subs	r3, r1, r3
 800283c:	429a      	cmp	r2, r3
 800283e:	d101      	bne.n	8002844 <eTaskConfirmSleepModeStatus+0x4c>
 8002840:	2302      	movs	r3, #2
 8002842:	71fb      	strb	r3, [r7, #7]
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	2000013c 	.word	0x2000013c
 8002854:	20000190 	.word	0x20000190
 8002858:	2000018c 	.word	0x2000018c
 800285c:	20000168 	.word	0x20000168
 8002860:	2000017c 	.word	0x2000017c

08002864 <prvInitialiseTaskLists>:
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	e00c      	b.n	800288a <prvInitialiseTaskLists+0x26>
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <prvInitialiseTaskLists+0x60>)
 800287c:	4413      	add	r3, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fbba 	bl	8002ff8 <vListInitialise>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3301      	adds	r3, #1
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d9ef      	bls.n	8002870 <prvInitialiseTaskLists+0xc>
 8002890:	480d      	ldr	r0, [pc, #52]	; (80028c8 <prvInitialiseTaskLists+0x64>)
 8002892:	f000 fbb1 	bl	8002ff8 <vListInitialise>
 8002896:	480d      	ldr	r0, [pc, #52]	; (80028cc <prvInitialiseTaskLists+0x68>)
 8002898:	f000 fbae 	bl	8002ff8 <vListInitialise>
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <prvInitialiseTaskLists+0x6c>)
 800289e:	f000 fbab 	bl	8002ff8 <vListInitialise>
 80028a2:	480c      	ldr	r0, [pc, #48]	; (80028d4 <prvInitialiseTaskLists+0x70>)
 80028a4:	f000 fba8 	bl	8002ff8 <vListInitialise>
 80028a8:	480b      	ldr	r0, [pc, #44]	; (80028d8 <prvInitialiseTaskLists+0x74>)
 80028aa:	f000 fba5 	bl	8002ff8 <vListInitialise>
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <prvInitialiseTaskLists+0x78>)
 80028b0:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <prvInitialiseTaskLists+0x64>)
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <prvInitialiseTaskLists+0x7c>)
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <prvInitialiseTaskLists+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200000a8 	.word	0x200000a8
 80028c8:	2000010c 	.word	0x2000010c
 80028cc:	20000120 	.word	0x20000120
 80028d0:	2000013c 	.word	0x2000013c
 80028d4:	20000150 	.word	0x20000150
 80028d8:	20000168 	.word	0x20000168
 80028dc:	20000134 	.word	0x20000134
 80028e0:	20000138 	.word	0x20000138

080028e4 <prvCheckTasksWaitingTermination>:
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	e019      	b.n	8002920 <prvCheckTasksWaitingTermination+0x3c>
 80028ec:	f000 fd00 	bl	80032f0 <vPortEnterCritical>
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <prvCheckTasksWaitingTermination+0x50>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	607b      	str	r3, [r7, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fbde 	bl	80030be <uxListRemove>
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <prvCheckTasksWaitingTermination+0x54>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3b01      	subs	r3, #1
 8002908:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <prvCheckTasksWaitingTermination+0x54>)
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <prvCheckTasksWaitingTermination+0x58>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <prvCheckTasksWaitingTermination+0x58>)
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	f000 fd1b 	bl	8003350 <vPortExitCritical>
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f810 	bl	8002940 <prvDeleteTCB>
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <prvCheckTasksWaitingTermination+0x58>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e1      	bne.n	80028ec <prvCheckTasksWaitingTermination+0x8>
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000150 	.word	0x20000150
 8002938:	2000017c 	.word	0x2000017c
 800293c:	20000164 	.word	0x20000164

08002940 <prvDeleteTCB>:
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fb41 	bl	8002fd4 <vPortFree>
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fb3e 	bl	8002fd4 <vPortFree>
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <prvResetNextTaskUnblockTime>:
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <prvResetNextTaskUnblockTime+0x2c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <prvResetNextTaskUnblockTime+0x18>
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <prvResetNextTaskUnblockTime+0x30>)
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e005      	b.n	8002984 <prvResetNextTaskUnblockTime+0x24>
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <prvResetNextTaskUnblockTime+0x2c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a03      	ldr	r2, [pc, #12]	; (8002990 <prvResetNextTaskUnblockTime+0x30>)
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	20000134 	.word	0x20000134
 8002990:	2000019c 	.word	0x2000019c

08002994 <xTaskGetSchedulerState>:
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <xTaskGetSchedulerState+0x34>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <xTaskGetSchedulerState+0x14>
 80029a2:	2301      	movs	r3, #1
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	e008      	b.n	80029ba <xTaskGetSchedulerState+0x26>
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <xTaskGetSchedulerState+0x38>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <xTaskGetSchedulerState+0x22>
 80029b0:	2302      	movs	r3, #2
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	e001      	b.n	80029ba <xTaskGetSchedulerState+0x26>
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000188 	.word	0x20000188
 80029cc:	200001a4 	.word	0x200001a4

080029d0 <prvAddCurrentTaskToDelayedList>:
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <prvAddCurrentTaskToDelayedList+0xc4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fb69 	bl	80030be <uxListRemove>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f2:	d124      	bne.n	8002a3e <prvAddCurrentTaskToDelayedList+0x6e>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d021      	beq.n	8002a3e <prvAddCurrentTaskToDelayedList+0x6e>
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xcc>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	6892      	ldr	r2, [r2, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	3204      	adds	r2, #4
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	1d1a      	adds	r2, r3, #4
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xcc>)
 8002a2e:	615a      	str	r2, [r3, #20]
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xcc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <prvAddCurrentTaskToDelayedList+0xcc>)
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	bf00      	nop
 8002a3c:	e026      	b.n	8002a8c <prvAddCurrentTaskToDelayedList+0xbc>
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d209      	bcs.n	8002a6a <prvAddCurrentTaskToDelayedList+0x9a>
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <prvAddCurrentTaskToDelayedList+0xd0>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 faf3 	bl	800304e <vListInsert>
 8002a68:	e010      	b.n	8002a8c <prvAddCurrentTaskToDelayedList+0xbc>
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3304      	adds	r3, #4
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f000 fae9 	bl	800304e <vListInsert>
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d202      	bcs.n	8002a8c <prvAddCurrentTaskToDelayedList+0xbc>
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	bf00      	nop
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000180 	.word	0x20000180
 8002a98:	200000a4 	.word	0x200000a4
 8002a9c:	20000168 	.word	0x20000168
 8002aa0:	20000138 	.word	0x20000138
 8002aa4:	20000134 	.word	0x20000134
 8002aa8:	2000019c 	.word	0x2000019c

08002aac <xTimerCreateTimerTask>:
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	f000 fa45 	bl	8002f44 <prvCheckForValidListAndQueue>
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <xTimerCreateTimerTask+0x54>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <xTimerCreateTimerTask+0x2c>
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <xTimerCreateTimerTask+0x58>)
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2300      	movs	r3, #0
 8002acc:	2280      	movs	r2, #128	; 0x80
 8002ace:	490e      	ldr	r1, [pc, #56]	; (8002b08 <xTimerCreateTimerTask+0x5c>)
 8002ad0:	480e      	ldr	r0, [pc, #56]	; (8002b0c <xTimerCreateTimerTask+0x60>)
 8002ad2:	f7fe fee7 	bl	80018a4 <xTaskCreate>
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10a      	bne.n	8002af4 <xTimerCreateTimerTask+0x48>
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	bf00      	nop
 8002af2:	e7fe      	b.n	8002af2 <xTimerCreateTimerTask+0x46>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200001d8 	.word	0x200001d8
 8002b04:	200001dc 	.word	0x200001dc
 8002b08:	08003e7c 	.word	0x08003e7c
 8002b0c:	08002bb5 	.word	0x08002bb5

08002b10 <prvReloadTimer>:
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	e008      	b.n	8002b30 <prvReloadTimer+0x20>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4413      	add	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	4798      	blx	r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	18d1      	adds	r1, r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f8db 	bl	8002cf8 <prvInsertTimerInActiveList>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ea      	bne.n	8002b1e <prvReloadTimer+0xe>
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <prvProcessExpiredTimer>:
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <prvProcessExpiredTimer+0x5c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 faa6 	bl	80030be <uxListRemove>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <prvProcessExpiredTimer+0x38>
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f7ff ffc3 	bl	8002b10 <prvReloadTimer>
 8002b8a:	e008      	b.n	8002b9e <prvProcessExpiredTimer+0x4a>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	4798      	blx	r3
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200001d0 	.word	0x200001d0

08002bb4 <prvTimerTask>:
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	f107 0308 	add.w	r3, r7, #8
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 f857 	bl	8002c74 <prvGetNextExpireTime>
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f803 	bl	8002bd8 <prvProcessTimerOrBlockTask>
 8002bd2:	f000 f8d3 	bl	8002d7c <prvProcessReceivedCommands>
 8002bd6:	e7f1      	b.n	8002bbc <prvTimerTask+0x8>

08002bd8 <prvProcessTimerOrBlockTask>:
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	f7ff f8e3 	bl	8001dac <vTaskSuspendAll>
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f864 	bl	8002cb8 <prvSampleTimeNow>
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d130      	bne.n	8002c5a <prvProcessTimerOrBlockTask+0x82>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <prvProcessTimerOrBlockTask+0x3c>
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d806      	bhi.n	8002c14 <prvProcessTimerOrBlockTask+0x3c>
 8002c06:	f7ff f915 	bl	8001e34 <xTaskResumeAll>
 8002c0a:	68f9      	ldr	r1, [r7, #12]
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ffa1 	bl	8002b54 <prvProcessExpiredTimer>
 8002c12:	e024      	b.n	8002c5e <prvProcessTimerOrBlockTask+0x86>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <prvProcessTimerOrBlockTask+0x54>
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <prvProcessTimerOrBlockTask+0x90>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <prvProcessTimerOrBlockTask+0x50>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <prvProcessTimerOrBlockTask+0x52>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <prvProcessTimerOrBlockTask+0x94>)
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f000 ffbb 	bl	8003bb4 <vQueueWaitForMessageRestricted>
 8002c3e:	f7ff f8f9 	bl	8001e34 <xTaskResumeAll>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10a      	bne.n	8002c5e <prvProcessTimerOrBlockTask+0x86>
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <prvProcessTimerOrBlockTask+0x98>)
 8002c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	e001      	b.n	8002c5e <prvProcessTimerOrBlockTask+0x86>
 8002c5a:	f7ff f8eb 	bl	8001e34 <xTaskResumeAll>
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200001d4 	.word	0x200001d4
 8002c6c:	200001d8 	.word	0x200001d8
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <prvGetNextExpireTime>:
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <prvGetNextExpireTime+0x40>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <prvGetNextExpireTime+0x16>
 8002c86:	2201      	movs	r2, #1
 8002c88:	e000      	b.n	8002c8c <prvGetNextExpireTime+0x18>
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <prvGetNextExpireTime+0x30>
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <prvGetNextExpireTime+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e001      	b.n	8002ca8 <prvGetNextExpireTime+0x34>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	200001d0 	.word	0x200001d0

08002cb8 <prvSampleTimeNow>:
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	f7ff f9b4 	bl	800202c <xTaskGetTickCount>
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <prvSampleTimeNow+0x3c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d205      	bcs.n	8002cdc <prvSampleTimeNow+0x24>
 8002cd0:	f000 f912 	bl	8002ef8 <prvSwitchTimerLists>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e002      	b.n	8002ce2 <prvSampleTimeNow+0x2a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <prvSampleTimeNow+0x3c>)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200001e0 	.word	0x200001e0

08002cf8 <prvInsertTimerInActiveList>:
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	611a      	str	r2, [r3, #16]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d812      	bhi.n	8002d44 <prvInsertTimerInActiveList+0x4c>
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	1ad2      	subs	r2, r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <prvInsertTimerInActiveList+0x3a>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e01b      	b.n	8002d6a <prvInsertTimerInActiveList+0x72>
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <prvInsertTimerInActiveList+0x7c>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f000 f986 	bl	800304e <vListInsert>
 8002d42:	e012      	b.n	8002d6a <prvInsertTimerInActiveList+0x72>
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d206      	bcs.n	8002d5a <prvInsertTimerInActiveList+0x62>
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d302      	bcc.n	8002d5a <prvInsertTimerInActiveList+0x62>
 8002d54:	2301      	movs	r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e007      	b.n	8002d6a <prvInsertTimerInActiveList+0x72>
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <prvInsertTimerInActiveList+0x80>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3304      	adds	r3, #4
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f000 f972 	bl	800304e <vListInsert>
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	200001d4 	.word	0x200001d4
 8002d78:	200001d0 	.word	0x200001d0

08002d7c <prvProcessReceivedCommands>:
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	e0a6      	b.n	8002ed2 <prvProcessReceivedCommands+0x156>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f2c0 80a2 	blt.w	8002ed0 <prvProcessReceivedCommands+0x154>
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <prvProcessReceivedCommands+0x26>
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 f98e 	bl	80030be <uxListRemove>
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff87 	bl	8002cb8 <prvSampleTimeNow>
 8002daa:	61b8      	str	r0, [r7, #24]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	f200 808e 	bhi.w	8002ed2 <prvProcessReceivedCommands+0x156>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <prvProcessReceivedCommands+0x40>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002de1 	.word	0x08002de1
 8002dc0:	08002de1 	.word	0x08002de1
 8002dc4:	08002e49 	.word	0x08002e49
 8002dc8:	08002e5d 	.word	0x08002e5d
 8002dcc:	08002ea7 	.word	0x08002ea7
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002de1 	.word	0x08002de1
 8002dd8:	08002e49 	.word	0x08002e49
 8002ddc:	08002e5d 	.word	0x08002e5d
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	18d1      	adds	r1, r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	69f8      	ldr	r0, [r7, #28]
 8002e00:	f7ff ff7a 	bl	8002cf8 <prvInsertTimerInActiveList>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d063      	beq.n	8002ed2 <prvProcessReceivedCommands+0x156>
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d009      	beq.n	8002e2c <prvProcessReceivedCommands+0xb0>
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	4413      	add	r3, r2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4619      	mov	r1, r3
 8002e24:	69f8      	ldr	r0, [r7, #28]
 8002e26:	f7ff fe73 	bl	8002b10 <prvReloadTimer>
 8002e2a:	e008      	b.n	8002e3e <prvProcessReceivedCommands+0xc2>
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	69f8      	ldr	r0, [r7, #28]
 8002e44:	4798      	blx	r3
 8002e46:	e044      	b.n	8002ed2 <prvProcessReceivedCommands+0x156>
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e4e:	f023 0301 	bic.w	r3, r3, #1
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002e5a:	e03a      	b.n	8002ed2 <prvProcessReceivedCommands+0x156>
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	619a      	str	r2, [r3, #24]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10a      	bne.n	8002e92 <prvProcessReceivedCommands+0x116>
 8002e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	bf00      	nop
 8002e90:	e7fe      	b.n	8002e90 <prvProcessReceivedCommands+0x114>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	18d1      	adds	r1, r2, r3
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	69f8      	ldr	r0, [r7, #28]
 8002ea0:	f7ff ff2a 	bl	8002cf8 <prvInsertTimerInActiveList>
 8002ea4:	e015      	b.n	8002ed2 <prvProcessReceivedCommands+0x156>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <prvProcessReceivedCommands+0x140>
 8002eb4:	69f8      	ldr	r0, [r7, #28]
 8002eb6:	f000 f88d 	bl	8002fd4 <vPortFree>
 8002eba:	e00a      	b.n	8002ed2 <prvProcessReceivedCommands+0x156>
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002ece:	e000      	b.n	8002ed2 <prvProcessReceivedCommands+0x156>
 8002ed0:	bf00      	nop
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <prvProcessReceivedCommands+0x178>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f107 0108 	add.w	r1, r7, #8
 8002eda:	2200      	movs	r2, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fcad 	bl	800383c <xQueueReceive>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f af4d 	bne.w	8002d84 <prvProcessReceivedCommands+0x8>
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200001d8 	.word	0x200001d8

08002ef8 <prvSwitchTimerLists>:
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	e009      	b.n	8002f14 <prvSwitchTimerLists+0x1c>
 8002f00:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <prvSwitchTimerLists+0x44>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0e:	6838      	ldr	r0, [r7, #0]
 8002f10:	f7ff fe20 	bl	8002b54 <prvProcessExpiredTimer>
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <prvSwitchTimerLists+0x44>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <prvSwitchTimerLists+0x8>
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <prvSwitchTimerLists+0x44>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	607b      	str	r3, [r7, #4]
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <prvSwitchTimerLists+0x48>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <prvSwitchTimerLists+0x44>)
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <prvSwitchTimerLists+0x48>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200001d0 	.word	0x200001d0
 8002f40:	200001d4 	.word	0x200001d4

08002f44 <prvCheckForValidListAndQueue>:
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	f000 f9d2 	bl	80032f0 <vPortEnterCritical>
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <prvCheckForValidListAndQueue+0x54>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11d      	bne.n	8002f90 <prvCheckForValidListAndQueue+0x4c>
 8002f54:	4811      	ldr	r0, [pc, #68]	; (8002f9c <prvCheckForValidListAndQueue+0x58>)
 8002f56:	f000 f84f 	bl	8002ff8 <vListInitialise>
 8002f5a:	4811      	ldr	r0, [pc, #68]	; (8002fa0 <prvCheckForValidListAndQueue+0x5c>)
 8002f5c:	f000 f84c 	bl	8002ff8 <vListInitialise>
 8002f60:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <prvCheckForValidListAndQueue+0x60>)
 8002f62:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <prvCheckForValidListAndQueue+0x58>)
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <prvCheckForValidListAndQueue+0x64>)
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <prvCheckForValidListAndQueue+0x5c>)
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	210c      	movs	r1, #12
 8002f70:	200a      	movs	r0, #10
 8002f72:	f000 fbf1 	bl	8003758 <xQueueGenericCreate>
 8002f76:	4603      	mov	r3, r0
 8002f78:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <prvCheckForValidListAndQueue+0x54>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <prvCheckForValidListAndQueue+0x54>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <prvCheckForValidListAndQueue+0x4c>
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <prvCheckForValidListAndQueue+0x54>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4908      	ldr	r1, [pc, #32]	; (8002fac <prvCheckForValidListAndQueue+0x68>)
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fdc4 	bl	8003b18 <vQueueAddToRegistry>
 8002f90:	f000 f9de 	bl	8003350 <vPortExitCritical>
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200001d8 	.word	0x200001d8
 8002f9c:	200001a8 	.word	0x200001a8
 8002fa0:	200001bc 	.word	0x200001bc
 8002fa4:	200001d0 	.word	0x200001d0
 8002fa8:	200001d4 	.word	0x200001d4
 8002fac:	08003e84 	.word	0x08003e84

08002fb0 <pvPortMalloc>:
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	f7fe fef8 	bl	8001dac <vTaskSuspendAll>
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fe57 	bl	8003c70 <malloc>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	f7fe ff35 	bl	8001e34 <xTaskResumeAll>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <vPortFree>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <vPortFree+0x1c>
 8002fe2:	f7fe fee3 	bl	8001dac <vTaskSuspendAll>
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fe4a 	bl	8003c80 <free>
 8002fec:	f7fe ff22 	bl	8001e34 <xTaskResumeAll>
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <vListInitialise>:
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f103 0208 	add.w	r2, r3, #8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f103 0208 	add.w	r2, r3, #8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f103 0208 	add.w	r2, r3, #8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <vListInitialiseItem>:
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <vListInsert>:
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d103      	bne.n	800306e <vListInsert+0x20>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e00c      	b.n	8003088 <vListInsert+0x3a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3308      	adds	r3, #8
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	e002      	b.n	800307c <vListInsert+0x2e>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	429a      	cmp	r2, r3
 8003086:	d2f6      	bcs.n	8003076 <vListInsert+0x28>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	611a      	str	r2, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <uxListRemove>:
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6892      	ldr	r2, [r2, #8]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6852      	ldr	r2, [r2, #4]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d103      	bne.n	80030f2 <uxListRemove+0x34>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <pxPortInitialiseStack>:
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3b04      	subs	r3, #4
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3b04      	subs	r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f023 0201 	bic.w	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3b04      	subs	r3, #4
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <pxPortInitialiseStack+0x54>)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3b14      	subs	r3, #20
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3b20      	subs	r3, #32
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	08003169 	.word	0x08003169

08003168 <prvTaskExitError>:
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <prvTaskExitError+0x54>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d00a      	beq.n	8003192 <prvTaskExitError+0x2a>
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <prvTaskExitError+0x28>
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0fc      	beq.n	80031a8 <prvTaskExitError+0x40>
 80031ae:	bf00      	nop
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000010 	.word	0x20000010

080031c0 <SVC_Handler>:
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <pxCurrentTCBConst2>)
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	6808      	ldr	r0, [r1, #0]
 80031c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031ca:	f380 8809 	msr	PSP, r0
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f04f 0000 	mov.w	r0, #0
 80031d6:	f380 8811 	msr	BASEPRI, r0
 80031da:	f04e 0e0d 	orr.w	lr, lr, #13
 80031de:	4770      	bx	lr

080031e0 <pxCurrentTCBConst2>:
 80031e0:	200000a4 	.word	0x200000a4
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop

080031e8 <prvPortStartFirstTask>:
 80031e8:	4806      	ldr	r0, [pc, #24]	; (8003204 <prvPortStartFirstTask+0x1c>)
 80031ea:	6800      	ldr	r0, [r0, #0]
 80031ec:	6800      	ldr	r0, [r0, #0]
 80031ee:	f380 8808 	msr	MSP, r0
 80031f2:	b662      	cpsie	i
 80031f4:	b661      	cpsie	f
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	df00      	svc	0
 8003200:	bf00      	nop
 8003202:	0000      	.short	0x0000
 8003204:	e000ed08 	.word	0xe000ed08
 8003208:	bf00      	nop
 800320a:	bf00      	nop

0800320c <xPortStartScheduler>:
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	4b32      	ldr	r3, [pc, #200]	; (80032dc <xPortStartScheduler+0xd0>)
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	22ff      	movs	r2, #255	; 0xff
 8003222:	701a      	strb	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	70fb      	strb	r3, [r7, #3]
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <xPortStartScheduler+0xd4>)
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <xPortStartScheduler+0xd8>)
 800323c:	2207      	movs	r2, #7
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e009      	b.n	8003256 <xPortStartScheduler+0x4a>
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <xPortStartScheduler+0xd8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3b01      	subs	r3, #1
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <xPortStartScheduler+0xd8>)
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	b2db      	uxtb	r3, r3
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	b2db      	uxtb	r3, r3
 8003254:	70fb      	strb	r3, [r7, #3]
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325e:	2b80      	cmp	r3, #128	; 0x80
 8003260:	d0ef      	beq.n	8003242 <xPortStartScheduler+0x36>
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <xPortStartScheduler+0xd8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1c3 0307 	rsb	r3, r3, #7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d00a      	beq.n	8003284 <xPortStartScheduler+0x78>
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	bf00      	nop
 8003282:	e7fe      	b.n	8003282 <xPortStartScheduler+0x76>
 8003284:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <xPortStartScheduler+0xd8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <xPortStartScheduler+0xd8>)
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <xPortStartScheduler+0xd8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003296:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <xPortStartScheduler+0xd8>)
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <xPortStartScheduler+0xdc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <xPortStartScheduler+0xdc>)
 80032a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <xPortStartScheduler+0xdc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <xPortStartScheduler+0xdc>)
 80032b4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	f000 f981 	bl	80035c0 <vPortSetupTimerInterrupt>
 80032be:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <xPortStartScheduler+0xe0>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f7ff ff90 	bl	80031e8 <prvPortStartFirstTask>
 80032c8:	f7ff f830 	bl	800232c <vTaskSwitchContext>
 80032cc:	f7ff ff4c 	bl	8003168 <prvTaskExitError>
 80032d0:	2300      	movs	r3, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000e400 	.word	0xe000e400
 80032e0:	200001f0 	.word	0x200001f0
 80032e4:	200001f4 	.word	0x200001f4
 80032e8:	e000ed20 	.word	0xe000ed20
 80032ec:	20000010 	.word	0x20000010

080032f0 <vPortEnterCritical>:
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	bf00      	nop
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <vPortEnterCritical+0x58>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <vPortEnterCritical+0x58>)
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <vPortEnterCritical+0x58>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10f      	bne.n	800333c <vPortEnterCritical+0x4c>
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <vPortEnterCritical+0x5c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <vPortEnterCritical+0x4c>
 8003326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	bf00      	nop
 800333a:	e7fe      	b.n	800333a <vPortEnterCritical+0x4a>
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000010 	.word	0x20000010
 800334c:	e000ed04 	.word	0xe000ed04

08003350 <vPortExitCritical>:
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <vPortExitCritical+0x4c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <vPortExitCritical+0x24>
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	bf00      	nop
 8003372:	e7fe      	b.n	8003372 <vPortExitCritical+0x22>
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <vPortExitCritical+0x4c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3b01      	subs	r3, #1
 800337a:	4a08      	ldr	r2, [pc, #32]	; (800339c <vPortExitCritical+0x4c>)
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <vPortExitCritical+0x4c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <vPortExitCritical+0x42>
 8003386:	2300      	movs	r3, #0
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20000010 	.word	0x20000010

080033a0 <PendSV_Handler>:
 80033a0:	f3ef 8009 	mrs	r0, PSP
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <pxCurrentTCBConst>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033b0:	6010      	str	r0, [r2, #0]
 80033b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80033b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80033ba:	f380 8811 	msr	BASEPRI, r0
 80033be:	f7fe ffb5 	bl	800232c <vTaskSwitchContext>
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f380 8811 	msr	BASEPRI, r0
 80033ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	6808      	ldr	r0, [r1, #0]
 80033d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033d6:	f380 8809 	msr	PSP, r0
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	4770      	bx	lr

080033e0 <pxCurrentTCBConst>:
 80033e0:	200000a4 	.word	0x200000a4
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop

080033e8 <SysTick_Handler>:
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	bf00      	nop
 8003402:	f7fe fe7b 	bl	80020fc <xTaskIncrementTick>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <SysTick_Handler+0x2c>
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <SysTick_Handler+0x40>)
 800340e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	2300      	movs	r3, #0
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	bf00      	nop
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <vPortSuppressTicksAndSleep>:
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	4b5b      	ldr	r3, [pc, #364]	; (80035a4 <vPortSuppressTicksAndSleep+0x178>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	429a      	cmp	r2, r3
 800343c:	d902      	bls.n	8003444 <vPortSuppressTicksAndSleep+0x18>
 800343e:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <vPortSuppressTicksAndSleep+0x178>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	b672      	cpsid	i
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	f3bf 8f6f 	isb	sy
 800344e:	f7ff f9d3 	bl	80027f8 <eTaskConfirmSleepModeStatus>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <vPortSuppressTicksAndSleep+0x30>
 8003458:	b662      	cpsie	i
 800345a:	e09e      	b.n	800359a <vPortSuppressTicksAndSleep+0x16e>
 800345c:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <vPortSuppressTicksAndSleep+0x17c>)
 800345e:	2206      	movs	r2, #6
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	4b52      	ldr	r3, [pc, #328]	; (80035ac <vPortSuppressTicksAndSleep+0x180>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <vPortSuppressTicksAndSleep+0x48>
 800346e:	4b50      	ldr	r3, [pc, #320]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	4a4d      	ldr	r2, [pc, #308]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4413      	add	r3, r2
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <vPortSuppressTicksAndSleep+0x188>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <vPortSuppressTicksAndSleep+0x78>
 8003492:	4b48      	ldr	r3, [pc, #288]	; (80035b4 <vPortSuppressTicksAndSleep+0x188>)
 8003494:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	4b45      	ldr	r3, [pc, #276]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <vPortSuppressTicksAndSleep+0x18c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d904      	bls.n	80034b8 <vPortSuppressTicksAndSleep+0x8c>
 80034ae:	4b42      	ldr	r3, [pc, #264]	; (80035b8 <vPortSuppressTicksAndSleep+0x18c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	4a40      	ldr	r2, [pc, #256]	; (80035bc <vPortSuppressTicksAndSleep+0x190>)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <vPortSuppressTicksAndSleep+0x180>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <vPortSuppressTicksAndSleep+0x17c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a37      	ldr	r2, [pc, #220]	; (80035a8 <vPortSuppressTicksAndSleep+0x17c>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d004      	beq.n	80034e4 <vPortSuppressTicksAndSleep+0xb8>
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	bf30      	wfi
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	b662      	cpsie	i
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	b672      	cpsid	i
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	f3bf 8f6f 	isb	sy
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <vPortSuppressTicksAndSleep+0x17c>)
 80034fa:	2206      	movs	r2, #6
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <vPortSuppressTicksAndSleep+0x17c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01d      	beq.n	8003546 <vPortSuppressTicksAndSleep+0x11a>
 800350a:	4b29      	ldr	r3, [pc, #164]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b27      	ldr	r3, [pc, #156]	; (80035ac <vPortSuppressTicksAndSleep+0x180>)
 8003510:	6819      	ldr	r1, [r3, #0]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	1acb      	subs	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3b01      	subs	r3, #1
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <vPortSuppressTicksAndSleep+0x18c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	429a      	cmp	r2, r3
 8003524:	d904      	bls.n	8003530 <vPortSuppressTicksAndSleep+0x104>
 8003526:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	429a      	cmp	r2, r3
 800352e:	d903      	bls.n	8003538 <vPortSuppressTicksAndSleep+0x10c>
 8003530:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3b01      	subs	r3, #1
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	4a20      	ldr	r2, [pc, #128]	; (80035bc <vPortSuppressTicksAndSleep+0x190>)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3b01      	subs	r3, #1
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	e01a      	b.n	800357c <vPortSuppressTicksAndSleep+0x150>
 8003546:	4b19      	ldr	r3, [pc, #100]	; (80035ac <vPortSuppressTicksAndSleep+0x180>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	fb02 f203 	mul.w	r2, r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	3301      	adds	r3, #1
 800356c:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	fb02 f203 	mul.w	r2, r2, r3
 8003574:	4911      	ldr	r1, [pc, #68]	; (80035bc <vPortSuppressTicksAndSleep+0x190>)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	600b      	str	r3, [r1, #0]
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <vPortSuppressTicksAndSleep+0x180>)
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <vPortSuppressTicksAndSleep+0x17c>)
 8003584:	2207      	movs	r2, #7
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <vPortSuppressTicksAndSleep+0x184>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a0b      	ldr	r2, [pc, #44]	; (80035bc <vPortSuppressTicksAndSleep+0x190>)
 800358e:	3b01      	subs	r3, #1
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	69b8      	ldr	r0, [r7, #24]
 8003594:	f7fe fd58 	bl	8002048 <vTaskStepTick>
 8003598:	b662      	cpsie	i
 800359a:	bf00      	nop
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200001e8 	.word	0x200001e8
 80035a8:	e000e010 	.word	0xe000e010
 80035ac:	e000e018 	.word	0xe000e018
 80035b0:	200001e4 	.word	0x200001e4
 80035b4:	e000ed04 	.word	0xe000ed04
 80035b8:	200001ec 	.word	0x200001ec
 80035bc:	e000e014 	.word	0xe000e014

080035c0 <vPortSetupTimerInterrupt>:
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <vPortSetupTimerInterrupt+0x58>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <vPortSetupTimerInterrupt+0x5c>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <vPortSetupTimerInterrupt+0x60>)
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b12      	ldr	r3, [pc, #72]	; (8003620 <vPortSetupTimerInterrupt+0x60>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	4a10      	ldr	r2, [pc, #64]	; (8003624 <vPortSetupTimerInterrupt+0x64>)
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b10      	ldr	r3, [pc, #64]	; (8003628 <vPortSetupTimerInterrupt+0x68>)
 80035e6:	225e      	movs	r2, #94	; 0x5e
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <vPortSetupTimerInterrupt+0x6c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <vPortSetupTimerInterrupt+0x70>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <vPortSetupTimerInterrupt+0x58>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a08      	ldr	r2, [pc, #32]	; (800361c <vPortSetupTimerInterrupt+0x5c>)
 80035fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	4a0c      	ldr	r2, [pc, #48]	; (8003634 <vPortSetupTimerInterrupt+0x74>)
 8003604:	3b01      	subs	r3, #1
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <vPortSetupTimerInterrupt+0x6c>)
 800360a:	2207      	movs	r2, #7
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000000 	.word	0x20000000
 800361c:	10624dd3 	.word	0x10624dd3
 8003620:	200001e4 	.word	0x200001e4
 8003624:	200001e8 	.word	0x200001e8
 8003628:	200001ec 	.word	0x200001ec
 800362c:	e000e010 	.word	0xe000e010
 8003630:	e000e018 	.word	0xe000e018
 8003634:	e000e014 	.word	0xe000e014

08003638 <xQueueGenericReset>:
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
 8003642:	2301      	movs	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <xQueueGenericReset+0x2e>
 8003650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	bf00      	nop
 8003664:	e7fe      	b.n	8003664 <xQueueGenericReset+0x2c>
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05d      	beq.n	8003728 <xQueueGenericReset+0xf0>
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d059      	beq.n	8003728 <xQueueGenericReset+0xf0>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	2100      	movs	r1, #0
 800367e:	fba3 2302 	umull	r2, r3, r3, r2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d000      	beq.n	8003688 <xQueueGenericReset+0x50>
 8003686:	2101      	movs	r1, #1
 8003688:	460b      	mov	r3, r1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d14c      	bne.n	8003728 <xQueueGenericReset+0xf0>
 800368e:	f7ff fe2f 	bl	80032f0 <vPortEnterCritical>
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	6939      	ldr	r1, [r7, #16]
 800369c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	441a      	add	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	2200      	movs	r2, #0
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	3b01      	subs	r3, #1
 80036c0:	6939      	ldr	r1, [r7, #16]
 80036c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	441a      	add	r2, r3
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d114      	bne.n	800370e <xQueueGenericReset+0xd6>
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01a      	beq.n	8003722 <xQueueGenericReset+0xea>
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3310      	adds	r3, #16
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fee1 	bl	80024b8 <xTaskRemoveFromEventList>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <xQueueGenericReset+0xea>
 80036fc:	4b15      	ldr	r3, [pc, #84]	; (8003754 <xQueueGenericReset+0x11c>)
 80036fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	e009      	b.n	8003722 <xQueueGenericReset+0xea>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	3310      	adds	r3, #16
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fc70 	bl	8002ff8 <vListInitialise>
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	3324      	adds	r3, #36	; 0x24
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff fc6b 	bl	8002ff8 <vListInitialise>
 8003722:	f7ff fe15 	bl	8003350 <vPortExitCritical>
 8003726:	e001      	b.n	800372c <xQueueGenericReset+0xf4>
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <xQueueGenericReset+0x110>
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <xQueueGenericReset+0x10e>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <xQueueGenericCreate>:
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	4613      	mov	r3, r2
 8003764:	71fb      	strb	r3, [r7, #7]
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d02e      	beq.n	80037ce <xQueueGenericCreate+0x76>
 8003770:	2100      	movs	r1, #0
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	fba3 2302 	umull	r2, r3, r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d000      	beq.n	8003780 <xQueueGenericCreate+0x28>
 800377e:	2101      	movs	r1, #1
 8003780:	460b      	mov	r3, r1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d123      	bne.n	80037ce <xQueueGenericCreate+0x76>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003792:	d81c      	bhi.n	80037ce <xQueueGenericCreate+0x76>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	3350      	adds	r3, #80	; 0x50
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fc04 	bl	8002fb0 <pvPortMalloc>
 80037a8:	61f8      	str	r0, [r7, #28]
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01c      	beq.n	80037ea <xQueueGenericCreate+0x92>
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3350      	adds	r3, #80	; 0x50
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	79fa      	ldrb	r2, [r7, #7]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f814 	bl	80037f4 <prvInitialiseNewQueue>
 80037cc:	e00d      	b.n	80037ea <xQueueGenericCreate+0x92>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <xQueueGenericCreate+0x92>
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xQueueGenericCreate+0x90>
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4618      	mov	r0, r3
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <prvInitialiseNewQueue>:
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	70fb      	strb	r3, [r7, #3]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d103      	bne.n	8003810 <prvInitialiseNewQueue+0x1c>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e002      	b.n	8003816 <prvInitialiseNewQueue+0x22>
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
 8003822:	2101      	movs	r1, #1
 8003824:	69b8      	ldr	r0, [r7, #24]
 8003826:	f7ff ff07 	bl	8003638 <xQueueGenericReset>
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <xQueueReceive>:
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	2300      	movs	r3, #0
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <xQueueReceive+0x30>
 8003856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385a:	f383 8811 	msr	BASEPRI, r3
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	bf00      	nop
 800386a:	e7fe      	b.n	800386a <xQueueReceive+0x2e>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d103      	bne.n	800387a <xQueueReceive+0x3e>
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <xQueueReceive+0x42>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <xQueueReceive+0x44>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <xQueueReceive+0x5e>
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <xQueueReceive+0x5c>
 800389a:	f7ff f87b 	bl	8002994 <xTaskGetSchedulerState>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <xQueueReceive+0x6e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <xQueueReceive+0x72>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <xQueueReceive+0x74>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <xQueueReceive+0x8e>
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <xQueueReceive+0x8c>
 80038ca:	f7ff fd11 	bl	80032f0 <vPortEnterCritical>
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01f      	beq.n	800391a <xQueueReceive+0xde>
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038de:	f000 f88d 	bl	80039fc <prvCopyDataFromQueue>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	1e5a      	subs	r2, r3, #1
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00f      	beq.n	8003912 <xQueueReceive+0xd6>
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	3310      	adds	r3, #16
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fdde 	bl	80024b8 <xTaskRemoveFromEventList>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <xQueueReceive+0xd6>
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <xQueueReceive+0x1bc>)
 8003904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f7ff fd1d 	bl	8003350 <vPortExitCritical>
 8003916:	2301      	movs	r3, #1
 8003918:	e069      	b.n	80039ee <xQueueReceive+0x1b2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d103      	bne.n	8003928 <xQueueReceive+0xec>
 8003920:	f7ff fd16 	bl	8003350 <vPortExitCritical>
 8003924:	2300      	movs	r3, #0
 8003926:	e062      	b.n	80039ee <xQueueReceive+0x1b2>
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <xQueueReceive+0x100>
 800392e:	f107 0310 	add.w	r3, r7, #16
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fe98 	bl	8002668 <vTaskInternalSetTimeOutState>
 8003938:	2301      	movs	r3, #1
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393c:	f7ff fd08 	bl	8003350 <vPortExitCritical>
 8003940:	f7fe fa34 	bl	8001dac <vTaskSuspendAll>
 8003944:	f7ff fcd4 	bl	80032f0 <vPortEnterCritical>
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800394e:	b25b      	sxtb	r3, r3
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d103      	bne.n	800395e <xQueueReceive+0x122>
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003964:	b25b      	sxtb	r3, r3
 8003966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396a:	d103      	bne.n	8003974 <xQueueReceive+0x138>
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003974:	f7ff fcec 	bl	8003350 <vPortExitCritical>
 8003978:	1d3a      	adds	r2, r7, #4
 800397a:	f107 0310 	add.w	r3, r7, #16
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fe87 	bl	8002694 <xTaskCheckForTimeOut>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d123      	bne.n	80039d4 <xQueueReceive+0x198>
 800398c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800398e:	f000 f8ad 	bl	8003aec <prvIsQueueEmpty>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d017      	beq.n	80039c8 <xQueueReceive+0x18c>
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	3324      	adds	r3, #36	; 0x24
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fd1f 	bl	80023e4 <vTaskPlaceOnEventList>
 80039a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a8:	f000 f84e 	bl	8003a48 <prvUnlockQueue>
 80039ac:	f7fe fa42 	bl	8001e34 <xTaskResumeAll>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d189      	bne.n	80038ca <xQueueReceive+0x8e>
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <xQueueReceive+0x1bc>)
 80039b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	e780      	b.n	80038ca <xQueueReceive+0x8e>
 80039c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ca:	f000 f83d 	bl	8003a48 <prvUnlockQueue>
 80039ce:	f7fe fa31 	bl	8001e34 <xTaskResumeAll>
 80039d2:	e77a      	b.n	80038ca <xQueueReceive+0x8e>
 80039d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039d6:	f000 f837 	bl	8003a48 <prvUnlockQueue>
 80039da:	f7fe fa2b 	bl	8001e34 <xTaskResumeAll>
 80039de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039e0:	f000 f884 	bl	8003aec <prvIsQueueEmpty>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f43f af6f 	beq.w	80038ca <xQueueReceive+0x8e>
 80039ec:	2300      	movs	r3, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	3730      	adds	r7, #48	; 0x30
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <prvCopyDataFromQueue>:
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d018      	beq.n	8003a40 <prvCopyDataFromQueue+0x44>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	441a      	add	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d303      	bcc.n	8003a30 <prvCopyDataFromQueue+0x34>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68d9      	ldr	r1, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6838      	ldr	r0, [r7, #0]
 8003a3c:	f000 f928 	bl	8003c90 <memcpy>
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <prvUnlockQueue>:
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	f7ff fc4e 	bl	80032f0 <vPortEnterCritical>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e011      	b.n	8003a82 <prvUnlockQueue+0x3a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d012      	beq.n	8003a8c <prvUnlockQueue+0x44>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3324      	adds	r3, #36	; 0x24
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fd24 	bl	80024b8 <xTaskRemoveFromEventList>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <prvUnlockQueue+0x32>
 8003a76:	f7fe fe73 	bl	8002760 <vTaskMissedYield>
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	73fb      	strb	r3, [r7, #15]
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	dce9      	bgt.n	8003a5e <prvUnlockQueue+0x16>
 8003a8a:	e000      	b.n	8003a8e <prvUnlockQueue+0x46>
 8003a8c:	bf00      	nop
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	22ff      	movs	r2, #255	; 0xff
 8003a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a96:	f7ff fc5b 	bl	8003350 <vPortExitCritical>
 8003a9a:	f7ff fc29 	bl	80032f0 <vPortEnterCritical>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aa4:	73bb      	strb	r3, [r7, #14]
 8003aa6:	e011      	b.n	8003acc <prvUnlockQueue+0x84>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d012      	beq.n	8003ad6 <prvUnlockQueue+0x8e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3310      	adds	r3, #16
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fcff 	bl	80024b8 <xTaskRemoveFromEventList>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <prvUnlockQueue+0x7c>
 8003ac0:	f7fe fe4e 	bl	8002760 <vTaskMissedYield>
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	73bb      	strb	r3, [r7, #14]
 8003acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	dce9      	bgt.n	8003aa8 <prvUnlockQueue+0x60>
 8003ad4:	e000      	b.n	8003ad8 <prvUnlockQueue+0x90>
 8003ad6:	bf00      	nop
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	22ff      	movs	r2, #255	; 0xff
 8003adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ae0:	f7ff fc36 	bl	8003350 <vPortExitCritical>
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <prvIsQueueEmpty>:
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	f7ff fbfc 	bl	80032f0 <vPortEnterCritical>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <prvIsQueueEmpty+0x1a>
 8003b00:	2301      	movs	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	e001      	b.n	8003b0a <prvIsQueueEmpty+0x1e>
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	f7ff fc21 	bl	8003350 <vPortExitCritical>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <vQueueAddToRegistry>:
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <vQueueAddToRegistry+0x2a>
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <vQueueAddToRegistry+0x28>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d024      	beq.n	8003b92 <vQueueAddToRegistry+0x7a>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e01e      	b.n	8003b8c <vQueueAddToRegistry+0x74>
 8003b4e:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <vQueueAddToRegistry+0x98>)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d105      	bne.n	8003b6a <vQueueAddToRegistry+0x52>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <vQueueAddToRegistry+0x98>)
 8003b64:	4413      	add	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	e013      	b.n	8003b92 <vQueueAddToRegistry+0x7a>
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <vQueueAddToRegistry+0x6e>
 8003b70:	4a0f      	ldr	r2, [pc, #60]	; (8003bb0 <vQueueAddToRegistry+0x98>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d104      	bne.n	8003b86 <vQueueAddToRegistry+0x6e>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4a0b      	ldr	r2, [pc, #44]	; (8003bb0 <vQueueAddToRegistry+0x98>)
 8003b82:	4413      	add	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b07      	cmp	r3, #7
 8003b90:	d9dd      	bls.n	8003b4e <vQueueAddToRegistry+0x36>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <vQueueAddToRegistry+0x8c>
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	2000024c 	.word	0x2000024c

08003bb4 <vQueueWaitForMessageRestricted>:
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	f7ff fb94 	bl	80032f0 <vPortEnterCritical>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	d103      	bne.n	8003bde <vQueueWaitForMessageRestricted+0x2a>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003be4:	b25b      	sxtb	r3, r3
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d103      	bne.n	8003bf4 <vQueueWaitForMessageRestricted+0x40>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf4:	f7ff fbac 	bl	8003350 <vPortExitCritical>
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <vQueueWaitForMessageRestricted+0x5a>
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3324      	adds	r3, #36	; 0x24
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fc0f 	bl	800242c <vTaskPlaceOnEventListRestricted>
 8003c0e:	6978      	ldr	r0, [r7, #20]
 8003c10:	f7ff ff1a 	bl	8003a48 <prvUnlockQueue>
 8003c14:	bf00      	nop
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <__errno>:
 8003c1c:	4b01      	ldr	r3, [pc, #4]	; (8003c24 <__errno+0x8>)
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000014 	.word	0x20000014

08003c28 <__libc_init_array>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	2600      	movs	r6, #0
 8003c2c:	4d0c      	ldr	r5, [pc, #48]	; (8003c60 <__libc_init_array+0x38>)
 8003c2e:	4c0d      	ldr	r4, [pc, #52]	; (8003c64 <__libc_init_array+0x3c>)
 8003c30:	1b64      	subs	r4, r4, r5
 8003c32:	10a4      	asrs	r4, r4, #2
 8003c34:	42a6      	cmp	r6, r4
 8003c36:	d109      	bne.n	8003c4c <__libc_init_array+0x24>
 8003c38:	f000 f904 	bl	8003e44 <_init>
 8003c3c:	2600      	movs	r6, #0
 8003c3e:	4d0a      	ldr	r5, [pc, #40]	; (8003c68 <__libc_init_array+0x40>)
 8003c40:	4c0a      	ldr	r4, [pc, #40]	; (8003c6c <__libc_init_array+0x44>)
 8003c42:	1b64      	subs	r4, r4, r5
 8003c44:	10a4      	asrs	r4, r4, #2
 8003c46:	42a6      	cmp	r6, r4
 8003c48:	d105      	bne.n	8003c56 <__libc_init_array+0x2e>
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c50:	4798      	blx	r3
 8003c52:	3601      	adds	r6, #1
 8003c54:	e7ee      	b.n	8003c34 <__libc_init_array+0xc>
 8003c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5a:	4798      	blx	r3
 8003c5c:	3601      	adds	r6, #1
 8003c5e:	e7f2      	b.n	8003c46 <__libc_init_array+0x1e>
 8003c60:	08003eb8 	.word	0x08003eb8
 8003c64:	08003eb8 	.word	0x08003eb8
 8003c68:	08003eb8 	.word	0x08003eb8
 8003c6c:	08003ebc 	.word	0x08003ebc

08003c70 <malloc>:
 8003c70:	4b02      	ldr	r3, [pc, #8]	; (8003c7c <malloc+0xc>)
 8003c72:	4601      	mov	r1, r0
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	f000 b86d 	b.w	8003d54 <_malloc_r>
 8003c7a:	bf00      	nop
 8003c7c:	20000014 	.word	0x20000014

08003c80 <free>:
 8003c80:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <free+0xc>)
 8003c82:	4601      	mov	r1, r0
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	f000 b819 	b.w	8003cbc <_free_r>
 8003c8a:	bf00      	nop
 8003c8c:	20000014 	.word	0x20000014

08003c90 <memcpy>:
 8003c90:	440a      	add	r2, r1
 8003c92:	4291      	cmp	r1, r2
 8003c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c98:	d100      	bne.n	8003c9c <memcpy+0xc>
 8003c9a:	4770      	bx	lr
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ca2:	4291      	cmp	r1, r2
 8003ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ca8:	d1f9      	bne.n	8003c9e <memcpy+0xe>
 8003caa:	bd10      	pop	{r4, pc}

08003cac <memset>:
 8003cac:	4603      	mov	r3, r0
 8003cae:	4402      	add	r2, r0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d100      	bne.n	8003cb6 <memset+0xa>
 8003cb4:	4770      	bx	lr
 8003cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cba:	e7f9      	b.n	8003cb0 <memset+0x4>

08003cbc <_free_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4605      	mov	r5, r0
 8003cc0:	2900      	cmp	r1, #0
 8003cc2:	d043      	beq.n	8003d4c <_free_r+0x90>
 8003cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc8:	1f0c      	subs	r4, r1, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bfb8      	it	lt
 8003cce:	18e4      	addlt	r4, r4, r3
 8003cd0:	f000 f8aa 	bl	8003e28 <__malloc_lock>
 8003cd4:	4a1e      	ldr	r2, [pc, #120]	; (8003d50 <_free_r+0x94>)
 8003cd6:	6813      	ldr	r3, [r2, #0]
 8003cd8:	4610      	mov	r0, r2
 8003cda:	b933      	cbnz	r3, 8003cea <_free_r+0x2e>
 8003cdc:	6063      	str	r3, [r4, #4]
 8003cde:	6014      	str	r4, [r2, #0]
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ce6:	f000 b8a5 	b.w	8003e34 <__malloc_unlock>
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	d90a      	bls.n	8003d04 <_free_r+0x48>
 8003cee:	6821      	ldr	r1, [r4, #0]
 8003cf0:	1862      	adds	r2, r4, r1
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	bf01      	itttt	eq
 8003cf6:	681a      	ldreq	r2, [r3, #0]
 8003cf8:	685b      	ldreq	r3, [r3, #4]
 8003cfa:	1852      	addeq	r2, r2, r1
 8003cfc:	6022      	streq	r2, [r4, #0]
 8003cfe:	6063      	str	r3, [r4, #4]
 8003d00:	6004      	str	r4, [r0, #0]
 8003d02:	e7ed      	b.n	8003ce0 <_free_r+0x24>
 8003d04:	461a      	mov	r2, r3
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	b10b      	cbz	r3, 8003d0e <_free_r+0x52>
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	d9fa      	bls.n	8003d04 <_free_r+0x48>
 8003d0e:	6811      	ldr	r1, [r2, #0]
 8003d10:	1850      	adds	r0, r2, r1
 8003d12:	42a0      	cmp	r0, r4
 8003d14:	d10b      	bne.n	8003d2e <_free_r+0x72>
 8003d16:	6820      	ldr	r0, [r4, #0]
 8003d18:	4401      	add	r1, r0
 8003d1a:	1850      	adds	r0, r2, r1
 8003d1c:	4283      	cmp	r3, r0
 8003d1e:	6011      	str	r1, [r2, #0]
 8003d20:	d1de      	bne.n	8003ce0 <_free_r+0x24>
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4401      	add	r1, r0
 8003d28:	6011      	str	r1, [r2, #0]
 8003d2a:	6053      	str	r3, [r2, #4]
 8003d2c:	e7d8      	b.n	8003ce0 <_free_r+0x24>
 8003d2e:	d902      	bls.n	8003d36 <_free_r+0x7a>
 8003d30:	230c      	movs	r3, #12
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	e7d4      	b.n	8003ce0 <_free_r+0x24>
 8003d36:	6820      	ldr	r0, [r4, #0]
 8003d38:	1821      	adds	r1, r4, r0
 8003d3a:	428b      	cmp	r3, r1
 8003d3c:	bf01      	itttt	eq
 8003d3e:	6819      	ldreq	r1, [r3, #0]
 8003d40:	685b      	ldreq	r3, [r3, #4]
 8003d42:	1809      	addeq	r1, r1, r0
 8003d44:	6021      	streq	r1, [r4, #0]
 8003d46:	6063      	str	r3, [r4, #4]
 8003d48:	6054      	str	r4, [r2, #4]
 8003d4a:	e7c9      	b.n	8003ce0 <_free_r+0x24>
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
 8003d4e:	bf00      	nop
 8003d50:	200001f8 	.word	0x200001f8

08003d54 <_malloc_r>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	1ccd      	adds	r5, r1, #3
 8003d58:	f025 0503 	bic.w	r5, r5, #3
 8003d5c:	3508      	adds	r5, #8
 8003d5e:	2d0c      	cmp	r5, #12
 8003d60:	bf38      	it	cc
 8003d62:	250c      	movcc	r5, #12
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	4606      	mov	r6, r0
 8003d68:	db01      	blt.n	8003d6e <_malloc_r+0x1a>
 8003d6a:	42a9      	cmp	r1, r5
 8003d6c:	d903      	bls.n	8003d76 <_malloc_r+0x22>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	6033      	str	r3, [r6, #0]
 8003d72:	2000      	movs	r0, #0
 8003d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d76:	f000 f857 	bl	8003e28 <__malloc_lock>
 8003d7a:	4921      	ldr	r1, [pc, #132]	; (8003e00 <_malloc_r+0xac>)
 8003d7c:	680a      	ldr	r2, [r1, #0]
 8003d7e:	4614      	mov	r4, r2
 8003d80:	b99c      	cbnz	r4, 8003daa <_malloc_r+0x56>
 8003d82:	4f20      	ldr	r7, [pc, #128]	; (8003e04 <_malloc_r+0xb0>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	b923      	cbnz	r3, 8003d92 <_malloc_r+0x3e>
 8003d88:	4621      	mov	r1, r4
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f000 f83c 	bl	8003e08 <_sbrk_r>
 8003d90:	6038      	str	r0, [r7, #0]
 8003d92:	4629      	mov	r1, r5
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f837 	bl	8003e08 <_sbrk_r>
 8003d9a:	1c43      	adds	r3, r0, #1
 8003d9c:	d123      	bne.n	8003de6 <_malloc_r+0x92>
 8003d9e:	230c      	movs	r3, #12
 8003da0:	4630      	mov	r0, r6
 8003da2:	6033      	str	r3, [r6, #0]
 8003da4:	f000 f846 	bl	8003e34 <__malloc_unlock>
 8003da8:	e7e3      	b.n	8003d72 <_malloc_r+0x1e>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	1b5b      	subs	r3, r3, r5
 8003dae:	d417      	bmi.n	8003de0 <_malloc_r+0x8c>
 8003db0:	2b0b      	cmp	r3, #11
 8003db2:	d903      	bls.n	8003dbc <_malloc_r+0x68>
 8003db4:	6023      	str	r3, [r4, #0]
 8003db6:	441c      	add	r4, r3
 8003db8:	6025      	str	r5, [r4, #0]
 8003dba:	e004      	b.n	8003dc6 <_malloc_r+0x72>
 8003dbc:	6863      	ldr	r3, [r4, #4]
 8003dbe:	42a2      	cmp	r2, r4
 8003dc0:	bf0c      	ite	eq
 8003dc2:	600b      	streq	r3, [r1, #0]
 8003dc4:	6053      	strne	r3, [r2, #4]
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 f834 	bl	8003e34 <__malloc_unlock>
 8003dcc:	f104 000b 	add.w	r0, r4, #11
 8003dd0:	1d23      	adds	r3, r4, #4
 8003dd2:	f020 0007 	bic.w	r0, r0, #7
 8003dd6:	1ac2      	subs	r2, r0, r3
 8003dd8:	d0cc      	beq.n	8003d74 <_malloc_r+0x20>
 8003dda:	1a1b      	subs	r3, r3, r0
 8003ddc:	50a3      	str	r3, [r4, r2]
 8003dde:	e7c9      	b.n	8003d74 <_malloc_r+0x20>
 8003de0:	4622      	mov	r2, r4
 8003de2:	6864      	ldr	r4, [r4, #4]
 8003de4:	e7cc      	b.n	8003d80 <_malloc_r+0x2c>
 8003de6:	1cc4      	adds	r4, r0, #3
 8003de8:	f024 0403 	bic.w	r4, r4, #3
 8003dec:	42a0      	cmp	r0, r4
 8003dee:	d0e3      	beq.n	8003db8 <_malloc_r+0x64>
 8003df0:	1a21      	subs	r1, r4, r0
 8003df2:	4630      	mov	r0, r6
 8003df4:	f000 f808 	bl	8003e08 <_sbrk_r>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d1dd      	bne.n	8003db8 <_malloc_r+0x64>
 8003dfc:	e7cf      	b.n	8003d9e <_malloc_r+0x4a>
 8003dfe:	bf00      	nop
 8003e00:	200001f8 	.word	0x200001f8
 8003e04:	200001fc 	.word	0x200001fc

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4d05      	ldr	r5, [pc, #20]	; (8003e24 <_sbrk_r+0x1c>)
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fc fb9e 	bl	8000554 <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	2000028c 	.word	0x2000028c

08003e28 <__malloc_lock>:
 8003e28:	4801      	ldr	r0, [pc, #4]	; (8003e30 <__malloc_lock+0x8>)
 8003e2a:	f000 b809 	b.w	8003e40 <__retarget_lock_acquire_recursive>
 8003e2e:	bf00      	nop
 8003e30:	20000294 	.word	0x20000294

08003e34 <__malloc_unlock>:
 8003e34:	4801      	ldr	r0, [pc, #4]	; (8003e3c <__malloc_unlock+0x8>)
 8003e36:	f000 b804 	b.w	8003e42 <__retarget_lock_release_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	20000294 	.word	0x20000294

08003e40 <__retarget_lock_acquire_recursive>:
 8003e40:	4770      	bx	lr

08003e42 <__retarget_lock_release_recursive>:
 8003e42:	4770      	bx	lr

08003e44 <_init>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	bf00      	nop
 8003e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4a:	bc08      	pop	{r3}
 8003e4c:	469e      	mov	lr, r3
 8003e4e:	4770      	bx	lr

08003e50 <_fini>:
 8003e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e52:	bf00      	nop
 8003e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e56:	bc08      	pop	{r3}
 8003e58:	469e      	mov	lr, r3
 8003e5a:	4770      	bx	lr
