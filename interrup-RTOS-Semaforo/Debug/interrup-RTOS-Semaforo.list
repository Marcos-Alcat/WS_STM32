
interrup-RTOS-Semaforo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004714  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004878  08004878  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004878  08004878  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004878  08004878  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000078  080048f8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080048f8  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011304  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bb  00000000  00000000  000313a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00033b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  000349f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001913b  00000000  00000000  00035768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4bf  00000000  00000000  0004e8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908f8  00000000  00000000  0005dd62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee65a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de4  00000000  00000000  000ee6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800480c 	.word	0x0800480c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800480c 	.word	0x0800480c

08000150 <LedBlink2>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void LedBlink2(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
		/* Se usa el semáforo para esperar por el evento. El semáforo fue creado antes
		que se inicie el scheduler, por lo tanto, antes que esta tarea se ejecute por pri
		mera vez. La tarea se bloquea indefinidamente, por lo que la función saldrá del
		estado bloqueado recién cuando el semáforo este disponible. Por lo tanto, no hay
		necesidad de chequear por el valor de retorno de la función. */
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <LedBlink2+0x68>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	f04f 31ff 	mov.w	r1, #4294967295
 8000160:	4618      	mov	r0, r3
 8000162:	f001 ff61 	bl	8002028 <xQueueSemaphoreTake>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000166:	2201      	movs	r2, #1
 8000168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016c:	4813      	ldr	r0, [pc, #76]	; (80001bc <LedBlink2+0x6c>)
 800016e:	f000 fd33 	bl	8000bd8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000176:	f000 faa7 	bl	80006c8 <HAL_Delay>
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800017a:	2200      	movs	r2, #0
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	480e      	ldr	r0, [pc, #56]	; (80001bc <LedBlink2+0x6c>)
 8000182:	f000 fd29 	bl	8000bd8 <HAL_GPIO_WritePin>
 		HAL_Delay(500);
 8000186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800018a:	f000 fa9d 	bl	80006c8 <HAL_Delay>
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800018e:	2201      	movs	r2, #1
 8000190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000194:	4809      	ldr	r0, [pc, #36]	; (80001bc <LedBlink2+0x6c>)
 8000196:	f000 fd1f 	bl	8000bd8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800019a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800019e:	f000 fa93 	bl	80006c8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a8:	4804      	ldr	r0, [pc, #16]	; (80001bc <LedBlink2+0x6c>)
 80001aa:	f000 fd15 	bl	8000bd8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80001ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b2:	f000 fa89 	bl	80006c8 <HAL_Delay>
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 80001b6:	e7cf      	b.n	8000158 <LedBlink2+0x8>
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	40011000 	.word	0x40011000

080001c0 <LedBlink1>:
	}
}

static void LedBlink1(void *pvParameters){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
	//uint32_t read_sw1_state;
	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	4808      	ldr	r0, [pc, #32]	; (80001f0 <LedBlink1+0x30>)
 80001d0:	f000 fd02 	bl	8000bd8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80001d4:	2064      	movs	r0, #100	; 0x64
 80001d6:	f000 fa77 	bl	80006c8 <HAL_Delay>
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <LedBlink1+0x30>)
 80001e2:	f000 fcf9 	bl	8000bd8 <HAL_GPIO_WritePin>
 		HAL_Delay(100);
 80001e6:	2064      	movs	r0, #100	; 0x64
 80001e8:	f000 fa6e 	bl	80006c8 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001ec:	e7ec      	b.n	80001c8 <LedBlink1+0x8>
 80001ee:	bf00      	nop
 80001f0:	40011000 	.word	0x40011000

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 fa33 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 f84d 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 f891 	bl	8000328 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  vSemaphoreCreateBinary(my_semph1);
 8000206:	2203      	movs	r2, #3
 8000208:	2100      	movs	r1, #0
 800020a:	2001      	movs	r0, #1
 800020c:	f001 fc18 	bl	8001a40 <xQueueGenericCreate>
 8000210:	4603      	mov	r3, r0
 8000212:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <main+0x90>)
 8000214:	6013      	str	r3, [r2, #0]
 8000216:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <main+0x90>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d006      	beq.n	800022c <main+0x38>
 800021e:	4b19      	ldr	r3, [pc, #100]	; (8000284 <main+0x90>)
 8000220:	6818      	ldr	r0, [r3, #0]
 8000222:	2300      	movs	r3, #0
 8000224:	2200      	movs	r2, #0
 8000226:	2100      	movs	r1, #0
 8000228:	f001 fc7c 	bl	8001b24 <xQueueGenericSend>
  //xSemaphoreGive(my_semph1);
  xTaskCreate(LedBlink1, "Blink 1", 100, NULL, 1, NULL);
 800022c:	2300      	movs	r3, #0
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	2301      	movs	r3, #1
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2300      	movs	r3, #0
 8000236:	2264      	movs	r2, #100	; 0x64
 8000238:	4913      	ldr	r1, [pc, #76]	; (8000288 <main+0x94>)
 800023a:	4814      	ldr	r0, [pc, #80]	; (800028c <main+0x98>)
 800023c:	f002 f99c 	bl	8002578 <xTaskCreate>
  xTaskCreate(LedBlink2, "Blink 2", 100, NULL, 2, NULL);
 8000240:	2300      	movs	r3, #0
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	2302      	movs	r3, #2
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	2300      	movs	r3, #0
 800024a:	2264      	movs	r2, #100	; 0x64
 800024c:	4910      	ldr	r1, [pc, #64]	; (8000290 <main+0x9c>)
 800024e:	4811      	ldr	r0, [pc, #68]	; (8000294 <main+0xa0>)
 8000250:	f002 f992 	bl	8002578 <xTaskCreate>
  vTaskStartScheduler();
 8000254:	f002 fafc 	bl	8002850 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025e:	480e      	ldr	r0, [pc, #56]	; (8000298 <main+0xa4>)
 8000260:	f000 fcba 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000264:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000268:	f000 fa2e 	bl	80006c8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	4809      	ldr	r0, [pc, #36]	; (8000298 <main+0xa4>)
 8000274:	f000 fcb0 	bl	8000bd8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000278:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800027c:	f000 fa24 	bl	80006c8 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000280:	e7ea      	b.n	8000258 <main+0x64>
 8000282:	bf00      	nop
 8000284:	200001f4 	.word	0x200001f4
 8000288:	08004824 	.word	0x08004824
 800028c:	080001c1 	.word	0x080001c1
 8000290:	0800482c 	.word	0x0800482c
 8000294:	08000151 	.word	0x08000151
 8000298:	40011000 	.word	0x40011000

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b090      	sub	sp, #64	; 0x40
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f004 f9e2 	bl	8004674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002be:	2301      	movs	r3, #1
 80002c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d0:	2302      	movs	r3, #2
 80002d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fca7 	bl	8000c38 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002f0:	f000 f8a2 	bl	8000438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2302      	movs	r3, #2
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2102      	movs	r1, #2
 800030e:	4618      	mov	r0, r3
 8000310:	f000 ff12 	bl	8001138 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800031a:	f000 f88d 	bl	8000438 <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3740      	adds	r7, #64	; 0x40
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b088      	sub	sp, #32
 800032c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a27      	ldr	r2, [pc, #156]	; (80003e0 <MX_GPIO_Init+0xb8>)
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0310 	and.w	r3, r3, #16
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <MX_GPIO_Init+0xb8>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800035a:	f043 0320 	orr.w	r3, r3, #32
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <MX_GPIO_Init+0xb8>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0320 	and.w	r3, r3, #32
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036c:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a1b      	ldr	r2, [pc, #108]	; (80003e0 <MX_GPIO_Init+0xb8>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <MX_GPIO_Init+0xb8>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	4816      	ldr	r0, [pc, #88]	; (80003e4 <MX_GPIO_Init+0xbc>)
 800038c:	f000 fc24 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2302      	movs	r3, #2
 80003a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4619      	mov	r1, r3
 80003a8:	480e      	ldr	r0, [pc, #56]	; (80003e4 <MX_GPIO_Init+0xbc>)
 80003aa:	f000 fa91 	bl	80008d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80003ae:	2340      	movs	r3, #64	; 0x40
 80003b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b2:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <MX_GPIO_Init+0xc0>)
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	4619      	mov	r1, r3
 80003c0:	480a      	ldr	r0, [pc, #40]	; (80003ec <MX_GPIO_Init+0xc4>)
 80003c2:	f000 fa85 	bl	80008d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2100      	movs	r1, #0
 80003ca:	2017      	movs	r0, #23
 80003cc:	f000 fa55 	bl	800087a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003d0:	2017      	movs	r0, #23
 80003d2:	f000 fa6e 	bl	80008b2 <HAL_NVIC_EnableIRQ>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000
 80003e8:	10210000 	.word	0x10210000
 80003ec:	40010800 	.word	0x40010800

080003f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	80fb      	strh	r3, [r7, #6]
	//if(read_sw1_state) read_sw1_state = 0;
	//else read_sw1_state = 1;
	xSemaphoreGiveFromISR(my_semph1, pdTRUE);
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <HAL_GPIO_EXTI_Callback+0x20>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2101      	movs	r1, #1
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fc8d 	bl	8001d20 <xQueueGiveFromISR>
	//xSemaphoreGive(my_semph1);
	//HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200001f4 	.word	0x200001f4

08000414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d101      	bne.n	800042a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000426:	f000 f933 	bl	8000690 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40012c00 	.word	0x40012c00

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <Error_Handler+0x8>
	...

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <HAL_MspInit+0x5c>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_MspInit+0x5c>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <HAL_MspInit+0x5c>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	61d3      	str	r3, [r2, #28]
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x5c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <HAL_MspInit+0x60>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <HAL_MspInit+0x60>)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010000 	.word	0x40010000

080004a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08c      	sub	sp, #48	; 0x30
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	6879      	ldr	r1, [r7, #4]
 80004bc:	2019      	movs	r0, #25
 80004be:	f000 f9dc 	bl	800087a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004c2:	2019      	movs	r0, #25
 80004c4:	f000 f9f5 	bl	80008b2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <HAL_InitTick+0x9c>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <HAL_InitTick+0x9c>)
 80004ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <HAL_InitTick+0x9c>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004e0:	f107 0210 	add.w	r2, r7, #16
 80004e4:	f107 0314 	add.w	r3, r7, #20
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 ff80 	bl	80013f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004f0:	f000 ff6a 	bl	80013c8 <HAL_RCC_GetPCLK2Freq>
 80004f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004f8:	4a13      	ldr	r2, [pc, #76]	; (8000548 <HAL_InitTick+0xa0>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	0c9b      	lsrs	r3, r3, #18
 8000500:	3b01      	subs	r3, #1
 8000502:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <HAL_InitTick+0xa4>)
 8000506:	4a12      	ldr	r2, [pc, #72]	; (8000550 <HAL_InitTick+0xa8>)
 8000508:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800050a:	4b10      	ldr	r3, [pc, #64]	; (800054c <HAL_InitTick+0xa4>)
 800050c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000510:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_InitTick+0xa4>)
 8000514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000516:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_InitTick+0xa4>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <HAL_InitTick+0xa4>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <HAL_InitTick+0xa4>)
 8000526:	f000 ffb1 	bl	800148c <HAL_TIM_Base_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d104      	bne.n	800053a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000530:	4806      	ldr	r0, [pc, #24]	; (800054c <HAL_InitTick+0xa4>)
 8000532:	f001 f803 	bl	800153c <HAL_TIM_Base_Start_IT>
 8000536:	4603      	mov	r3, r0
 8000538:	e000      	b.n	800053c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800053a:	2301      	movs	r3, #1
}
 800053c:	4618      	mov	r0, r3
 800053e:	3730      	adds	r7, #48	; 0x30
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021000 	.word	0x40021000
 8000548:	431bde83 	.word	0x431bde83
 800054c:	200001f8 	.word	0x200001f8
 8000550:	40012c00 	.word	0x40012c00

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000582:	2040      	movs	r0, #64	; 0x40
 8000584:	f000 fb40 	bl	8000c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <TIM1_UP_IRQHandler+0x10>)
 8000592:	f001 f825 	bl	80015e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200001f8 	.word	0x200001f8

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f004 f808 	bl	80045e4 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20005000 	.word	0x20005000
 8000600:	00000400 	.word	0x00000400
 8000604:	20000094 	.word	0x20000094
 8000608:	20000298 	.word	0x20000298

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000618:	f7ff fff8 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800061e:	490c      	ldr	r1, [pc, #48]	; (8000650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000634:	4c09      	ldr	r4, [pc, #36]	; (800065c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000642:	f003 ffd5 	bl	80045f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fdd5 	bl	80001f4 <main>
  bx lr
 800064a:	4770      	bx	lr
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000654:	08004880 	.word	0x08004880
  ldr r2, =_sbss
 8000658:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800065c:	20000294 	.word	0x20000294

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f8f5 	bl	8000864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ff14 	bl	80004a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff fee0 	bl	8000444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_IncTick+0x1c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x20>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <HAL_IncTick+0x20>)
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000240 	.word	0x20000240

080006b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <HAL_GetTick+0x10>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000240 	.word	0x20000240

080006c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d0:	f7ff fff0 	bl	80006b4 <HAL_GetTick>
 80006d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e0:	d005      	beq.n	80006ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_Delay+0x44>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ee:	bf00      	nop
 80006f0:	f7ff ffe0 	bl	80006b4 <HAL_GetTick>
 80006f4:	4602      	mov	r2, r0
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d8f7      	bhi.n	80006f0 <HAL_Delay+0x28>
  {
  }
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000008 	.word	0x20000008

08000710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	60d3      	str	r3, [r2, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <__NVIC_GetPriorityGrouping+0x18>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	f003 0307 	and.w	r3, r3, #7
}
 8000766:	4618      	mov	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	db0b      	blt.n	800079e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 021f 	and.w	r2, r3, #31
 800078c:	4906      	ldr	r1, [pc, #24]	; (80007a8 <__NVIC_EnableIRQ+0x34>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	095b      	lsrs	r3, r3, #5
 8000794:	2001      	movs	r0, #1
 8000796:	fa00 f202 	lsl.w	r2, r0, r2
 800079a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	e000e100 	.word	0xe000e100

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff4f 	bl	8000710 <__NVIC_SetPriorityGrouping>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800088c:	f7ff ff64 	bl	8000758 <__NVIC_GetPriorityGrouping>
 8000890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	6978      	ldr	r0, [r7, #20]
 8000898:	f7ff ffb2 	bl	8000800 <NVIC_EncodePriority>
 800089c:	4602      	mov	r2, r0
 800089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff81 	bl	80007ac <__NVIC_SetPriority>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff57 	bl	8000774 <__NVIC_EnableIRQ>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b08b      	sub	sp, #44	; 0x2c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008e2:	e169      	b.n	8000bb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008e4:	2201      	movs	r2, #1
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	4013      	ands	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	f040 8158 	bne.w	8000bb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4a9a      	ldr	r2, [pc, #616]	; (8000b70 <HAL_GPIO_Init+0x2a0>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d05e      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 800090c:	4a98      	ldr	r2, [pc, #608]	; (8000b70 <HAL_GPIO_Init+0x2a0>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d875      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 8000912:	4a98      	ldr	r2, [pc, #608]	; (8000b74 <HAL_GPIO_Init+0x2a4>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d058      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 8000918:	4a96      	ldr	r2, [pc, #600]	; (8000b74 <HAL_GPIO_Init+0x2a4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d86f      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 800091e:	4a96      	ldr	r2, [pc, #600]	; (8000b78 <HAL_GPIO_Init+0x2a8>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d052      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 8000924:	4a94      	ldr	r2, [pc, #592]	; (8000b78 <HAL_GPIO_Init+0x2a8>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d869      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 800092a:	4a94      	ldr	r2, [pc, #592]	; (8000b7c <HAL_GPIO_Init+0x2ac>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d04c      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 8000930:	4a92      	ldr	r2, [pc, #584]	; (8000b7c <HAL_GPIO_Init+0x2ac>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d863      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 8000936:	4a92      	ldr	r2, [pc, #584]	; (8000b80 <HAL_GPIO_Init+0x2b0>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d046      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
 800093c:	4a90      	ldr	r2, [pc, #576]	; (8000b80 <HAL_GPIO_Init+0x2b0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d85d      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 8000942:	2b12      	cmp	r3, #18
 8000944:	d82a      	bhi.n	800099c <HAL_GPIO_Init+0xcc>
 8000946:	2b12      	cmp	r3, #18
 8000948:	d859      	bhi.n	80009fe <HAL_GPIO_Init+0x12e>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <HAL_GPIO_Init+0x80>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	080009cb 	.word	0x080009cb
 8000954:	080009a5 	.word	0x080009a5
 8000958:	080009b7 	.word	0x080009b7
 800095c:	080009f9 	.word	0x080009f9
 8000960:	080009ff 	.word	0x080009ff
 8000964:	080009ff 	.word	0x080009ff
 8000968:	080009ff 	.word	0x080009ff
 800096c:	080009ff 	.word	0x080009ff
 8000970:	080009ff 	.word	0x080009ff
 8000974:	080009ff 	.word	0x080009ff
 8000978:	080009ff 	.word	0x080009ff
 800097c:	080009ff 	.word	0x080009ff
 8000980:	080009ff 	.word	0x080009ff
 8000984:	080009ff 	.word	0x080009ff
 8000988:	080009ff 	.word	0x080009ff
 800098c:	080009ff 	.word	0x080009ff
 8000990:	080009ff 	.word	0x080009ff
 8000994:	080009ad 	.word	0x080009ad
 8000998:	080009c1 	.word	0x080009c1
 800099c:	4a79      	ldr	r2, [pc, #484]	; (8000b84 <HAL_GPIO_Init+0x2b4>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d013      	beq.n	80009ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009a2:	e02c      	b.n	80009fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	623b      	str	r3, [r7, #32]
          break;
 80009aa:	e029      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	3304      	adds	r3, #4
 80009b2:	623b      	str	r3, [r7, #32]
          break;
 80009b4:	e024      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	3308      	adds	r3, #8
 80009bc:	623b      	str	r3, [r7, #32]
          break;
 80009be:	e01f      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	330c      	adds	r3, #12
 80009c6:	623b      	str	r3, [r7, #32]
          break;
 80009c8:	e01a      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d102      	bne.n	80009d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009d2:	2304      	movs	r3, #4
 80009d4:	623b      	str	r3, [r7, #32]
          break;
 80009d6:	e013      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d105      	bne.n	80009ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009e0:	2308      	movs	r3, #8
 80009e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	611a      	str	r2, [r3, #16]
          break;
 80009ea:	e009      	b.n	8000a00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ec:	2308      	movs	r3, #8
 80009ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	615a      	str	r2, [r3, #20]
          break;
 80009f6:	e003      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
          break;
 80009fc:	e000      	b.n	8000a00 <HAL_GPIO_Init+0x130>
          break;
 80009fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	2bff      	cmp	r3, #255	; 0xff
 8000a04:	d801      	bhi.n	8000a0a <HAL_GPIO_Init+0x13a>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	e001      	b.n	8000a0e <HAL_GPIO_Init+0x13e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	2bff      	cmp	r3, #255	; 0xff
 8000a14:	d802      	bhi.n	8000a1c <HAL_GPIO_Init+0x14c>
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0x152>
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	3b08      	subs	r3, #8
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	210f      	movs	r1, #15
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	401a      	ands	r2, r3
 8000a34:	6a39      	ldr	r1, [r7, #32]
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 80b1 	beq.w	8000bb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a50:	4b4d      	ldr	r3, [pc, #308]	; (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a4c      	ldr	r2, [pc, #304]	; (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b4a      	ldr	r3, [pc, #296]	; (8000b88 <HAL_GPIO_Init+0x2b8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a68:	4a48      	ldr	r2, [pc, #288]	; (8000b8c <HAL_GPIO_Init+0x2bc>)
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	3302      	adds	r3, #2
 8000a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	220f      	movs	r2, #15
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a40      	ldr	r2, [pc, #256]	; (8000b90 <HAL_GPIO_Init+0x2c0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d013      	beq.n	8000abc <HAL_GPIO_Init+0x1ec>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <HAL_GPIO_Init+0x2c4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d00d      	beq.n	8000ab8 <HAL_GPIO_Init+0x1e8>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a3e      	ldr	r2, [pc, #248]	; (8000b98 <HAL_GPIO_Init+0x2c8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d007      	beq.n	8000ab4 <HAL_GPIO_Init+0x1e4>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a3d      	ldr	r2, [pc, #244]	; (8000b9c <HAL_GPIO_Init+0x2cc>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d101      	bne.n	8000ab0 <HAL_GPIO_Init+0x1e0>
 8000aac:	2303      	movs	r3, #3
 8000aae:	e006      	b.n	8000abe <HAL_GPIO_Init+0x1ee>
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	e004      	b.n	8000abe <HAL_GPIO_Init+0x1ee>
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	e002      	b.n	8000abe <HAL_GPIO_Init+0x1ee>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <HAL_GPIO_Init+0x1ee>
 8000abc:	2300      	movs	r3, #0
 8000abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac0:	f002 0203 	and.w	r2, r2, #3
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	4093      	lsls	r3, r2
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ace:	492f      	ldr	r1, [pc, #188]	; (8000b8c <HAL_GPIO_Init+0x2bc>)
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ae8:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	492c      	ldr	r1, [pc, #176]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	608b      	str	r3, [r1, #8]
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4928      	ldr	r1, [pc, #160]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d006      	beq.n	8000b1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	4922      	ldr	r1, [pc, #136]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60cb      	str	r3, [r1, #12]
 8000b1c:	e006      	b.n	8000b2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b20:	68da      	ldr	r2, [r3, #12]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	491e      	ldr	r1, [pc, #120]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d006      	beq.n	8000b46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	4918      	ldr	r1, [pc, #96]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	604b      	str	r3, [r1, #4]
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4914      	ldr	r1, [pc, #80]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d021      	beq.n	8000ba4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	600b      	str	r3, [r1, #0]
 8000b6c:	e021      	b.n	8000bb2 <HAL_GPIO_Init+0x2e2>
 8000b6e:	bf00      	nop
 8000b70:	10320000 	.word	0x10320000
 8000b74:	10310000 	.word	0x10310000
 8000b78:	10220000 	.word	0x10220000
 8000b7c:	10210000 	.word	0x10210000
 8000b80:	10120000 	.word	0x10120000
 8000b84:	10110000 	.word	0x10110000
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	40011400 	.word	0x40011400
 8000ba0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_GPIO_Init+0x304>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	4909      	ldr	r1, [pc, #36]	; (8000bd4 <HAL_GPIO_Init+0x304>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f47f ae8e 	bne.w	80008e4 <HAL_GPIO_Init+0x14>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	372c      	adds	r7, #44	; 0x2c
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40010400 	.word	0x40010400

08000bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
 8000be4:	4613      	mov	r3, r2
 8000be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000be8:	787b      	ldrb	r3, [r7, #1]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bf4:	e003      	b.n	8000bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	041a      	lsls	r2, r3, #16
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	611a      	str	r2, [r3, #16]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c14:	695a      	ldr	r2, [r3, #20]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fbe2 	bl	80003f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40010400 	.word	0x40010400

08000c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e26c      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8087 	beq.w	8000d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c58:	4b92      	ldr	r3, [pc, #584]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	d00c      	beq.n	8000c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c64:	4b8f      	ldr	r3, [pc, #572]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d112      	bne.n	8000c96 <HAL_RCC_OscConfig+0x5e>
 8000c70:	4b8c      	ldr	r3, [pc, #560]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7c:	d10b      	bne.n	8000c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7e:	4b89      	ldr	r3, [pc, #548]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d06c      	beq.n	8000d64 <HAL_RCC_OscConfig+0x12c>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d168      	bne.n	8000d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e246      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c9e:	d106      	bne.n	8000cae <HAL_RCC_OscConfig+0x76>
 8000ca0:	4b80      	ldr	r3, [pc, #512]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a7f      	ldr	r2, [pc, #508]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e02e      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10c      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x98>
 8000cb6:	4b7b      	ldr	r3, [pc, #492]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a7a      	ldr	r2, [pc, #488]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	4b78      	ldr	r3, [pc, #480]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a77      	ldr	r2, [pc, #476]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e01d      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0xbc>
 8000cda:	4b72      	ldr	r3, [pc, #456]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a71      	ldr	r2, [pc, #452]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b6f      	ldr	r3, [pc, #444]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a6e      	ldr	r2, [pc, #440]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e00b      	b.n	8000d0c <HAL_RCC_OscConfig+0xd4>
 8000cf4:	4b6b      	ldr	r3, [pc, #428]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a6a      	ldr	r2, [pc, #424]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b68      	ldr	r3, [pc, #416]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a67      	ldr	r2, [pc, #412]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d013      	beq.n	8000d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fcce 	bl	80006b4 <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d1c:	f7ff fcca 	bl	80006b4 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b64      	cmp	r3, #100	; 0x64
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e1fa      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f0      	beq.n	8000d1c <HAL_RCC_OscConfig+0xe4>
 8000d3a:	e014      	b.n	8000d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3c:	f7ff fcba 	bl	80006b4 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d42:	e008      	b.n	8000d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d44:	f7ff fcb6 	bl	80006b4 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2b64      	cmp	r3, #100	; 0x64
 8000d50:	d901      	bls.n	8000d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d52:	2303      	movs	r3, #3
 8000d54:	e1e6      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	4b53      	ldr	r3, [pc, #332]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f0      	bne.n	8000d44 <HAL_RCC_OscConfig+0x10c>
 8000d62:	e000      	b.n	8000d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d063      	beq.n	8000e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d00b      	beq.n	8000d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d7e:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 030c 	and.w	r3, r3, #12
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d11c      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x18c>
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d116      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d96:	4b43      	ldr	r3, [pc, #268]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d005      	beq.n	8000dae <HAL_RCC_OscConfig+0x176>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d001      	beq.n	8000dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e1ba      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dae:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4939      	ldr	r1, [pc, #228]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	e03a      	b.n	8000e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d020      	beq.n	8000e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dcc:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fc6f 	bl	80006b4 <HAL_GetTick>
 8000dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fc6b 	bl	80006b4 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e19b      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f0      	beq.n	8000dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	695b      	ldr	r3, [r3, #20]
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4927      	ldr	r1, [pc, #156]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
 8000e0c:	e015      	b.n	8000e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e14:	f7ff fc4e 	bl	80006b4 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc4a 	bl	80006b4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e17a      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d03a      	beq.n	8000ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d019      	beq.n	8000e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_RCC_OscConfig+0x274>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e54:	f7ff fc2e 	bl	80006b4 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fc2a 	bl	80006b4 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e15a      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0f0      	beq.n	8000e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f000 fae8 	bl	8001450 <RCC_Delay>
 8000e80:	e01c      	b.n	8000ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_RCC_OscConfig+0x274>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e88:	f7ff fc14 	bl	80006b4 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8e:	e00f      	b.n	8000eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e90:	f7ff fc10 	bl	80006b4 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d908      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e140      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	42420000 	.word	0x42420000
 8000eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb0:	4b9e      	ldr	r3, [pc, #632]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	f003 0302 	and.w	r3, r3, #2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e9      	bne.n	8000e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 80a6 	beq.w	8001016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ece:	4b97      	ldr	r3, [pc, #604]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b94      	ldr	r3, [pc, #592]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	4a93      	ldr	r2, [pc, #588]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	61d3      	str	r3, [r2, #28]
 8000ee6:	4b91      	ldr	r3, [pc, #580]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef6:	4b8e      	ldr	r3, [pc, #568]	; (8001130 <HAL_RCC_OscConfig+0x4f8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d118      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f02:	4b8b      	ldr	r3, [pc, #556]	; (8001130 <HAL_RCC_OscConfig+0x4f8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a8a      	ldr	r2, [pc, #552]	; (8001130 <HAL_RCC_OscConfig+0x4f8>)
 8000f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fbd1 	bl	80006b4 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f16:	f7ff fbcd 	bl	80006b4 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e0fd      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f28:	4b81      	ldr	r3, [pc, #516]	; (8001130 <HAL_RCC_OscConfig+0x4f8>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d106      	bne.n	8000f4a <HAL_RCC_OscConfig+0x312>
 8000f3c:	4b7b      	ldr	r3, [pc, #492]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4a7a      	ldr	r2, [pc, #488]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	6213      	str	r3, [r2, #32]
 8000f48:	e02d      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10c      	bne.n	8000f6c <HAL_RCC_OscConfig+0x334>
 8000f52:	4b76      	ldr	r3, [pc, #472]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a75      	ldr	r2, [pc, #468]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f58:	f023 0301 	bic.w	r3, r3, #1
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	4b73      	ldr	r3, [pc, #460]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f60:	6a1b      	ldr	r3, [r3, #32]
 8000f62:	4a72      	ldr	r2, [pc, #456]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f64:	f023 0304 	bic.w	r3, r3, #4
 8000f68:	6213      	str	r3, [r2, #32]
 8000f6a:	e01c      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x356>
 8000f74:	4b6d      	ldr	r3, [pc, #436]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a6c      	ldr	r2, [pc, #432]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6213      	str	r3, [r2, #32]
 8000f80:	4b6a      	ldr	r3, [pc, #424]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a69      	ldr	r2, [pc, #420]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6213      	str	r3, [r2, #32]
 8000f8c:	e00b      	b.n	8000fa6 <HAL_RCC_OscConfig+0x36e>
 8000f8e:	4b67      	ldr	r3, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a66      	ldr	r2, [pc, #408]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6213      	str	r3, [r2, #32]
 8000f9a:	4b64      	ldr	r3, [pc, #400]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4a63      	ldr	r2, [pc, #396]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d015      	beq.n	8000fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fae:	f7ff fb81 	bl	80006b4 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fb7d 	bl	80006b4 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e0ab      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	4b57      	ldr	r3, [pc, #348]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0ee      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x37e>
 8000fd8:	e014      	b.n	8001004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fb6b 	bl	80006b4 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fb67 	bl	80006b4 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e095      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff8:	4b4c      	ldr	r3, [pc, #304]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1ee      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d105      	bne.n	8001016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100a:	4b48      	ldr	r3, [pc, #288]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a47      	ldr	r2, [pc, #284]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 8081 	beq.w	8001122 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001020:	4b42      	ldr	r3, [pc, #264]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d061      	beq.n	80010f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d146      	bne.n	80010c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001034:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <HAL_RCC_OscConfig+0x4fc>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fb3b 	bl	80006b4 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fb37 	bl	80006b4 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e067      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001054:	4b35      	ldr	r3, [pc, #212]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001068:	d108      	bne.n	800107c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800106a:	4b30      	ldr	r3, [pc, #192]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	492d      	ldr	r1, [pc, #180]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a19      	ldr	r1, [r3, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	430b      	orrs	r3, r1
 800108e:	4927      	ldr	r1, [pc, #156]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 8001090:	4313      	orrs	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <HAL_RCC_OscConfig+0x4fc>)
 8001096:	2201      	movs	r2, #1
 8001098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fb0b 	bl	80006b4 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a2:	f7ff fb07 	bl	80006b4 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e037      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0f0      	beq.n	80010a2 <HAL_RCC_OscConfig+0x46a>
 80010c0:	e02f      	b.n	8001122 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_RCC_OscConfig+0x4fc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff faf4 	bl	80006b4 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d0:	f7ff faf0 	bl	80006b4 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e020      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x498>
 80010ee:	e018      	b.n	8001122 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e013      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_RCC_OscConfig+0x4f4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	429a      	cmp	r2, r3
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	429a      	cmp	r2, r3
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000
 8001130:	40007000 	.word	0x40007000
 8001134:	42420060 	.word	0x42420060

08001138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0d0      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b6a      	ldr	r3, [pc, #424]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d910      	bls.n	800117c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b67      	ldr	r3, [pc, #412]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 0207 	bic.w	r2, r3, #7
 8001162:	4965      	ldr	r1, [pc, #404]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b63      	ldr	r3, [pc, #396]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0b8      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001194:	4b59      	ldr	r3, [pc, #356]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a58      	ldr	r2, [pc, #352]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800119e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ac:	4b53      	ldr	r3, [pc, #332]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a52      	ldr	r2, [pc, #328]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b8:	4b50      	ldr	r3, [pc, #320]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	494d      	ldr	r1, [pc, #308]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d040      	beq.n	8001258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d115      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e07f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e073      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e06b      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b39      	ldr	r3, [pc, #228]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4936      	ldr	r1, [pc, #216]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fa44 	bl	80006b4 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	e00a      	b.n	8001246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff fa40 	bl	80006b4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e053      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 020c 	and.w	r2, r3, #12
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d1eb      	bne.n	8001230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d210      	bcs.n	8001288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 0207 	bic.w	r2, r3, #7
 800126e:	4922      	ldr	r1, [pc, #136]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e032      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4916      	ldr	r1, [pc, #88]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	490e      	ldr	r1, [pc, #56]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c6:	f000 f821 	bl	800130c <HAL_RCC_GetSysClockFreq>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	490a      	ldr	r1, [pc, #40]	; (8001300 <HAL_RCC_ClockConfig+0x1c8>)
 80012d8:	5ccb      	ldrb	r3, [r1, r3]
 80012da:	fa22 f303 	lsr.w	r3, r2, r3
 80012de:	4a09      	ldr	r2, [pc, #36]	; (8001304 <HAL_RCC_ClockConfig+0x1cc>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_ClockConfig+0x1d0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f8de 	bl	80004a8 <HAL_InitTick>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40021000 	.word	0x40021000
 8001300:	0800484c 	.word	0x0800484c
 8001304:	20000000 	.word	0x20000000
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b04      	cmp	r3, #4
 8001334:	d002      	beq.n	800133c <HAL_RCC_GetSysClockFreq+0x30>
 8001336:	2b08      	cmp	r3, #8
 8001338:	d003      	beq.n	8001342 <HAL_RCC_GetSysClockFreq+0x36>
 800133a:	e027      	b.n	800138c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800133e:	613b      	str	r3, [r7, #16]
      break;
 8001340:	e027      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	0c9b      	lsrs	r3, r3, #18
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d010      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	0c5b      	lsrs	r3, r3, #17
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800136e:	fb02 f203 	mul.w	r2, r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e004      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	613b      	str	r3, [r7, #16]
      break;
 800138a:	e002      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800138e:	613b      	str	r3, [r7, #16]
      break;
 8001390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001392:	693b      	ldr	r3, [r7, #16]
}
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	08004864 	.word	0x08004864
 80013ac:	08004874 	.word	0x08004874
 80013b0:	003d0900 	.word	0x003d0900

080013b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000000 	.word	0x20000000

080013c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013cc:	f7ff fff2 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	0adb      	lsrs	r3, r3, #11
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4903      	ldr	r1, [pc, #12]	; (80013ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	0800485c 	.word	0x0800485c

080013f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	220f      	movs	r2, #15
 80013fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_RCC_GetClockConfig+0x58>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_RCC_GetClockConfig+0x58>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_RCC_GetClockConfig+0x58>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_RCC_GetClockConfig+0x58>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	08db      	lsrs	r3, r3, #3
 800142a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_RCC_GetClockConfig+0x5c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0207 	and.w	r2, r3, #7
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40022000 	.word	0x40022000

08001450 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <RCC_Delay+0x34>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <RCC_Delay+0x38>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0a5b      	lsrs	r3, r3, #9
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800146c:	bf00      	nop
  }
  while (Delay --);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	1e5a      	subs	r2, r3, #1
 8001472:	60fa      	str	r2, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f9      	bne.n	800146c <RCC_Delay+0x1c>
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000000 	.word	0x20000000
 8001488:	10624dd3 	.word	0x10624dd3

0800148c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e041      	b.n	8001522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d106      	bne.n	80014b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f839 	bl	800152a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3304      	adds	r3, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f000 f9b4 	bl	8001838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d001      	beq.n	8001554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e03a      	b.n	80015ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_TIM_Base_Start_IT+0x98>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d00e      	beq.n	8001594 <HAL_TIM_Base_Start_IT+0x58>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157e:	d009      	beq.n	8001594 <HAL_TIM_Base_Start_IT+0x58>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d004      	beq.n	8001594 <HAL_TIM_Base_Start_IT+0x58>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a13      	ldr	r2, [pc, #76]	; (80015dc <HAL_TIM_Base_Start_IT+0xa0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d111      	bne.n	80015b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d010      	beq.n	80015c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0201 	orr.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015b6:	e007      	b.n	80015c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40012c00 	.word	0x40012c00
 80015d8:	40000400 	.word	0x40000400
 80015dc:	40000800 	.word	0x40000800

080015e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d122      	bne.n	800163c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b02      	cmp	r3, #2
 8001602:	d11b      	bne.n	800163c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f06f 0202 	mvn.w	r2, #2
 800160c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f8ed 	bl	8001802 <HAL_TIM_IC_CaptureCallback>
 8001628:	e005      	b.n	8001636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f8e0 	bl	80017f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f8ef 	bl	8001814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b04      	cmp	r3, #4
 8001648:	d122      	bne.n	8001690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b04      	cmp	r3, #4
 8001656:	d11b      	bne.n	8001690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f06f 0204 	mvn.w	r2, #4
 8001660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f8c3 	bl	8001802 <HAL_TIM_IC_CaptureCallback>
 800167c:	e005      	b.n	800168a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f8b6 	bl	80017f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f8c5 	bl	8001814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b08      	cmp	r3, #8
 800169c:	d122      	bne.n	80016e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d11b      	bne.n	80016e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0208 	mvn.w	r2, #8
 80016b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2204      	movs	r2, #4
 80016ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f899 	bl	8001802 <HAL_TIM_IC_CaptureCallback>
 80016d0:	e005      	b.n	80016de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f88c 	bl	80017f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f89b 	bl	8001814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d122      	bne.n	8001738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b10      	cmp	r3, #16
 80016fe:	d11b      	bne.n	8001738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0210 	mvn.w	r2, #16
 8001708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2208      	movs	r2, #8
 800170e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f86f 	bl	8001802 <HAL_TIM_IC_CaptureCallback>
 8001724:	e005      	b.n	8001732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f862 	bl	80017f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f871 	bl	8001814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10e      	bne.n	8001764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d107      	bne.n	8001764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0201 	mvn.w	r2, #1
 800175c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7fe fe58 	bl	8000414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	2b80      	cmp	r3, #128	; 0x80
 8001770:	d10e      	bne.n	8001790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177c:	2b80      	cmp	r3, #128	; 0x80
 800177e:	d107      	bne.n	8001790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8bf 	bl	800190e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179a:	2b40      	cmp	r3, #64	; 0x40
 800179c:	d10e      	bne.n	80017bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a8:	2b40      	cmp	r3, #64	; 0x40
 80017aa:	d107      	bne.n	80017bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80017b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f835 	bl	8001826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	d10e      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	d107      	bne.n	80017e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f06f 0220 	mvn.w	r2, #32
 80017e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f88a 	bl	80018fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <TIM_Base_SetConfig+0xb8>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00b      	beq.n	8001868 <TIM_Base_SetConfig+0x30>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001856:	d007      	beq.n	8001868 <TIM_Base_SetConfig+0x30>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <TIM_Base_SetConfig+0xbc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d003      	beq.n	8001868 <TIM_Base_SetConfig+0x30>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <TIM_Base_SetConfig+0xc0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d108      	bne.n	800187a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800186e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <TIM_Base_SetConfig+0xb8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d00b      	beq.n	800189a <TIM_Base_SetConfig+0x62>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001888:	d007      	beq.n	800189a <TIM_Base_SetConfig+0x62>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <TIM_Base_SetConfig+0xbc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d003      	beq.n	800189a <TIM_Base_SetConfig+0x62>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <TIM_Base_SetConfig+0xc0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d108      	bne.n	80018ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <TIM_Base_SetConfig+0xb8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d103      	bne.n	80018e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	615a      	str	r2, [r3, #20]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	40012c00 	.word	0x40012c00
 80018f4:	40000400 	.word	0x40000400
 80018f8:	40000800 	.word	0x40000800

080018fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <xQueueGenericReset>:
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10a      	bne.n	800194e <xQueueGenericReset+0x2e>
 8001938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800193c:	f383 8811 	msr	BASEPRI, r3
 8001940:	f3bf 8f6f 	isb	sy
 8001944:	f3bf 8f4f 	dsb	sy
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	bf00      	nop
 800194c:	e7fe      	b.n	800194c <xQueueGenericReset+0x2c>
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d05d      	beq.n	8001a10 <xQueueGenericReset+0xf0>
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d059      	beq.n	8001a10 <xQueueGenericReset+0xf0>
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	2100      	movs	r1, #0
 8001966:	fba3 2302 	umull	r2, r3, r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d000      	beq.n	8001970 <xQueueGenericReset+0x50>
 800196e:	2101      	movs	r1, #1
 8001970:	460b      	mov	r3, r1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d14c      	bne.n	8001a10 <xQueueGenericReset+0xf0>
 8001976:	f002 fc53 	bl	8004220 <vPortEnterCritical>
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	6939      	ldr	r1, [r7, #16]
 8001984:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	441a      	add	r2, r3
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	2200      	movs	r2, #0
 8001994:	639a      	str	r2, [r3, #56]	; 0x38
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	441a      	add	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	22ff      	movs	r2, #255	; 0xff
 80019ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	22ff      	movs	r2, #255	; 0xff
 80019c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d114      	bne.n	80019f6 <xQueueGenericReset+0xd6>
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01a      	beq.n	8001a0a <xQueueGenericReset+0xea>
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3310      	adds	r3, #16
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 fb1b 	bl	8003014 <xTaskRemoveFromEventList>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d012      	beq.n	8001a0a <xQueueGenericReset+0xea>
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <xQueueGenericReset+0x11c>)
 80019e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	f3bf 8f4f 	dsb	sy
 80019f0:	f3bf 8f6f 	isb	sy
 80019f4:	e009      	b.n	8001a0a <xQueueGenericReset+0xea>
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	3310      	adds	r3, #16
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fa8e 	bl	8003f1c <vListInitialise>
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	3324      	adds	r3, #36	; 0x24
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fa89 	bl	8003f1c <vListInitialise>
 8001a0a:	f002 fc39 	bl	8004280 <vPortExitCritical>
 8001a0e:	e001      	b.n	8001a14 <xQueueGenericReset+0xf4>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10a      	bne.n	8001a30 <xQueueGenericReset+0x110>
 8001a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1e:	f383 8811 	msr	BASEPRI, r3
 8001a22:	f3bf 8f6f 	isb	sy
 8001a26:	f3bf 8f4f 	dsb	sy
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	bf00      	nop
 8001a2e:	e7fe      	b.n	8001a2e <xQueueGenericReset+0x10e>
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	e000ed04 	.word	0xe000ed04

08001a40 <xQueueGenericCreate>:
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	71fb      	strb	r3, [r7, #7]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d02e      	beq.n	8001ab6 <xQueueGenericCreate+0x76>
 8001a58:	2100      	movs	r1, #0
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d000      	beq.n	8001a68 <xQueueGenericCreate+0x28>
 8001a66:	2101      	movs	r1, #1
 8001a68:	460b      	mov	r3, r1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d123      	bne.n	8001ab6 <xQueueGenericCreate+0x76>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001a7a:	d81c      	bhi.n	8001ab6 <xQueueGenericCreate+0x76>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	3350      	adds	r3, #80	; 0x50
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fa22 	bl	8003ed4 <pvPortMalloc>
 8001a90:	61f8      	str	r0, [r7, #28]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01c      	beq.n	8001ad2 <xQueueGenericCreate+0x92>
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3350      	adds	r3, #80	; 0x50
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	79fa      	ldrb	r2, [r7, #7]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f814 	bl	8001adc <prvInitialiseNewQueue>
 8001ab4:	e00d      	b.n	8001ad2 <xQueueGenericCreate+0x92>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <xQueueGenericCreate+0x92>
 8001abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac0:	f383 8811 	msr	BASEPRI, r3
 8001ac4:	f3bf 8f6f 	isb	sy
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	bf00      	nop
 8001ad0:	e7fe      	b.n	8001ad0 <xQueueGenericCreate+0x90>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <prvInitialiseNewQueue>:
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	70fb      	strb	r3, [r7, #3]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d103      	bne.n	8001af8 <prvInitialiseNewQueue+0x1c>
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e002      	b.n	8001afe <prvInitialiseNewQueue+0x22>
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	69b8      	ldr	r0, [r7, #24]
 8001b0e:	f7ff ff07 	bl	8001920 <xQueueGenericReset>
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <xQueueGenericSend>:
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08e      	sub	sp, #56	; 0x38
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
 8001b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <xQueueGenericSend+0x32>
 8001b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b44:	f383 8811 	msr	BASEPRI, r3
 8001b48:	f3bf 8f6f 	isb	sy
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b52:	bf00      	nop
 8001b54:	e7fe      	b.n	8001b54 <xQueueGenericSend+0x30>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <xQueueGenericSend+0x40>
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <xQueueGenericSend+0x44>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <xQueueGenericSend+0x46>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10a      	bne.n	8001b84 <xQueueGenericSend+0x60>
 8001b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b72:	f383 8811 	msr	BASEPRI, r3
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	f3bf 8f4f 	dsb	sy
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	bf00      	nop
 8001b82:	e7fe      	b.n	8001b82 <xQueueGenericSend+0x5e>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d103      	bne.n	8001b92 <xQueueGenericSend+0x6e>
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <xQueueGenericSend+0x72>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <xQueueGenericSend+0x74>
 8001b96:	2300      	movs	r3, #0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10a      	bne.n	8001bb2 <xQueueGenericSend+0x8e>
 8001b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba0:	f383 8811 	msr	BASEPRI, r3
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	bf00      	nop
 8001bb0:	e7fe      	b.n	8001bb0 <xQueueGenericSend+0x8c>
 8001bb2:	f001 fc9d 	bl	80034f0 <xTaskGetSchedulerState>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <xQueueGenericSend+0x9e>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <xQueueGenericSend+0xa2>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <xQueueGenericSend+0xa4>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10a      	bne.n	8001be2 <xQueueGenericSend+0xbe>
 8001bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd0:	f383 8811 	msr	BASEPRI, r3
 8001bd4:	f3bf 8f6f 	isb	sy
 8001bd8:	f3bf 8f4f 	dsb	sy
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	bf00      	nop
 8001be0:	e7fe      	b.n	8001be0 <xQueueGenericSend+0xbc>
 8001be2:	f002 fb1d 	bl	8004220 <vPortEnterCritical>
 8001be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d302      	bcc.n	8001bf8 <xQueueGenericSend+0xd4>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d129      	bne.n	8001c4c <xQueueGenericSend+0x128>
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	68b9      	ldr	r1, [r7, #8]
 8001bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bfe:	f000 fb28 	bl	8002252 <prvCopyDataToQueue>
 8001c02:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <xQueueGenericSend+0x10a>
 8001c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0e:	3324      	adds	r3, #36	; 0x24
 8001c10:	4618      	mov	r0, r3
 8001c12:	f001 f9ff 	bl	8003014 <xTaskRemoveFromEventList>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <xQueueGenericSend+0x120>
 8001c1c:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <xQueueGenericSend+0x1f8>)
 8001c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f3bf 8f4f 	dsb	sy
 8001c28:	f3bf 8f6f 	isb	sy
 8001c2c:	e00a      	b.n	8001c44 <xQueueGenericSend+0x120>
 8001c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d007      	beq.n	8001c44 <xQueueGenericSend+0x120>
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <xQueueGenericSend+0x1f8>)
 8001c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	f3bf 8f4f 	dsb	sy
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f002 fb1c 	bl	8004280 <vPortExitCritical>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e063      	b.n	8001d14 <xQueueGenericSend+0x1f0>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <xQueueGenericSend+0x136>
 8001c52:	f002 fb15 	bl	8004280 <vPortExitCritical>
 8001c56:	2300      	movs	r3, #0
 8001c58:	e05c      	b.n	8001d14 <xQueueGenericSend+0x1f0>
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d106      	bne.n	8001c6e <xQueueGenericSend+0x14a>
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 faad 	bl	80031c4 <vTaskInternalSetTimeOutState>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c6e:	f002 fb07 	bl	8004280 <vPortExitCritical>
 8001c72:	f000 fe3f 	bl	80028f4 <vTaskSuspendAll>
 8001c76:	f002 fad3 	bl	8004220 <vPortEnterCritical>
 8001c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c86:	d103      	bne.n	8001c90 <xQueueGenericSend+0x16c>
 8001c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d103      	bne.n	8001ca6 <xQueueGenericSend+0x182>
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ca6:	f002 faeb 	bl	8004280 <vPortExitCritical>
 8001caa:	1d3a      	adds	r2, r7, #4
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fa9c 	bl	80031f0 <xTaskCheckForTimeOut>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d124      	bne.n	8001d08 <xQueueGenericSend+0x1e4>
 8001cbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cc0:	f000 fbbf 	bl	8002442 <prvIsQueueFull>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d018      	beq.n	8001cfc <xQueueGenericSend+0x1d8>
 8001cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ccc:	3310      	adds	r3, #16
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 f934 	bl	8002f40 <vTaskPlaceOnEventList>
 8001cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cda:	f000 fb4a 	bl	8002372 <prvUnlockQueue>
 8001cde:	f000 fe4d 	bl	800297c <xTaskResumeAll>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f47f af7c 	bne.w	8001be2 <xQueueGenericSend+0xbe>
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <xQueueGenericSend+0x1f8>)
 8001cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f3bf 8f4f 	dsb	sy
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	e772      	b.n	8001be2 <xQueueGenericSend+0xbe>
 8001cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001cfe:	f000 fb38 	bl	8002372 <prvUnlockQueue>
 8001d02:	f000 fe3b 	bl	800297c <xTaskResumeAll>
 8001d06:	e76c      	b.n	8001be2 <xQueueGenericSend+0xbe>
 8001d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d0a:	f000 fb32 	bl	8002372 <prvUnlockQueue>
 8001d0e:	f000 fe35 	bl	800297c <xTaskResumeAll>
 8001d12:	2300      	movs	r3, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	3738      	adds	r7, #56	; 0x38
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	e000ed04 	.word	0xe000ed04

08001d20 <xQueueGiveFromISR>:
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b090      	sub	sp, #64	; 0x40
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10a      	bne.n	8001d4a <xQueueGiveFromISR+0x2a>
 8001d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d38:	f383 8811 	msr	BASEPRI, r3
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	f3bf 8f4f 	dsb	sy
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
 8001d46:	bf00      	nop
 8001d48:	e7fe      	b.n	8001d48 <xQueueGiveFromISR+0x28>
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00a      	beq.n	8001d68 <xQueueGiveFromISR+0x48>
 8001d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d56:	f383 8811 	msr	BASEPRI, r3
 8001d5a:	f3bf 8f6f 	isb	sy
 8001d5e:	f3bf 8f4f 	dsb	sy
 8001d62:	623b      	str	r3, [r7, #32]
 8001d64:	bf00      	nop
 8001d66:	e7fe      	b.n	8001d66 <xQueueGiveFromISR+0x46>
 8001d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d103      	bne.n	8001d78 <xQueueGiveFromISR+0x58>
 8001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <xQueueGiveFromISR+0x5c>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <xQueueGiveFromISR+0x5e>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10a      	bne.n	8001d98 <xQueueGiveFromISR+0x78>
 8001d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d86:	f383 8811 	msr	BASEPRI, r3
 8001d8a:	f3bf 8f6f 	isb	sy
 8001d8e:	f3bf 8f4f 	dsb	sy
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	bf00      	nop
 8001d96:	e7fe      	b.n	8001d96 <xQueueGiveFromISR+0x76>
 8001d98:	f002 fbe6 	bl	8004568 <vPortValidateInterruptPriority>
 8001d9c:	f3ef 8211 	mrs	r2, BASEPRI
 8001da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	61ba      	str	r2, [r7, #24]
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
 8001db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d242      	bcs.n	8001e4e <xQueueGiveFromISR+0x12e>
 8001dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8001dda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de2:	d112      	bne.n	8001e0a <xQueueGiveFromISR+0xea>
 8001de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d02d      	beq.n	8001e48 <xQueueGiveFromISR+0x128>
 8001dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dee:	3324      	adds	r3, #36	; 0x24
 8001df0:	4618      	mov	r0, r3
 8001df2:	f001 f90f 	bl	8003014 <xTaskRemoveFromEventList>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d025      	beq.n	8001e48 <xQueueGiveFromISR+0x128>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d022      	beq.n	8001e48 <xQueueGiveFromISR+0x128>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e01e      	b.n	8001e48 <xQueueGiveFromISR+0x128>
 8001e0a:	f000 fec1 	bl	8002b90 <uxTaskGetNumberOfTasks>
 8001e0e:	62b8      	str	r0, [r7, #40]	; 0x28
 8001e10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d916      	bls.n	8001e48 <xQueueGiveFromISR+0x128>
 8001e1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8001e20:	d10a      	bne.n	8001e38 <xQueueGiveFromISR+0x118>
 8001e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e26:	f383 8811 	msr	BASEPRI, r3
 8001e2a:	f3bf 8f6f 	isb	sy
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	bf00      	nop
 8001e36:	e7fe      	b.n	8001e36 <xQueueGiveFromISR+0x116>
 8001e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	b25a      	sxtb	r2, r3
 8001e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e48:	2301      	movs	r3, #1
 8001e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e4c:	e001      	b.n	8001e52 <xQueueGiveFromISR+0x132>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	bf00      	nop
 8001e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e60:	4618      	mov	r0, r3
 8001e62:	3740      	adds	r7, #64	; 0x40
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <xQueueReceive>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10a      	bne.n	8001e98 <xQueueReceive+0x30>
 8001e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	bf00      	nop
 8001e96:	e7fe      	b.n	8001e96 <xQueueReceive+0x2e>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <xQueueReceive+0x3e>
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <xQueueReceive+0x42>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <xQueueReceive+0x44>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10a      	bne.n	8001ec6 <xQueueReceive+0x5e>
 8001eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb4:	f383 8811 	msr	BASEPRI, r3
 8001eb8:	f3bf 8f6f 	isb	sy
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	bf00      	nop
 8001ec4:	e7fe      	b.n	8001ec4 <xQueueReceive+0x5c>
 8001ec6:	f001 fb13 	bl	80034f0 <xTaskGetSchedulerState>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <xQueueReceive+0x6e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <xQueueReceive+0x72>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <xQueueReceive+0x74>
 8001eda:	2300      	movs	r3, #0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10a      	bne.n	8001ef6 <xQueueReceive+0x8e>
 8001ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee4:	f383 8811 	msr	BASEPRI, r3
 8001ee8:	f3bf 8f6f 	isb	sy
 8001eec:	f3bf 8f4f 	dsb	sy
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	bf00      	nop
 8001ef4:	e7fe      	b.n	8001ef4 <xQueueReceive+0x8c>
 8001ef6:	f002 f993 	bl	8004220 <vPortEnterCritical>
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01f      	beq.n	8001f46 <xQueueReceive+0xde>
 8001f06:	68b9      	ldr	r1, [r7, #8]
 8001f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f0a:	f000 fa0c 	bl	8002326 <prvCopyDataFromQueue>
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	1e5a      	subs	r2, r3, #1
 8001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00f      	beq.n	8001f3e <xQueueReceive+0xd6>
 8001f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f20:	3310      	adds	r3, #16
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 f876 	bl	8003014 <xTaskRemoveFromEventList>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <xQueueReceive+0xd6>
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <xQueueReceive+0x1bc>)
 8001f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f3bf 8f4f 	dsb	sy
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	f002 f99f 	bl	8004280 <vPortExitCritical>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e069      	b.n	800201a <xQueueReceive+0x1b2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <xQueueReceive+0xec>
 8001f4c:	f002 f998 	bl	8004280 <vPortExitCritical>
 8001f50:	2300      	movs	r3, #0
 8001f52:	e062      	b.n	800201a <xQueueReceive+0x1b2>
 8001f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <xQueueReceive+0x100>
 8001f5a:	f107 0310 	add.w	r3, r7, #16
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 f930 	bl	80031c4 <vTaskInternalSetTimeOutState>
 8001f64:	2301      	movs	r3, #1
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f68:	f002 f98a 	bl	8004280 <vPortExitCritical>
 8001f6c:	f000 fcc2 	bl	80028f4 <vTaskSuspendAll>
 8001f70:	f002 f956 	bl	8004220 <vPortEnterCritical>
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f7a:	b25b      	sxtb	r3, r3
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d103      	bne.n	8001f8a <xQueueReceive+0x122>
 8001f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f96:	d103      	bne.n	8001fa0 <xQueueReceive+0x138>
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fa0:	f002 f96e 	bl	8004280 <vPortExitCritical>
 8001fa4:	1d3a      	adds	r2, r7, #4
 8001fa6:	f107 0310 	add.w	r3, r7, #16
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 f91f 	bl	80031f0 <xTaskCheckForTimeOut>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d123      	bne.n	8002000 <xQueueReceive+0x198>
 8001fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fba:	f000 fa2c 	bl	8002416 <prvIsQueueEmpty>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d017      	beq.n	8001ff4 <xQueueReceive+0x18c>
 8001fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc6:	3324      	adds	r3, #36	; 0x24
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 ffb7 	bl	8002f40 <vTaskPlaceOnEventList>
 8001fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fd4:	f000 f9cd 	bl	8002372 <prvUnlockQueue>
 8001fd8:	f000 fcd0 	bl	800297c <xTaskResumeAll>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d189      	bne.n	8001ef6 <xQueueReceive+0x8e>
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <xQueueReceive+0x1bc>)
 8001fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f3bf 8f4f 	dsb	sy
 8001fee:	f3bf 8f6f 	isb	sy
 8001ff2:	e780      	b.n	8001ef6 <xQueueReceive+0x8e>
 8001ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ff6:	f000 f9bc 	bl	8002372 <prvUnlockQueue>
 8001ffa:	f000 fcbf 	bl	800297c <xTaskResumeAll>
 8001ffe:	e77a      	b.n	8001ef6 <xQueueReceive+0x8e>
 8002000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002002:	f000 f9b6 	bl	8002372 <prvUnlockQueue>
 8002006:	f000 fcb9 	bl	800297c <xTaskResumeAll>
 800200a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800200c:	f000 fa03 	bl	8002416 <prvIsQueueEmpty>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	f43f af6f 	beq.w	8001ef6 <xQueueReceive+0x8e>
 8002018:	2300      	movs	r3, #0
 800201a:	4618      	mov	r0, r3
 800201c:	3730      	adds	r7, #48	; 0x30
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000ed04 	.word	0xe000ed04

08002028 <xQueueSemaphoreTake>:
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	; 0x30
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10a      	bne.n	800205a <xQueueSemaphoreTake+0x32>
 8002044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	bf00      	nop
 8002058:	e7fe      	b.n	8002058 <xQueueSemaphoreTake+0x30>
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <xQueueSemaphoreTake+0x50>
 8002062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002066:	f383 8811 	msr	BASEPRI, r3
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	f3bf 8f4f 	dsb	sy
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	bf00      	nop
 8002076:	e7fe      	b.n	8002076 <xQueueSemaphoreTake+0x4e>
 8002078:	f001 fa3a 	bl	80034f0 <xTaskGetSchedulerState>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <xQueueSemaphoreTake+0x60>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <xQueueSemaphoreTake+0x64>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <xQueueSemaphoreTake+0x66>
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <xQueueSemaphoreTake+0x80>
 8002092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	bf00      	nop
 80020a6:	e7fe      	b.n	80020a6 <xQueueSemaphoreTake+0x7e>
 80020a8:	f002 f8ba 	bl	8004220 <vPortEnterCritical>
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d024      	beq.n	8002102 <xQueueSemaphoreTake+0xda>
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	1e5a      	subs	r2, r3, #1
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d104      	bne.n	80020d2 <xQueueSemaphoreTake+0xaa>
 80020c8:	f001 fc00 	bl	80038cc <pvTaskIncrementMutexHeldCount>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00f      	beq.n	80020fa <xQueueSemaphoreTake+0xd2>
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	3310      	adds	r3, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 ff98 	bl	8003014 <xTaskRemoveFromEventList>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <xQueueSemaphoreTake+0xd2>
 80020ea:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <xQueueSemaphoreTake+0x1f8>)
 80020ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	f3bf 8f6f 	isb	sy
 80020fa:	f002 f8c1 	bl	8004280 <vPortExitCritical>
 80020fe:	2301      	movs	r3, #1
 8002100:	e089      	b.n	8002216 <xQueueSemaphoreTake+0x1ee>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <xQueueSemaphoreTake+0xe8>
 8002108:	f002 f8ba 	bl	8004280 <vPortExitCritical>
 800210c:	2300      	movs	r3, #0
 800210e:	e082      	b.n	8002216 <xQueueSemaphoreTake+0x1ee>
 8002110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <xQueueSemaphoreTake+0xfc>
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f852 	bl	80031c4 <vTaskInternalSetTimeOutState>
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002124:	f002 f8ac 	bl	8004280 <vPortExitCritical>
 8002128:	f000 fbe4 	bl	80028f4 <vTaskSuspendAll>
 800212c:	f002 f878 	bl	8004220 <vPortEnterCritical>
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002136:	b25b      	sxtb	r3, r3
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d103      	bne.n	8002146 <xQueueSemaphoreTake+0x11e>
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800214c:	b25b      	sxtb	r3, r3
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d103      	bne.n	800215c <xQueueSemaphoreTake+0x134>
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800215c:	f002 f890 	bl	8004280 <vPortExitCritical>
 8002160:	463a      	mov	r2, r7
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f001 f841 	bl	80031f0 <xTaskCheckForTimeOut>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d132      	bne.n	80021da <xQueueSemaphoreTake+0x1b2>
 8002174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002176:	f000 f94e 	bl	8002416 <prvIsQueueEmpty>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d026      	beq.n	80021ce <xQueueSemaphoreTake+0x1a6>
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <xQueueSemaphoreTake+0x174>
 8002188:	f002 f84a 	bl	8004220 <vPortEnterCritical>
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4618      	mov	r0, r3
 8002192:	f001 f9cb 	bl	800352c <xTaskPriorityInherit>
 8002196:	62b8      	str	r0, [r7, #40]	; 0x28
 8002198:	f002 f872 	bl	8004280 <vPortExitCritical>
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	3324      	adds	r3, #36	; 0x24
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fecb 	bl	8002f40 <vTaskPlaceOnEventList>
 80021aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021ac:	f000 f8e1 	bl	8002372 <prvUnlockQueue>
 80021b0:	f000 fbe4 	bl	800297c <xTaskResumeAll>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f47f af76 	bne.w	80020a8 <xQueueSemaphoreTake+0x80>
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <xQueueSemaphoreTake+0x1f8>)
 80021be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	e76c      	b.n	80020a8 <xQueueSemaphoreTake+0x80>
 80021ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021d0:	f000 f8cf 	bl	8002372 <prvUnlockQueue>
 80021d4:	f000 fbd2 	bl	800297c <xTaskResumeAll>
 80021d8:	e766      	b.n	80020a8 <xQueueSemaphoreTake+0x80>
 80021da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021dc:	f000 f8c9 	bl	8002372 <prvUnlockQueue>
 80021e0:	f000 fbcc 	bl	800297c <xTaskResumeAll>
 80021e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021e6:	f000 f916 	bl	8002416 <prvIsQueueEmpty>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f43f af5b 	beq.w	80020a8 <xQueueSemaphoreTake+0x80>
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <xQueueSemaphoreTake+0x1ec>
 80021f8:	f002 f812 	bl	8004220 <vPortEnterCritical>
 80021fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021fe:	f000 f811 	bl	8002224 <prvGetDisinheritPriorityAfterTimeout>
 8002202:	61f8      	str	r0, [r7, #28]
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	69f9      	ldr	r1, [r7, #28]
 800220a:	4618      	mov	r0, r3
 800220c:	f001 fab4 	bl	8003778 <vTaskPriorityDisinheritAfterTimeout>
 8002210:	f002 f836 	bl	8004280 <vPortExitCritical>
 8002214:	2300      	movs	r3, #0
 8002216:	4618      	mov	r0, r3
 8002218:	3730      	adds	r7, #48	; 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	e000ed04 	.word	0xe000ed04

08002224 <prvGetDisinheritPriorityAfterTimeout>:
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1c3 0305 	rsb	r3, r3, #5
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e001      	b.n	8002246 <prvGetDisinheritPriorityAfterTimeout+0x22>
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <prvCopyDataToQueue>:
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10d      	bne.n	800228c <prvCopyDataToQueue+0x3a>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d14d      	bne.n	8002314 <prvCopyDataToQueue+0xc2>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f001 f9e5 	bl	800364c <xTaskPriorityDisinherit>
 8002282:	6178      	str	r0, [r7, #20]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	e043      	b.n	8002314 <prvCopyDataToQueue+0xc2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d119      	bne.n	80022c6 <prvCopyDataToQueue+0x74>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6858      	ldr	r0, [r3, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	461a      	mov	r2, r3
 800229c:	68b9      	ldr	r1, [r7, #8]
 800229e:	f002 f9db 	bl	8004658 <memcpy>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	441a      	add	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d32b      	bcc.n	8002314 <prvCopyDataToQueue+0xc2>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	e026      	b.n	8002314 <prvCopyDataToQueue+0xc2>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	68d8      	ldr	r0, [r3, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	461a      	mov	r2, r3
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	f002 f9c1 	bl	8004658 <memcpy>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	425b      	negs	r3, r3
 80022e0:	441a      	add	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d207      	bcs.n	8002302 <prvCopyDataToQueue+0xb0>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	425b      	negs	r3, r3
 80022fc:	441a      	add	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d105      	bne.n	8002314 <prvCopyDataToQueue+0xc2>
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <prvCopyDataToQueue+0xc2>
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	3b01      	subs	r3, #1
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <prvCopyDataFromQueue>:
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d018      	beq.n	800236a <prvCopyDataFromQueue+0x44>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	441a      	add	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	429a      	cmp	r2, r3
 8002350:	d303      	bcc.n	800235a <prvCopyDataFromQueue+0x34>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68d9      	ldr	r1, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	461a      	mov	r2, r3
 8002364:	6838      	ldr	r0, [r7, #0]
 8002366:	f002 f977 	bl	8004658 <memcpy>
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <prvUnlockQueue>:
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	f001 ff51 	bl	8004220 <vPortEnterCritical>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e011      	b.n	80023ac <prvUnlockQueue+0x3a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2b00      	cmp	r3, #0
 800238e:	d012      	beq.n	80023b6 <prvUnlockQueue+0x44>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3324      	adds	r3, #36	; 0x24
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fe3d 	bl	8003014 <xTaskRemoveFromEventList>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <prvUnlockQueue+0x32>
 80023a0:	f000 ff8c 	bl	80032bc <vTaskMissedYield>
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	73fb      	strb	r3, [r7, #15]
 80023ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	dce9      	bgt.n	8002388 <prvUnlockQueue+0x16>
 80023b4:	e000      	b.n	80023b8 <prvUnlockQueue+0x46>
 80023b6:	bf00      	nop
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	22ff      	movs	r2, #255	; 0xff
 80023bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023c0:	f001 ff5e 	bl	8004280 <vPortExitCritical>
 80023c4:	f001 ff2c 	bl	8004220 <vPortEnterCritical>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ce:	73bb      	strb	r3, [r7, #14]
 80023d0:	e011      	b.n	80023f6 <prvUnlockQueue+0x84>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d012      	beq.n	8002400 <prvUnlockQueue+0x8e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3310      	adds	r3, #16
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 fe18 	bl	8003014 <xTaskRemoveFromEventList>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <prvUnlockQueue+0x7c>
 80023ea:	f000 ff67 	bl	80032bc <vTaskMissedYield>
 80023ee:	7bbb      	ldrb	r3, [r7, #14]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	73bb      	strb	r3, [r7, #14]
 80023f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	dce9      	bgt.n	80023d2 <prvUnlockQueue+0x60>
 80023fe:	e000      	b.n	8002402 <prvUnlockQueue+0x90>
 8002400:	bf00      	nop
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	22ff      	movs	r2, #255	; 0xff
 8002406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800240a:	f001 ff39 	bl	8004280 <vPortExitCritical>
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <prvIsQueueEmpty>:
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	f001 feff 	bl	8004220 <vPortEnterCritical>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	2b00      	cmp	r3, #0
 8002428:	d102      	bne.n	8002430 <prvIsQueueEmpty+0x1a>
 800242a:	2301      	movs	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	e001      	b.n	8002434 <prvIsQueueEmpty+0x1e>
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	f001 ff24 	bl	8004280 <vPortExitCritical>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <prvIsQueueFull>:
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	f001 fee9 	bl	8004220 <vPortEnterCritical>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	429a      	cmp	r2, r3
 8002458:	d102      	bne.n	8002460 <prvIsQueueFull+0x1e>
 800245a:	2301      	movs	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e001      	b.n	8002464 <prvIsQueueFull+0x22>
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	f001 ff0c 	bl	8004280 <vPortExitCritical>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <vQueueAddToRegistry>:
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <vQueueAddToRegistry+0x2a>
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <vQueueAddToRegistry+0x28>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d024      	beq.n	80024ee <vQueueAddToRegistry+0x7a>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e01e      	b.n	80024e8 <vQueueAddToRegistry+0x74>
 80024aa:	4a18      	ldr	r2, [pc, #96]	; (800250c <vQueueAddToRegistry+0x98>)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d105      	bne.n	80024c6 <vQueueAddToRegistry+0x52>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <vQueueAddToRegistry+0x98>)
 80024c0:	4413      	add	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	e013      	b.n	80024ee <vQueueAddToRegistry+0x7a>
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10a      	bne.n	80024e2 <vQueueAddToRegistry+0x6e>
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <vQueueAddToRegistry+0x98>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d104      	bne.n	80024e2 <vQueueAddToRegistry+0x6e>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4a0b      	ldr	r2, [pc, #44]	; (800250c <vQueueAddToRegistry+0x98>)
 80024de:	4413      	add	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2b07      	cmp	r3, #7
 80024ec:	d9dd      	bls.n	80024aa <vQueueAddToRegistry+0x36>
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <vQueueAddToRegistry+0x8c>
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000244 	.word	0x20000244

08002510 <vQueueWaitForMessageRestricted>:
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	f001 fe7e 	bl	8004220 <vPortEnterCritical>
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800252a:	b25b      	sxtb	r3, r3
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002530:	d103      	bne.n	800253a <vQueueWaitForMessageRestricted+0x2a>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002540:	b25b      	sxtb	r3, r3
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002546:	d103      	bne.n	8002550 <vQueueWaitForMessageRestricted+0x40>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002550:	f001 fe96 	bl	8004280 <vPortExitCritical>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <vQueueWaitForMessageRestricted+0x5a>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3324      	adds	r3, #36	; 0x24
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fd0f 	bl	8002f88 <vTaskPlaceOnEventListRestricted>
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff01 	bl	8002372 <prvUnlockQueue>
 8002570:	bf00      	nop
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <xTaskCreate>:
 8002578:	b580      	push	{r7, lr}
 800257a:	b08c      	sub	sp, #48	; 0x30
 800257c:	af04      	add	r7, sp, #16
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fca2 	bl	8003ed4 <pvPortMalloc>
 8002590:	6178      	str	r0, [r7, #20]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <xTaskCreate+0x48>
 8002598:	207c      	movs	r0, #124	; 0x7c
 800259a:	f001 fc9b 	bl	8003ed4 <pvPortMalloc>
 800259e:	61f8      	str	r0, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <xTaskCreate+0x40>
 80025a6:	227c      	movs	r2, #124	; 0x7c
 80025a8:	2100      	movs	r1, #0
 80025aa:	69f8      	ldr	r0, [r7, #28]
 80025ac:	f002 f862 	bl	8004674 <memset>
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
 80025b6:	e005      	b.n	80025c4 <xTaskCreate+0x4c>
 80025b8:	6978      	ldr	r0, [r7, #20]
 80025ba:	f001 fc9d 	bl	8003ef8 <vPortFree>
 80025be:	e001      	b.n	80025c4 <xTaskCreate+0x4c>
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d013      	beq.n	80025f2 <xTaskCreate+0x7a>
 80025ca:	2300      	movs	r3, #0
 80025cc:	9303      	str	r3, [sp, #12]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f80e 	bl	8002602 <prvInitialiseNewTask>
 80025e6:	69f8      	ldr	r0, [r7, #28]
 80025e8:	f000 f89a 	bl	8002720 <prvAddNewTaskToReadyList>
 80025ec:	2301      	movs	r3, #1
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	e002      	b.n	80025f8 <xTaskCreate+0x80>
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	4618      	mov	r0, r3
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <prvInitialiseNewTask>:
 8002602:	b580      	push	{r7, lr}
 8002604:	b088      	sub	sp, #32
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002612:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	461a      	mov	r2, r3
 800261a:	21a5      	movs	r1, #165	; 0xa5
 800261c:	f002 f82a 	bl	8004674 <memset>
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800262a:	3b01      	subs	r3, #1
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f023 0307 	bic.w	r3, r3, #7
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <prvInitialiseNewTask+0x58>
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	bf00      	nop
 8002658:	e7fe      	b.n	8002658 <prvInitialiseNewTask+0x56>
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01e      	beq.n	800269e <prvInitialiseNewTask+0x9c>
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	e012      	b.n	800268c <prvInitialiseNewTask+0x8a>
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	4413      	add	r3, r2
 800266c:	7819      	ldrb	r1, [r3, #0]
 800266e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	4413      	add	r3, r2
 8002674:	3334      	adds	r3, #52	; 0x34
 8002676:	460a      	mov	r2, r1
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <prvInitialiseNewTask+0x92>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b13      	cmp	r3, #19
 8002690:	d9e9      	bls.n	8002666 <prvInitialiseNewTask+0x64>
 8002692:	e000      	b.n	8002696 <prvInitialiseNewTask+0x94>
 8002694:	bf00      	nop
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d90a      	bls.n	80026ba <prvInitialiseNewTask+0xb8>
 80026a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a8:	f383 8811 	msr	BASEPRI, r3
 80026ac:	f3bf 8f6f 	isb	sy
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	bf00      	nop
 80026b8:	e7fe      	b.n	80026b8 <prvInitialiseNewTask+0xb6>
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d901      	bls.n	80026c4 <prvInitialiseNewTask+0xc2>
 80026c0:	2304      	movs	r3, #4
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ce:	651a      	str	r2, [r3, #80]	; 0x50
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	3304      	adds	r3, #4
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 fc40 	bl	8003f5a <vListInitialiseItem>
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	3318      	adds	r3, #24
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 fc3b 	bl	8003f5a <vListInitialiseItem>
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026e8:	611a      	str	r2, [r3, #16]
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	f1c3 0205 	rsb	r2, r3, #5
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	619a      	str	r2, [r3, #24]
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	68f9      	ldr	r1, [r7, #12]
 80026fe:	69b8      	ldr	r0, [r7, #24]
 8002700:	f001 fc98 	bl	8004034 <pxPortInitialiseStack>
 8002704:	4602      	mov	r2, r0
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <prvInitialiseNewTask+0x114>
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	bf00      	nop
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <prvAddNewTaskToReadyList>:
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	f001 fd7a 	bl	8004220 <vPortEnterCritical>
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <prvAddNewTaskToReadyList+0x114>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	4a40      	ldr	r2, [pc, #256]	; (8002834 <prvAddNewTaskToReadyList+0x114>)
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	4b40      	ldr	r3, [pc, #256]	; (8002838 <prvAddNewTaskToReadyList+0x118>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <prvAddNewTaskToReadyList+0x32>
 800273e:	4a3e      	ldr	r2, [pc, #248]	; (8002838 <prvAddNewTaskToReadyList+0x118>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <prvAddNewTaskToReadyList+0x114>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d110      	bne.n	800276e <prvAddNewTaskToReadyList+0x4e>
 800274c:	f000 fe38 	bl	80033c0 <prvInitialiseTaskLists>
 8002750:	e00d      	b.n	800276e <prvAddNewTaskToReadyList+0x4e>
 8002752:	4b3a      	ldr	r3, [pc, #232]	; (800283c <prvAddNewTaskToReadyList+0x11c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <prvAddNewTaskToReadyList+0x4e>
 800275a:	4b37      	ldr	r3, [pc, #220]	; (8002838 <prvAddNewTaskToReadyList+0x118>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	429a      	cmp	r2, r3
 8002766:	d802      	bhi.n	800276e <prvAddNewTaskToReadyList+0x4e>
 8002768:	4a33      	ldr	r2, [pc, #204]	; (8002838 <prvAddNewTaskToReadyList+0x118>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <prvAddNewTaskToReadyList+0x120>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3301      	adds	r3, #1
 8002774:	4a32      	ldr	r2, [pc, #200]	; (8002840 <prvAddNewTaskToReadyList+0x120>)
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <prvAddNewTaskToReadyList+0x120>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	649a      	str	r2, [r3, #72]	; 0x48
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002784:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <prvAddNewTaskToReadyList+0x124>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d903      	bls.n	8002794 <prvAddNewTaskToReadyList+0x74>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	4a2c      	ldr	r2, [pc, #176]	; (8002844 <prvAddNewTaskToReadyList+0x124>)
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002798:	492b      	ldr	r1, [pc, #172]	; (8002848 <prvAddNewTaskToReadyList+0x128>)
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3304      	adds	r3, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	60da      	str	r2, [r3, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	3204      	adds	r2, #4
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	1d1a      	adds	r2, r3, #4
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <prvAddNewTaskToReadyList+0x128>)
 80027d8:	441a      	add	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e2:	4919      	ldr	r1, [pc, #100]	; (8002848 <prvAddNewTaskToReadyList+0x128>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	1c59      	adds	r1, r3, #1
 80027f2:	4815      	ldr	r0, [pc, #84]	; (8002848 <prvAddNewTaskToReadyList+0x128>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4403      	add	r3, r0
 80027fe:	6019      	str	r1, [r3, #0]
 8002800:	f001 fd3e 	bl	8004280 <vPortExitCritical>
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <prvAddNewTaskToReadyList+0x11c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <prvAddNewTaskToReadyList+0x10a>
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <prvAddNewTaskToReadyList+0x118>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	429a      	cmp	r2, r3
 8002818:	d207      	bcs.n	800282a <prvAddNewTaskToReadyList+0x10a>
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <prvAddNewTaskToReadyList+0x12c>)
 800281c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000170 	.word	0x20000170
 8002838:	20000098 	.word	0x20000098
 800283c:	2000017c 	.word	0x2000017c
 8002840:	2000018c 	.word	0x2000018c
 8002844:	20000178 	.word	0x20000178
 8002848:	2000009c 	.word	0x2000009c
 800284c:	e000ed04 	.word	0xe000ed04

08002850 <vTaskStartScheduler>:
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af02      	add	r7, sp, #8
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <vTaskStartScheduler+0x88>)
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	2300      	movs	r3, #0
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2300      	movs	r3, #0
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	491e      	ldr	r1, [pc, #120]	; (80028dc <vTaskStartScheduler+0x8c>)
 8002864:	481e      	ldr	r0, [pc, #120]	; (80028e0 <vTaskStartScheduler+0x90>)
 8002866:	f7ff fe87 	bl	8002578 <xTaskCreate>
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <vTaskStartScheduler+0x28>
 8002872:	f001 f8ad 	bl	80039d0 <xTimerCreateTimerTask>
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d116      	bne.n	80028ac <vTaskStartScheduler+0x5c>
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	bf00      	nop
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <vTaskStartScheduler+0x94>)
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <vTaskStartScheduler+0x98>)
 800289c:	2201      	movs	r2, #1
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <vTaskStartScheduler+0x9c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f001 fc49 	bl	800413c <xPortStartScheduler>
 80028aa:	e00e      	b.n	80028ca <vTaskStartScheduler+0x7a>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b2:	d10a      	bne.n	80028ca <vTaskStartScheduler+0x7a>
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <vTaskStartScheduler+0x78>
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <vTaskStartScheduler+0xa0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000194 	.word	0x20000194
 80028dc:	08004834 	.word	0x08004834
 80028e0:	080032d5 	.word	0x080032d5
 80028e4:	20000190 	.word	0x20000190
 80028e8:	2000017c 	.word	0x2000017c
 80028ec:	20000174 	.word	0x20000174
 80028f0:	2000000c 	.word	0x2000000c

080028f4 <vTaskSuspendAll>:
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <vTaskSuspendAll+0x18>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	4a03      	ldr	r2, [pc, #12]	; (800290c <vTaskSuspendAll+0x18>)
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000198 	.word	0x20000198

08002910 <prvGetExpectedIdleTime>:
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <prvGetExpectedIdleTime+0x58>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <prvGetExpectedIdleTime+0x16>
 8002922:	2301      	movs	r3, #1
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <prvGetExpectedIdleTime+0x5c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <prvGetExpectedIdleTime+0x26>
 8002930:	2300      	movs	r3, #0
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	e012      	b.n	800295c <prvGetExpectedIdleTime+0x4c>
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <prvGetExpectedIdleTime+0x60>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d902      	bls.n	8002944 <prvGetExpectedIdleTime+0x34>
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
 8002942:	e00b      	b.n	800295c <prvGetExpectedIdleTime+0x4c>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <prvGetExpectedIdleTime+0x40>
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	e005      	b.n	800295c <prvGetExpectedIdleTime+0x4c>
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <prvGetExpectedIdleTime+0x64>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <prvGetExpectedIdleTime+0x68>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	20000178 	.word	0x20000178
 800296c:	20000098 	.word	0x20000098
 8002970:	2000009c 	.word	0x2000009c
 8002974:	20000190 	.word	0x20000190
 8002978:	20000174 	.word	0x20000174

0800297c <xTaskResumeAll>:
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	4b71      	ldr	r3, [pc, #452]	; (8002b50 <xTaskResumeAll+0x1d4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <xTaskResumeAll+0x2c>
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	bf00      	nop
 80029a6:	e7fe      	b.n	80029a6 <xTaskResumeAll+0x2a>
 80029a8:	f001 fc3a 	bl	8004220 <vPortEnterCritical>
 80029ac:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <xTaskResumeAll+0x1d4>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	4a67      	ldr	r2, [pc, #412]	; (8002b50 <xTaskResumeAll+0x1d4>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <xTaskResumeAll+0x1d4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80c1 	bne.w	8002b42 <xTaskResumeAll+0x1c6>
 80029c0:	4b64      	ldr	r3, [pc, #400]	; (8002b54 <xTaskResumeAll+0x1d8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80bc 	beq.w	8002b42 <xTaskResumeAll+0x1c6>
 80029ca:	e08b      	b.n	8002ae4 <xTaskResumeAll+0x168>
 80029cc:	4b62      	ldr	r3, [pc, #392]	; (8002b58 <xTaskResumeAll+0x1dc>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	6a12      	ldr	r2, [r2, #32]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	69d2      	ldr	r2, [r2, #28]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3318      	adds	r3, #24
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d103      	bne.n	8002a02 <xTaskResumeAll+0x86>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	6a1a      	ldr	r2, [r3, #32]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2200      	movs	r2, #0
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	68d2      	ldr	r2, [r2, #12]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	6892      	ldr	r2, [r2, #8]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	3304      	adds	r3, #4
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d103      	bne.n	8002a40 <xTaskResumeAll+0xc4>
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	1e5a      	subs	r2, r3, #1
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <xTaskResumeAll+0x1e0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d903      	bls.n	8002a64 <xTaskResumeAll+0xe8>
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	4a3e      	ldr	r2, [pc, #248]	; (8002b5c <xTaskResumeAll+0x1e0>)
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a68:	493d      	ldr	r1, [pc, #244]	; (8002b60 <xTaskResumeAll+0x1e4>)
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	3304      	adds	r3, #4
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	60da      	str	r2, [r3, #12]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	3204      	adds	r2, #4
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	1d1a      	adds	r2, r3, #4
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4a2e      	ldr	r2, [pc, #184]	; (8002b60 <xTaskResumeAll+0x1e4>)
 8002aa8:	441a      	add	r2, r3
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	615a      	str	r2, [r3, #20]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab2:	492b      	ldr	r1, [pc, #172]	; (8002b60 <xTaskResumeAll+0x1e4>)
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1c59      	adds	r1, r3, #1
 8002ac2:	4827      	ldr	r0, [pc, #156]	; (8002b60 <xTaskResumeAll+0x1e4>)
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4403      	add	r3, r0
 8002ace:	6019      	str	r1, [r3, #0]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <xTaskResumeAll+0x1e8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d302      	bcc.n	8002ae4 <xTaskResumeAll+0x168>
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <xTaskResumeAll+0x1ec>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <xTaskResumeAll+0x1dc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f47f af6f 	bne.w	80029cc <xTaskResumeAll+0x50>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <xTaskResumeAll+0x17c>
 8002af4:	f000 fce2 	bl	80034bc <prvResetNextTaskUnblockTime>
 8002af8:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <xTaskResumeAll+0x1f0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d010      	beq.n	8002b26 <xTaskResumeAll+0x1aa>
 8002b04:	f000 f8a8 	bl	8002c58 <xTaskIncrementTick>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <xTaskResumeAll+0x198>
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <xTaskResumeAll+0x1ec>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f1      	bne.n	8002b04 <xTaskResumeAll+0x188>
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <xTaskResumeAll+0x1f0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <xTaskResumeAll+0x1ec>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <xTaskResumeAll+0x1c6>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <xTaskResumeAll+0x1f4>)
 8002b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f001 fb9d 	bl	8004280 <vPortExitCritical>
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000198 	.word	0x20000198
 8002b54:	20000170 	.word	0x20000170
 8002b58:	20000130 	.word	0x20000130
 8002b5c:	20000178 	.word	0x20000178
 8002b60:	2000009c 	.word	0x2000009c
 8002b64:	20000098 	.word	0x20000098
 8002b68:	20000184 	.word	0x20000184
 8002b6c:	20000180 	.word	0x20000180
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <xTaskGetTickCount>:
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <xTaskGetTickCount+0x18>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	20000174 	.word	0x20000174

08002b90 <uxTaskGetNumberOfTasks>:
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <uxTaskGetNumberOfTasks+0x10>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	20000170 	.word	0x20000170

08002ba4 <vTaskStepTick>:
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <vTaskStepTick+0xa4>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	441a      	add	r2, r3
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <vTaskStepTick+0xa8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d90a      	bls.n	8002bd2 <vTaskStepTick+0x2e>
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	bf00      	nop
 8002bd0:	e7fe      	b.n	8002bd0 <vTaskStepTick+0x2c>
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <vTaskStepTick+0xa4>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	441a      	add	r2, r3
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <vTaskStepTick+0xa8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d128      	bne.n	8002c34 <vTaskStepTick+0x90>
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <vTaskStepTick+0xac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10a      	bne.n	8002c00 <vTaskStepTick+0x5c>
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	bf00      	nop
 8002bfe:	e7fe      	b.n	8002bfe <vTaskStepTick+0x5a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <vTaskStepTick+0x78>
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	bf00      	nop
 8002c1a:	e7fe      	b.n	8002c1a <vTaskStepTick+0x76>
 8002c1c:	f001 fb00 	bl	8004220 <vPortEnterCritical>
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <vTaskStepTick+0xb0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <vTaskStepTick+0xb0>)
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	f001 fb29 	bl	8004280 <vPortExitCritical>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <vTaskStepTick+0xa4>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a02      	ldr	r2, [pc, #8]	; (8002c48 <vTaskStepTick+0xa4>)
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20000174 	.word	0x20000174
 8002c4c:	20000190 	.word	0x20000190
 8002c50:	20000198 	.word	0x20000198
 8002c54:	20000180 	.word	0x20000180

08002c58 <xTaskIncrementTick>:
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	4b7e      	ldr	r3, [pc, #504]	; (8002e5c <xTaskIncrementTick+0x204>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 80ed 	bne.w	8002e46 <xTaskIncrementTick+0x1ee>
 8002c6c:	4b7c      	ldr	r3, [pc, #496]	; (8002e60 <xTaskIncrementTick+0x208>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	623b      	str	r3, [r7, #32]
 8002c74:	4a7a      	ldr	r2, [pc, #488]	; (8002e60 <xTaskIncrementTick+0x208>)
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d120      	bne.n	8002cc2 <xTaskIncrementTick+0x6a>
 8002c80:	4b78      	ldr	r3, [pc, #480]	; (8002e64 <xTaskIncrementTick+0x20c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <xTaskIncrementTick+0x48>
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	bf00      	nop
 8002c9e:	e7fe      	b.n	8002c9e <xTaskIncrementTick+0x46>
 8002ca0:	4b70      	ldr	r3, [pc, #448]	; (8002e64 <xTaskIncrementTick+0x20c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <xTaskIncrementTick+0x210>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6e      	ldr	r2, [pc, #440]	; (8002e64 <xTaskIncrementTick+0x20c>)
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4a6e      	ldr	r2, [pc, #440]	; (8002e68 <xTaskIncrementTick+0x210>)
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	4b6d      	ldr	r3, [pc, #436]	; (8002e6c <xTaskIncrementTick+0x214>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	4a6c      	ldr	r2, [pc, #432]	; (8002e6c <xTaskIncrementTick+0x214>)
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	f000 fbfd 	bl	80034bc <prvResetNextTaskUnblockTime>
 8002cc2:	4b6b      	ldr	r3, [pc, #428]	; (8002e70 <xTaskIncrementTick+0x218>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6a3a      	ldr	r2, [r7, #32]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f0c0 80a7 	bcc.w	8002e1c <xTaskIncrementTick+0x1c4>
 8002cce:	4b65      	ldr	r3, [pc, #404]	; (8002e64 <xTaskIncrementTick+0x20c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d104      	bne.n	8002ce2 <xTaskIncrementTick+0x8a>
 8002cd8:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <xTaskIncrementTick+0x218>)
 8002cda:	f04f 32ff 	mov.w	r2, #4294967295
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e09c      	b.n	8002e1c <xTaskIncrementTick+0x1c4>
 8002ce2:	4b60      	ldr	r3, [pc, #384]	; (8002e64 <xTaskIncrementTick+0x20c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	6a3a      	ldr	r2, [r7, #32]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d203      	bcs.n	8002d02 <xTaskIncrementTick+0xaa>
 8002cfa:	4a5d      	ldr	r2, [pc, #372]	; (8002e70 <xTaskIncrementTick+0x218>)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	e08c      	b.n	8002e1c <xTaskIncrementTick+0x1c4>
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	68d2      	ldr	r2, [r2, #12]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	6892      	ldr	r2, [r2, #8]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	3304      	adds	r3, #4
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d103      	bne.n	8002d30 <xTaskIncrementTick+0xd8>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	1e5a      	subs	r2, r3, #1
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01e      	beq.n	8002d86 <xTaskIncrementTick+0x12e>
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	6a12      	ldr	r2, [r2, #32]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	69d2      	ldr	r2, [r2, #28]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	3318      	adds	r3, #24
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d103      	bne.n	8002d76 <xTaskIncrementTick+0x11e>
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	1e5a      	subs	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <xTaskIncrementTick+0x21c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d903      	bls.n	8002d9a <xTaskIncrementTick+0x142>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	4a37      	ldr	r2, [pc, #220]	; (8002e74 <xTaskIncrementTick+0x21c>)
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9e:	4936      	ldr	r1, [pc, #216]	; (8002e78 <xTaskIncrementTick+0x220>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3304      	adds	r3, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	3204      	adds	r2, #4
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	1d1a      	adds	r2, r3, #4
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4a26      	ldr	r2, [pc, #152]	; (8002e78 <xTaskIncrementTick+0x220>)
 8002dde:	441a      	add	r2, r3
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	615a      	str	r2, [r3, #20]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	4923      	ldr	r1, [pc, #140]	; (8002e78 <xTaskIncrementTick+0x220>)
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	1c59      	adds	r1, r3, #1
 8002df8:	481f      	ldr	r0, [pc, #124]	; (8002e78 <xTaskIncrementTick+0x220>)
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4403      	add	r3, r0
 8002e04:	6019      	str	r1, [r3, #0]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <xTaskIncrementTick+0x224>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f67f af5c 	bls.w	8002cce <xTaskIncrementTick+0x76>
 8002e16:	2301      	movs	r3, #1
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1a:	e758      	b.n	8002cce <xTaskIncrementTick+0x76>
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <xTaskIncrementTick+0x224>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e22:	4915      	ldr	r1, [pc, #84]	; (8002e78 <xTaskIncrementTick+0x220>)
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d901      	bls.n	8002e38 <xTaskIncrementTick+0x1e0>
 8002e34:	2301      	movs	r3, #1
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <xTaskIncrementTick+0x228>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <xTaskIncrementTick+0x1f8>
 8002e40:	2301      	movs	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e004      	b.n	8002e50 <xTaskIncrementTick+0x1f8>
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <xTaskIncrementTick+0x22c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	; (8002e84 <xTaskIncrementTick+0x22c>)
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	4618      	mov	r0, r3
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000198 	.word	0x20000198
 8002e60:	20000174 	.word	0x20000174
 8002e64:	20000128 	.word	0x20000128
 8002e68:	2000012c 	.word	0x2000012c
 8002e6c:	20000188 	.word	0x20000188
 8002e70:	20000190 	.word	0x20000190
 8002e74:	20000178 	.word	0x20000178
 8002e78:	2000009c 	.word	0x2000009c
 8002e7c:	20000098 	.word	0x20000098
 8002e80:	20000184 	.word	0x20000184
 8002e84:	20000180 	.word	0x20000180

08002e88 <vTaskSwitchContext>:
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <vTaskSwitchContext+0xa4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <vTaskSwitchContext+0x16>
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <vTaskSwitchContext+0xa8>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	e041      	b.n	8002f22 <vTaskSwitchContext+0x9a>
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <vTaskSwitchContext+0xa8>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <vTaskSwitchContext+0xac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e010      	b.n	8002ece <vTaskSwitchContext+0x46>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <vTaskSwitchContext+0x40>
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	607b      	str	r3, [r7, #4]
 8002ec4:	bf00      	nop
 8002ec6:	e7fe      	b.n	8002ec6 <vTaskSwitchContext+0x3e>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	491a      	ldr	r1, [pc, #104]	; (8002f38 <vTaskSwitchContext+0xb0>)
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0e4      	beq.n	8002eac <vTaskSwitchContext+0x24>
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <vTaskSwitchContext+0xb0>)
 8002eee:	4413      	add	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3308      	adds	r3, #8
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d104      	bne.n	8002f12 <vTaskSwitchContext+0x8a>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <vTaskSwitchContext+0xb4>)
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <vTaskSwitchContext+0xac>)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	20000198 	.word	0x20000198
 8002f30:	20000184 	.word	0x20000184
 8002f34:	20000178 	.word	0x20000178
 8002f38:	2000009c 	.word	0x2000009c
 8002f3c:	20000098 	.word	0x20000098

08002f40 <vTaskPlaceOnEventList>:
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <vTaskPlaceOnEventList+0x26>
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <vTaskPlaceOnEventList+0x24>
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <vTaskPlaceOnEventList+0x44>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 ffff 	bl	8003f72 <vListInsert>
 8002f74:	2101      	movs	r1, #1
 8002f76:	6838      	ldr	r0, [r7, #0]
 8002f78:	f000 fcbc 	bl	80038f4 <prvAddCurrentTaskToDelayedList>
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000098 	.word	0x20000098

08002f88 <vTaskPlaceOnEventListRestricted>:
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <vTaskPlaceOnEventListRestricted+0x28>
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <vTaskPlaceOnEventListRestricted+0x26>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	4b16      	ldr	r3, [pc, #88]	; (8003010 <vTaskPlaceOnEventListRestricted+0x88>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	61da      	str	r2, [r3, #28]
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <vTaskPlaceOnEventListRestricted+0x88>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	6892      	ldr	r2, [r2, #8]
 8002fc6:	621a      	str	r2, [r3, #32]
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <vTaskPlaceOnEventListRestricted+0x88>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	3218      	adds	r2, #24
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <vTaskPlaceOnEventListRestricted+0x88>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f103 0218 	add.w	r2, r3, #24
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <vTaskPlaceOnEventListRestricted+0x88>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <vTaskPlaceOnEventListRestricted+0x76>
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	68b8      	ldr	r0, [r7, #8]
 8003002:	f000 fc77 	bl	80038f4 <prvAddCurrentTaskToDelayedList>
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000098 	.word	0x20000098

08003014 <xTaskRemoveFromEventList>:
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10a      	bne.n	8003040 <xTaskRemoveFromEventList+0x2c>
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	bf00      	nop
 800303e:	e7fe      	b.n	800303e <xTaskRemoveFromEventList+0x2a>
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	6a3a      	ldr	r2, [r7, #32]
 800304c:	6a12      	ldr	r2, [r2, #32]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	69d2      	ldr	r2, [r2, #28]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	3318      	adds	r3, #24
 8003062:	429a      	cmp	r2, r3
 8003064:	d103      	bne.n	800306e <xTaskRemoveFromEventList+0x5a>
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2200      	movs	r2, #0
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <xTaskRemoveFromEventList+0x198>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d161      	bne.n	800314a <xTaskRemoveFromEventList+0x136>
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	68d2      	ldr	r2, [r2, #12]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	6a3a      	ldr	r2, [r7, #32]
 800309c:	6892      	ldr	r2, [r2, #8]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	3304      	adds	r3, #4
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d103      	bne.n	80030b4 <xTaskRemoveFromEventList+0xa0>
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	2200      	movs	r2, #0
 80030b8:	615a      	str	r2, [r3, #20]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	4b39      	ldr	r3, [pc, #228]	; (80031b0 <xTaskRemoveFromEventList+0x19c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d903      	bls.n	80030d8 <xTaskRemoveFromEventList+0xc4>
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4a36      	ldr	r2, [pc, #216]	; (80031b0 <xTaskRemoveFromEventList+0x19c>)
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	4935      	ldr	r1, [pc, #212]	; (80031b4 <xTaskRemoveFromEventList+0x1a0>)
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3304      	adds	r3, #4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	6a3a      	ldr	r2, [r7, #32]
 8003102:	3204      	adds	r2, #4
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	1d1a      	adds	r2, r3, #4
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <xTaskRemoveFromEventList+0x1a0>)
 800311c:	441a      	add	r2, r3
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	615a      	str	r2, [r3, #20]
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003126:	4923      	ldr	r1, [pc, #140]	; (80031b4 <xTaskRemoveFromEventList+0x1a0>)
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	1c59      	adds	r1, r3, #1
 8003136:	481f      	ldr	r0, [pc, #124]	; (80031b4 <xTaskRemoveFromEventList+0x1a0>)
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4403      	add	r3, r0
 8003142:	6019      	str	r1, [r3, #0]
 8003144:	f000 f9ba 	bl	80034bc <prvResetNextTaskUnblockTime>
 8003148:	e01b      	b.n	8003182 <xTaskRemoveFromEventList+0x16e>
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <xTaskRemoveFromEventList+0x1a4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	61da      	str	r2, [r3, #28]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	621a      	str	r2, [r3, #32]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	6a3a      	ldr	r2, [r7, #32]
 8003164:	3218      	adds	r2, #24
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f103 0218 	add.w	r2, r3, #24
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	609a      	str	r2, [r3, #8]
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	4a10      	ldr	r2, [pc, #64]	; (80031b8 <xTaskRemoveFromEventList+0x1a4>)
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <xTaskRemoveFromEventList+0x1a4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <xTaskRemoveFromEventList+0x1a4>)
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <xTaskRemoveFromEventList+0x1a8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d905      	bls.n	800319c <xTaskRemoveFromEventList+0x188>
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <xTaskRemoveFromEventList+0x1ac>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e001      	b.n	80031a0 <xTaskRemoveFromEventList+0x18c>
 800319c:	2300      	movs	r3, #0
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	4618      	mov	r0, r3
 80031a4:	3728      	adds	r7, #40	; 0x28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000198 	.word	0x20000198
 80031b0:	20000178 	.word	0x20000178
 80031b4:	2000009c 	.word	0x2000009c
 80031b8:	20000130 	.word	0x20000130
 80031bc:	20000098 	.word	0x20000098
 80031c0:	20000184 	.word	0x20000184

080031c4 <vTaskInternalSetTimeOutState>:
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <vTaskInternalSetTimeOutState+0x24>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <vTaskInternalSetTimeOutState+0x28>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000188 	.word	0x20000188
 80031ec:	20000174 	.word	0x20000174

080031f0 <xTaskCheckForTimeOut>:
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <xTaskCheckForTimeOut+0x26>
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <xTaskCheckForTimeOut+0x24>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <xTaskCheckForTimeOut+0x42>
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <xTaskCheckForTimeOut+0x40>
 8003232:	f000 fff5 	bl	8004220 <vPortEnterCritical>
 8003236:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <xTaskCheckForTimeOut+0xc4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d102      	bne.n	8003256 <xTaskCheckForTimeOut+0x66>
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	e026      	b.n	80032a4 <xTaskCheckForTimeOut+0xb4>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <xTaskCheckForTimeOut+0xc8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d00a      	beq.n	8003278 <xTaskCheckForTimeOut+0x88>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	429a      	cmp	r2, r3
 800326a:	d305      	bcc.n	8003278 <xTaskCheckForTimeOut+0x88>
 800326c:	2301      	movs	r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e015      	b.n	80032a4 <xTaskCheckForTimeOut+0xb4>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	429a      	cmp	r2, r3
 8003280:	d20b      	bcs.n	800329a <xTaskCheckForTimeOut+0xaa>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	1ad2      	subs	r2, r2, r3
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ff98 	bl	80031c4 <vTaskInternalSetTimeOutState>
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	e004      	b.n	80032a4 <xTaskCheckForTimeOut+0xb4>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	2301      	movs	r3, #1
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	f000 ffec 	bl	8004280 <vPortExitCritical>
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	4618      	mov	r0, r3
 80032ac:	3720      	adds	r7, #32
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000174 	.word	0x20000174
 80032b8:	20000188 	.word	0x20000188

080032bc <vTaskMissedYield>:
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <vTaskMissedYield+0x14>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000184 	.word	0x20000184

080032d4 <prvIdleTask>:
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	f000 f8b0 	bl	8003440 <prvCheckTasksWaitingTermination>
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <prvIdleTask+0x70>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d907      	bls.n	80032f8 <prvIdleTask+0x24>
 80032e8:	4b17      	ldr	r3, [pc, #92]	; (8003348 <prvIdleTask+0x74>)
 80032ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f7ff fb0a 	bl	8002910 <prvGetExpectedIdleTime>
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d9eb      	bls.n	80032dc <prvIdleTask+0x8>
 8003304:	f7ff faf6 	bl	80028f4 <vTaskSuspendAll>
 8003308:	4b10      	ldr	r3, [pc, #64]	; (800334c <prvIdleTask+0x78>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <prvIdleTask+0x7c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d20a      	bcs.n	800332a <prvIdleTask+0x56>
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	bf00      	nop
 8003328:	e7fe      	b.n	8003328 <prvIdleTask+0x54>
 800332a:	f7ff faf1 	bl	8002910 <prvGetExpectedIdleTime>
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d902      	bls.n	800333c <prvIdleTask+0x68>
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f001 f810 	bl	800435c <vPortSuppressTicksAndSleep>
 800333c:	f7ff fb1e 	bl	800297c <xTaskResumeAll>
 8003340:	e7cc      	b.n	80032dc <prvIdleTask+0x8>
 8003342:	bf00      	nop
 8003344:	2000009c 	.word	0x2000009c
 8003348:	e000ed04 	.word	0xe000ed04
 800334c:	20000190 	.word	0x20000190
 8003350:	20000174 	.word	0x20000174

08003354 <eTaskConfirmSleepModeStatus>:
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	2301      	movs	r3, #1
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	2301      	movs	r3, #1
 8003360:	71fb      	strb	r3, [r7, #7]
 8003362:	4b12      	ldr	r3, [pc, #72]	; (80033ac <eTaskConfirmSleepModeStatus+0x58>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <eTaskConfirmSleepModeStatus+0x1c>
 800336a:	2300      	movs	r3, #0
 800336c:	71fb      	strb	r3, [r7, #7]
 800336e:	e017      	b.n	80033a0 <eTaskConfirmSleepModeStatus+0x4c>
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <eTaskConfirmSleepModeStatus+0x5c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <eTaskConfirmSleepModeStatus+0x2a>
 8003378:	2300      	movs	r3, #0
 800337a:	71fb      	strb	r3, [r7, #7]
 800337c:	e010      	b.n	80033a0 <eTaskConfirmSleepModeStatus+0x4c>
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <eTaskConfirmSleepModeStatus+0x60>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <eTaskConfirmSleepModeStatus+0x38>
 8003386:	2300      	movs	r3, #0
 8003388:	71fb      	strb	r3, [r7, #7]
 800338a:	e009      	b.n	80033a0 <eTaskConfirmSleepModeStatus+0x4c>
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <eTaskConfirmSleepModeStatus+0x64>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <eTaskConfirmSleepModeStatus+0x68>)
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	1acb      	subs	r3, r1, r3
 8003398:	429a      	cmp	r2, r3
 800339a:	d101      	bne.n	80033a0 <eTaskConfirmSleepModeStatus+0x4c>
 800339c:	2302      	movs	r3, #2
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr
 80033ac:	20000130 	.word	0x20000130
 80033b0:	20000184 	.word	0x20000184
 80033b4:	20000180 	.word	0x20000180
 80033b8:	2000015c 	.word	0x2000015c
 80033bc:	20000170 	.word	0x20000170

080033c0 <prvInitialiseTaskLists>:
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	e00c      	b.n	80033e6 <prvInitialiseTaskLists+0x26>
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4a12      	ldr	r2, [pc, #72]	; (8003420 <prvInitialiseTaskLists+0x60>)
 80033d8:	4413      	add	r3, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fd9e 	bl	8003f1c <vListInitialise>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3301      	adds	r3, #1
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d9ef      	bls.n	80033cc <prvInitialiseTaskLists+0xc>
 80033ec:	480d      	ldr	r0, [pc, #52]	; (8003424 <prvInitialiseTaskLists+0x64>)
 80033ee:	f000 fd95 	bl	8003f1c <vListInitialise>
 80033f2:	480d      	ldr	r0, [pc, #52]	; (8003428 <prvInitialiseTaskLists+0x68>)
 80033f4:	f000 fd92 	bl	8003f1c <vListInitialise>
 80033f8:	480c      	ldr	r0, [pc, #48]	; (800342c <prvInitialiseTaskLists+0x6c>)
 80033fa:	f000 fd8f 	bl	8003f1c <vListInitialise>
 80033fe:	480c      	ldr	r0, [pc, #48]	; (8003430 <prvInitialiseTaskLists+0x70>)
 8003400:	f000 fd8c 	bl	8003f1c <vListInitialise>
 8003404:	480b      	ldr	r0, [pc, #44]	; (8003434 <prvInitialiseTaskLists+0x74>)
 8003406:	f000 fd89 	bl	8003f1c <vListInitialise>
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <prvInitialiseTaskLists+0x78>)
 800340c:	4a05      	ldr	r2, [pc, #20]	; (8003424 <prvInitialiseTaskLists+0x64>)
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <prvInitialiseTaskLists+0x7c>)
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <prvInitialiseTaskLists+0x68>)
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	2000009c 	.word	0x2000009c
 8003424:	20000100 	.word	0x20000100
 8003428:	20000114 	.word	0x20000114
 800342c:	20000130 	.word	0x20000130
 8003430:	20000144 	.word	0x20000144
 8003434:	2000015c 	.word	0x2000015c
 8003438:	20000128 	.word	0x20000128
 800343c:	2000012c 	.word	0x2000012c

08003440 <prvCheckTasksWaitingTermination>:
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	e019      	b.n	800347c <prvCheckTasksWaitingTermination+0x3c>
 8003448:	f000 feea 	bl	8004220 <vPortEnterCritical>
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <prvCheckTasksWaitingTermination+0x50>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fdc2 	bl	8003fe2 <uxListRemove>
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <prvCheckTasksWaitingTermination+0x54>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3b01      	subs	r3, #1
 8003464:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <prvCheckTasksWaitingTermination+0x54>)
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <prvCheckTasksWaitingTermination+0x58>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3b01      	subs	r3, #1
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <prvCheckTasksWaitingTermination+0x58>)
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	f000 ff05 	bl	8004280 <vPortExitCritical>
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f810 	bl	800349c <prvDeleteTCB>
 800347c:	4b06      	ldr	r3, [pc, #24]	; (8003498 <prvCheckTasksWaitingTermination+0x58>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e1      	bne.n	8003448 <prvCheckTasksWaitingTermination+0x8>
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000144 	.word	0x20000144
 8003494:	20000170 	.word	0x20000170
 8003498:	20000158 	.word	0x20000158

0800349c <prvDeleteTCB>:
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fd25 	bl	8003ef8 <vPortFree>
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fd22 	bl	8003ef8 <vPortFree>
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <prvResetNextTaskUnblockTime>:
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <prvResetNextTaskUnblockTime+0x2c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d104      	bne.n	80034d4 <prvResetNextTaskUnblockTime+0x18>
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <prvResetNextTaskUnblockTime+0x30>)
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e005      	b.n	80034e0 <prvResetNextTaskUnblockTime+0x24>
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <prvResetNextTaskUnblockTime+0x2c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a03      	ldr	r2, [pc, #12]	; (80034ec <prvResetNextTaskUnblockTime+0x30>)
 80034de:	6013      	str	r3, [r2, #0]
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	20000128 	.word	0x20000128
 80034ec:	20000190 	.word	0x20000190

080034f0 <xTaskGetSchedulerState>:
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <xTaskGetSchedulerState+0x34>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <xTaskGetSchedulerState+0x14>
 80034fe:	2301      	movs	r3, #1
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	e008      	b.n	8003516 <xTaskGetSchedulerState+0x26>
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <xTaskGetSchedulerState+0x38>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <xTaskGetSchedulerState+0x22>
 800350c:	2302      	movs	r3, #2
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	e001      	b.n	8003516 <xTaskGetSchedulerState+0x26>
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	2000017c 	.word	0x2000017c
 8003528:	20000198 	.word	0x20000198

0800352c <xTaskPriorityInherit>:
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d079      	beq.n	8003636 <xTaskPriorityInherit+0x10a>
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <xTaskPriorityInherit+0x114>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d269      	bcs.n	8003624 <xTaskPriorityInherit+0xf8>
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	db06      	blt.n	8003566 <xTaskPriorityInherit+0x3a>
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <xTaskPriorityInherit+0x114>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f1c3 0205 	rsb	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	619a      	str	r2, [r3, #24]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	6959      	ldr	r1, [r3, #20]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4a33      	ldr	r2, [pc, #204]	; (8003644 <xTaskPriorityInherit+0x118>)
 8003578:	4413      	add	r3, r2
 800357a:	4299      	cmp	r1, r3
 800357c:	d14a      	bne.n	8003614 <xTaskPriorityInherit+0xe8>
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	3304      	adds	r3, #4
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fd2d 	bl	8003fe2 <uxListRemove>
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <xTaskPriorityInherit+0x114>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003596:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <xTaskPriorityInherit+0x11c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d903      	bls.n	80035a6 <xTaskPriorityInherit+0x7a>
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	4a29      	ldr	r2, [pc, #164]	; (8003648 <xTaskPriorityInherit+0x11c>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035aa:	4926      	ldr	r1, [pc, #152]	; (8003644 <xTaskPriorityInherit+0x118>)
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	3304      	adds	r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	3204      	adds	r2, #4
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4a16      	ldr	r2, [pc, #88]	; (8003644 <xTaskPriorityInherit+0x118>)
 80035ea:	441a      	add	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	615a      	str	r2, [r3, #20]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f4:	4913      	ldr	r1, [pc, #76]	; (8003644 <xTaskPriorityInherit+0x118>)
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	480f      	ldr	r0, [pc, #60]	; (8003644 <xTaskPriorityInherit+0x118>)
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4403      	add	r3, r0
 8003610:	6019      	str	r1, [r3, #0]
 8003612:	e004      	b.n	800361e <xTaskPriorityInherit+0xf2>
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <xTaskPriorityInherit+0x114>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	62da      	str	r2, [r3, #44]	; 0x2c
 800361e:	2301      	movs	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	e008      	b.n	8003636 <xTaskPriorityInherit+0x10a>
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <xTaskPriorityInherit+0x114>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	429a      	cmp	r2, r3
 8003630:	d201      	bcs.n	8003636 <xTaskPriorityInherit+0x10a>
 8003632:	2301      	movs	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000098 	.word	0x20000098
 8003644:	2000009c 	.word	0x2000009c
 8003648:	20000178 	.word	0x20000178

0800364c <xTaskPriorityDisinherit>:
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d07e      	beq.n	8003760 <xTaskPriorityDisinherit+0x114>
 8003662:	4b42      	ldr	r3, [pc, #264]	; (800376c <xTaskPriorityDisinherit+0x120>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	429a      	cmp	r2, r3
 800366a:	d00a      	beq.n	8003682 <xTaskPriorityDisinherit+0x36>
 800366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	bf00      	nop
 8003680:	e7fe      	b.n	8003680 <xTaskPriorityDisinherit+0x34>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <xTaskPriorityDisinherit+0x54>
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	bf00      	nop
 800369e:	e7fe      	b.n	800369e <xTaskPriorityDisinherit+0x52>
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d054      	beq.n	8003760 <xTaskPriorityDisinherit+0x114>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d150      	bne.n	8003760 <xTaskPriorityDisinherit+0x114>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	3304      	adds	r3, #4
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fc8d 	bl	8003fe2 <uxListRemove>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	f1c3 0205 	rsb	r2, r3, #5
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	619a      	str	r2, [r3, #24]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <xTaskPriorityDisinherit+0x124>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d903      	bls.n	80036f0 <xTaskPriorityDisinherit+0xa4>
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	4a20      	ldr	r2, [pc, #128]	; (8003770 <xTaskPriorityDisinherit+0x124>)
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	491f      	ldr	r1, [pc, #124]	; (8003774 <xTaskPriorityDisinherit+0x128>)
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3304      	adds	r3, #4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	3204      	adds	r2, #4
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	1d1a      	adds	r2, r3, #4
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4a10      	ldr	r2, [pc, #64]	; (8003774 <xTaskPriorityDisinherit+0x128>)
 8003734:	441a      	add	r2, r3
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	615a      	str	r2, [r3, #20]
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373e:	490d      	ldr	r1, [pc, #52]	; (8003774 <xTaskPriorityDisinherit+0x128>)
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	1c59      	adds	r1, r3, #1
 800374e:	4809      	ldr	r0, [pc, #36]	; (8003774 <xTaskPriorityDisinherit+0x128>)
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4403      	add	r3, r0
 800375a:	6019      	str	r1, [r3, #0]
 800375c:	2301      	movs	r3, #1
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000098 	.word	0x20000098
 8003770:	20000178 	.word	0x20000178
 8003774:	2000009c 	.word	0x2000009c

08003778 <vTaskPriorityDisinheritAfterTimeout>:
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	; 0x28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	623b      	str	r3, [r7, #32]
 8003786:	2301      	movs	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8093 	beq.w	80038b8 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	613b      	str	r3, [r7, #16]
 80037ac:	bf00      	nop
 80037ae:	e7fe      	b.n	80037ae <vTaskPriorityDisinheritAfterTimeout+0x36>
 80037b0:	6a3b      	ldr	r3, [r7, #32]
 80037b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d902      	bls.n	80037c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	e002      	b.n	80037c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d073      	beq.n	80038b8 <vTaskPriorityDisinheritAfterTimeout+0x140>
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d16e      	bne.n	80038b8 <vTaskPriorityDisinheritAfterTimeout+0x140>
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d10a      	bne.n	80037fa <vTaskPriorityDisinheritAfterTimeout+0x82>
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	db04      	blt.n	8003818 <vTaskPriorityDisinheritAfterTimeout+0xa0>
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	f1c3 0205 	rsb	r2, r3, #5
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	619a      	str	r2, [r3, #24]
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	6959      	ldr	r1, [r3, #20]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8003828:	4413      	add	r3, r2
 800382a:	4299      	cmp	r1, r3
 800382c:	d144      	bne.n	80038b8 <vTaskPriorityDisinheritAfterTimeout+0x140>
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	3304      	adds	r3, #4
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fbd5 	bl	8003fe2 <uxListRemove>
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d903      	bls.n	800384c <vTaskPriorityDisinheritAfterTimeout+0xd4>
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	491c      	ldr	r1, [pc, #112]	; (80038c4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3304      	adds	r3, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	609a      	str	r2, [r3, #8]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	3204      	adds	r2, #4
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	1d1a      	adds	r2, r3, #4
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4a0d      	ldr	r2, [pc, #52]	; (80038c4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8003890:	441a      	add	r2, r3
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	615a      	str	r2, [r3, #20]
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389a:	490a      	ldr	r1, [pc, #40]	; (80038c4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	4806      	ldr	r0, [pc, #24]	; (80038c4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4403      	add	r3, r0
 80038b6:	6019      	str	r1, [r3, #0]
 80038b8:	bf00      	nop
 80038ba:	3728      	adds	r7, #40	; 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000098 	.word	0x20000098
 80038c4:	2000009c 	.word	0x2000009c
 80038c8:	20000178 	.word	0x20000178

080038cc <pvTaskIncrementMutexHeldCount>:
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d004      	beq.n	80038e2 <pvTaskIncrementMutexHeldCount+0x16>
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038de:	3201      	adds	r2, #1
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
 80038e2:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000098 	.word	0x20000098

080038f4 <prvAddCurrentTaskToDelayedList>:
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	4b2e      	ldr	r3, [pc, #184]	; (80039b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	4b2d      	ldr	r3, [pc, #180]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3304      	adds	r3, #4
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fb69 	bl	8003fe2 <uxListRemove>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d124      	bne.n	8003962 <prvAddCurrentTaskToDelayedList+0x6e>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d021      	beq.n	8003962 <prvAddCurrentTaskToDelayedList+0x6e>
 800391e:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	4b23      	ldr	r3, [pc, #140]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	6892      	ldr	r2, [r2, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	3204      	adds	r2, #4
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1d1a      	adds	r2, r3, #4
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003952:	615a      	str	r2, [r3, #20]
 8003954:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3301      	adds	r3, #1
 800395a:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	bf00      	nop
 8003960:	e026      	b.n	80039b0 <prvAddCurrentTaskToDelayedList+0xbc>
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	4b14      	ldr	r3, [pc, #80]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	429a      	cmp	r2, r3
 8003978:	d209      	bcs.n	800398e <prvAddCurrentTaskToDelayedList+0x9a>
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4b0f      	ldr	r3, [pc, #60]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3304      	adds	r3, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f000 faf3 	bl	8003f72 <vListInsert>
 800398c:	e010      	b.n	80039b0 <prvAddCurrentTaskToDelayedList+0xbc>
 800398e:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3304      	adds	r3, #4
 8003998:	4619      	mov	r1, r3
 800399a:	4610      	mov	r0, r2
 800399c:	f000 fae9 	bl	8003f72 <vListInsert>
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <prvAddCurrentTaskToDelayedList+0xd8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d202      	bcs.n	80039b0 <prvAddCurrentTaskToDelayedList+0xbc>
 80039aa:	4a08      	ldr	r2, [pc, #32]	; (80039cc <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	bf00      	nop
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000174 	.word	0x20000174
 80039bc:	20000098 	.word	0x20000098
 80039c0:	2000015c 	.word	0x2000015c
 80039c4:	2000012c 	.word	0x2000012c
 80039c8:	20000128 	.word	0x20000128
 80039cc:	20000190 	.word	0x20000190

080039d0 <xTimerCreateTimerTask>:
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	f000 fa45 	bl	8003e68 <prvCheckForValidListAndQueue>
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <xTimerCreateTimerTask+0x54>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <xTimerCreateTimerTask+0x2c>
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <xTimerCreateTimerTask+0x58>)
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	2303      	movs	r3, #3
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	490e      	ldr	r1, [pc, #56]	; (8003a2c <xTimerCreateTimerTask+0x5c>)
 80039f4:	480e      	ldr	r0, [pc, #56]	; (8003a30 <xTimerCreateTimerTask+0x60>)
 80039f6:	f7fe fdbf 	bl	8002578 <xTaskCreate>
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <xTimerCreateTimerTask+0x48>
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <xTimerCreateTimerTask+0x46>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	200001cc 	.word	0x200001cc
 8003a28:	200001d0 	.word	0x200001d0
 8003a2c:	0800483c 	.word	0x0800483c
 8003a30:	08003ad9 	.word	0x08003ad9

08003a34 <prvReloadTimer>:
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	e008      	b.n	8003a54 <prvReloadTimer+0x20>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	4413      	add	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	4798      	blx	r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	18d1      	adds	r1, r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f8db 	bl	8003c1c <prvInsertTimerInActiveList>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ea      	bne.n	8003a42 <prvReloadTimer+0xe>
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <prvProcessExpiredTimer>:
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <prvProcessExpiredTimer+0x5c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 faa6 	bl	8003fe2 <uxListRemove>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <prvProcessExpiredTimer+0x38>
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7ff ffc3 	bl	8003a34 <prvReloadTimer>
 8003aae:	e008      	b.n	8003ac2 <prvProcessExpiredTimer+0x4a>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	4798      	blx	r3
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200001c4 	.word	0x200001c4

08003ad8 <prvTimerTask>:
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	f107 0308 	add.w	r3, r7, #8
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f857 	bl	8003b98 <prvGetNextExpireTime>
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4619      	mov	r1, r3
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f803 	bl	8003afc <prvProcessTimerOrBlockTask>
 8003af6:	f000 f8d3 	bl	8003ca0 <prvProcessReceivedCommands>
 8003afa:	e7f1      	b.n	8003ae0 <prvTimerTask+0x8>

08003afc <prvProcessTimerOrBlockTask>:
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
 8003b06:	f7fe fef5 	bl	80028f4 <vTaskSuspendAll>
 8003b0a:	f107 0308 	add.w	r3, r7, #8
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f864 	bl	8003bdc <prvSampleTimeNow>
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d130      	bne.n	8003b7e <prvProcessTimerOrBlockTask+0x82>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <prvProcessTimerOrBlockTask+0x3c>
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d806      	bhi.n	8003b38 <prvProcessTimerOrBlockTask+0x3c>
 8003b2a:	f7fe ff27 	bl	800297c <xTaskResumeAll>
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ffa1 	bl	8003a78 <prvProcessExpiredTimer>
 8003b36:	e024      	b.n	8003b82 <prvProcessTimerOrBlockTask+0x86>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <prvProcessTimerOrBlockTask+0x54>
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <prvProcessTimerOrBlockTask+0x90>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <prvProcessTimerOrBlockTask+0x50>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <prvProcessTimerOrBlockTask+0x52>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <prvProcessTimerOrBlockTask+0x94>)
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f7fe fcd7 	bl	8002510 <vQueueWaitForMessageRestricted>
 8003b62:	f7fe ff0b 	bl	800297c <xTaskResumeAll>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <prvProcessTimerOrBlockTask+0x86>
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <prvProcessTimerOrBlockTask+0x98>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	e001      	b.n	8003b82 <prvProcessTimerOrBlockTask+0x86>
 8003b7e:	f7fe fefd 	bl	800297c <xTaskResumeAll>
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200001c8 	.word	0x200001c8
 8003b90:	200001cc 	.word	0x200001cc
 8003b94:	e000ed04 	.word	0xe000ed04

08003b98 <prvGetNextExpireTime>:
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <prvGetNextExpireTime+0x40>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <prvGetNextExpireTime+0x16>
 8003baa:	2201      	movs	r2, #1
 8003bac:	e000      	b.n	8003bb0 <prvGetNextExpireTime+0x18>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <prvGetNextExpireTime+0x30>
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <prvGetNextExpireTime+0x40>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	e001      	b.n	8003bcc <prvGetNextExpireTime+0x34>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr
 8003bd8:	200001c4 	.word	0x200001c4

08003bdc <prvSampleTimeNow>:
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	f7fe ffc6 	bl	8002b74 <xTaskGetTickCount>
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <prvSampleTimeNow+0x3c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d205      	bcs.n	8003c00 <prvSampleTimeNow+0x24>
 8003bf4:	f000 f912 	bl	8003e1c <prvSwitchTimerLists>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e002      	b.n	8003c06 <prvSampleTimeNow+0x2a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <prvSampleTimeNow+0x3c>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200001d4 	.word	0x200001d4

08003c1c <prvInsertTimerInActiveList>:
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	611a      	str	r2, [r3, #16]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d812      	bhi.n	8003c68 <prvInsertTimerInActiveList+0x4c>
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	1ad2      	subs	r2, r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d302      	bcc.n	8003c56 <prvInsertTimerInActiveList+0x3a>
 8003c50:	2301      	movs	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e01b      	b.n	8003c8e <prvInsertTimerInActiveList+0x72>
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <prvInsertTimerInActiveList+0x7c>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f000 f986 	bl	8003f72 <vListInsert>
 8003c66:	e012      	b.n	8003c8e <prvInsertTimerInActiveList+0x72>
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d206      	bcs.n	8003c7e <prvInsertTimerInActiveList+0x62>
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <prvInsertTimerInActiveList+0x62>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e007      	b.n	8003c8e <prvInsertTimerInActiveList+0x72>
 8003c7e:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <prvInsertTimerInActiveList+0x80>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f000 f972 	bl	8003f72 <vListInsert>
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	200001c8 	.word	0x200001c8
 8003c9c:	200001c4 	.word	0x200001c4

08003ca0 <prvProcessReceivedCommands>:
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	e0a6      	b.n	8003df6 <prvProcessReceivedCommands+0x156>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f2c0 80a2 	blt.w	8003df4 <prvProcessReceivedCommands+0x154>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d004      	beq.n	8003cc6 <prvProcessReceivedCommands+0x26>
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f98e 	bl	8003fe2 <uxListRemove>
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff87 	bl	8003bdc <prvSampleTimeNow>
 8003cce:	61b8      	str	r0, [r7, #24]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	f200 808e 	bhi.w	8003df6 <prvProcessReceivedCommands+0x156>
 8003cda:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <prvProcessReceivedCommands+0x40>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d05 	.word	0x08003d05
 8003ce8:	08003d6d 	.word	0x08003d6d
 8003cec:	08003d81 	.word	0x08003d81
 8003cf0:	08003dcb 	.word	0x08003dcb
 8003cf4:	08003d05 	.word	0x08003d05
 8003cf8:	08003d05 	.word	0x08003d05
 8003cfc:	08003d6d 	.word	0x08003d6d
 8003d00:	08003d81 	.word	0x08003d81
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	18d1      	adds	r1, r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	69f8      	ldr	r0, [r7, #28]
 8003d24:	f7ff ff7a 	bl	8003c1c <prvInsertTimerInActiveList>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d063      	beq.n	8003df6 <prvProcessReceivedCommands+0x156>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <prvProcessReceivedCommands+0xb0>
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	4413      	add	r3, r2
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4619      	mov	r1, r3
 8003d48:	69f8      	ldr	r0, [r7, #28]
 8003d4a:	f7ff fe73 	bl	8003a34 <prvReloadTimer>
 8003d4e:	e008      	b.n	8003d62 <prvProcessReceivedCommands+0xc2>
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	69f8      	ldr	r0, [r7, #28]
 8003d68:	4798      	blx	r3
 8003d6a:	e044      	b.n	8003df6 <prvProcessReceivedCommands+0x156>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003d7e:	e03a      	b.n	8003df6 <prvProcessReceivedCommands+0x156>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	619a      	str	r2, [r3, #24]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <prvProcessReceivedCommands+0x116>
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <prvProcessReceivedCommands+0x114>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	18d1      	adds	r1, r2, r3
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	69f8      	ldr	r0, [r7, #28]
 8003dc4:	f7ff ff2a 	bl	8003c1c <prvInsertTimerInActiveList>
 8003dc8:	e015      	b.n	8003df6 <prvProcessReceivedCommands+0x156>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <prvProcessReceivedCommands+0x140>
 8003dd8:	69f8      	ldr	r0, [r7, #28]
 8003dda:	f000 f88d 	bl	8003ef8 <vPortFree>
 8003dde:	e00a      	b.n	8003df6 <prvProcessReceivedCommands+0x156>
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003df2:	e000      	b.n	8003df6 <prvProcessReceivedCommands+0x156>
 8003df4:	bf00      	nop
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <prvProcessReceivedCommands+0x178>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f107 0108 	add.w	r1, r7, #8
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe f831 	bl	8001e68 <xQueueReceive>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f af4d 	bne.w	8003ca8 <prvProcessReceivedCommands+0x8>
 8003e0e:	bf00      	nop
 8003e10:	bf00      	nop
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200001cc 	.word	0x200001cc

08003e1c <prvSwitchTimerLists>:
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	e009      	b.n	8003e38 <prvSwitchTimerLists+0x1c>
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <prvSwitchTimerLists+0x44>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8003e32:	6838      	ldr	r0, [r7, #0]
 8003e34:	f7ff fe20 	bl	8003a78 <prvProcessExpiredTimer>
 8003e38:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <prvSwitchTimerLists+0x44>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <prvSwitchTimerLists+0x8>
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <prvSwitchTimerLists+0x44>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <prvSwitchTimerLists+0x48>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a04      	ldr	r2, [pc, #16]	; (8003e60 <prvSwitchTimerLists+0x44>)
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <prvSwitchTimerLists+0x48>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200001c4 	.word	0x200001c4
 8003e64:	200001c8 	.word	0x200001c8

08003e68 <prvCheckForValidListAndQueue>:
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	f000 f9d8 	bl	8004220 <vPortEnterCritical>
 8003e70:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <prvCheckForValidListAndQueue+0x54>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d11d      	bne.n	8003eb4 <prvCheckForValidListAndQueue+0x4c>
 8003e78:	4811      	ldr	r0, [pc, #68]	; (8003ec0 <prvCheckForValidListAndQueue+0x58>)
 8003e7a:	f000 f84f 	bl	8003f1c <vListInitialise>
 8003e7e:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <prvCheckForValidListAndQueue+0x5c>)
 8003e80:	f000 f84c 	bl	8003f1c <vListInitialise>
 8003e84:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <prvCheckForValidListAndQueue+0x60>)
 8003e86:	4a0e      	ldr	r2, [pc, #56]	; (8003ec0 <prvCheckForValidListAndQueue+0x58>)
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <prvCheckForValidListAndQueue+0x64>)
 8003e8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <prvCheckForValidListAndQueue+0x5c>)
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	2200      	movs	r2, #0
 8003e92:	210c      	movs	r1, #12
 8003e94:	200a      	movs	r0, #10
 8003e96:	f7fd fdd3 	bl	8001a40 <xQueueGenericCreate>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <prvCheckForValidListAndQueue+0x54>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <prvCheckForValidListAndQueue+0x54>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <prvCheckForValidListAndQueue+0x4c>
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <prvCheckForValidListAndQueue+0x54>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4908      	ldr	r1, [pc, #32]	; (8003ed0 <prvCheckForValidListAndQueue+0x68>)
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fae0 	bl	8002474 <vQueueAddToRegistry>
 8003eb4:	f000 f9e4 	bl	8004280 <vPortExitCritical>
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	200001cc 	.word	0x200001cc
 8003ec0:	2000019c 	.word	0x2000019c
 8003ec4:	200001b0 	.word	0x200001b0
 8003ec8:	200001c4 	.word	0x200001c4
 8003ecc:	200001c8 	.word	0x200001c8
 8003ed0:	08004844 	.word	0x08004844

08003ed4 <pvPortMalloc>:
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	f7fe fd0a 	bl	80028f4 <vTaskSuspendAll>
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fba9 	bl	8004638 <malloc>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	f7fe fd47 	bl	800297c <xTaskResumeAll>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <vPortFree>:
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <vPortFree+0x1c>
 8003f06:	f7fe fcf5 	bl	80028f4 <vTaskSuspendAll>
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fb9c 	bl	8004648 <free>
 8003f10:	f7fe fd34 	bl	800297c <xTaskResumeAll>
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <vListInitialise>:
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f103 0208 	add.w	r2, r3, #8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f04f 32ff 	mov.w	r2, #4294967295
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f103 0208 	add.w	r2, r3, #8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f103 0208 	add.w	r2, r3, #8
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	611a      	str	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <vListInitialiseItem>:
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	611a      	str	r2, [r3, #16]
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <vListInsert>:
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d103      	bne.n	8003f92 <vListInsert+0x20>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e00c      	b.n	8003fac <vListInsert+0x3a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3308      	adds	r3, #8
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e002      	b.n	8003fa0 <vListInsert+0x2e>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d2f6      	bcs.n	8003f9a <vListInsert+0x28>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <uxListRemove>:
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6892      	ldr	r2, [r2, #8]
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6852      	ldr	r2, [r2, #4]
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d103      	bne.n	8004016 <uxListRemove+0x34>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1e5a      	subs	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <pxPortInitialiseStack>:
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3b04      	subs	r3, #4
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3b04      	subs	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f023 0201 	bic.w	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b04      	subs	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	4a08      	ldr	r2, [pc, #32]	; (8004088 <pxPortInitialiseStack+0x54>)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3b14      	subs	r3, #20
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3b20      	subs	r3, #32
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	0800408d 	.word	0x0800408d

0800408c <prvTaskExitError>:
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <prvTaskExitError+0x54>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d00a      	beq.n	80040b6 <prvTaskExitError+0x2a>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <prvTaskExitError+0x28>
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	bf00      	nop
 80040ca:	bf00      	nop
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0fc      	beq.n	80040cc <prvTaskExitError+0x40>
 80040d2:	bf00      	nop
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000010 	.word	0x20000010
	...

080040f0 <SVC_Handler>:
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <pxCurrentTCBConst2>)
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040fa:	f380 8809 	msr	PSP, r0
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8811 	msr	BASEPRI, r0
 800410a:	f04e 0e0d 	orr.w	lr, lr, #13
 800410e:	4770      	bx	lr

08004110 <pxCurrentTCBConst2>:
 8004110:	20000098 	.word	0x20000098
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <prvPortStartFirstTask>:
 8004118:	4806      	ldr	r0, [pc, #24]	; (8004134 <prvPortStartFirstTask+0x1c>)
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	6800      	ldr	r0, [r0, #0]
 800411e:	f380 8808 	msr	MSP, r0
 8004122:	b662      	cpsie	i
 8004124:	b661      	cpsie	f
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	df00      	svc	0
 8004130:	bf00      	nop
 8004132:	0000      	.short	0x0000
 8004134:	e000ed08 	.word	0xe000ed08
 8004138:	bf00      	nop
 800413a:	bf00      	nop

0800413c <xPortStartScheduler>:
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	4b32      	ldr	r3, [pc, #200]	; (800420c <xPortStartScheduler+0xd0>)
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	22ff      	movs	r2, #255	; 0xff
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	70fb      	strb	r3, [r7, #3]
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004164:	b2da      	uxtb	r2, r3
 8004166:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <xPortStartScheduler+0xd4>)
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <xPortStartScheduler+0xd8>)
 800416c:	2207      	movs	r2, #7
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	e009      	b.n	8004186 <xPortStartScheduler+0x4a>
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <xPortStartScheduler+0xd8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3b01      	subs	r3, #1
 8004178:	4a26      	ldr	r2, [pc, #152]	; (8004214 <xPortStartScheduler+0xd8>)
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	70fb      	strb	r3, [r7, #3]
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b80      	cmp	r3, #128	; 0x80
 8004190:	d0ef      	beq.n	8004172 <xPortStartScheduler+0x36>
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <xPortStartScheduler+0xd8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f1c3 0307 	rsb	r3, r3, #7
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00a      	beq.n	80041b4 <xPortStartScheduler+0x78>
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	bf00      	nop
 80041b2:	e7fe      	b.n	80041b2 <xPortStartScheduler+0x76>
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <xPortStartScheduler+0xd8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	4a16      	ldr	r2, [pc, #88]	; (8004214 <xPortStartScheduler+0xd8>)
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <xPortStartScheduler+0xd8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <xPortStartScheduler+0xd8>)
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <xPortStartScheduler+0xdc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a10      	ldr	r2, [pc, #64]	; (8004218 <xPortStartScheduler+0xdc>)
 80041d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <xPortStartScheduler+0xdc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a0d      	ldr	r2, [pc, #52]	; (8004218 <xPortStartScheduler+0xdc>)
 80041e4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	f000 f981 	bl	80044f0 <vPortSetupTimerInterrupt>
 80041ee:	4b0b      	ldr	r3, [pc, #44]	; (800421c <xPortStartScheduler+0xe0>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	f7ff ff90 	bl	8004118 <prvPortStartFirstTask>
 80041f8:	f7fe fe46 	bl	8002e88 <vTaskSwitchContext>
 80041fc:	f7ff ff46 	bl	800408c <prvTaskExitError>
 8004200:	2300      	movs	r3, #0
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	e000e400 	.word	0xe000e400
 8004210:	200001e4 	.word	0x200001e4
 8004214:	200001e8 	.word	0x200001e8
 8004218:	e000ed20 	.word	0xe000ed20
 800421c:	20000010 	.word	0x20000010

08004220 <vPortEnterCritical>:
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	bf00      	nop
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <vPortEnterCritical+0x58>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <vPortEnterCritical+0x58>)
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <vPortEnterCritical+0x58>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10f      	bne.n	800426c <vPortEnterCritical+0x4c>
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <vPortEnterCritical+0x5c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <vPortEnterCritical+0x4c>
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <vPortEnterCritical+0x4a>
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000010 	.word	0x20000010
 800427c:	e000ed04 	.word	0xe000ed04

08004280 <vPortExitCritical>:
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <vPortExitCritical+0x4c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <vPortExitCritical+0x24>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	607b      	str	r3, [r7, #4]
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <vPortExitCritical+0x22>
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <vPortExitCritical+0x4c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	4a08      	ldr	r2, [pc, #32]	; (80042cc <vPortExitCritical+0x4c>)
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b07      	ldr	r3, [pc, #28]	; (80042cc <vPortExitCritical+0x4c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d105      	bne.n	80042c2 <vPortExitCritical+0x42>
 80042b6:	2300      	movs	r3, #0
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	20000010 	.word	0x20000010

080042d0 <PendSV_Handler>:
 80042d0:	f3ef 8009 	mrs	r0, PSP
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <pxCurrentTCBConst>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042e0:	6010      	str	r0, [r2, #0]
 80042e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80042e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042ea:	f380 8811 	msr	BASEPRI, r0
 80042ee:	f7fe fdcb 	bl	8002e88 <vTaskSwitchContext>
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f380 8811 	msr	BASEPRI, r0
 80042fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80042fe:	6819      	ldr	r1, [r3, #0]
 8004300:	6808      	ldr	r0, [r1, #0]
 8004302:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004306:	f380 8809 	msr	PSP, r0
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	4770      	bx	lr

08004310 <pxCurrentTCBConst>:
 8004310:	20000098 	.word	0x20000098
 8004314:	bf00      	nop
 8004316:	bf00      	nop

08004318 <SysTick_Handler>:
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	bf00      	nop
 8004332:	f7fe fc91 	bl	8002c58 <xTaskIncrementTick>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <SysTick_Handler+0x2c>
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <SysTick_Handler+0x40>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	2300      	movs	r3, #0
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	bf00      	nop
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <vPortSuppressTicksAndSleep>:
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	4b5b      	ldr	r3, [pc, #364]	; (80044d4 <vPortSuppressTicksAndSleep+0x178>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d902      	bls.n	8004374 <vPortSuppressTicksAndSleep+0x18>
 800436e:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <vPortSuppressTicksAndSleep+0x178>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	b672      	cpsid	i
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f7fe ffe9 	bl	8003354 <eTaskConfirmSleepModeStatus>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <vPortSuppressTicksAndSleep+0x30>
 8004388:	b662      	cpsie	i
 800438a:	e09e      	b.n	80044ca <vPortSuppressTicksAndSleep+0x16e>
 800438c:	4b52      	ldr	r3, [pc, #328]	; (80044d8 <vPortSuppressTicksAndSleep+0x17c>)
 800438e:	2206      	movs	r2, #6
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	4b52      	ldr	r3, [pc, #328]	; (80044dc <vPortSuppressTicksAndSleep+0x180>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <vPortSuppressTicksAndSleep+0x48>
 800439e:	4b50      	ldr	r3, [pc, #320]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	4a4d      	ldr	r2, [pc, #308]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	fb02 f303 	mul.w	r3, r2, r3
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4413      	add	r3, r2
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <vPortSuppressTicksAndSleep+0x188>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <vPortSuppressTicksAndSleep+0x78>
 80043c2:	4b48      	ldr	r3, [pc, #288]	; (80044e4 <vPortSuppressTicksAndSleep+0x188>)
 80043c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	4b45      	ldr	r3, [pc, #276]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	4b44      	ldr	r3, [pc, #272]	; (80044e8 <vPortSuppressTicksAndSleep+0x18c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d904      	bls.n	80043e8 <vPortSuppressTicksAndSleep+0x8c>
 80043de:	4b42      	ldr	r3, [pc, #264]	; (80044e8 <vPortSuppressTicksAndSleep+0x18c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	4a40      	ldr	r2, [pc, #256]	; (80044ec <vPortSuppressTicksAndSleep+0x190>)
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b3b      	ldr	r3, [pc, #236]	; (80044dc <vPortSuppressTicksAndSleep+0x180>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	4b38      	ldr	r3, [pc, #224]	; (80044d8 <vPortSuppressTicksAndSleep+0x17c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a37      	ldr	r2, [pc, #220]	; (80044d8 <vPortSuppressTicksAndSleep+0x17c>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <vPortSuppressTicksAndSleep+0xb8>
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	bf30      	wfi
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	b662      	cpsie	i
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	b672      	cpsid	i
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <vPortSuppressTicksAndSleep+0x17c>)
 800442a:	2206      	movs	r2, #6
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <vPortSuppressTicksAndSleep+0x17c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01d      	beq.n	8004476 <vPortSuppressTicksAndSleep+0x11a>
 800443a:	4b29      	ldr	r3, [pc, #164]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b27      	ldr	r3, [pc, #156]	; (80044dc <vPortSuppressTicksAndSleep+0x180>)
 8004440:	6819      	ldr	r1, [r3, #0]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	1acb      	subs	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	3b01      	subs	r3, #1
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <vPortSuppressTicksAndSleep+0x18c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	429a      	cmp	r2, r3
 8004454:	d904      	bls.n	8004460 <vPortSuppressTicksAndSleep+0x104>
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	429a      	cmp	r2, r3
 800445e:	d903      	bls.n	8004468 <vPortSuppressTicksAndSleep+0x10c>
 8004460:	4b1f      	ldr	r3, [pc, #124]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3b01      	subs	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	4a20      	ldr	r2, [pc, #128]	; (80044ec <vPortSuppressTicksAndSleep+0x190>)
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3b01      	subs	r3, #1
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	e01a      	b.n	80044ac <vPortSuppressTicksAndSleep+0x150>
 8004476:	4b19      	ldr	r3, [pc, #100]	; (80044dc <vPortSuppressTicksAndSleep+0x180>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	fb02 f203 	mul.w	r2, r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	3301      	adds	r3, #1
 800449c:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	fb02 f203 	mul.w	r2, r2, r3
 80044a4:	4911      	ldr	r1, [pc, #68]	; (80044ec <vPortSuppressTicksAndSleep+0x190>)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	600b      	str	r3, [r1, #0]
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <vPortSuppressTicksAndSleep+0x180>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <vPortSuppressTicksAndSleep+0x17c>)
 80044b4:	2207      	movs	r2, #7
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <vPortSuppressTicksAndSleep+0x184>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0b      	ldr	r2, [pc, #44]	; (80044ec <vPortSuppressTicksAndSleep+0x190>)
 80044be:	3b01      	subs	r3, #1
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	69b8      	ldr	r0, [r7, #24]
 80044c4:	f7fe fb6e 	bl	8002ba4 <vTaskStepTick>
 80044c8:	b662      	cpsie	i
 80044ca:	bf00      	nop
 80044cc:	3720      	adds	r7, #32
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200001dc 	.word	0x200001dc
 80044d8:	e000e010 	.word	0xe000e010
 80044dc:	e000e018 	.word	0xe000e018
 80044e0:	200001d8 	.word	0x200001d8
 80044e4:	e000ed04 	.word	0xe000ed04
 80044e8:	200001e0 	.word	0x200001e0
 80044ec:	e000e014 	.word	0xe000e014

080044f0 <vPortSetupTimerInterrupt>:
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <vPortSetupTimerInterrupt+0x58>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a14      	ldr	r2, [pc, #80]	; (800454c <vPortSetupTimerInterrupt+0x5c>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	4a13      	ldr	r2, [pc, #76]	; (8004550 <vPortSetupTimerInterrupt+0x60>)
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b12      	ldr	r3, [pc, #72]	; (8004550 <vPortSetupTimerInterrupt+0x60>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	4a10      	ldr	r2, [pc, #64]	; (8004554 <vPortSetupTimerInterrupt+0x64>)
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	4b10      	ldr	r3, [pc, #64]	; (8004558 <vPortSetupTimerInterrupt+0x68>)
 8004516:	225e      	movs	r2, #94	; 0x5e
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <vPortSetupTimerInterrupt+0x6c>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <vPortSetupTimerInterrupt+0x70>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <vPortSetupTimerInterrupt+0x58>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a08      	ldr	r2, [pc, #32]	; (800454c <vPortSetupTimerInterrupt+0x5c>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <vPortSetupTimerInterrupt+0x74>)
 8004534:	3b01      	subs	r3, #1
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4b08      	ldr	r3, [pc, #32]	; (800455c <vPortSetupTimerInterrupt+0x6c>)
 800453a:	2207      	movs	r2, #7
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	bf00      	nop
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000000 	.word	0x20000000
 800454c:	10624dd3 	.word	0x10624dd3
 8004550:	200001d8 	.word	0x200001d8
 8004554:	200001dc 	.word	0x200001dc
 8004558:	200001e0 	.word	0x200001e0
 800455c:	e000e010 	.word	0xe000e010
 8004560:	e000e018 	.word	0xe000e018
 8004564:	e000e014 	.word	0xe000e014

08004568 <vPortValidateInterruptPriority>:
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	f3ef 8305 	mrs	r3, IPSR
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b0f      	cmp	r3, #15
 8004578:	d914      	bls.n	80045a4 <vPortValidateInterruptPriority+0x3c>
 800457a:	4a16      	ldr	r2, [pc, #88]	; (80045d4 <vPortValidateInterruptPriority+0x6c>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	72fb      	strb	r3, [r7, #11]
 8004584:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <vPortValidateInterruptPriority+0x70>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	7afa      	ldrb	r2, [r7, #11]
 800458a:	429a      	cmp	r2, r3
 800458c:	d20a      	bcs.n	80045a4 <vPortValidateInterruptPriority+0x3c>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <vPortValidateInterruptPriority+0x3a>
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <vPortValidateInterruptPriority+0x74>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <vPortValidateInterruptPriority+0x78>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d90a      	bls.n	80045ca <vPortValidateInterruptPriority+0x62>
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <vPortValidateInterruptPriority+0x60>
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	e000e3f0 	.word	0xe000e3f0
 80045d8:	200001e4 	.word	0x200001e4
 80045dc:	e000ed0c 	.word	0xe000ed0c
 80045e0:	200001e8 	.word	0x200001e8

080045e4 <__errno>:
 80045e4:	4b01      	ldr	r3, [pc, #4]	; (80045ec <__errno+0x8>)
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20000014 	.word	0x20000014

080045f0 <__libc_init_array>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	2600      	movs	r6, #0
 80045f4:	4d0c      	ldr	r5, [pc, #48]	; (8004628 <__libc_init_array+0x38>)
 80045f6:	4c0d      	ldr	r4, [pc, #52]	; (800462c <__libc_init_array+0x3c>)
 80045f8:	1b64      	subs	r4, r4, r5
 80045fa:	10a4      	asrs	r4, r4, #2
 80045fc:	42a6      	cmp	r6, r4
 80045fe:	d109      	bne.n	8004614 <__libc_init_array+0x24>
 8004600:	f000 f904 	bl	800480c <_init>
 8004604:	2600      	movs	r6, #0
 8004606:	4d0a      	ldr	r5, [pc, #40]	; (8004630 <__libc_init_array+0x40>)
 8004608:	4c0a      	ldr	r4, [pc, #40]	; (8004634 <__libc_init_array+0x44>)
 800460a:	1b64      	subs	r4, r4, r5
 800460c:	10a4      	asrs	r4, r4, #2
 800460e:	42a6      	cmp	r6, r4
 8004610:	d105      	bne.n	800461e <__libc_init_array+0x2e>
 8004612:	bd70      	pop	{r4, r5, r6, pc}
 8004614:	f855 3b04 	ldr.w	r3, [r5], #4
 8004618:	4798      	blx	r3
 800461a:	3601      	adds	r6, #1
 800461c:	e7ee      	b.n	80045fc <__libc_init_array+0xc>
 800461e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004622:	4798      	blx	r3
 8004624:	3601      	adds	r6, #1
 8004626:	e7f2      	b.n	800460e <__libc_init_array+0x1e>
 8004628:	08004878 	.word	0x08004878
 800462c:	08004878 	.word	0x08004878
 8004630:	08004878 	.word	0x08004878
 8004634:	0800487c 	.word	0x0800487c

08004638 <malloc>:
 8004638:	4b02      	ldr	r3, [pc, #8]	; (8004644 <malloc+0xc>)
 800463a:	4601      	mov	r1, r0
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	f000 b86d 	b.w	800471c <_malloc_r>
 8004642:	bf00      	nop
 8004644:	20000014 	.word	0x20000014

08004648 <free>:
 8004648:	4b02      	ldr	r3, [pc, #8]	; (8004654 <free+0xc>)
 800464a:	4601      	mov	r1, r0
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	f000 b819 	b.w	8004684 <_free_r>
 8004652:	bf00      	nop
 8004654:	20000014 	.word	0x20000014

08004658 <memcpy>:
 8004658:	440a      	add	r2, r1
 800465a:	4291      	cmp	r1, r2
 800465c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004660:	d100      	bne.n	8004664 <memcpy+0xc>
 8004662:	4770      	bx	lr
 8004664:	b510      	push	{r4, lr}
 8004666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800466a:	4291      	cmp	r1, r2
 800466c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004670:	d1f9      	bne.n	8004666 <memcpy+0xe>
 8004672:	bd10      	pop	{r4, pc}

08004674 <memset>:
 8004674:	4603      	mov	r3, r0
 8004676:	4402      	add	r2, r0
 8004678:	4293      	cmp	r3, r2
 800467a:	d100      	bne.n	800467e <memset+0xa>
 800467c:	4770      	bx	lr
 800467e:	f803 1b01 	strb.w	r1, [r3], #1
 8004682:	e7f9      	b.n	8004678 <memset+0x4>

08004684 <_free_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4605      	mov	r5, r0
 8004688:	2900      	cmp	r1, #0
 800468a:	d043      	beq.n	8004714 <_free_r+0x90>
 800468c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004690:	1f0c      	subs	r4, r1, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	bfb8      	it	lt
 8004696:	18e4      	addlt	r4, r4, r3
 8004698:	f000 f8aa 	bl	80047f0 <__malloc_lock>
 800469c:	4a1e      	ldr	r2, [pc, #120]	; (8004718 <_free_r+0x94>)
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	4610      	mov	r0, r2
 80046a2:	b933      	cbnz	r3, 80046b2 <_free_r+0x2e>
 80046a4:	6063      	str	r3, [r4, #4]
 80046a6:	6014      	str	r4, [r2, #0]
 80046a8:	4628      	mov	r0, r5
 80046aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046ae:	f000 b8a5 	b.w	80047fc <__malloc_unlock>
 80046b2:	42a3      	cmp	r3, r4
 80046b4:	d90a      	bls.n	80046cc <_free_r+0x48>
 80046b6:	6821      	ldr	r1, [r4, #0]
 80046b8:	1862      	adds	r2, r4, r1
 80046ba:	4293      	cmp	r3, r2
 80046bc:	bf01      	itttt	eq
 80046be:	681a      	ldreq	r2, [r3, #0]
 80046c0:	685b      	ldreq	r3, [r3, #4]
 80046c2:	1852      	addeq	r2, r2, r1
 80046c4:	6022      	streq	r2, [r4, #0]
 80046c6:	6063      	str	r3, [r4, #4]
 80046c8:	6004      	str	r4, [r0, #0]
 80046ca:	e7ed      	b.n	80046a8 <_free_r+0x24>
 80046cc:	461a      	mov	r2, r3
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	b10b      	cbz	r3, 80046d6 <_free_r+0x52>
 80046d2:	42a3      	cmp	r3, r4
 80046d4:	d9fa      	bls.n	80046cc <_free_r+0x48>
 80046d6:	6811      	ldr	r1, [r2, #0]
 80046d8:	1850      	adds	r0, r2, r1
 80046da:	42a0      	cmp	r0, r4
 80046dc:	d10b      	bne.n	80046f6 <_free_r+0x72>
 80046de:	6820      	ldr	r0, [r4, #0]
 80046e0:	4401      	add	r1, r0
 80046e2:	1850      	adds	r0, r2, r1
 80046e4:	4283      	cmp	r3, r0
 80046e6:	6011      	str	r1, [r2, #0]
 80046e8:	d1de      	bne.n	80046a8 <_free_r+0x24>
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	4401      	add	r1, r0
 80046f0:	6011      	str	r1, [r2, #0]
 80046f2:	6053      	str	r3, [r2, #4]
 80046f4:	e7d8      	b.n	80046a8 <_free_r+0x24>
 80046f6:	d902      	bls.n	80046fe <_free_r+0x7a>
 80046f8:	230c      	movs	r3, #12
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	e7d4      	b.n	80046a8 <_free_r+0x24>
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	1821      	adds	r1, r4, r0
 8004702:	428b      	cmp	r3, r1
 8004704:	bf01      	itttt	eq
 8004706:	6819      	ldreq	r1, [r3, #0]
 8004708:	685b      	ldreq	r3, [r3, #4]
 800470a:	1809      	addeq	r1, r1, r0
 800470c:	6021      	streq	r1, [r4, #0]
 800470e:	6063      	str	r3, [r4, #4]
 8004710:	6054      	str	r4, [r2, #4]
 8004712:	e7c9      	b.n	80046a8 <_free_r+0x24>
 8004714:	bd38      	pop	{r3, r4, r5, pc}
 8004716:	bf00      	nop
 8004718:	200001ec 	.word	0x200001ec

0800471c <_malloc_r>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	1ccd      	adds	r5, r1, #3
 8004720:	f025 0503 	bic.w	r5, r5, #3
 8004724:	3508      	adds	r5, #8
 8004726:	2d0c      	cmp	r5, #12
 8004728:	bf38      	it	cc
 800472a:	250c      	movcc	r5, #12
 800472c:	2d00      	cmp	r5, #0
 800472e:	4606      	mov	r6, r0
 8004730:	db01      	blt.n	8004736 <_malloc_r+0x1a>
 8004732:	42a9      	cmp	r1, r5
 8004734:	d903      	bls.n	800473e <_malloc_r+0x22>
 8004736:	230c      	movs	r3, #12
 8004738:	6033      	str	r3, [r6, #0]
 800473a:	2000      	movs	r0, #0
 800473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800473e:	f000 f857 	bl	80047f0 <__malloc_lock>
 8004742:	4921      	ldr	r1, [pc, #132]	; (80047c8 <_malloc_r+0xac>)
 8004744:	680a      	ldr	r2, [r1, #0]
 8004746:	4614      	mov	r4, r2
 8004748:	b99c      	cbnz	r4, 8004772 <_malloc_r+0x56>
 800474a:	4f20      	ldr	r7, [pc, #128]	; (80047cc <_malloc_r+0xb0>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	b923      	cbnz	r3, 800475a <_malloc_r+0x3e>
 8004750:	4621      	mov	r1, r4
 8004752:	4630      	mov	r0, r6
 8004754:	f000 f83c 	bl	80047d0 <_sbrk_r>
 8004758:	6038      	str	r0, [r7, #0]
 800475a:	4629      	mov	r1, r5
 800475c:	4630      	mov	r0, r6
 800475e:	f000 f837 	bl	80047d0 <_sbrk_r>
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	d123      	bne.n	80047ae <_malloc_r+0x92>
 8004766:	230c      	movs	r3, #12
 8004768:	4630      	mov	r0, r6
 800476a:	6033      	str	r3, [r6, #0]
 800476c:	f000 f846 	bl	80047fc <__malloc_unlock>
 8004770:	e7e3      	b.n	800473a <_malloc_r+0x1e>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	1b5b      	subs	r3, r3, r5
 8004776:	d417      	bmi.n	80047a8 <_malloc_r+0x8c>
 8004778:	2b0b      	cmp	r3, #11
 800477a:	d903      	bls.n	8004784 <_malloc_r+0x68>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	441c      	add	r4, r3
 8004780:	6025      	str	r5, [r4, #0]
 8004782:	e004      	b.n	800478e <_malloc_r+0x72>
 8004784:	6863      	ldr	r3, [r4, #4]
 8004786:	42a2      	cmp	r2, r4
 8004788:	bf0c      	ite	eq
 800478a:	600b      	streq	r3, [r1, #0]
 800478c:	6053      	strne	r3, [r2, #4]
 800478e:	4630      	mov	r0, r6
 8004790:	f000 f834 	bl	80047fc <__malloc_unlock>
 8004794:	f104 000b 	add.w	r0, r4, #11
 8004798:	1d23      	adds	r3, r4, #4
 800479a:	f020 0007 	bic.w	r0, r0, #7
 800479e:	1ac2      	subs	r2, r0, r3
 80047a0:	d0cc      	beq.n	800473c <_malloc_r+0x20>
 80047a2:	1a1b      	subs	r3, r3, r0
 80047a4:	50a3      	str	r3, [r4, r2]
 80047a6:	e7c9      	b.n	800473c <_malloc_r+0x20>
 80047a8:	4622      	mov	r2, r4
 80047aa:	6864      	ldr	r4, [r4, #4]
 80047ac:	e7cc      	b.n	8004748 <_malloc_r+0x2c>
 80047ae:	1cc4      	adds	r4, r0, #3
 80047b0:	f024 0403 	bic.w	r4, r4, #3
 80047b4:	42a0      	cmp	r0, r4
 80047b6:	d0e3      	beq.n	8004780 <_malloc_r+0x64>
 80047b8:	1a21      	subs	r1, r4, r0
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f808 	bl	80047d0 <_sbrk_r>
 80047c0:	3001      	adds	r0, #1
 80047c2:	d1dd      	bne.n	8004780 <_malloc_r+0x64>
 80047c4:	e7cf      	b.n	8004766 <_malloc_r+0x4a>
 80047c6:	bf00      	nop
 80047c8:	200001ec 	.word	0x200001ec
 80047cc:	200001f0 	.word	0x200001f0

080047d0 <_sbrk_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	2300      	movs	r3, #0
 80047d4:	4d05      	ldr	r5, [pc, #20]	; (80047ec <_sbrk_r+0x1c>)
 80047d6:	4604      	mov	r4, r0
 80047d8:	4608      	mov	r0, r1
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	f7fb fee0 	bl	80005a0 <_sbrk>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_sbrk_r+0x1a>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_sbrk_r+0x1a>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	20000284 	.word	0x20000284

080047f0 <__malloc_lock>:
 80047f0:	4801      	ldr	r0, [pc, #4]	; (80047f8 <__malloc_lock+0x8>)
 80047f2:	f000 b809 	b.w	8004808 <__retarget_lock_acquire_recursive>
 80047f6:	bf00      	nop
 80047f8:	2000028c 	.word	0x2000028c

080047fc <__malloc_unlock>:
 80047fc:	4801      	ldr	r0, [pc, #4]	; (8004804 <__malloc_unlock+0x8>)
 80047fe:	f000 b804 	b.w	800480a <__retarget_lock_release_recursive>
 8004802:	bf00      	nop
 8004804:	2000028c 	.word	0x2000028c

08004808 <__retarget_lock_acquire_recursive>:
 8004808:	4770      	bx	lr

0800480a <__retarget_lock_release_recursive>:
 800480a:	4770      	bx	lr

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
