
interrup-RTOS-Semaforo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003d30  08003d30  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d30  08003d30  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000078  08003db0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003db0  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112aa  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b2  00000000  00000000  0003134b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00033b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00034998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190b5  00000000  00000000  00035708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f490  00000000  00000000  0004e7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090200  00000000  00000000  0005dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ede4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  000edea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cc4 	.word	0x08003cc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003cc4 	.word	0x08003cc4

08000150 <LedBlink2>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void LedBlink2(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	//uint32_t sw1_state = 0;
	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000158:	2201      	movs	r2, #1
 800015a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015e:	4809      	ldr	r0, [pc, #36]	; (8000184 <LedBlink2+0x34>)
 8000160:	f000 fd00 	bl	8000b64 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000168:	f000 fa74 	bl	8000654 <HAL_Delay>
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000172:	4804      	ldr	r0, [pc, #16]	; (8000184 <LedBlink2+0x34>)
 8000174:	f000 fcf6 	bl	8000b64 <HAL_GPIO_WritePin>
 		HAL_Delay(500);
 8000178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017c:	f000 fa6a 	bl	8000654 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000180:	e7ea      	b.n	8000158 <LedBlink2+0x8>
 8000182:	bf00      	nop
 8000184:	40011000 	.word	0x40011000

08000188 <LedBlink1>:
	}
}

static void LedBlink1(void *pvParameters){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	//uint32_t read_sw1_state;
	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <LedBlink1+0x30>)
 8000198:	f000 fce4 	bl	8000b64 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800019c:	2064      	movs	r0, #100	; 0x64
 800019e:	f000 fa59 	bl	8000654 <HAL_Delay>
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a8:	4803      	ldr	r0, [pc, #12]	; (80001b8 <LedBlink1+0x30>)
 80001aa:	f000 fcdb 	bl	8000b64 <HAL_GPIO_WritePin>
 		HAL_Delay(100);
 80001ae:	2064      	movs	r0, #100	; 0x64
 80001b0:	f000 fa50 	bl	8000654 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001b4:	e7ec      	b.n	8000190 <LedBlink1+0x8>
 80001b6:	bf00      	nop
 80001b8:	40011000 	.word	0x40011000

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c2:	f000 fa15 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c6:	f000 f837 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ca:	f000 f87b 	bl	80002c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(LedBlink1, "Blink 1", 100, NULL, 2, NULL);
 80001ce:	2300      	movs	r3, #0
 80001d0:	9301      	str	r3, [sp, #4]
 80001d2:	2302      	movs	r3, #2
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2300      	movs	r3, #0
 80001d8:	2264      	movs	r2, #100	; 0x64
 80001da:	4912      	ldr	r1, [pc, #72]	; (8000224 <main+0x68>)
 80001dc:	4812      	ldr	r0, [pc, #72]	; (8000228 <main+0x6c>)
 80001de:	f001 fb65 	bl	80018ac <xTaskCreate>
  xTaskCreate(LedBlink2, "Blink 2", 100, NULL, 1, NULL);
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2301      	movs	r3, #1
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2300      	movs	r3, #0
 80001ec:	2264      	movs	r2, #100	; 0x64
 80001ee:	490f      	ldr	r1, [pc, #60]	; (800022c <main+0x70>)
 80001f0:	480f      	ldr	r0, [pc, #60]	; (8000230 <main+0x74>)
 80001f2:	f001 fb5b 	bl	80018ac <xTaskCreate>
  vTaskStartScheduler();
 80001f6:	f001 fcc5 	bl	8001b84 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000200:	480c      	ldr	r0, [pc, #48]	; (8000234 <main+0x78>)
 8000202:	f000 fcaf 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f000 fa23 	bl	8000654 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000214:	4807      	ldr	r0, [pc, #28]	; (8000234 <main+0x78>)
 8000216:	f000 fca5 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800021a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021e:	f000 fa19 	bl	8000654 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000222:	e7ea      	b.n	80001fa <main+0x3e>
 8000224:	08003cdc 	.word	0x08003cdc
 8000228:	08000189 	.word	0x08000189
 800022c:	08003ce4 	.word	0x08003ce4
 8000230:	08000151 	.word	0x08000151
 8000234:	40011000 	.word	0x40011000

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fc70 	bl	8003b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025a:	2301      	movs	r3, #1
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026c:	2302      	movs	r3, #2
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000276:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0318 	add.w	r3, r7, #24
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fc9f 	bl	8000bc4 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800028c:	f000 f89a 	bl	80003c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2302      	movs	r3, #2
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 ff0a 	bl	80010c4 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b6:	f000 f885 	bl	80003c4 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	; 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b088      	sub	sp, #32
 80002c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d8:	4b28      	ldr	r3, [pc, #160]	; (800037c <MX_GPIO_Init+0xb8>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a27      	ldr	r2, [pc, #156]	; (800037c <MX_GPIO_Init+0xb8>)
 80002de:	f043 0310 	orr.w	r3, r3, #16
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <MX_GPIO_Init+0xb8>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0310 	and.w	r3, r3, #16
 80002ec:	60fb      	str	r3, [r7, #12]
 80002ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <MX_GPIO_Init+0xb8>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a21      	ldr	r2, [pc, #132]	; (800037c <MX_GPIO_Init+0xb8>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <MX_GPIO_Init+0xb8>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0320 	and.w	r3, r3, #32
 8000304:	60bb      	str	r3, [r7, #8]
 8000306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <MX_GPIO_Init+0xb8>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <MX_GPIO_Init+0xb8>)
 800030e:	f043 0304 	orr.w	r3, r3, #4
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <MX_GPIO_Init+0xb8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0304 	and.w	r3, r3, #4
 800031c:	607b      	str	r3, [r7, #4]
 800031e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000326:	4816      	ldr	r0, [pc, #88]	; (8000380 <MX_GPIO_Init+0xbc>)
 8000328:	f000 fc1c 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800032c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2302      	movs	r3, #2
 800033c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	4619      	mov	r1, r3
 8000344:	480e      	ldr	r0, [pc, #56]	; (8000380 <MX_GPIO_Init+0xbc>)
 8000346:	f000 fa89 	bl	800085c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800034a:	2340      	movs	r3, #64	; 0x40
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <MX_GPIO_Init+0xc0>)
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000352:	2301      	movs	r3, #1
 8000354:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	4619      	mov	r1, r3
 800035c:	480a      	ldr	r0, [pc, #40]	; (8000388 <MX_GPIO_Init+0xc4>)
 800035e:	f000 fa7d 	bl	800085c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000362:	2200      	movs	r2, #0
 8000364:	2100      	movs	r1, #0
 8000366:	2017      	movs	r0, #23
 8000368:	f000 fa4d 	bl	8000806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800036c:	2017      	movs	r0, #23
 800036e:	f000 fa66 	bl	800083e <HAL_NVIC_EnableIRQ>

}
 8000372:	bf00      	nop
 8000374:	3720      	adds	r7, #32
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	40011000 	.word	0x40011000
 8000384:	10210000 	.word	0x10210000
 8000388:	40010800 	.word	0x40010800

0800038c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	80fb      	strh	r3, [r7, #6]
	//if(read_sw1_state) read_sw1_state = 0;
	//else read_sw1_state = 1;

	//HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d101      	bne.n	80003b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003b2:	f000 f933 	bl	800061c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40012c00 	.word	0x40012c00

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	e7fe      	b.n	80003cc <Error_Handler+0x8>
	...

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a14      	ldr	r2, [pc, #80]	; (800042c <HAL_MspInit+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <HAL_MspInit+0x5c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	; (800042c <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_MspInit+0x60>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_MspInit+0x60>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	40010000 	.word	0x40010000

08000434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08c      	sub	sp, #48	; 0x30
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000444:	2200      	movs	r2, #0
 8000446:	6879      	ldr	r1, [r7, #4]
 8000448:	2019      	movs	r0, #25
 800044a:	f000 f9dc 	bl	8000806 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800044e:	2019      	movs	r0, #25
 8000450:	f000 f9f5 	bl	800083e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <HAL_InitTick+0x9c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <HAL_InitTick+0x9c>)
 800045a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <HAL_InitTick+0x9c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800046c:	f107 0210 	add.w	r2, r7, #16
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f000 ff80 	bl	800137c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800047c:	f000 ff6a 	bl	8001354 <HAL_RCC_GetPCLK2Freq>
 8000480:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000484:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <HAL_InitTick+0xa0>)
 8000486:	fba2 2303 	umull	r2, r3, r2, r3
 800048a:	0c9b      	lsrs	r3, r3, #18
 800048c:	3b01      	subs	r3, #1
 800048e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <HAL_InitTick+0xa4>)
 8000492:	4a12      	ldr	r2, [pc, #72]	; (80004dc <HAL_InitTick+0xa8>)
 8000494:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <HAL_InitTick+0xa4>)
 8000498:	f240 32e7 	movw	r2, #999	; 0x3e7
 800049c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <HAL_InitTick+0xa4>)
 80004a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_InitTick+0xa4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <HAL_InitTick+0xa4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <HAL_InitTick+0xa4>)
 80004b2:	f000 ffb1 	bl	8001418 <HAL_TIM_Base_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d104      	bne.n	80004c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <HAL_InitTick+0xa4>)
 80004be:	f001 f803 	bl	80014c8 <HAL_TIM_Base_Start_IT>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e000      	b.n	80004c8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3730      	adds	r7, #48	; 0x30
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	431bde83 	.word	0x431bde83
 80004d8:	200001f4 	.word	0x200001f4
 80004dc:	40012c00 	.word	0x40012c00

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <MemManage_Handler+0x4>

080004f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <UsageFault_Handler+0x4>

080004fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr

0800050a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800050e:	2040      	movs	r0, #64	; 0x40
 8000510:	f000 fb40 	bl	8000b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}

08000518 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <TIM1_UP_IRQHandler+0x10>)
 800051e:	f001 f825 	bl	800156c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	200001f4 	.word	0x200001f4

0800052c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000534:	4a14      	ldr	r2, [pc, #80]	; (8000588 <_sbrk+0x5c>)
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <_sbrk+0x60>)
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000540:	4b13      	ldr	r3, [pc, #76]	; (8000590 <_sbrk+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <_sbrk+0x64>)
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <_sbrk+0x68>)
 800054c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	693a      	ldr	r2, [r7, #16]
 8000558:	429a      	cmp	r2, r3
 800055a:	d207      	bcs.n	800056c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800055c:	f003 fa9e 	bl	8003a9c <__errno>
 8000560:	4603      	mov	r3, r0
 8000562:	220c      	movs	r2, #12
 8000564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	e009      	b.n	8000580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000572:	4b07      	ldr	r3, [pc, #28]	; (8000590 <_sbrk+0x64>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <_sbrk+0x64>)
 800057c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20005000 	.word	0x20005000
 800058c:	00000400 	.word	0x00000400
 8000590:	20000094 	.word	0x20000094
 8000594:	20000290 	.word	0x20000290

08000598 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a4:	f7ff fff8 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005aa:	490c      	ldr	r1, [pc, #48]	; (80005dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005c0:	4c09      	ldr	r4, [pc, #36]	; (80005e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ce:	f003 fa6b 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fdf3 	bl	80001bc <main>
  bx lr
 80005d6:	4770      	bx	lr
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005e0:	08003d38 	.word	0x08003d38
  ldr r2, =_sbss
 80005e4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80005e8:	20000290 	.word	0x20000290

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <HAL_Init+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a07      	ldr	r2, [pc, #28]	; (8000618 <HAL_Init+0x28>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 f8f5 	bl	80007f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff ff14 	bl	8000434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060c:	f7ff fee0 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40022000 	.word	0x40022000

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_IncTick+0x1c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x20>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x20>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	20000008 	.word	0x20000008
 800063c:	2000023c 	.word	0x2000023c

08000640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <HAL_GetTick+0x10>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	2000023c 	.word	0x2000023c

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff fff0 	bl	8000640 <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_Delay+0x44>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffe0 	bl	8000640 <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000008 	.word	0x20000008

0800069c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	60d3      	str	r3, [r2, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <__NVIC_GetPriorityGrouping+0x18>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	0a1b      	lsrs	r3, r3, #8
 80006ee:	f003 0307 	and.w	r3, r3, #7
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	db0b      	blt.n	800072a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 021f 	and.w	r2, r3, #31
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <__NVIC_EnableIRQ+0x34>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	095b      	lsrs	r3, r3, #5
 8000720:	2001      	movs	r0, #1
 8000722:	fa00 f202 	lsl.w	r2, r0, r2
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff4f 	bl	800069c <__NVIC_SetPriorityGrouping>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000806:	b580      	push	{r7, lr}
 8000808:	b086      	sub	sp, #24
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000818:	f7ff ff64 	bl	80006e4 <__NVIC_GetPriorityGrouping>
 800081c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	68b9      	ldr	r1, [r7, #8]
 8000822:	6978      	ldr	r0, [r7, #20]
 8000824:	f7ff ffb2 	bl	800078c <NVIC_EncodePriority>
 8000828:	4602      	mov	r2, r0
 800082a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff81 	bl	8000738 <__NVIC_SetPriority>
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff57 	bl	8000700 <__NVIC_EnableIRQ>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b08b      	sub	sp, #44	; 0x2c
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086e:	e169      	b.n	8000b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000870:	2201      	movs	r2, #1
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	4013      	ands	r3, r2
 8000882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	429a      	cmp	r2, r3
 800088a:	f040 8158 	bne.w	8000b3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4a9a      	ldr	r2, [pc, #616]	; (8000afc <HAL_GPIO_Init+0x2a0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d05e      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 8000898:	4a98      	ldr	r2, [pc, #608]	; (8000afc <HAL_GPIO_Init+0x2a0>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d875      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 800089e:	4a98      	ldr	r2, [pc, #608]	; (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d058      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008a4:	4a96      	ldr	r2, [pc, #600]	; (8000b00 <HAL_GPIO_Init+0x2a4>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d86f      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008aa:	4a96      	ldr	r2, [pc, #600]	; (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d052      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008b0:	4a94      	ldr	r2, [pc, #592]	; (8000b04 <HAL_GPIO_Init+0x2a8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d869      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008b6:	4a94      	ldr	r2, [pc, #592]	; (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d04c      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008bc:	4a92      	ldr	r2, [pc, #584]	; (8000b08 <HAL_GPIO_Init+0x2ac>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d863      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008c2:	4a92      	ldr	r2, [pc, #584]	; (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d046      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
 80008c8:	4a90      	ldr	r2, [pc, #576]	; (8000b0c <HAL_GPIO_Init+0x2b0>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d85d      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d82a      	bhi.n	8000928 <HAL_GPIO_Init+0xcc>
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d859      	bhi.n	800098a <HAL_GPIO_Init+0x12e>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <HAL_GPIO_Init+0x80>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	08000957 	.word	0x08000957
 80008e0:	08000931 	.word	0x08000931
 80008e4:	08000943 	.word	0x08000943
 80008e8:	08000985 	.word	0x08000985
 80008ec:	0800098b 	.word	0x0800098b
 80008f0:	0800098b 	.word	0x0800098b
 80008f4:	0800098b 	.word	0x0800098b
 80008f8:	0800098b 	.word	0x0800098b
 80008fc:	0800098b 	.word	0x0800098b
 8000900:	0800098b 	.word	0x0800098b
 8000904:	0800098b 	.word	0x0800098b
 8000908:	0800098b 	.word	0x0800098b
 800090c:	0800098b 	.word	0x0800098b
 8000910:	0800098b 	.word	0x0800098b
 8000914:	0800098b 	.word	0x0800098b
 8000918:	0800098b 	.word	0x0800098b
 800091c:	0800098b 	.word	0x0800098b
 8000920:	08000939 	.word	0x08000939
 8000924:	0800094d 	.word	0x0800094d
 8000928:	4a79      	ldr	r2, [pc, #484]	; (8000b10 <HAL_GPIO_Init+0x2b4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092e:	e02c      	b.n	800098a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e029      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	3304      	adds	r3, #4
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e024      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	3308      	adds	r3, #8
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e01f      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e01a      	b.n	800098c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095e:	2304      	movs	r3, #4
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e013      	b.n	800098c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	611a      	str	r2, [r3, #16]
          break;
 8000976:	e009      	b.n	800098c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000978:	2308      	movs	r3, #8
 800097a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	615a      	str	r2, [r3, #20]
          break;
 8000982:	e003      	b.n	800098c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
          break;
 8000988:	e000      	b.n	800098c <HAL_GPIO_Init+0x130>
          break;
 800098a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2bff      	cmp	r3, #255	; 0xff
 8000990:	d801      	bhi.n	8000996 <HAL_GPIO_Init+0x13a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	e001      	b.n	800099a <HAL_GPIO_Init+0x13e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3304      	adds	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	2bff      	cmp	r3, #255	; 0xff
 80009a0:	d802      	bhi.n	80009a8 <HAL_GPIO_Init+0x14c>
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	e002      	b.n	80009ae <HAL_GPIO_Init+0x152>
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	3b08      	subs	r3, #8
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	210f      	movs	r1, #15
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	fa01 f303 	lsl.w	r3, r1, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	401a      	ands	r2, r3
 80009c0:	6a39      	ldr	r1, [r7, #32]
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	fa01 f303 	lsl.w	r3, r1, r3
 80009c8:	431a      	orrs	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009dc:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a4c      	ldr	r2, [pc, #304]	; (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b4a      	ldr	r3, [pc, #296]	; (8000b14 <HAL_GPIO_Init+0x2b8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f4:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <HAL_GPIO_Init+0x2bc>)
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a40      	ldr	r2, [pc, #256]	; (8000b1c <HAL_GPIO_Init+0x2c0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d013      	beq.n	8000a48 <HAL_GPIO_Init+0x1ec>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3f      	ldr	r2, [pc, #252]	; (8000b20 <HAL_GPIO_Init+0x2c4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d00d      	beq.n	8000a44 <HAL_GPIO_Init+0x1e8>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3e      	ldr	r2, [pc, #248]	; (8000b24 <HAL_GPIO_Init+0x2c8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d007      	beq.n	8000a40 <HAL_GPIO_Init+0x1e4>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a3d      	ldr	r2, [pc, #244]	; (8000b28 <HAL_GPIO_Init+0x2cc>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_GPIO_Init+0x1e0>
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e006      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	e004      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <HAL_GPIO_Init+0x1ee>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	4093      	lsls	r3, r2
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a5a:	492f      	ldr	r1, [pc, #188]	; (8000b18 <HAL_GPIO_Init+0x2bc>)
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d006      	beq.n	8000a82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a74:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	492c      	ldr	r1, [pc, #176]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	608b      	str	r3, [r1, #8]
 8000a80:	e006      	b.n	8000a90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	4928      	ldr	r1, [pc, #160]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	4922      	ldr	r1, [pc, #136]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60cb      	str	r3, [r1, #12]
 8000aa8:	e006      	b.n	8000ab8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	491e      	ldr	r1, [pc, #120]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4918      	ldr	r1, [pc, #96]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4914      	ldr	r1, [pc, #80]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d021      	beq.n	8000b30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	490e      	ldr	r1, [pc, #56]	; (8000b2c <HAL_GPIO_Init+0x2d0>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	600b      	str	r3, [r1, #0]
 8000af8:	e021      	b.n	8000b3e <HAL_GPIO_Init+0x2e2>
 8000afa:	bf00      	nop
 8000afc:	10320000 	.word	0x10320000
 8000b00:	10310000 	.word	0x10310000
 8000b04:	10220000 	.word	0x10220000
 8000b08:	10210000 	.word	0x10210000
 8000b0c:	10120000 	.word	0x10120000
 8000b10:	10110000 	.word	0x10110000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40011400 	.word	0x40011400
 8000b2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <HAL_GPIO_Init+0x304>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	43db      	mvns	r3, r3
 8000b38:	4909      	ldr	r1, [pc, #36]	; (8000b60 <HAL_GPIO_Init+0x304>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	3301      	adds	r3, #1
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f47f ae8e 	bne.w	8000870 <HAL_GPIO_Init+0x14>
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	372c      	adds	r7, #44	; 0x2c
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	40010400 	.word	0x40010400

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b74:	787b      	ldrb	r3, [r7, #1]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b80:	e003      	b.n	8000b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	041a      	lsls	r2, r3, #16
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba0:	695a      	ldr	r2, [r3, #20]
 8000ba2:	88fb      	ldrh	r3, [r7, #6]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d006      	beq.n	8000bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fbea 	bl	800038c <HAL_GPIO_EXTI_Callback>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40010400 	.word	0x40010400

08000bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e26c      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8087 	beq.w	8000cf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be4:	4b92      	ldr	r3, [pc, #584]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d00c      	beq.n	8000c0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bf0:	4b8f      	ldr	r3, [pc, #572]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d112      	bne.n	8000c22 <HAL_RCC_OscConfig+0x5e>
 8000bfc:	4b8c      	ldr	r3, [pc, #560]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c08:	d10b      	bne.n	8000c22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0a:	4b89      	ldr	r3, [pc, #548]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d06c      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x12c>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d168      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e246      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2a:	d106      	bne.n	8000c3a <HAL_RCC_OscConfig+0x76>
 8000c2c:	4b80      	ldr	r3, [pc, #512]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a7f      	ldr	r2, [pc, #508]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e02e      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10c      	bne.n	8000c5c <HAL_RCC_OscConfig+0x98>
 8000c42:	4b7b      	ldr	r3, [pc, #492]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a7a      	ldr	r2, [pc, #488]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a77      	ldr	r2, [pc, #476]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e01d      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c64:	d10c      	bne.n	8000c80 <HAL_RCC_OscConfig+0xbc>
 8000c66:	4b72      	ldr	r3, [pc, #456]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a71      	ldr	r2, [pc, #452]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4b6f      	ldr	r3, [pc, #444]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a6e      	ldr	r2, [pc, #440]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e00b      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c80:	4b6b      	ldr	r3, [pc, #428]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a6a      	ldr	r2, [pc, #424]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a67      	ldr	r2, [pc, #412]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d013      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fcce 	bl	8000640 <HAL_GetTick>
 8000ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca8:	f7ff fcca 	bl	8000640 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b64      	cmp	r3, #100	; 0x64
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e1fa      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cba:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f0      	beq.n	8000ca8 <HAL_RCC_OscConfig+0xe4>
 8000cc6:	e014      	b.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fcba 	bl	8000640 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fcb6 	bl	8000640 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e1e6      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce2:	4b53      	ldr	r3, [pc, #332]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x10c>
 8000cee:	e000      	b.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d063      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00b      	beq.n	8000d22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d0a:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d11c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x18c>
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d116      	bne.n	8000d50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d005      	beq.n	8000d3a <HAL_RCC_OscConfig+0x176>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d001      	beq.n	8000d3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e1ba      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4939      	ldr	r1, [pc, #228]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	e03a      	b.n	8000dc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d020      	beq.n	8000d9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5e:	f7ff fc6f 	bl	8000640 <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d64:	e008      	b.n	8000d78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d66:	f7ff fc6b 	bl	8000640 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d901      	bls.n	8000d78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e19b      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f0      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4927      	ldr	r1, [pc, #156]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
 8000d98:	e015      	b.n	8000dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fc4e 	bl	8000640 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc4a 	bl	8000640 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e17a      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f0      	bne.n	8000da8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d03a      	beq.n	8000e48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d019      	beq.n	8000e0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_RCC_OscConfig+0x274>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc2e 	bl	8000640 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc2a 	bl	8000640 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e15a      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f0      	beq.n	8000de8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 fae8 	bl	80013dc <RCC_Delay>
 8000e0c:	e01c      	b.n	8000e48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_RCC_OscConfig+0x274>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e14:	f7ff fc14 	bl	8000640 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1a:	e00f      	b.n	8000e3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc10 	bl	8000640 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d908      	bls.n	8000e3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e140      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	42420000 	.word	0x42420000
 8000e38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3c:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e9      	bne.n	8000e1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80a6 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5a:	4b97      	ldr	r3, [pc, #604]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10d      	bne.n	8000e82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b94      	ldr	r3, [pc, #592]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a93      	ldr	r2, [pc, #588]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b91      	ldr	r3, [pc, #580]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e82:	4b8e      	ldr	r3, [pc, #568]	; (80010bc <HAL_RCC_OscConfig+0x4f8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d118      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8e:	4b8b      	ldr	r3, [pc, #556]	; (80010bc <HAL_RCC_OscConfig+0x4f8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a8a      	ldr	r2, [pc, #552]	; (80010bc <HAL_RCC_OscConfig+0x4f8>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fbd1 	bl	8000640 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea2:	f7ff fbcd 	bl	8000640 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b64      	cmp	r3, #100	; 0x64
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e0fd      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb4:	4b81      	ldr	r3, [pc, #516]	; (80010bc <HAL_RCC_OscConfig+0x4f8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f0      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d106      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x312>
 8000ec8:	4b7b      	ldr	r3, [pc, #492]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a7a      	ldr	r2, [pc, #488]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6213      	str	r3, [r2, #32]
 8000ed4:	e02d      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x334>
 8000ede:	4b76      	ldr	r3, [pc, #472]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a75      	ldr	r2, [pc, #468]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	4b73      	ldr	r3, [pc, #460]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a72      	ldr	r2, [pc, #456]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	e01c      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	d10c      	bne.n	8000f1a <HAL_RCC_OscConfig+0x356>
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a6c      	ldr	r2, [pc, #432]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	4b6a      	ldr	r3, [pc, #424]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a69      	ldr	r2, [pc, #420]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	e00b      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000f1a:	4b67      	ldr	r3, [pc, #412]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a66      	ldr	r2, [pc, #408]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	6213      	str	r3, [r2, #32]
 8000f26:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4a63      	ldr	r2, [pc, #396]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f2c:	f023 0304 	bic.w	r3, r3, #4
 8000f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d015      	beq.n	8000f66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fb81 	bl	8000640 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f7ff fb7d 	bl	8000640 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e0ab      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0ee      	beq.n	8000f42 <HAL_RCC_OscConfig+0x37e>
 8000f64:	e014      	b.n	8000f90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f66:	f7ff fb6b 	bl	8000640 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6c:	e00a      	b.n	8000f84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fb67 	bl	8000640 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e095      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1ee      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d105      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f96:	4b48      	ldr	r3, [pc, #288]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a47      	ldr	r2, [pc, #284]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8081 	beq.w	80010ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d061      	beq.n	800107c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d146      	bne.n	800104e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc0:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <HAL_RCC_OscConfig+0x4fc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb3b 	bl	8000640 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff fb37 	bl	8000640 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e067      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d108      	bne.n	8001008 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	492d      	ldr	r1, [pc, #180]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a19      	ldr	r1, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	430b      	orrs	r3, r1
 800101a:	4927      	ldr	r1, [pc, #156]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <HAL_RCC_OscConfig+0x4fc>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fb0b 	bl	8000640 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fb07 	bl	8000640 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e037      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x46a>
 800104c:	e02f      	b.n	80010ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <HAL_RCC_OscConfig+0x4fc>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff faf4 	bl	8000640 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105c:	f7ff faf0 	bl	8000640 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e020      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x498>
 800107a:	e018      	b.n	80010ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e013      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_RCC_OscConfig+0x4f4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	429a      	cmp	r2, r3
 800109a:	d106      	bne.n	80010aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d001      	beq.n	80010ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40007000 	.word	0x40007000
 80010c0:	42420060 	.word	0x42420060

080010c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0d0      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d8:	4b6a      	ldr	r3, [pc, #424]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d910      	bls.n	8001108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e6:	4b67      	ldr	r3, [pc, #412]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 0207 	bic.w	r2, r3, #7
 80010ee:	4965      	ldr	r1, [pc, #404]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f6:	4b63      	ldr	r3, [pc, #396]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0b8      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d020      	beq.n	8001156 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001120:	4b59      	ldr	r3, [pc, #356]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a58      	ldr	r2, [pc, #352]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800112a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001142:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001144:	4b50      	ldr	r3, [pc, #320]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	494d      	ldr	r1, [pc, #308]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	4313      	orrs	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d040      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b47      	ldr	r3, [pc, #284]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d115      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e07f      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d107      	bne.n	8001192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e073      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e06b      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a2:	4b39      	ldr	r3, [pc, #228]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f023 0203 	bic.w	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4936      	ldr	r1, [pc, #216]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b4:	f7ff fa44 	bl	8000640 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	f7ff fa40 	bl	8000640 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e053      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	4b2d      	ldr	r3, [pc, #180]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 020c 	and.w	r2, r3, #12
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d1eb      	bne.n	80011bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d210      	bcs.n	8001214 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 0207 	bic.w	r2, r3, #7
 80011fa:	4922      	ldr	r1, [pc, #136]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d001      	beq.n	8001214 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e032      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4916      	ldr	r1, [pc, #88]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	490e      	ldr	r1, [pc, #56]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001252:	f000 f821 	bl	8001298 <HAL_RCC_GetSysClockFreq>
 8001256:	4602      	mov	r2, r0
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	490a      	ldr	r1, [pc, #40]	; (800128c <HAL_RCC_ClockConfig+0x1c8>)
 8001264:	5ccb      	ldrb	r3, [r1, r3]
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <HAL_RCC_ClockConfig+0x1cc>)
 800126c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_RCC_ClockConfig+0x1d0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f8de 	bl	8000434 <HAL_InitTick>

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000
 8001288:	40021000 	.word	0x40021000
 800128c:	08003d04 	.word	0x08003d04
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <HAL_RCC_GetSysClockFreq+0x94>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d002      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0x30>
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d003      	beq.n	80012ce <HAL_RCC_GetSysClockFreq+0x36>
 80012c6:	e027      	b.n	8001318 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ca:	613b      	str	r3, [r7, #16]
      break;
 80012cc:	e027      	b.n	800131e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	0c9b      	lsrs	r3, r3, #18
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d010      	beq.n	8001308 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_RCC_GetSysClockFreq+0x94>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	0c5b      	lsrs	r3, r3, #17
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <HAL_RCC_GetSysClockFreq+0x98>)
 80012fa:	fb02 f203 	mul.w	r2, r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	fbb2 f3f3 	udiv	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e004      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HAL_RCC_GetSysClockFreq+0xa4>)
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	613b      	str	r3, [r7, #16]
      break;
 8001316:	e002      	b.n	800131e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_RCC_GetSysClockFreq+0x98>)
 800131a:	613b      	str	r3, [r7, #16]
      break;
 800131c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800131e:	693b      	ldr	r3, [r7, #16]
}
 8001320:	4618      	mov	r0, r3
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	007a1200 	.word	0x007a1200
 8001334:	08003d1c 	.word	0x08003d1c
 8001338:	08003d2c 	.word	0x08003d2c
 800133c:	003d0900 	.word	0x003d0900

08001340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <HAL_RCC_GetHCLKFreq+0x10>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000000 	.word	0x20000000

08001354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001358:	f7ff fff2 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 800135c:	4602      	mov	r2, r0
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0adb      	lsrs	r3, r3, #11
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	4903      	ldr	r1, [pc, #12]	; (8001378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	08003d14 	.word	0x08003d14

0800137c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	220f      	movs	r2, #15
 800138a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_RCC_GetClockConfig+0x58>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_RCC_GetClockConfig+0x58>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_RCC_GetClockConfig+0x58>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_RCC_GetClockConfig+0x58>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_RCC_GetClockConfig+0x5c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0207 	and.w	r2, r3, #7
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40022000 	.word	0x40022000

080013dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <RCC_Delay+0x34>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <RCC_Delay+0x38>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	0a5b      	lsrs	r3, r3, #9
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013f8:	bf00      	nop
  }
  while (Delay --);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	1e5a      	subs	r2, r3, #1
 80013fe:	60fa      	str	r2, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f9      	bne.n	80013f8 <RCC_Delay+0x1c>
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000000 	.word	0x20000000
 8001414:	10624dd3 	.word	0x10624dd3

08001418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e041      	b.n	80014ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f839 	bl	80014b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2202      	movs	r2, #2
 8001448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3304      	adds	r3, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f000 f9b4 	bl	80017c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d001      	beq.n	80014e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e03a      	b.n	8001556 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2202      	movs	r2, #2
 80014e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a18      	ldr	r2, [pc, #96]	; (8001560 <HAL_TIM_Base_Start_IT+0x98>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00e      	beq.n	8001520 <HAL_TIM_Base_Start_IT+0x58>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800150a:	d009      	beq.n	8001520 <HAL_TIM_Base_Start_IT+0x58>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <HAL_TIM_Base_Start_IT+0x9c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_TIM_Base_Start_IT+0x58>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <HAL_TIM_Base_Start_IT+0xa0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d111      	bne.n	8001544 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b06      	cmp	r3, #6
 8001530:	d010      	beq.n	8001554 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0201 	orr.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001542:	e007      	b.n	8001554 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40012c00 	.word	0x40012c00
 8001564:	40000400 	.word	0x40000400
 8001568:	40000800 	.word	0x40000800

0800156c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b02      	cmp	r3, #2
 8001580:	d122      	bne.n	80015c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b02      	cmp	r3, #2
 800158e:	d11b      	bne.n	80015c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f06f 0202 	mvn.w	r2, #2
 8001598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f8ed 	bl	800178e <HAL_TIM_IC_CaptureCallback>
 80015b4:	e005      	b.n	80015c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f8e0 	bl	800177c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8ef 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d122      	bne.n	800161c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d11b      	bne.n	800161c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f06f 0204 	mvn.w	r2, #4
 80015ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2202      	movs	r2, #2
 80015f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f8c3 	bl	800178e <HAL_TIM_IC_CaptureCallback>
 8001608:	e005      	b.n	8001616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f8b6 	bl	800177c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 f8c5 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b08      	cmp	r3, #8
 8001628:	d122      	bne.n	8001670 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b08      	cmp	r3, #8
 8001636:	d11b      	bne.n	8001670 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f06f 0208 	mvn.w	r2, #8
 8001640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2204      	movs	r2, #4
 8001646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f899 	bl	800178e <HAL_TIM_IC_CaptureCallback>
 800165c:	e005      	b.n	800166a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f88c 	bl	800177c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f89b 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b10      	cmp	r3, #16
 800167c:	d122      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b10      	cmp	r3, #16
 800168a:	d11b      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0210 	mvn.w	r2, #16
 8001694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2208      	movs	r2, #8
 800169a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f86f 	bl	800178e <HAL_TIM_IC_CaptureCallback>
 80016b0:	e005      	b.n	80016be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f862 	bl	800177c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f871 	bl	80017a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10e      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d107      	bne.n	80016f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f06f 0201 	mvn.w	r2, #1
 80016e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7fe fe58 	bl	80003a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	2b80      	cmp	r3, #128	; 0x80
 80016fc:	d10e      	bne.n	800171c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001708:	2b80      	cmp	r3, #128	; 0x80
 800170a:	d107      	bne.n	800171c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f8bf 	bl	800189a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001726:	2b40      	cmp	r3, #64	; 0x40
 8001728:	d10e      	bne.n	8001748 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001734:	2b40      	cmp	r3, #64	; 0x40
 8001736:	d107      	bne.n	8001748 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f835 	bl	80017b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b20      	cmp	r3, #32
 8001754:	d10e      	bne.n	8001774 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	2b20      	cmp	r3, #32
 8001762:	d107      	bne.n	8001774 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f06f 0220 	mvn.w	r2, #32
 800176c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f88a 	bl	8001888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a29      	ldr	r2, [pc, #164]	; (800187c <TIM_Base_SetConfig+0xb8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d00b      	beq.n	80017f4 <TIM_Base_SetConfig+0x30>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e2:	d007      	beq.n	80017f4 <TIM_Base_SetConfig+0x30>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a26      	ldr	r2, [pc, #152]	; (8001880 <TIM_Base_SetConfig+0xbc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d003      	beq.n	80017f4 <TIM_Base_SetConfig+0x30>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a25      	ldr	r2, [pc, #148]	; (8001884 <TIM_Base_SetConfig+0xc0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d108      	bne.n	8001806 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1c      	ldr	r2, [pc, #112]	; (800187c <TIM_Base_SetConfig+0xb8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00b      	beq.n	8001826 <TIM_Base_SetConfig+0x62>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d007      	beq.n	8001826 <TIM_Base_SetConfig+0x62>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a19      	ldr	r2, [pc, #100]	; (8001880 <TIM_Base_SetConfig+0xbc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d003      	beq.n	8001826 <TIM_Base_SetConfig+0x62>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a18      	ldr	r2, [pc, #96]	; (8001884 <TIM_Base_SetConfig+0xc0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d108      	bne.n	8001838 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800182c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <TIM_Base_SetConfig+0xb8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d103      	bne.n	800186c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	615a      	str	r2, [r3, #20]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	40012c00 	.word	0x40012c00
 8001880:	40000400 	.word	0x40000400
 8001884:	40000800 	.word	0x40000800

08001888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <xTaskCreate>:
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fab4 	bl	8002e2c <pvPortMalloc>
 80018c4:	6178      	str	r0, [r7, #20]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <xTaskCreate+0x48>
 80018cc:	207c      	movs	r0, #124	; 0x7c
 80018ce:	f001 faad 	bl	8002e2c <pvPortMalloc>
 80018d2:	61f8      	str	r0, [r7, #28]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <xTaskCreate+0x40>
 80018da:	227c      	movs	r2, #124	; 0x7c
 80018dc:	2100      	movs	r1, #0
 80018de:	69f8      	ldr	r0, [r7, #28]
 80018e0:	f002 f924 	bl	8003b2c <memset>
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ea:	e005      	b.n	80018f8 <xTaskCreate+0x4c>
 80018ec:	6978      	ldr	r0, [r7, #20]
 80018ee:	f001 faaf 	bl	8002e50 <vPortFree>
 80018f2:	e001      	b.n	80018f8 <xTaskCreate+0x4c>
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d013      	beq.n	8001926 <xTaskCreate+0x7a>
 80018fe:	2300      	movs	r3, #0
 8001900:	9303      	str	r3, [sp, #12]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	9302      	str	r3, [sp, #8]
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f80e 	bl	8001936 <prvInitialiseNewTask>
 800191a:	69f8      	ldr	r0, [r7, #28]
 800191c:	f000 f89a 	bl	8001a54 <prvAddNewTaskToReadyList>
 8001920:	2301      	movs	r3, #1
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	e002      	b.n	800192c <xTaskCreate+0x80>
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	4618      	mov	r0, r3
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <prvInitialiseNewTask>:
 8001936:	b580      	push	{r7, lr}
 8001938:	b088      	sub	sp, #32
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001946:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	461a      	mov	r2, r3
 800194e:	21a5      	movs	r1, #165	; 0xa5
 8001950:	f002 f8ec 	bl	8003b2c <memset>
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800195e:	3b01      	subs	r3, #1
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	f023 0307 	bic.w	r3, r3, #7
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <prvInitialiseNewTask+0x58>
 8001978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197c:	f383 8811 	msr	BASEPRI, r3
 8001980:	f3bf 8f6f 	isb	sy
 8001984:	f3bf 8f4f 	dsb	sy
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	bf00      	nop
 800198c:	e7fe      	b.n	800198c <prvInitialiseNewTask+0x56>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01e      	beq.n	80019d2 <prvInitialiseNewTask+0x9c>
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	e012      	b.n	80019c0 <prvInitialiseNewTask+0x8a>
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	4413      	add	r3, r2
 80019a0:	7819      	ldrb	r1, [r3, #0]
 80019a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	3334      	adds	r3, #52	; 0x34
 80019aa:	460a      	mov	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d006      	beq.n	80019c8 <prvInitialiseNewTask+0x92>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3301      	adds	r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b13      	cmp	r3, #19
 80019c4:	d9e9      	bls.n	800199a <prvInitialiseNewTask+0x64>
 80019c6:	e000      	b.n	80019ca <prvInitialiseNewTask+0x94>
 80019c8:	bf00      	nop
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80019d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d90a      	bls.n	80019ee <prvInitialiseNewTask+0xb8>
 80019d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019dc:	f383 8811 	msr	BASEPRI, r3
 80019e0:	f3bf 8f6f 	isb	sy
 80019e4:	f3bf 8f4f 	dsb	sy
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	bf00      	nop
 80019ec:	e7fe      	b.n	80019ec <prvInitialiseNewTask+0xb6>
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d901      	bls.n	80019f8 <prvInitialiseNewTask+0xc2>
 80019f4:	2304      	movs	r3, #4
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a02:	651a      	str	r2, [r3, #80]	; 0x50
 8001a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a06:	3304      	adds	r3, #4
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 fa52 	bl	8002eb2 <vListInitialiseItem>
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	3318      	adds	r3, #24
 8001a12:	4618      	mov	r0, r3
 8001a14:	f001 fa4d 	bl	8002eb2 <vListInitialiseItem>
 8001a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	f1c3 0205 	rsb	r2, r3, #5
 8001a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a26:	619a      	str	r2, [r3, #24]
 8001a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	69b8      	ldr	r0, [r7, #24]
 8001a34:	f001 faaa 	bl	8002f8c <pxPortInitialiseStack>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <prvInitialiseNewTask+0x114>
 8001a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	bf00      	nop
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <prvAddNewTaskToReadyList>:
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	f001 fb88 	bl	8003170 <vPortEnterCritical>
 8001a60:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <prvAddNewTaskToReadyList+0x114>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <prvAddNewTaskToReadyList+0x114>)
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <prvAddNewTaskToReadyList+0x118>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <prvAddNewTaskToReadyList+0x32>
 8001a72:	4a3e      	ldr	r2, [pc, #248]	; (8001b6c <prvAddNewTaskToReadyList+0x118>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <prvAddNewTaskToReadyList+0x114>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d110      	bne.n	8001aa2 <prvAddNewTaskToReadyList+0x4e>
 8001a80:	f000 fe2e 	bl	80026e0 <prvInitialiseTaskLists>
 8001a84:	e00d      	b.n	8001aa2 <prvAddNewTaskToReadyList+0x4e>
 8001a86:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <prvAddNewTaskToReadyList+0x11c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <prvAddNewTaskToReadyList+0x4e>
 8001a8e:	4b37      	ldr	r3, [pc, #220]	; (8001b6c <prvAddNewTaskToReadyList+0x118>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d802      	bhi.n	8001aa2 <prvAddNewTaskToReadyList+0x4e>
 8001a9c:	4a33      	ldr	r2, [pc, #204]	; (8001b6c <prvAddNewTaskToReadyList+0x118>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <prvAddNewTaskToReadyList+0x120>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <prvAddNewTaskToReadyList+0x120>)
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <prvAddNewTaskToReadyList+0x120>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	649a      	str	r2, [r3, #72]	; 0x48
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <prvAddNewTaskToReadyList+0x124>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d903      	bls.n	8001ac8 <prvAddNewTaskToReadyList+0x74>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	4a2c      	ldr	r2, [pc, #176]	; (8001b78 <prvAddNewTaskToReadyList+0x124>)
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	492b      	ldr	r1, [pc, #172]	; (8001b7c <prvAddNewTaskToReadyList+0x128>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3304      	adds	r3, #4
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	3204      	adds	r2, #4
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	1d1a      	adds	r2, r3, #4
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <prvAddNewTaskToReadyList+0x128>)
 8001b0c:	441a      	add	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	615a      	str	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b16:	4919      	ldr	r1, [pc, #100]	; (8001b7c <prvAddNewTaskToReadyList+0x128>)
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1c59      	adds	r1, r3, #1
 8001b26:	4815      	ldr	r0, [pc, #84]	; (8001b7c <prvAddNewTaskToReadyList+0x128>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4403      	add	r3, r0
 8001b32:	6019      	str	r1, [r3, #0]
 8001b34:	f001 fb4c 	bl	80031d0 <vPortExitCritical>
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <prvAddNewTaskToReadyList+0x11c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <prvAddNewTaskToReadyList+0x10a>
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <prvAddNewTaskToReadyList+0x118>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d207      	bcs.n	8001b5e <prvAddNewTaskToReadyList+0x10a>
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <prvAddNewTaskToReadyList+0x12c>)
 8001b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000170 	.word	0x20000170
 8001b6c:	20000098 	.word	0x20000098
 8001b70:	2000017c 	.word	0x2000017c
 8001b74:	2000018c 	.word	0x2000018c
 8001b78:	20000178 	.word	0x20000178
 8001b7c:	2000009c 	.word	0x2000009c
 8001b80:	e000ed04 	.word	0xe000ed04

08001b84 <vTaskStartScheduler>:
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <vTaskStartScheduler+0x88>)
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	2280      	movs	r2, #128	; 0x80
 8001b96:	491e      	ldr	r1, [pc, #120]	; (8001c10 <vTaskStartScheduler+0x8c>)
 8001b98:	481e      	ldr	r0, [pc, #120]	; (8001c14 <vTaskStartScheduler+0x90>)
 8001b9a:	f7ff fe87 	bl	80018ac <xTaskCreate>
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <vTaskStartScheduler+0x28>
 8001ba6:	f000 febf 	bl	8002928 <xTimerCreateTimerTask>
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d116      	bne.n	8001be0 <vTaskStartScheduler+0x5c>
 8001bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb6:	f383 8811 	msr	BASEPRI, r3
 8001bba:	f3bf 8f6f 	isb	sy
 8001bbe:	f3bf 8f4f 	dsb	sy
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	bf00      	nop
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <vTaskStartScheduler+0x94>)
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <vTaskStartScheduler+0x98>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <vTaskStartScheduler+0x9c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	f001 fa57 	bl	800308c <xPortStartScheduler>
 8001bde:	e00e      	b.n	8001bfe <vTaskStartScheduler+0x7a>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be6:	d10a      	bne.n	8001bfe <vTaskStartScheduler+0x7a>
 8001be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bec:	f383 8811 	msr	BASEPRI, r3
 8001bf0:	f3bf 8f6f 	isb	sy
 8001bf4:	f3bf 8f4f 	dsb	sy
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	bf00      	nop
 8001bfc:	e7fe      	b.n	8001bfc <vTaskStartScheduler+0x78>
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <vTaskStartScheduler+0xa0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000194 	.word	0x20000194
 8001c10:	08003cec 	.word	0x08003cec
 8001c14:	080025f5 	.word	0x080025f5
 8001c18:	20000190 	.word	0x20000190
 8001c1c:	2000017c 	.word	0x2000017c
 8001c20:	20000174 	.word	0x20000174
 8001c24:	2000000c 	.word	0x2000000c

08001c28 <vTaskSuspendAll>:
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <vTaskSuspendAll+0x18>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	4a03      	ldr	r2, [pc, #12]	; (8001c40 <vTaskSuspendAll+0x18>)
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000198 	.word	0x20000198

08001c44 <prvGetExpectedIdleTime>:
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <prvGetExpectedIdleTime+0x58>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <prvGetExpectedIdleTime+0x16>
 8001c56:	2301      	movs	r3, #1
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <prvGetExpectedIdleTime+0x5c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <prvGetExpectedIdleTime+0x26>
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	e012      	b.n	8001c90 <prvGetExpectedIdleTime+0x4c>
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <prvGetExpectedIdleTime+0x60>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d902      	bls.n	8001c78 <prvGetExpectedIdleTime+0x34>
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	e00b      	b.n	8001c90 <prvGetExpectedIdleTime+0x4c>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <prvGetExpectedIdleTime+0x40>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	e005      	b.n	8001c90 <prvGetExpectedIdleTime+0x4c>
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <prvGetExpectedIdleTime+0x64>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <prvGetExpectedIdleTime+0x68>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000178 	.word	0x20000178
 8001ca0:	20000098 	.word	0x20000098
 8001ca4:	2000009c 	.word	0x2000009c
 8001ca8:	20000190 	.word	0x20000190
 8001cac:	20000174 	.word	0x20000174

08001cb0 <xTaskResumeAll>:
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	4b71      	ldr	r3, [pc, #452]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <xTaskResumeAll+0x2c>
 8001cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cca:	f383 8811 	msr	BASEPRI, r3
 8001cce:	f3bf 8f6f 	isb	sy
 8001cd2:	f3bf 8f4f 	dsb	sy
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	bf00      	nop
 8001cda:	e7fe      	b.n	8001cda <xTaskResumeAll+0x2a>
 8001cdc:	f001 fa48 	bl	8003170 <vPortEnterCritical>
 8001ce0:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	4a67      	ldr	r2, [pc, #412]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 80c1 	bne.w	8001e76 <xTaskResumeAll+0x1c6>
 8001cf4:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <xTaskResumeAll+0x1d8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80bc 	beq.w	8001e76 <xTaskResumeAll+0x1c6>
 8001cfe:	e08b      	b.n	8001e18 <xTaskResumeAll+0x168>
 8001d00:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <xTaskResumeAll+0x1dc>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	6a12      	ldr	r2, [r2, #32]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	69d2      	ldr	r2, [r2, #28]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3318      	adds	r3, #24
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d103      	bne.n	8001d36 <xTaskResumeAll+0x86>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	68d2      	ldr	r2, [r2, #12]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	6892      	ldr	r2, [r2, #8]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3304      	adds	r3, #4
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d103      	bne.n	8001d74 <xTaskResumeAll+0xc4>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <xTaskResumeAll+0x1e0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d903      	bls.n	8001d98 <xTaskResumeAll+0xe8>
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	4a3e      	ldr	r2, [pc, #248]	; (8001e90 <xTaskResumeAll+0x1e0>)
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9c:	493d      	ldr	r1, [pc, #244]	; (8001e94 <xTaskResumeAll+0x1e4>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	3304      	adds	r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	3204      	adds	r2, #4
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	1d1a      	adds	r2, r3, #4
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4a2e      	ldr	r2, [pc, #184]	; (8001e94 <xTaskResumeAll+0x1e4>)
 8001ddc:	441a      	add	r2, r3
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	615a      	str	r2, [r3, #20]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de6:	492b      	ldr	r1, [pc, #172]	; (8001e94 <xTaskResumeAll+0x1e4>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c59      	adds	r1, r3, #1
 8001df6:	4827      	ldr	r0, [pc, #156]	; (8001e94 <xTaskResumeAll+0x1e4>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4403      	add	r3, r0
 8001e02:	6019      	str	r1, [r3, #0]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <xTaskResumeAll+0x1e8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d302      	bcc.n	8001e18 <xTaskResumeAll+0x168>
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <xTaskResumeAll+0x1ec>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <xTaskResumeAll+0x1dc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f47f af6f 	bne.w	8001d00 <xTaskResumeAll+0x50>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <xTaskResumeAll+0x17c>
 8001e28:	f000 fcd8 	bl	80027dc <prvResetNextTaskUnblockTime>
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <xTaskResumeAll+0x1f0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d010      	beq.n	8001e5a <xTaskResumeAll+0x1aa>
 8001e38:	f000 f89e 	bl	8001f78 <xTaskIncrementTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <xTaskResumeAll+0x198>
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <xTaskResumeAll+0x1ec>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f1      	bne.n	8001e38 <xTaskResumeAll+0x188>
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <xTaskResumeAll+0x1f0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <xTaskResumeAll+0x1ec>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <xTaskResumeAll+0x1c6>
 8001e62:	2301      	movs	r3, #1
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <xTaskResumeAll+0x1f4>)
 8001e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f001 f9ab 	bl	80031d0 <vPortExitCritical>
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000198 	.word	0x20000198
 8001e88:	20000170 	.word	0x20000170
 8001e8c:	20000130 	.word	0x20000130
 8001e90:	20000178 	.word	0x20000178
 8001e94:	2000009c 	.word	0x2000009c
 8001e98:	20000098 	.word	0x20000098
 8001e9c:	20000184 	.word	0x20000184
 8001ea0:	20000180 	.word	0x20000180
 8001ea4:	e000ed04 	.word	0xe000ed04

08001ea8 <xTaskGetTickCount>:
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <xTaskGetTickCount+0x18>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	20000174 	.word	0x20000174

08001ec4 <vTaskStepTick>:
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <vTaskStepTick+0xa4>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	441a      	add	r2, r3
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <vTaskStepTick+0xa8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d90a      	bls.n	8001ef2 <vTaskStepTick+0x2e>
 8001edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee0:	f383 8811 	msr	BASEPRI, r3
 8001ee4:	f3bf 8f6f 	isb	sy
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	bf00      	nop
 8001ef0:	e7fe      	b.n	8001ef0 <vTaskStepTick+0x2c>
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <vTaskStepTick+0xa4>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	441a      	add	r2, r3
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <vTaskStepTick+0xa8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d128      	bne.n	8001f54 <vTaskStepTick+0x90>
 8001f02:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <vTaskStepTick+0xac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <vTaskStepTick+0x5c>
 8001f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	bf00      	nop
 8001f1e:	e7fe      	b.n	8001f1e <vTaskStepTick+0x5a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10a      	bne.n	8001f3c <vTaskStepTick+0x78>
 8001f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2a:	f383 8811 	msr	BASEPRI, r3
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	f3bf 8f4f 	dsb	sy
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	bf00      	nop
 8001f3a:	e7fe      	b.n	8001f3a <vTaskStepTick+0x76>
 8001f3c:	f001 f918 	bl	8003170 <vPortEnterCritical>
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <vTaskStepTick+0xb0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	4a0b      	ldr	r2, [pc, #44]	; (8001f74 <vTaskStepTick+0xb0>)
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	f001 f941 	bl	80031d0 <vPortExitCritical>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <vTaskStepTick+0xa4>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a02      	ldr	r2, [pc, #8]	; (8001f68 <vTaskStepTick+0xa4>)
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	bf00      	nop
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000174 	.word	0x20000174
 8001f6c:	20000190 	.word	0x20000190
 8001f70:	20000198 	.word	0x20000198
 8001f74:	20000180 	.word	0x20000180

08001f78 <xTaskIncrementTick>:
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
 8001f82:	4b7e      	ldr	r3, [pc, #504]	; (800217c <xTaskIncrementTick+0x204>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 80ed 	bne.w	8002166 <xTaskIncrementTick+0x1ee>
 8001f8c:	4b7c      	ldr	r3, [pc, #496]	; (8002180 <xTaskIncrementTick+0x208>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	4a7a      	ldr	r2, [pc, #488]	; (8002180 <xTaskIncrementTick+0x208>)
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d120      	bne.n	8001fe2 <xTaskIncrementTick+0x6a>
 8001fa0:	4b78      	ldr	r3, [pc, #480]	; (8002184 <xTaskIncrementTick+0x20c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <xTaskIncrementTick+0x48>
 8001faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fae:	f383 8811 	msr	BASEPRI, r3
 8001fb2:	f3bf 8f6f 	isb	sy
 8001fb6:	f3bf 8f4f 	dsb	sy
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	bf00      	nop
 8001fbe:	e7fe      	b.n	8001fbe <xTaskIncrementTick+0x46>
 8001fc0:	4b70      	ldr	r3, [pc, #448]	; (8002184 <xTaskIncrementTick+0x20c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <xTaskIncrementTick+0x210>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6e      	ldr	r2, [pc, #440]	; (8002184 <xTaskIncrementTick+0x20c>)
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4a6e      	ldr	r2, [pc, #440]	; (8002188 <xTaskIncrementTick+0x210>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b6d      	ldr	r3, [pc, #436]	; (800218c <xTaskIncrementTick+0x214>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a6c      	ldr	r2, [pc, #432]	; (800218c <xTaskIncrementTick+0x214>)
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	f000 fbfd 	bl	80027dc <prvResetNextTaskUnblockTime>
 8001fe2:	4b6b      	ldr	r3, [pc, #428]	; (8002190 <xTaskIncrementTick+0x218>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6a3a      	ldr	r2, [r7, #32]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f0c0 80a7 	bcc.w	800213c <xTaskIncrementTick+0x1c4>
 8001fee:	4b65      	ldr	r3, [pc, #404]	; (8002184 <xTaskIncrementTick+0x20c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d104      	bne.n	8002002 <xTaskIncrementTick+0x8a>
 8001ff8:	4b65      	ldr	r3, [pc, #404]	; (8002190 <xTaskIncrementTick+0x218>)
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e09c      	b.n	800213c <xTaskIncrementTick+0x1c4>
 8002002:	4b60      	ldr	r3, [pc, #384]	; (8002184 <xTaskIncrementTick+0x20c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	6a3a      	ldr	r2, [r7, #32]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	429a      	cmp	r2, r3
 8002018:	d203      	bcs.n	8002022 <xTaskIncrementTick+0xaa>
 800201a:	4a5d      	ldr	r2, [pc, #372]	; (8002190 <xTaskIncrementTick+0x218>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e08c      	b.n	800213c <xTaskIncrementTick+0x1c4>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	68d2      	ldr	r2, [r2, #12]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	6892      	ldr	r2, [r2, #8]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	3304      	adds	r3, #4
 8002044:	429a      	cmp	r2, r3
 8002046:	d103      	bne.n	8002050 <xTaskIncrementTick+0xd8>
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2200      	movs	r2, #0
 8002054:	615a      	str	r2, [r3, #20]
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01e      	beq.n	80020a6 <xTaskIncrementTick+0x12e>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	6a12      	ldr	r2, [r2, #32]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	69d2      	ldr	r2, [r2, #28]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	3318      	adds	r3, #24
 800208a:	429a      	cmp	r2, r3
 800208c:	d103      	bne.n	8002096 <xTaskIncrementTick+0x11e>
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	6a1a      	ldr	r2, [r3, #32]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	2200      	movs	r2, #0
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	1e5a      	subs	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020aa:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <xTaskIncrementTick+0x21c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d903      	bls.n	80020ba <xTaskIncrementTick+0x142>
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	4a37      	ldr	r2, [pc, #220]	; (8002194 <xTaskIncrementTick+0x21c>)
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020be:	4936      	ldr	r1, [pc, #216]	; (8002198 <xTaskIncrementTick+0x220>)
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3304      	adds	r3, #4
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	3204      	adds	r2, #4
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	1d1a      	adds	r2, r3, #4
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <xTaskIncrementTick+0x220>)
 80020fe:	441a      	add	r2, r3
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	615a      	str	r2, [r3, #20]
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002108:	4923      	ldr	r1, [pc, #140]	; (8002198 <xTaskIncrementTick+0x220>)
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1c59      	adds	r1, r3, #1
 8002118:	481f      	ldr	r0, [pc, #124]	; (8002198 <xTaskIncrementTick+0x220>)
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4403      	add	r3, r0
 8002124:	6019      	str	r1, [r3, #0]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <xTaskIncrementTick+0x224>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	429a      	cmp	r2, r3
 8002132:	f67f af5c 	bls.w	8001fee <xTaskIncrementTick+0x76>
 8002136:	2301      	movs	r3, #1
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	e758      	b.n	8001fee <xTaskIncrementTick+0x76>
 800213c:	4b17      	ldr	r3, [pc, #92]	; (800219c <xTaskIncrementTick+0x224>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002142:	4915      	ldr	r1, [pc, #84]	; (8002198 <xTaskIncrementTick+0x220>)
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d901      	bls.n	8002158 <xTaskIncrementTick+0x1e0>
 8002154:	2301      	movs	r3, #1
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <xTaskIncrementTick+0x228>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <xTaskIncrementTick+0x1f8>
 8002160:	2301      	movs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	e004      	b.n	8002170 <xTaskIncrementTick+0x1f8>
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <xTaskIncrementTick+0x22c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <xTaskIncrementTick+0x22c>)
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	4618      	mov	r0, r3
 8002174:	3728      	adds	r7, #40	; 0x28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000198 	.word	0x20000198
 8002180:	20000174 	.word	0x20000174
 8002184:	20000128 	.word	0x20000128
 8002188:	2000012c 	.word	0x2000012c
 800218c:	20000188 	.word	0x20000188
 8002190:	20000190 	.word	0x20000190
 8002194:	20000178 	.word	0x20000178
 8002198:	2000009c 	.word	0x2000009c
 800219c:	20000098 	.word	0x20000098
 80021a0:	20000184 	.word	0x20000184
 80021a4:	20000180 	.word	0x20000180

080021a8 <vTaskSwitchContext>:
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4b27      	ldr	r3, [pc, #156]	; (800224c <vTaskSwitchContext+0xa4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <vTaskSwitchContext+0x16>
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <vTaskSwitchContext+0xa8>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e041      	b.n	8002242 <vTaskSwitchContext+0x9a>
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <vTaskSwitchContext+0xa8>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <vTaskSwitchContext+0xac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	e010      	b.n	80021ee <vTaskSwitchContext+0x46>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <vTaskSwitchContext+0x40>
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	bf00      	nop
 80021e6:	e7fe      	b.n	80021e6 <vTaskSwitchContext+0x3e>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	491a      	ldr	r1, [pc, #104]	; (8002258 <vTaskSwitchContext+0xb0>)
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0e4      	beq.n	80021cc <vTaskSwitchContext+0x24>
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <vTaskSwitchContext+0xb0>)
 800220e:	4413      	add	r3, r2
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3308      	adds	r3, #8
 8002224:	429a      	cmp	r2, r3
 8002226:	d104      	bne.n	8002232 <vTaskSwitchContext+0x8a>
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a08      	ldr	r2, [pc, #32]	; (800225c <vTaskSwitchContext+0xb4>)
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4a05      	ldr	r2, [pc, #20]	; (8002254 <vTaskSwitchContext+0xac>)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20000198 	.word	0x20000198
 8002250:	20000184 	.word	0x20000184
 8002254:	20000178 	.word	0x20000178
 8002258:	2000009c 	.word	0x2000009c
 800225c:	20000098 	.word	0x20000098

08002260 <vTaskPlaceOnEventList>:
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <vTaskPlaceOnEventList+0x26>
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	bf00      	nop
 8002284:	e7fe      	b.n	8002284 <vTaskPlaceOnEventList+0x24>
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <vTaskPlaceOnEventList+0x44>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3318      	adds	r3, #24
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fe1b 	bl	8002eca <vListInsert>
 8002294:	2101      	movs	r1, #1
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	f000 fad8 	bl	800284c <prvAddCurrentTaskToDelayedList>
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000098 	.word	0x20000098

080022a8 <vTaskPlaceOnEventListRestricted>:
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <vTaskPlaceOnEventListRestricted+0x28>
 80022ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022be:	f383 8811 	msr	BASEPRI, r3
 80022c2:	f3bf 8f6f 	isb	sy
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	bf00      	nop
 80022ce:	e7fe      	b.n	80022ce <vTaskPlaceOnEventListRestricted+0x26>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <vTaskPlaceOnEventListRestricted+0x88>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	61da      	str	r2, [r3, #28]
 80022de:	4b14      	ldr	r3, [pc, #80]	; (8002330 <vTaskPlaceOnEventListRestricted+0x88>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	621a      	str	r2, [r3, #32]
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <vTaskPlaceOnEventListRestricted+0x88>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	3218      	adds	r2, #24
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <vTaskPlaceOnEventListRestricted+0x88>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f103 0218 	add.w	r2, r3, #24
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <vTaskPlaceOnEventListRestricted+0x88>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <vTaskPlaceOnEventListRestricted+0x76>
 8002318:	f04f 33ff 	mov.w	r3, #4294967295
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68b8      	ldr	r0, [r7, #8]
 8002322:	f000 fa93 	bl	800284c <prvAddCurrentTaskToDelayedList>
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000098 	.word	0x20000098

08002334 <xTaskRemoveFromEventList>:
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	623b      	str	r3, [r7, #32]
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10a      	bne.n	8002360 <xTaskRemoveFromEventList+0x2c>
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	bf00      	nop
 800235e:	e7fe      	b.n	800235e <xTaskRemoveFromEventList+0x2a>
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	6a3a      	ldr	r2, [r7, #32]
 800236c:	6a12      	ldr	r2, [r2, #32]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	6a3a      	ldr	r2, [r7, #32]
 8002376:	69d2      	ldr	r2, [r2, #28]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	3318      	adds	r3, #24
 8002382:	429a      	cmp	r2, r3
 8002384:	d103      	bne.n	800238e <xTaskRemoveFromEventList+0x5a>
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	2200      	movs	r2, #0
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1e5a      	subs	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <xTaskRemoveFromEventList+0x198>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d161      	bne.n	800246a <xTaskRemoveFromEventList+0x136>
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	6a3a      	ldr	r2, [r7, #32]
 80023b2:	68d2      	ldr	r2, [r2, #12]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	6a3a      	ldr	r2, [r7, #32]
 80023bc:	6892      	ldr	r2, [r2, #8]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	3304      	adds	r3, #4
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d103      	bne.n	80023d4 <xTaskRemoveFromEventList+0xa0>
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <xTaskRemoveFromEventList+0x19c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d903      	bls.n	80023f8 <xTaskRemoveFromEventList+0xc4>
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	4a36      	ldr	r2, [pc, #216]	; (80024d0 <xTaskRemoveFromEventList+0x19c>)
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023fc:	4935      	ldr	r1, [pc, #212]	; (80024d4 <xTaskRemoveFromEventList+0x1a0>)
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	3304      	adds	r3, #4
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	60da      	str	r2, [r3, #12]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	6a3a      	ldr	r2, [r7, #32]
 8002422:	3204      	adds	r2, #4
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	1d1a      	adds	r2, r3, #4
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4a26      	ldr	r2, [pc, #152]	; (80024d4 <xTaskRemoveFromEventList+0x1a0>)
 800243c:	441a      	add	r2, r3
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	615a      	str	r2, [r3, #20]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002446:	4923      	ldr	r1, [pc, #140]	; (80024d4 <xTaskRemoveFromEventList+0x1a0>)
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	1c59      	adds	r1, r3, #1
 8002456:	481f      	ldr	r0, [pc, #124]	; (80024d4 <xTaskRemoveFromEventList+0x1a0>)
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4403      	add	r3, r0
 8002462:	6019      	str	r1, [r3, #0]
 8002464:	f000 f9ba 	bl	80027dc <prvResetNextTaskUnblockTime>
 8002468:	e01b      	b.n	80024a2 <xTaskRemoveFromEventList+0x16e>
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <xTaskRemoveFromEventList+0x1a4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	61da      	str	r2, [r3, #28]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	621a      	str	r2, [r3, #32]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	6a3a      	ldr	r2, [r7, #32]
 8002484:	3218      	adds	r2, #24
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	f103 0218 	add.w	r2, r3, #24
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <xTaskRemoveFromEventList+0x1a4>)
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <xTaskRemoveFromEventList+0x1a4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <xTaskRemoveFromEventList+0x1a4>)
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <xTaskRemoveFromEventList+0x1a8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d905      	bls.n	80024bc <xTaskRemoveFromEventList+0x188>
 80024b0:	2301      	movs	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <xTaskRemoveFromEventList+0x1ac>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e001      	b.n	80024c0 <xTaskRemoveFromEventList+0x18c>
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	4618      	mov	r0, r3
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000198 	.word	0x20000198
 80024d0:	20000178 	.word	0x20000178
 80024d4:	2000009c 	.word	0x2000009c
 80024d8:	20000130 	.word	0x20000130
 80024dc:	20000098 	.word	0x20000098
 80024e0:	20000184 	.word	0x20000184

080024e4 <vTaskInternalSetTimeOutState>:
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <vTaskInternalSetTimeOutState+0x24>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <vTaskInternalSetTimeOutState+0x28>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000188 	.word	0x20000188
 800250c:	20000174 	.word	0x20000174

08002510 <xTaskCheckForTimeOut>:
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <xTaskCheckForTimeOut+0x26>
 8002520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	bf00      	nop
 8002534:	e7fe      	b.n	8002534 <xTaskCheckForTimeOut+0x24>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <xTaskCheckForTimeOut+0x42>
 800253c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	bf00      	nop
 8002550:	e7fe      	b.n	8002550 <xTaskCheckForTimeOut+0x40>
 8002552:	f000 fe0d 	bl	8003170 <vPortEnterCritical>
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <xTaskCheckForTimeOut+0xc4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d102      	bne.n	8002576 <xTaskCheckForTimeOut+0x66>
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	e026      	b.n	80025c4 <xTaskCheckForTimeOut+0xb4>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <xTaskCheckForTimeOut+0xc8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d00a      	beq.n	8002598 <xTaskCheckForTimeOut+0x88>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	429a      	cmp	r2, r3
 800258a:	d305      	bcc.n	8002598 <xTaskCheckForTimeOut+0x88>
 800258c:	2301      	movs	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e015      	b.n	80025c4 <xTaskCheckForTimeOut+0xb4>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20b      	bcs.n	80025ba <xTaskCheckForTimeOut+0xaa>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	1ad2      	subs	r2, r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff98 	bl	80024e4 <vTaskInternalSetTimeOutState>
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	e004      	b.n	80025c4 <xTaskCheckForTimeOut+0xb4>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
 80025c4:	f000 fe04 	bl	80031d0 <vPortExitCritical>
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000174 	.word	0x20000174
 80025d8:	20000188 	.word	0x20000188

080025dc <vTaskMissedYield>:
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <vTaskMissedYield+0x14>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000184 	.word	0x20000184

080025f4 <prvIdleTask>:
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	f000 f8b0 	bl	8002760 <prvCheckTasksWaitingTermination>
 8002600:	4b18      	ldr	r3, [pc, #96]	; (8002664 <prvIdleTask+0x70>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d907      	bls.n	8002618 <prvIdleTask+0x24>
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <prvIdleTask+0x74>)
 800260a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f7ff fb14 	bl	8001c44 <prvGetExpectedIdleTime>
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d9eb      	bls.n	80025fc <prvIdleTask+0x8>
 8002624:	f7ff fb00 	bl	8001c28 <vTaskSuspendAll>
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <prvIdleTask+0x78>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b10      	ldr	r3, [pc, #64]	; (8002670 <prvIdleTask+0x7c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d20a      	bcs.n	800264a <prvIdleTask+0x56>
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	bf00      	nop
 8002648:	e7fe      	b.n	8002648 <prvIdleTask+0x54>
 800264a:	f7ff fafb 	bl	8001c44 <prvGetExpectedIdleTime>
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d902      	bls.n	800265c <prvIdleTask+0x68>
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 fe28 	bl	80032ac <vPortSuppressTicksAndSleep>
 800265c:	f7ff fb28 	bl	8001cb0 <xTaskResumeAll>
 8002660:	e7cc      	b.n	80025fc <prvIdleTask+0x8>
 8002662:	bf00      	nop
 8002664:	2000009c 	.word	0x2000009c
 8002668:	e000ed04 	.word	0xe000ed04
 800266c:	20000190 	.word	0x20000190
 8002670:	20000174 	.word	0x20000174

08002674 <eTaskConfirmSleepModeStatus>:
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	2301      	movs	r3, #1
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	2301      	movs	r3, #1
 8002680:	71fb      	strb	r3, [r7, #7]
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <eTaskConfirmSleepModeStatus+0x58>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <eTaskConfirmSleepModeStatus+0x1c>
 800268a:	2300      	movs	r3, #0
 800268c:	71fb      	strb	r3, [r7, #7]
 800268e:	e017      	b.n	80026c0 <eTaskConfirmSleepModeStatus+0x4c>
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <eTaskConfirmSleepModeStatus+0x5c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <eTaskConfirmSleepModeStatus+0x2a>
 8002698:	2300      	movs	r3, #0
 800269a:	71fb      	strb	r3, [r7, #7]
 800269c:	e010      	b.n	80026c0 <eTaskConfirmSleepModeStatus+0x4c>
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <eTaskConfirmSleepModeStatus+0x60>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <eTaskConfirmSleepModeStatus+0x38>
 80026a6:	2300      	movs	r3, #0
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	e009      	b.n	80026c0 <eTaskConfirmSleepModeStatus+0x4c>
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <eTaskConfirmSleepModeStatus+0x64>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <eTaskConfirmSleepModeStatus+0x68>)
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	1acb      	subs	r3, r1, r3
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d101      	bne.n	80026c0 <eTaskConfirmSleepModeStatus+0x4c>
 80026bc:	2302      	movs	r3, #2
 80026be:	71fb      	strb	r3, [r7, #7]
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	20000130 	.word	0x20000130
 80026d0:	20000184 	.word	0x20000184
 80026d4:	20000180 	.word	0x20000180
 80026d8:	2000015c 	.word	0x2000015c
 80026dc:	20000170 	.word	0x20000170

080026e0 <prvInitialiseTaskLists>:
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	e00c      	b.n	8002706 <prvInitialiseTaskLists+0x26>
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <prvInitialiseTaskLists+0x60>)
 80026f8:	4413      	add	r3, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fbba 	bl	8002e74 <vListInitialise>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3301      	adds	r3, #1
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d9ef      	bls.n	80026ec <prvInitialiseTaskLists+0xc>
 800270c:	480d      	ldr	r0, [pc, #52]	; (8002744 <prvInitialiseTaskLists+0x64>)
 800270e:	f000 fbb1 	bl	8002e74 <vListInitialise>
 8002712:	480d      	ldr	r0, [pc, #52]	; (8002748 <prvInitialiseTaskLists+0x68>)
 8002714:	f000 fbae 	bl	8002e74 <vListInitialise>
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <prvInitialiseTaskLists+0x6c>)
 800271a:	f000 fbab 	bl	8002e74 <vListInitialise>
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <prvInitialiseTaskLists+0x70>)
 8002720:	f000 fba8 	bl	8002e74 <vListInitialise>
 8002724:	480b      	ldr	r0, [pc, #44]	; (8002754 <prvInitialiseTaskLists+0x74>)
 8002726:	f000 fba5 	bl	8002e74 <vListInitialise>
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <prvInitialiseTaskLists+0x78>)
 800272c:	4a05      	ldr	r2, [pc, #20]	; (8002744 <prvInitialiseTaskLists+0x64>)
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <prvInitialiseTaskLists+0x7c>)
 8002732:	4a05      	ldr	r2, [pc, #20]	; (8002748 <prvInitialiseTaskLists+0x68>)
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2000009c 	.word	0x2000009c
 8002744:	20000100 	.word	0x20000100
 8002748:	20000114 	.word	0x20000114
 800274c:	20000130 	.word	0x20000130
 8002750:	20000144 	.word	0x20000144
 8002754:	2000015c 	.word	0x2000015c
 8002758:	20000128 	.word	0x20000128
 800275c:	2000012c 	.word	0x2000012c

08002760 <prvCheckTasksWaitingTermination>:
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	e019      	b.n	800279c <prvCheckTasksWaitingTermination+0x3c>
 8002768:	f000 fd02 	bl	8003170 <vPortEnterCritical>
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <prvCheckTasksWaitingTermination+0x50>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fbde 	bl	8002f3a <uxListRemove>
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <prvCheckTasksWaitingTermination+0x54>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3b01      	subs	r3, #1
 8002784:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <prvCheckTasksWaitingTermination+0x54>)
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <prvCheckTasksWaitingTermination+0x58>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3b01      	subs	r3, #1
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <prvCheckTasksWaitingTermination+0x58>)
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	f000 fd1d 	bl	80031d0 <vPortExitCritical>
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f810 	bl	80027bc <prvDeleteTCB>
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <prvCheckTasksWaitingTermination+0x58>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e1      	bne.n	8002768 <prvCheckTasksWaitingTermination+0x8>
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000144 	.word	0x20000144
 80027b4:	20000170 	.word	0x20000170
 80027b8:	20000158 	.word	0x20000158

080027bc <prvDeleteTCB>:
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 fb41 	bl	8002e50 <vPortFree>
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fb3e 	bl	8002e50 <vPortFree>
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <prvResetNextTaskUnblockTime>:
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <prvResetNextTaskUnblockTime+0x2c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <prvResetNextTaskUnblockTime+0x18>
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <prvResetNextTaskUnblockTime+0x30>)
 80027ec:	f04f 32ff 	mov.w	r2, #4294967295
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e005      	b.n	8002800 <prvResetNextTaskUnblockTime+0x24>
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <prvResetNextTaskUnblockTime+0x2c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a03      	ldr	r2, [pc, #12]	; (800280c <prvResetNextTaskUnblockTime+0x30>)
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000128 	.word	0x20000128
 800280c:	20000190 	.word	0x20000190

08002810 <xTaskGetSchedulerState>:
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <xTaskGetSchedulerState+0x34>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d102      	bne.n	8002824 <xTaskGetSchedulerState+0x14>
 800281e:	2301      	movs	r3, #1
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	e008      	b.n	8002836 <xTaskGetSchedulerState+0x26>
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <xTaskGetSchedulerState+0x38>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d102      	bne.n	8002832 <xTaskGetSchedulerState+0x22>
 800282c:	2302      	movs	r3, #2
 800282e:	607b      	str	r3, [r7, #4]
 8002830:	e001      	b.n	8002836 <xTaskGetSchedulerState+0x26>
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2000017c 	.word	0x2000017c
 8002848:	20000198 	.word	0x20000198

0800284c <prvAddCurrentTaskToDelayedList>:
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3304      	adds	r3, #4
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fb69 	bl	8002f3a <uxListRemove>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286e:	d124      	bne.n	80028ba <prvAddCurrentTaskToDelayedList+0x6e>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d021      	beq.n	80028ba <prvAddCurrentTaskToDelayedList+0x6e>
 8002876:	4b28      	ldr	r3, [pc, #160]	; (8002918 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	4b25      	ldr	r3, [pc, #148]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	4b23      	ldr	r3, [pc, #140]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	6892      	ldr	r2, [r2, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	3204      	adds	r2, #4
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	1d1a      	adds	r2, r3, #4
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028aa:	615a      	str	r2, [r3, #20]
 80028ac:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	4a19      	ldr	r2, [pc, #100]	; (8002918 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	bf00      	nop
 80028b8:	e026      	b.n	8002908 <prvAddCurrentTaskToDelayedList+0xbc>
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d209      	bcs.n	80028e6 <prvAddCurrentTaskToDelayedList+0x9a>
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <prvAddCurrentTaskToDelayedList+0xd0>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3304      	adds	r3, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f000 faf3 	bl	8002eca <vListInsert>
 80028e4:	e010      	b.n	8002908 <prvAddCurrentTaskToDelayedList+0xbc>
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <prvAddCurrentTaskToDelayedList+0xd4>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3304      	adds	r3, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4610      	mov	r0, r2
 80028f4:	f000 fae9 	bl	8002eca <vListInsert>
 80028f8:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <prvAddCurrentTaskToDelayedList+0xd8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d202      	bcs.n	8002908 <prvAddCurrentTaskToDelayedList+0xbc>
 8002902:	4a08      	ldr	r2, [pc, #32]	; (8002924 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	bf00      	nop
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000174 	.word	0x20000174
 8002914:	20000098 	.word	0x20000098
 8002918:	2000015c 	.word	0x2000015c
 800291c:	2000012c 	.word	0x2000012c
 8002920:	20000128 	.word	0x20000128
 8002924:	20000190 	.word	0x20000190

08002928 <xTimerCreateTimerTask>:
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af02      	add	r7, sp, #8
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	f000 fa45 	bl	8002dc0 <prvCheckForValidListAndQueue>
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <xTimerCreateTimerTask+0x54>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <xTimerCreateTimerTask+0x2c>
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <xTimerCreateTimerTask+0x58>)
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2303      	movs	r3, #3
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	2300      	movs	r3, #0
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	490e      	ldr	r1, [pc, #56]	; (8002984 <xTimerCreateTimerTask+0x5c>)
 800294c:	480e      	ldr	r0, [pc, #56]	; (8002988 <xTimerCreateTimerTask+0x60>)
 800294e:	f7fe ffad 	bl	80018ac <xTaskCreate>
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <xTimerCreateTimerTask+0x48>
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	bf00      	nop
 800296e:	e7fe      	b.n	800296e <xTimerCreateTimerTask+0x46>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200001cc 	.word	0x200001cc
 8002980:	200001d0 	.word	0x200001d0
 8002984:	08003cf4 	.word	0x08003cf4
 8002988:	08002a31 	.word	0x08002a31

0800298c <prvReloadTimer>:
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	e008      	b.n	80029ac <prvReloadTimer+0x20>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	4413      	add	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	4798      	blx	r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	699a      	ldr	r2, [r3, #24]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	18d1      	adds	r1, r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 f8db 	bl	8002b74 <prvInsertTimerInActiveList>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1ea      	bne.n	800299a <prvReloadTimer+0xe>
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <prvProcessExpiredTimer>:
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <prvProcessExpiredTimer+0x5c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3304      	adds	r3, #4
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 faa6 	bl	8002f3a <uxListRemove>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <prvProcessExpiredTimer+0x38>
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff ffc3 	bl	800298c <prvReloadTimer>
 8002a06:	e008      	b.n	8002a1a <prvProcessExpiredTimer+0x4a>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	4798      	blx	r3
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200001c4 	.word	0x200001c4

08002a30 <prvTimerTask>:
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f857 	bl	8002af0 <prvGetNextExpireTime>
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4619      	mov	r1, r3
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f803 	bl	8002a54 <prvProcessTimerOrBlockTask>
 8002a4e:	f000 f8d3 	bl	8002bf8 <prvProcessReceivedCommands>
 8002a52:	e7f1      	b.n	8002a38 <prvTimerTask+0x8>

08002a54 <prvProcessTimerOrBlockTask>:
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	f7ff f8e3 	bl	8001c28 <vTaskSuspendAll>
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f864 	bl	8002b34 <prvSampleTimeNow>
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d130      	bne.n	8002ad6 <prvProcessTimerOrBlockTask+0x82>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <prvProcessTimerOrBlockTask+0x3c>
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d806      	bhi.n	8002a90 <prvProcessTimerOrBlockTask+0x3c>
 8002a82:	f7ff f915 	bl	8001cb0 <xTaskResumeAll>
 8002a86:	68f9      	ldr	r1, [r7, #12]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ffa1 	bl	80029d0 <prvProcessExpiredTimer>
 8002a8e:	e024      	b.n	8002ada <prvProcessTimerOrBlockTask+0x86>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <prvProcessTimerOrBlockTask+0x54>
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <prvProcessTimerOrBlockTask+0x90>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <prvProcessTimerOrBlockTask+0x50>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <prvProcessTimerOrBlockTask+0x52>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <prvProcessTimerOrBlockTask+0x94>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f000 ffbd 	bl	8003a34 <vQueueWaitForMessageRestricted>
 8002aba:	f7ff f8f9 	bl	8001cb0 <xTaskResumeAll>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <prvProcessTimerOrBlockTask+0x86>
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <prvProcessTimerOrBlockTask+0x98>)
 8002ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	e001      	b.n	8002ada <prvProcessTimerOrBlockTask+0x86>
 8002ad6:	f7ff f8eb 	bl	8001cb0 <xTaskResumeAll>
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200001c8 	.word	0x200001c8
 8002ae8:	200001cc 	.word	0x200001cc
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <prvGetNextExpireTime>:
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <prvGetNextExpireTime+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <prvGetNextExpireTime+0x16>
 8002b02:	2201      	movs	r2, #1
 8002b04:	e000      	b.n	8002b08 <prvGetNextExpireTime+0x18>
 8002b06:	2200      	movs	r2, #0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d105      	bne.n	8002b20 <prvGetNextExpireTime+0x30>
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <prvGetNextExpireTime+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e001      	b.n	8002b24 <prvGetNextExpireTime+0x34>
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	200001c4 	.word	0x200001c4

08002b34 <prvSampleTimeNow>:
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	f7ff f9b4 	bl	8001ea8 <xTaskGetTickCount>
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <prvSampleTimeNow+0x3c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d205      	bcs.n	8002b58 <prvSampleTimeNow+0x24>
 8002b4c:	f000 f912 	bl	8002d74 <prvSwitchTimerLists>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e002      	b.n	8002b5e <prvSampleTimeNow+0x2a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <prvSampleTimeNow+0x3c>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200001d4 	.word	0x200001d4

08002b74 <prvInsertTimerInActiveList>:
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	611a      	str	r2, [r3, #16]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d812      	bhi.n	8002bc0 <prvInsertTimerInActiveList+0x4c>
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	1ad2      	subs	r2, r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d302      	bcc.n	8002bae <prvInsertTimerInActiveList+0x3a>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e01b      	b.n	8002be6 <prvInsertTimerInActiveList+0x72>
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <prvInsertTimerInActiveList+0x7c>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4610      	mov	r0, r2
 8002bba:	f000 f986 	bl	8002eca <vListInsert>
 8002bbe:	e012      	b.n	8002be6 <prvInsertTimerInActiveList+0x72>
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d206      	bcs.n	8002bd6 <prvInsertTimerInActiveList+0x62>
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d302      	bcc.n	8002bd6 <prvInsertTimerInActiveList+0x62>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e007      	b.n	8002be6 <prvInsertTimerInActiveList+0x72>
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <prvInsertTimerInActiveList+0x80>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f000 f972 	bl	8002eca <vListInsert>
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200001c8 	.word	0x200001c8
 8002bf4:	200001c4 	.word	0x200001c4

08002bf8 <prvProcessReceivedCommands>:
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	e0a6      	b.n	8002d4e <prvProcessReceivedCommands+0x156>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f2c0 80a2 	blt.w	8002d4c <prvProcessReceivedCommands+0x154>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <prvProcessReceivedCommands+0x26>
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f98e 	bl	8002f3a <uxListRemove>
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff87 	bl	8002b34 <prvSampleTimeNow>
 8002c26:	61b8      	str	r0, [r7, #24]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	f200 808e 	bhi.w	8002d4e <prvProcessReceivedCommands+0x156>
 8002c32:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <prvProcessReceivedCommands+0x40>)
 8002c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c38:	08002c5d 	.word	0x08002c5d
 8002c3c:	08002c5d 	.word	0x08002c5d
 8002c40:	08002cc5 	.word	0x08002cc5
 8002c44:	08002cd9 	.word	0x08002cd9
 8002c48:	08002d23 	.word	0x08002d23
 8002c4c:	08002c5d 	.word	0x08002c5d
 8002c50:	08002c5d 	.word	0x08002c5d
 8002c54:	08002cc5 	.word	0x08002cc5
 8002c58:	08002cd9 	.word	0x08002cd9
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	18d1      	adds	r1, r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	69f8      	ldr	r0, [r7, #28]
 8002c7c:	f7ff ff7a 	bl	8002b74 <prvInsertTimerInActiveList>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d063      	beq.n	8002d4e <prvProcessReceivedCommands+0x156>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <prvProcessReceivedCommands+0xb0>
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	69f8      	ldr	r0, [r7, #28]
 8002ca2:	f7ff fe73 	bl	800298c <prvReloadTimer>
 8002ca6:	e008      	b.n	8002cba <prvProcessReceivedCommands+0xc2>
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	69f8      	ldr	r0, [r7, #28]
 8002cc0:	4798      	blx	r3
 8002cc2:	e044      	b.n	8002d4e <prvProcessReceivedCommands+0x156>
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cd6:	e03a      	b.n	8002d4e <prvProcessReceivedCommands+0x156>
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	619a      	str	r2, [r3, #24]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <prvProcessReceivedCommands+0x116>
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <prvProcessReceivedCommands+0x114>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	18d1      	adds	r1, r2, r3
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	69f8      	ldr	r0, [r7, #28]
 8002d1c:	f7ff ff2a 	bl	8002b74 <prvInsertTimerInActiveList>
 8002d20:	e015      	b.n	8002d4e <prvProcessReceivedCommands+0x156>
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d103      	bne.n	8002d38 <prvProcessReceivedCommands+0x140>
 8002d30:	69f8      	ldr	r0, [r7, #28]
 8002d32:	f000 f88d 	bl	8002e50 <vPortFree>
 8002d36:	e00a      	b.n	8002d4e <prvProcessReceivedCommands+0x156>
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002d4a:	e000      	b.n	8002d4e <prvProcessReceivedCommands+0x156>
 8002d4c:	bf00      	nop
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <prvProcessReceivedCommands+0x178>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f107 0108 	add.w	r1, r7, #8
 8002d56:	2200      	movs	r2, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fcaf 	bl	80036bc <xQueueReceive>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f47f af4d 	bne.w	8002c00 <prvProcessReceivedCommands+0x8>
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200001cc 	.word	0x200001cc

08002d74 <prvSwitchTimerLists>:
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	e009      	b.n	8002d90 <prvSwitchTimerLists+0x1c>
 8002d7c:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <prvSwitchTimerLists+0x44>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	f04f 31ff 	mov.w	r1, #4294967295
 8002d8a:	6838      	ldr	r0, [r7, #0]
 8002d8c:	f7ff fe20 	bl	80029d0 <prvProcessExpiredTimer>
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <prvSwitchTimerLists+0x44>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <prvSwitchTimerLists+0x8>
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <prvSwitchTimerLists+0x44>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <prvSwitchTimerLists+0x48>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <prvSwitchTimerLists+0x44>)
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <prvSwitchTimerLists+0x48>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200001c4 	.word	0x200001c4
 8002dbc:	200001c8 	.word	0x200001c8

08002dc0 <prvCheckForValidListAndQueue>:
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	f000 f9d4 	bl	8003170 <vPortEnterCritical>
 8002dc8:	4b12      	ldr	r3, [pc, #72]	; (8002e14 <prvCheckForValidListAndQueue+0x54>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11d      	bne.n	8002e0c <prvCheckForValidListAndQueue+0x4c>
 8002dd0:	4811      	ldr	r0, [pc, #68]	; (8002e18 <prvCheckForValidListAndQueue+0x58>)
 8002dd2:	f000 f84f 	bl	8002e74 <vListInitialise>
 8002dd6:	4811      	ldr	r0, [pc, #68]	; (8002e1c <prvCheckForValidListAndQueue+0x5c>)
 8002dd8:	f000 f84c 	bl	8002e74 <vListInitialise>
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <prvCheckForValidListAndQueue+0x60>)
 8002dde:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <prvCheckForValidListAndQueue+0x58>)
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <prvCheckForValidListAndQueue+0x64>)
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <prvCheckForValidListAndQueue+0x5c>)
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	2200      	movs	r2, #0
 8002dea:	210c      	movs	r1, #12
 8002dec:	200a      	movs	r0, #10
 8002dee:	f000 fbf3 	bl	80035d8 <xQueueGenericCreate>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <prvCheckForValidListAndQueue+0x54>)
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <prvCheckForValidListAndQueue+0x54>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <prvCheckForValidListAndQueue+0x4c>
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <prvCheckForValidListAndQueue+0x54>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4908      	ldr	r1, [pc, #32]	; (8002e28 <prvCheckForValidListAndQueue+0x68>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fdc6 	bl	8003998 <vQueueAddToRegistry>
 8002e0c:	f000 f9e0 	bl	80031d0 <vPortExitCritical>
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	200001cc 	.word	0x200001cc
 8002e18:	2000019c 	.word	0x2000019c
 8002e1c:	200001b0 	.word	0x200001b0
 8002e20:	200001c4 	.word	0x200001c4
 8002e24:	200001c8 	.word	0x200001c8
 8002e28:	08003cfc 	.word	0x08003cfc

08002e2c <pvPortMalloc>:
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	f7fe fef8 	bl	8001c28 <vTaskSuspendAll>
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fe59 	bl	8003af0 <malloc>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	f7fe ff35 	bl	8001cb0 <xTaskResumeAll>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <vPortFree>:
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d006      	beq.n	8002e6c <vPortFree+0x1c>
 8002e5e:	f7fe fee3 	bl	8001c28 <vTaskSuspendAll>
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fe4c 	bl	8003b00 <free>
 8002e68:	f7fe ff22 	bl	8001cb0 <xTaskResumeAll>
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <vListInitialise>:
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f103 0208 	add.w	r2, r3, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f103 0208 	add.w	r2, r3, #8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f103 0208 	add.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	611a      	str	r2, [r3, #16]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <vListInitialiseItem>:
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr

08002eca <vListInsert>:
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d103      	bne.n	8002eea <vListInsert+0x20>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	e00c      	b.n	8002f04 <vListInsert+0x3a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3308      	adds	r3, #8
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e002      	b.n	8002ef8 <vListInsert+0x2e>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d2f6      	bcs.n	8002ef2 <vListInsert+0x28>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	611a      	str	r2, [r3, #16]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <uxListRemove>:
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6892      	ldr	r2, [r2, #8]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6852      	ldr	r2, [r2, #4]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d103      	bne.n	8002f6e <uxListRemove+0x34>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <pxPortInitialiseStack>:
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	3b04      	subs	r3, #4
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3b04      	subs	r3, #4
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3b04      	subs	r3, #4
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	4a08      	ldr	r2, [pc, #32]	; (8002fe0 <pxPortInitialiseStack+0x54>)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3b14      	subs	r3, #20
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3b20      	subs	r3, #32
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	08002fe5 	.word	0x08002fe5

08002fe4 <prvTaskExitError>:
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <prvTaskExitError+0x54>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d00a      	beq.n	800300e <prvTaskExitError+0x2a>
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <prvTaskExitError+0x28>
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0fc      	beq.n	8003024 <prvTaskExitError+0x40>
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	20000010 	.word	0x20000010
 800303c:	00000000 	.word	0x00000000

08003040 <SVC_Handler>:
 8003040:	4b07      	ldr	r3, [pc, #28]	; (8003060 <pxCurrentTCBConst2>)
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	6808      	ldr	r0, [r1, #0]
 8003046:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800304a:	f380 8809 	msr	PSP, r0
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f380 8811 	msr	BASEPRI, r0
 800305a:	f04e 0e0d 	orr.w	lr, lr, #13
 800305e:	4770      	bx	lr

08003060 <pxCurrentTCBConst2>:
 8003060:	20000098 	.word	0x20000098
 8003064:	bf00      	nop
 8003066:	bf00      	nop

08003068 <prvPortStartFirstTask>:
 8003068:	4806      	ldr	r0, [pc, #24]	; (8003084 <prvPortStartFirstTask+0x1c>)
 800306a:	6800      	ldr	r0, [r0, #0]
 800306c:	6800      	ldr	r0, [r0, #0]
 800306e:	f380 8808 	msr	MSP, r0
 8003072:	b662      	cpsie	i
 8003074:	b661      	cpsie	f
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	df00      	svc	0
 8003080:	bf00      	nop
 8003082:	0000      	.short	0x0000
 8003084:	e000ed08 	.word	0xe000ed08
 8003088:	bf00      	nop
 800308a:	bf00      	nop

0800308c <xPortStartScheduler>:
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	4b32      	ldr	r3, [pc, #200]	; (800315c <xPortStartScheduler+0xd0>)
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	22ff      	movs	r2, #255	; 0xff
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	70fb      	strb	r3, [r7, #3]
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <xPortStartScheduler+0xd4>)
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <xPortStartScheduler+0xd8>)
 80030bc:	2207      	movs	r2, #7
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e009      	b.n	80030d6 <xPortStartScheduler+0x4a>
 80030c2:	4b28      	ldr	r3, [pc, #160]	; (8003164 <xPortStartScheduler+0xd8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	4a26      	ldr	r2, [pc, #152]	; (8003164 <xPortStartScheduler+0xd8>)
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	70fb      	strb	r3, [r7, #3]
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b80      	cmp	r3, #128	; 0x80
 80030e0:	d0ef      	beq.n	80030c2 <xPortStartScheduler+0x36>
 80030e2:	4b20      	ldr	r3, [pc, #128]	; (8003164 <xPortStartScheduler+0xd8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1c3 0307 	rsb	r3, r3, #7
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d00a      	beq.n	8003104 <xPortStartScheduler+0x78>
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <xPortStartScheduler+0x76>
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <xPortStartScheduler+0xd8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	4a16      	ldr	r2, [pc, #88]	; (8003164 <xPortStartScheduler+0xd8>)
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <xPortStartScheduler+0xd8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003116:	4a13      	ldr	r2, [pc, #76]	; (8003164 <xPortStartScheduler+0xd8>)
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <xPortStartScheduler+0xdc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <xPortStartScheduler+0xdc>)
 8003128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <xPortStartScheduler+0xdc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <xPortStartScheduler+0xdc>)
 8003134:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	f000 f981 	bl	8003440 <vPortSetupTimerInterrupt>
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <xPortStartScheduler+0xe0>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	f7ff ff90 	bl	8003068 <prvPortStartFirstTask>
 8003148:	f7ff f82e 	bl	80021a8 <vTaskSwitchContext>
 800314c:	f7ff ff4a 	bl	8002fe4 <prvTaskExitError>
 8003150:	2300      	movs	r3, #0
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	e000e400 	.word	0xe000e400
 8003160:	200001e4 	.word	0x200001e4
 8003164:	200001e8 	.word	0x200001e8
 8003168:	e000ed20 	.word	0xe000ed20
 800316c:	20000010 	.word	0x20000010

08003170 <vPortEnterCritical>:
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	bf00      	nop
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <vPortEnterCritical+0x58>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <vPortEnterCritical+0x58>)
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <vPortEnterCritical+0x58>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d10f      	bne.n	80031bc <vPortEnterCritical+0x4c>
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <vPortEnterCritical+0x5c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <vPortEnterCritical+0x4c>
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <vPortEnterCritical+0x4a>
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000010 	.word	0x20000010
 80031cc:	e000ed04 	.word	0xe000ed04

080031d0 <vPortExitCritical>:
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <vPortExitCritical+0x4c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <vPortExitCritical+0x24>
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	bf00      	nop
 80031f2:	e7fe      	b.n	80031f2 <vPortExitCritical+0x22>
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <vPortExitCritical+0x4c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <vPortExitCritical+0x4c>)
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <vPortExitCritical+0x4c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <vPortExitCritical+0x42>
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	20000010 	.word	0x20000010

08003220 <PendSV_Handler>:
 8003220:	f3ef 8009 	mrs	r0, PSP
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <pxCurrentTCBConst>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003230:	6010      	str	r0, [r2, #0]
 8003232:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003236:	f04f 0050 	mov.w	r0, #80	; 0x50
 800323a:	f380 8811 	msr	BASEPRI, r0
 800323e:	f7fe ffb3 	bl	80021a8 <vTaskSwitchContext>
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f380 8811 	msr	BASEPRI, r0
 800324a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	6808      	ldr	r0, [r1, #0]
 8003252:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003256:	f380 8809 	msr	PSP, r0
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	4770      	bx	lr

08003260 <pxCurrentTCBConst>:
 8003260:	20000098 	.word	0x20000098
 8003264:	bf00      	nop
 8003266:	bf00      	nop

08003268 <SysTick_Handler>:
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	bf00      	nop
 8003282:	f7fe fe79 	bl	8001f78 <xTaskIncrementTick>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <SysTick_Handler+0x2c>
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <SysTick_Handler+0x40>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	2300      	movs	r3, #0
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	e000ed04 	.word	0xe000ed04

080032ac <vPortSuppressTicksAndSleep>:
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	4b5b      	ldr	r3, [pc, #364]	; (8003424 <vPortSuppressTicksAndSleep+0x178>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d902      	bls.n	80032c4 <vPortSuppressTicksAndSleep+0x18>
 80032be:	4b59      	ldr	r3, [pc, #356]	; (8003424 <vPortSuppressTicksAndSleep+0x178>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	b672      	cpsid	i
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f7ff f9d1 	bl	8002674 <eTaskConfirmSleepModeStatus>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <vPortSuppressTicksAndSleep+0x30>
 80032d8:	b662      	cpsie	i
 80032da:	e09e      	b.n	800341a <vPortSuppressTicksAndSleep+0x16e>
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 80032de:	2206      	movs	r2, #6
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	4b52      	ldr	r3, [pc, #328]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <vPortSuppressTicksAndSleep+0x48>
 80032ee:	4b50      	ldr	r3, [pc, #320]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	fb02 f303 	mul.w	r3, r2, r3
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4413      	add	r3, r2
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <vPortSuppressTicksAndSleep+0x188>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <vPortSuppressTicksAndSleep+0x78>
 8003312:	4b48      	ldr	r3, [pc, #288]	; (8003434 <vPortSuppressTicksAndSleep+0x188>)
 8003314:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	4b45      	ldr	r3, [pc, #276]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	4b44      	ldr	r3, [pc, #272]	; (8003438 <vPortSuppressTicksAndSleep+0x18c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	429a      	cmp	r2, r3
 800332c:	d904      	bls.n	8003338 <vPortSuppressTicksAndSleep+0x8c>
 800332e:	4b42      	ldr	r3, [pc, #264]	; (8003438 <vPortSuppressTicksAndSleep+0x18c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	4a40      	ldr	r2, [pc, #256]	; (800343c <vPortSuppressTicksAndSleep+0x190>)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b3b      	ldr	r3, [pc, #236]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	4b38      	ldr	r3, [pc, #224]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a37      	ldr	r2, [pc, #220]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <vPortSuppressTicksAndSleep+0xb8>
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	bf30      	wfi
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	b662      	cpsie	i
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	b672      	cpsid	i
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	4b2b      	ldr	r3, [pc, #172]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 800337a:	2206      	movs	r2, #6
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01d      	beq.n	80033c6 <vPortSuppressTicksAndSleep+0x11a>
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	1acb      	subs	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	3b01      	subs	r3, #1
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	4b26      	ldr	r3, [pc, #152]	; (8003438 <vPortSuppressTicksAndSleep+0x18c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d904      	bls.n	80033b0 <vPortSuppressTicksAndSleep+0x104>
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d903      	bls.n	80033b8 <vPortSuppressTicksAndSleep+0x10c>
 80033b0:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	4a20      	ldr	r2, [pc, #128]	; (800343c <vPortSuppressTicksAndSleep+0x190>)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	e01a      	b.n	80033fc <vPortSuppressTicksAndSleep+0x150>
 80033c6:	4b19      	ldr	r3, [pc, #100]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	4b18      	ldr	r3, [pc, #96]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	fb02 f203 	mul.w	r2, r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4a10      	ldr	r2, [pc, #64]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	fb02 f203 	mul.w	r2, r2, r3
 80033f4:	4911      	ldr	r1, [pc, #68]	; (800343c <vPortSuppressTicksAndSleep+0x190>)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	600b      	str	r3, [r1, #0]
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <vPortSuppressTicksAndSleep+0x180>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <vPortSuppressTicksAndSleep+0x17c>)
 8003404:	2207      	movs	r2, #7
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <vPortSuppressTicksAndSleep+0x184>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0b      	ldr	r2, [pc, #44]	; (800343c <vPortSuppressTicksAndSleep+0x190>)
 800340e:	3b01      	subs	r3, #1
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	69b8      	ldr	r0, [r7, #24]
 8003414:	f7fe fd56 	bl	8001ec4 <vTaskStepTick>
 8003418:	b662      	cpsie	i
 800341a:	bf00      	nop
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200001dc 	.word	0x200001dc
 8003428:	e000e010 	.word	0xe000e010
 800342c:	e000e018 	.word	0xe000e018
 8003430:	200001d8 	.word	0x200001d8
 8003434:	e000ed04 	.word	0xe000ed04
 8003438:	200001e0 	.word	0x200001e0
 800343c:	e000e014 	.word	0xe000e014

08003440 <vPortSetupTimerInterrupt>:
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <vPortSetupTimerInterrupt+0x58>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a14      	ldr	r2, [pc, #80]	; (800349c <vPortSetupTimerInterrupt+0x5c>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <vPortSetupTimerInterrupt+0x60>)
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <vPortSetupTimerInterrupt+0x60>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <vPortSetupTimerInterrupt+0x64>)
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <vPortSetupTimerInterrupt+0x68>)
 8003466:	225e      	movs	r2, #94	; 0x5e
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <vPortSetupTimerInterrupt+0x6c>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <vPortSetupTimerInterrupt+0x70>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	4b08      	ldr	r3, [pc, #32]	; (8003498 <vPortSetupTimerInterrupt+0x58>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <vPortSetupTimerInterrupt+0x5c>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <vPortSetupTimerInterrupt+0x74>)
 8003484:	3b01      	subs	r3, #1
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <vPortSetupTimerInterrupt+0x6c>)
 800348a:	2207      	movs	r2, #7
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	bf00      	nop
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000000 	.word	0x20000000
 800349c:	10624dd3 	.word	0x10624dd3
 80034a0:	200001d8 	.word	0x200001d8
 80034a4:	200001dc 	.word	0x200001dc
 80034a8:	200001e0 	.word	0x200001e0
 80034ac:	e000e010 	.word	0xe000e010
 80034b0:	e000e018 	.word	0xe000e018
 80034b4:	e000e014 	.word	0xe000e014

080034b8 <xQueueGenericReset>:
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	2301      	movs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <xQueueGenericReset+0x2e>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xQueueGenericReset+0x2c>
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d05d      	beq.n	80035a8 <xQueueGenericReset+0xf0>
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d059      	beq.n	80035a8 <xQueueGenericReset+0xf0>
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	2100      	movs	r1, #0
 80034fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d000      	beq.n	8003508 <xQueueGenericReset+0x50>
 8003506:	2101      	movs	r1, #1
 8003508:	460b      	mov	r3, r1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d14c      	bne.n	80035a8 <xQueueGenericReset+0xf0>
 800350e:	f7ff fe2f 	bl	8003170 <vPortEnterCritical>
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	6939      	ldr	r1, [r7, #16]
 800351c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	441a      	add	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2200      	movs	r2, #0
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	3b01      	subs	r3, #1
 8003540:	6939      	ldr	r1, [r7, #16]
 8003542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	441a      	add	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d114      	bne.n	800358e <xQueueGenericReset+0xd6>
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01a      	beq.n	80035a2 <xQueueGenericReset+0xea>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	3310      	adds	r3, #16
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fedf 	bl	8002334 <xTaskRemoveFromEventList>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d012      	beq.n	80035a2 <xQueueGenericReset+0xea>
 800357c:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <xQueueGenericReset+0x11c>)
 800357e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	e009      	b.n	80035a2 <xQueueGenericReset+0xea>
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	3310      	adds	r3, #16
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fc6e 	bl	8002e74 <vListInitialise>
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	3324      	adds	r3, #36	; 0x24
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fc69 	bl	8002e74 <vListInitialise>
 80035a2:	f7ff fe15 	bl	80031d0 <vPortExitCritical>
 80035a6:	e001      	b.n	80035ac <xQueueGenericReset+0xf4>
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <xQueueGenericReset+0x110>
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xQueueGenericReset+0x10e>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	e000ed04 	.word	0xe000ed04

080035d8 <xQueueGenericCreate>:
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	71fb      	strb	r3, [r7, #7]
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02e      	beq.n	800364e <xQueueGenericCreate+0x76>
 80035f0:	2100      	movs	r1, #0
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	fba3 2302 	umull	r2, r3, r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d000      	beq.n	8003600 <xQueueGenericCreate+0x28>
 80035fe:	2101      	movs	r1, #1
 8003600:	460b      	mov	r3, r1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d123      	bne.n	800364e <xQueueGenericCreate+0x76>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003612:	d81c      	bhi.n	800364e <xQueueGenericCreate+0x76>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	fb02 f303 	mul.w	r3, r2, r3
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	3350      	adds	r3, #80	; 0x50
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fc02 	bl	8002e2c <pvPortMalloc>
 8003628:	61f8      	str	r0, [r7, #28]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d01c      	beq.n	800366a <xQueueGenericCreate+0x92>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3350      	adds	r3, #80	; 0x50
 8003638:	617b      	str	r3, [r7, #20]
 800363a:	79fa      	ldrb	r2, [r7, #7]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f814 	bl	8003674 <prvInitialiseNewQueue>
 800364c:	e00d      	b.n	800366a <xQueueGenericCreate+0x92>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xQueueGenericCreate+0x92>
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xQueueGenericCreate+0x90>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4618      	mov	r0, r3
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <prvInitialiseNewQueue>:
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	70fb      	strb	r3, [r7, #3]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d103      	bne.n	8003690 <prvInitialiseNewQueue+0x1c>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e002      	b.n	8003696 <prvInitialiseNewQueue+0x22>
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
 80036a2:	2101      	movs	r1, #1
 80036a4:	69b8      	ldr	r0, [r7, #24]
 80036a6:	f7ff ff07 	bl	80034b8 <xQueueGenericReset>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <xQueueReceive>:
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08c      	sub	sp, #48	; 0x30
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <xQueueReceive+0x30>
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <xQueueReceive+0x2e>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d103      	bne.n	80036fa <xQueueReceive+0x3e>
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <xQueueReceive+0x42>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <xQueueReceive+0x44>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueReceive+0x5e>
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueReceive+0x5c>
 800371a:	f7ff f879 	bl	8002810 <xTaskGetSchedulerState>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <xQueueReceive+0x6e>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <xQueueReceive+0x72>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <xQueueReceive+0x74>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <xQueueReceive+0x8e>
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	bf00      	nop
 8003748:	e7fe      	b.n	8003748 <xQueueReceive+0x8c>
 800374a:	f7ff fd11 	bl	8003170 <vPortEnterCritical>
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01f      	beq.n	800379a <xQueueReceive+0xde>
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800375e:	f000 f88d 	bl	800387c <prvCopyDataFromQueue>
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	1e5a      	subs	r2, r3, #1
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00f      	beq.n	8003792 <xQueueReceive+0xd6>
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	3310      	adds	r3, #16
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fddc 	bl	8002334 <xTaskRemoveFromEventList>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <xQueueReceive+0xd6>
 8003782:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <xQueueReceive+0x1bc>)
 8003784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f7ff fd1d 	bl	80031d0 <vPortExitCritical>
 8003796:	2301      	movs	r3, #1
 8003798:	e069      	b.n	800386e <xQueueReceive+0x1b2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <xQueueReceive+0xec>
 80037a0:	f7ff fd16 	bl	80031d0 <vPortExitCritical>
 80037a4:	2300      	movs	r3, #0
 80037a6:	e062      	b.n	800386e <xQueueReceive+0x1b2>
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <xQueueReceive+0x100>
 80037ae:	f107 0310 	add.w	r3, r7, #16
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fe96 	bl	80024e4 <vTaskInternalSetTimeOutState>
 80037b8:	2301      	movs	r3, #1
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037bc:	f7ff fd08 	bl	80031d0 <vPortExitCritical>
 80037c0:	f7fe fa32 	bl	8001c28 <vTaskSuspendAll>
 80037c4:	f7ff fcd4 	bl	8003170 <vPortEnterCritical>
 80037c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ce:	b25b      	sxtb	r3, r3
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d103      	bne.n	80037de <xQueueReceive+0x122>
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e4:	b25b      	sxtb	r3, r3
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d103      	bne.n	80037f4 <xQueueReceive+0x138>
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f4:	f7ff fcec 	bl	80031d0 <vPortExitCritical>
 80037f8:	1d3a      	adds	r2, r7, #4
 80037fa:	f107 0310 	add.w	r3, r7, #16
 80037fe:	4611      	mov	r1, r2
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fe85 	bl	8002510 <xTaskCheckForTimeOut>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d123      	bne.n	8003854 <xQueueReceive+0x198>
 800380c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800380e:	f000 f8ad 	bl	800396c <prvIsQueueEmpty>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <xQueueReceive+0x18c>
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	3324      	adds	r3, #36	; 0x24
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe fd1d 	bl	8002260 <vTaskPlaceOnEventList>
 8003826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003828:	f000 f84e 	bl	80038c8 <prvUnlockQueue>
 800382c:	f7fe fa40 	bl	8001cb0 <xTaskResumeAll>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d189      	bne.n	800374a <xQueueReceive+0x8e>
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <xQueueReceive+0x1bc>)
 8003838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	f3bf 8f6f 	isb	sy
 8003846:	e780      	b.n	800374a <xQueueReceive+0x8e>
 8003848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800384a:	f000 f83d 	bl	80038c8 <prvUnlockQueue>
 800384e:	f7fe fa2f 	bl	8001cb0 <xTaskResumeAll>
 8003852:	e77a      	b.n	800374a <xQueueReceive+0x8e>
 8003854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003856:	f000 f837 	bl	80038c8 <prvUnlockQueue>
 800385a:	f7fe fa29 	bl	8001cb0 <xTaskResumeAll>
 800385e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003860:	f000 f884 	bl	800396c <prvIsQueueEmpty>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	f43f af6f 	beq.w	800374a <xQueueReceive+0x8e>
 800386c:	2300      	movs	r3, #0
 800386e:	4618      	mov	r0, r3
 8003870:	3730      	adds	r7, #48	; 0x30
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <prvCopyDataFromQueue>:
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d018      	beq.n	80038c0 <prvCopyDataFromQueue+0x44>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	441a      	add	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d303      	bcc.n	80038b0 <prvCopyDataFromQueue+0x34>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68d9      	ldr	r1, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	461a      	mov	r2, r3
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	f000 f928 	bl	8003b10 <memcpy>
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <prvUnlockQueue>:
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	f7ff fc4e 	bl	8003170 <vPortEnterCritical>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e011      	b.n	8003902 <prvUnlockQueue+0x3a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <prvUnlockQueue+0x44>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3324      	adds	r3, #36	; 0x24
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fd22 	bl	8002334 <xTaskRemoveFromEventList>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <prvUnlockQueue+0x32>
 80038f6:	f7fe fe71 	bl	80025dc <vTaskMissedYield>
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	dce9      	bgt.n	80038de <prvUnlockQueue+0x16>
 800390a:	e000      	b.n	800390e <prvUnlockQueue+0x46>
 800390c:	bf00      	nop
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003916:	f7ff fc5b 	bl	80031d0 <vPortExitCritical>
 800391a:	f7ff fc29 	bl	8003170 <vPortEnterCritical>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003924:	73bb      	strb	r3, [r7, #14]
 8003926:	e011      	b.n	800394c <prvUnlockQueue+0x84>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d012      	beq.n	8003956 <prvUnlockQueue+0x8e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3310      	adds	r3, #16
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fcfd 	bl	8002334 <xTaskRemoveFromEventList>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <prvUnlockQueue+0x7c>
 8003940:	f7fe fe4c 	bl	80025dc <vTaskMissedYield>
 8003944:	7bbb      	ldrb	r3, [r7, #14]
 8003946:	3b01      	subs	r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	73bb      	strb	r3, [r7, #14]
 800394c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003950:	2b00      	cmp	r3, #0
 8003952:	dce9      	bgt.n	8003928 <prvUnlockQueue+0x60>
 8003954:	e000      	b.n	8003958 <prvUnlockQueue+0x90>
 8003956:	bf00      	nop
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	22ff      	movs	r2, #255	; 0xff
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003960:	f7ff fc36 	bl	80031d0 <vPortExitCritical>
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <prvIsQueueEmpty>:
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	f7ff fbfc 	bl	8003170 <vPortEnterCritical>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <prvIsQueueEmpty+0x1a>
 8003980:	2301      	movs	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e001      	b.n	800398a <prvIsQueueEmpty+0x1e>
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	f7ff fc21 	bl	80031d0 <vPortExitCritical>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <vQueueAddToRegistry>:
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <vQueueAddToRegistry+0x2a>
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <vQueueAddToRegistry+0x28>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d024      	beq.n	8003a12 <vQueueAddToRegistry+0x7a>
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e01e      	b.n	8003a0c <vQueueAddToRegistry+0x74>
 80039ce:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <vQueueAddToRegistry+0x98>)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4413      	add	r3, r2
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d105      	bne.n	80039ea <vQueueAddToRegistry+0x52>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <vQueueAddToRegistry+0x98>)
 80039e4:	4413      	add	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	e013      	b.n	8003a12 <vQueueAddToRegistry+0x7a>
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <vQueueAddToRegistry+0x6e>
 80039f0:	4a0f      	ldr	r2, [pc, #60]	; (8003a30 <vQueueAddToRegistry+0x98>)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <vQueueAddToRegistry+0x6e>
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <vQueueAddToRegistry+0x98>)
 8003a02:	4413      	add	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	2b07      	cmp	r3, #7
 8003a10:	d9dd      	bls.n	80039ce <vQueueAddToRegistry+0x36>
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <vQueueAddToRegistry+0x8c>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000240 	.word	0x20000240

08003a34 <vQueueWaitForMessageRestricted>:
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	f7ff fb94 	bl	8003170 <vPortEnterCritical>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a4e:	b25b      	sxtb	r3, r3
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d103      	bne.n	8003a5e <vQueueWaitForMessageRestricted+0x2a>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a64:	b25b      	sxtb	r3, r3
 8003a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6a:	d103      	bne.n	8003a74 <vQueueWaitForMessageRestricted+0x40>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a74:	f7ff fbac 	bl	80031d0 <vPortExitCritical>
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <vQueueWaitForMessageRestricted+0x5a>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	3324      	adds	r3, #36	; 0x24
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fc0d 	bl	80022a8 <vTaskPlaceOnEventListRestricted>
 8003a8e:	6978      	ldr	r0, [r7, #20]
 8003a90:	f7ff ff1a 	bl	80038c8 <prvUnlockQueue>
 8003a94:	bf00      	nop
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <__errno>:
 8003a9c:	4b01      	ldr	r3, [pc, #4]	; (8003aa4 <__errno+0x8>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000014 	.word	0x20000014

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	2600      	movs	r6, #0
 8003aac:	4d0c      	ldr	r5, [pc, #48]	; (8003ae0 <__libc_init_array+0x38>)
 8003aae:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003ab0:	1b64      	subs	r4, r4, r5
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	f000 f904 	bl	8003cc4 <_init>
 8003abc:	2600      	movs	r6, #0
 8003abe:	4d0a      	ldr	r5, [pc, #40]	; (8003ae8 <__libc_init_array+0x40>)
 8003ac0:	4c0a      	ldr	r4, [pc, #40]	; (8003aec <__libc_init_array+0x44>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08003d30 	.word	0x08003d30
 8003ae4:	08003d30 	.word	0x08003d30
 8003ae8:	08003d30 	.word	0x08003d30
 8003aec:	08003d34 	.word	0x08003d34

08003af0 <malloc>:
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <malloc+0xc>)
 8003af2:	4601      	mov	r1, r0
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	f000 b86d 	b.w	8003bd4 <_malloc_r>
 8003afa:	bf00      	nop
 8003afc:	20000014 	.word	0x20000014

08003b00 <free>:
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <free+0xc>)
 8003b02:	4601      	mov	r1, r0
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f000 b819 	b.w	8003b3c <_free_r>
 8003b0a:	bf00      	nop
 8003b0c:	20000014 	.word	0x20000014

08003b10 <memcpy>:
 8003b10:	440a      	add	r2, r1
 8003b12:	4291      	cmp	r1, r2
 8003b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b18:	d100      	bne.n	8003b1c <memcpy+0xc>
 8003b1a:	4770      	bx	lr
 8003b1c:	b510      	push	{r4, lr}
 8003b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b22:	4291      	cmp	r1, r2
 8003b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b28:	d1f9      	bne.n	8003b1e <memcpy+0xe>
 8003b2a:	bd10      	pop	{r4, pc}

08003b2c <memset>:
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4402      	add	r2, r0
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d100      	bne.n	8003b36 <memset+0xa>
 8003b34:	4770      	bx	lr
 8003b36:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3a:	e7f9      	b.n	8003b30 <memset+0x4>

08003b3c <_free_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4605      	mov	r5, r0
 8003b40:	2900      	cmp	r1, #0
 8003b42:	d043      	beq.n	8003bcc <_free_r+0x90>
 8003b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b48:	1f0c      	subs	r4, r1, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfb8      	it	lt
 8003b4e:	18e4      	addlt	r4, r4, r3
 8003b50:	f000 f8aa 	bl	8003ca8 <__malloc_lock>
 8003b54:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <_free_r+0x94>)
 8003b56:	6813      	ldr	r3, [r2, #0]
 8003b58:	4610      	mov	r0, r2
 8003b5a:	b933      	cbnz	r3, 8003b6a <_free_r+0x2e>
 8003b5c:	6063      	str	r3, [r4, #4]
 8003b5e:	6014      	str	r4, [r2, #0]
 8003b60:	4628      	mov	r0, r5
 8003b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b66:	f000 b8a5 	b.w	8003cb4 <__malloc_unlock>
 8003b6a:	42a3      	cmp	r3, r4
 8003b6c:	d90a      	bls.n	8003b84 <_free_r+0x48>
 8003b6e:	6821      	ldr	r1, [r4, #0]
 8003b70:	1862      	adds	r2, r4, r1
 8003b72:	4293      	cmp	r3, r2
 8003b74:	bf01      	itttt	eq
 8003b76:	681a      	ldreq	r2, [r3, #0]
 8003b78:	685b      	ldreq	r3, [r3, #4]
 8003b7a:	1852      	addeq	r2, r2, r1
 8003b7c:	6022      	streq	r2, [r4, #0]
 8003b7e:	6063      	str	r3, [r4, #4]
 8003b80:	6004      	str	r4, [r0, #0]
 8003b82:	e7ed      	b.n	8003b60 <_free_r+0x24>
 8003b84:	461a      	mov	r2, r3
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	b10b      	cbz	r3, 8003b8e <_free_r+0x52>
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	d9fa      	bls.n	8003b84 <_free_r+0x48>
 8003b8e:	6811      	ldr	r1, [r2, #0]
 8003b90:	1850      	adds	r0, r2, r1
 8003b92:	42a0      	cmp	r0, r4
 8003b94:	d10b      	bne.n	8003bae <_free_r+0x72>
 8003b96:	6820      	ldr	r0, [r4, #0]
 8003b98:	4401      	add	r1, r0
 8003b9a:	1850      	adds	r0, r2, r1
 8003b9c:	4283      	cmp	r3, r0
 8003b9e:	6011      	str	r1, [r2, #0]
 8003ba0:	d1de      	bne.n	8003b60 <_free_r+0x24>
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4401      	add	r1, r0
 8003ba8:	6011      	str	r1, [r2, #0]
 8003baa:	6053      	str	r3, [r2, #4]
 8003bac:	e7d8      	b.n	8003b60 <_free_r+0x24>
 8003bae:	d902      	bls.n	8003bb6 <_free_r+0x7a>
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	e7d4      	b.n	8003b60 <_free_r+0x24>
 8003bb6:	6820      	ldr	r0, [r4, #0]
 8003bb8:	1821      	adds	r1, r4, r0
 8003bba:	428b      	cmp	r3, r1
 8003bbc:	bf01      	itttt	eq
 8003bbe:	6819      	ldreq	r1, [r3, #0]
 8003bc0:	685b      	ldreq	r3, [r3, #4]
 8003bc2:	1809      	addeq	r1, r1, r0
 8003bc4:	6021      	streq	r1, [r4, #0]
 8003bc6:	6063      	str	r3, [r4, #4]
 8003bc8:	6054      	str	r4, [r2, #4]
 8003bca:	e7c9      	b.n	8003b60 <_free_r+0x24>
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
 8003bce:	bf00      	nop
 8003bd0:	200001ec 	.word	0x200001ec

08003bd4 <_malloc_r>:
 8003bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd6:	1ccd      	adds	r5, r1, #3
 8003bd8:	f025 0503 	bic.w	r5, r5, #3
 8003bdc:	3508      	adds	r5, #8
 8003bde:	2d0c      	cmp	r5, #12
 8003be0:	bf38      	it	cc
 8003be2:	250c      	movcc	r5, #12
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	4606      	mov	r6, r0
 8003be8:	db01      	blt.n	8003bee <_malloc_r+0x1a>
 8003bea:	42a9      	cmp	r1, r5
 8003bec:	d903      	bls.n	8003bf6 <_malloc_r+0x22>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bf6:	f000 f857 	bl	8003ca8 <__malloc_lock>
 8003bfa:	4921      	ldr	r1, [pc, #132]	; (8003c80 <_malloc_r+0xac>)
 8003bfc:	680a      	ldr	r2, [r1, #0]
 8003bfe:	4614      	mov	r4, r2
 8003c00:	b99c      	cbnz	r4, 8003c2a <_malloc_r+0x56>
 8003c02:	4f20      	ldr	r7, [pc, #128]	; (8003c84 <_malloc_r+0xb0>)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	b923      	cbnz	r3, 8003c12 <_malloc_r+0x3e>
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f000 f83c 	bl	8003c88 <_sbrk_r>
 8003c10:	6038      	str	r0, [r7, #0]
 8003c12:	4629      	mov	r1, r5
 8003c14:	4630      	mov	r0, r6
 8003c16:	f000 f837 	bl	8003c88 <_sbrk_r>
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	d123      	bne.n	8003c66 <_malloc_r+0x92>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	4630      	mov	r0, r6
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	f000 f846 	bl	8003cb4 <__malloc_unlock>
 8003c28:	e7e3      	b.n	8003bf2 <_malloc_r+0x1e>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	1b5b      	subs	r3, r3, r5
 8003c2e:	d417      	bmi.n	8003c60 <_malloc_r+0x8c>
 8003c30:	2b0b      	cmp	r3, #11
 8003c32:	d903      	bls.n	8003c3c <_malloc_r+0x68>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	441c      	add	r4, r3
 8003c38:	6025      	str	r5, [r4, #0]
 8003c3a:	e004      	b.n	8003c46 <_malloc_r+0x72>
 8003c3c:	6863      	ldr	r3, [r4, #4]
 8003c3e:	42a2      	cmp	r2, r4
 8003c40:	bf0c      	ite	eq
 8003c42:	600b      	streq	r3, [r1, #0]
 8003c44:	6053      	strne	r3, [r2, #4]
 8003c46:	4630      	mov	r0, r6
 8003c48:	f000 f834 	bl	8003cb4 <__malloc_unlock>
 8003c4c:	f104 000b 	add.w	r0, r4, #11
 8003c50:	1d23      	adds	r3, r4, #4
 8003c52:	f020 0007 	bic.w	r0, r0, #7
 8003c56:	1ac2      	subs	r2, r0, r3
 8003c58:	d0cc      	beq.n	8003bf4 <_malloc_r+0x20>
 8003c5a:	1a1b      	subs	r3, r3, r0
 8003c5c:	50a3      	str	r3, [r4, r2]
 8003c5e:	e7c9      	b.n	8003bf4 <_malloc_r+0x20>
 8003c60:	4622      	mov	r2, r4
 8003c62:	6864      	ldr	r4, [r4, #4]
 8003c64:	e7cc      	b.n	8003c00 <_malloc_r+0x2c>
 8003c66:	1cc4      	adds	r4, r0, #3
 8003c68:	f024 0403 	bic.w	r4, r4, #3
 8003c6c:	42a0      	cmp	r0, r4
 8003c6e:	d0e3      	beq.n	8003c38 <_malloc_r+0x64>
 8003c70:	1a21      	subs	r1, r4, r0
 8003c72:	4630      	mov	r0, r6
 8003c74:	f000 f808 	bl	8003c88 <_sbrk_r>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d1dd      	bne.n	8003c38 <_malloc_r+0x64>
 8003c7c:	e7cf      	b.n	8003c1e <_malloc_r+0x4a>
 8003c7e:	bf00      	nop
 8003c80:	200001ec 	.word	0x200001ec
 8003c84:	200001f0 	.word	0x200001f0

08003c88 <_sbrk_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4d05      	ldr	r5, [pc, #20]	; (8003ca4 <_sbrk_r+0x1c>)
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	602b      	str	r3, [r5, #0]
 8003c94:	f7fc fc4a 	bl	800052c <_sbrk>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d102      	bne.n	8003ca2 <_sbrk_r+0x1a>
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	b103      	cbz	r3, 8003ca2 <_sbrk_r+0x1a>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	20000280 	.word	0x20000280

08003ca8 <__malloc_lock>:
 8003ca8:	4801      	ldr	r0, [pc, #4]	; (8003cb0 <__malloc_lock+0x8>)
 8003caa:	f000 b809 	b.w	8003cc0 <__retarget_lock_acquire_recursive>
 8003cae:	bf00      	nop
 8003cb0:	20000288 	.word	0x20000288

08003cb4 <__malloc_unlock>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__malloc_unlock+0x8>)
 8003cb6:	f000 b804 	b.w	8003cc2 <__retarget_lock_release_recursive>
 8003cba:	bf00      	nop
 8003cbc:	20000288 	.word	0x20000288

08003cc0 <__retarget_lock_acquire_recursive>:
 8003cc0:	4770      	bx	lr

08003cc2 <__retarget_lock_release_recursive>:
 8003cc2:	4770      	bx	lr

08003cc4 <_init>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr

08003cd0 <_fini>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr
