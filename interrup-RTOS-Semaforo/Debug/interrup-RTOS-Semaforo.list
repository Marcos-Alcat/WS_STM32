
interrup-RTOS-Semaforo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c4c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da4  08003da4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003da4  08003da4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003da4  08003da4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000078  08003e24  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003e24  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112b6  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b2  00000000  00000000  00031357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00033b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  000349a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000190b5  00000000  00000000  00035718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4a9  00000000  00000000  0004e7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090200  00000000  00000000  0005dc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ede76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  000edecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d44 	.word	0x08003d44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08003d44 	.word	0x08003d44

08000150 <LedBlink2>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void LedBlink2(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	//uint32_t sw1_state = 0;
	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000158:	2201      	movs	r2, #1
 800015a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015e:	4809      	ldr	r0, [pc, #36]	; (8000184 <LedBlink2+0x34>)
 8000160:	f000 fd0c 	bl	8000b7c <HAL_GPIO_WritePin>
		vTaskDelay(500/portTICK_PERIOD_MS);
 8000164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000168:	f001 fd18 	bl	8001b9c <vTaskDelay>
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000172:	4804      	ldr	r0, [pc, #16]	; (8000184 <LedBlink2+0x34>)
 8000174:	f000 fd02 	bl	8000b7c <HAL_GPIO_WritePin>
 		vTaskDelay(500/portTICK_PERIOD_MS);
 8000178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017c:	f001 fd0e 	bl	8001b9c <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000180:	e7ea      	b.n	8000158 <LedBlink2+0x8>
 8000182:	bf00      	nop
 8000184:	40011000 	.word	0x40011000

08000188 <LedBlink1>:
	}
}

static void LedBlink1(void *pvParameters){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
	//uint32_t read_sw1_state;
	while(1){
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <LedBlink1+0x30>)
 8000198:	f000 fcf0 	bl	8000b7c <HAL_GPIO_WritePin>
		vTaskDelay(100/portTICK_PERIOD_MS);
 800019c:	2064      	movs	r0, #100	; 0x64
 800019e:	f001 fcfd 	bl	8001b9c <vTaskDelay>
 		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a8:	4803      	ldr	r0, [pc, #12]	; (80001b8 <LedBlink1+0x30>)
 80001aa:	f000 fce7 	bl	8000b7c <HAL_GPIO_WritePin>
 		vTaskDelay(100/portTICK_PERIOD_MS);
 80001ae:	2064      	movs	r0, #100	; 0x64
 80001b0:	f001 fcf4 	bl	8001b9c <vTaskDelay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001b4:	e7ec      	b.n	8000190 <LedBlink1+0x8>
 80001b6:	bf00      	nop
 80001b8:	40011000 	.word	0x40011000

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c2:	f000 fa21 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c6:	f000 f835 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ca:	f000 f879 	bl	80002c0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(LedBlink1, "", 100, NULL, 1, NULL);
 80001ce:	2300      	movs	r3, #0
 80001d0:	9301      	str	r3, [sp, #4]
 80001d2:	2301      	movs	r3, #1
 80001d4:	9300      	str	r3, [sp, #0]
 80001d6:	2300      	movs	r3, #0
 80001d8:	2264      	movs	r2, #100	; 0x64
 80001da:	4912      	ldr	r1, [pc, #72]	; (8000224 <main+0x68>)
 80001dc:	4812      	ldr	r0, [pc, #72]	; (8000228 <main+0x6c>)
 80001de:	f001 fb71 	bl	80018c4 <xTaskCreate>
  xTaskCreate(LedBlink2, "", 100, NULL, 2, NULL);
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2302      	movs	r3, #2
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2300      	movs	r3, #0
 80001ec:	2264      	movs	r2, #100	; 0x64
 80001ee:	490d      	ldr	r1, [pc, #52]	; (8000224 <main+0x68>)
 80001f0:	480e      	ldr	r0, [pc, #56]	; (800022c <main+0x70>)
 80001f2:	f001 fb67 	bl	80018c4 <xTaskCreate>
  vTaskStartScheduler();
 80001f6:	f001 fd05 	bl	8001c04 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000200:	480b      	ldr	r0, [pc, #44]	; (8000230 <main+0x74>)
 8000202:	f000 fcbb 	bl	8000b7c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f000 fa2f 	bl	800066c <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000214:	4806      	ldr	r0, [pc, #24]	; (8000230 <main+0x74>)
 8000216:	f000 fcb1 	bl	8000b7c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800021a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800021e:	f000 fa25 	bl	800066c <HAL_Delay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000222:	e7ea      	b.n	80001fa <main+0x3e>
 8000224:	08003d5c 	.word	0x08003d5c
 8000228:	08000189 	.word	0x08000189
 800022c:	08000151 	.word	0x08000151
 8000230:	40011000 	.word	0x40011000

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f003 fcb2 	bl	8003bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000256:	2301      	movs	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000272:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fcad 	bl	8000bdc <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000288:	f000 f8a8 	bl	80003dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 ff18 	bl	80010dc <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b2:	f000 f893 	bl	80003dc <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	; 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d4:	4b28      	ldr	r3, [pc, #160]	; (8000378 <MX_GPIO_Init+0xb8>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a27      	ldr	r2, [pc, #156]	; (8000378 <MX_GPIO_Init+0xb8>)
 80002da:	f043 0310 	orr.w	r3, r3, #16
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b25      	ldr	r3, [pc, #148]	; (8000378 <MX_GPIO_Init+0xb8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0310 	and.w	r3, r3, #16
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ec:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MX_GPIO_Init+0xb8>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a21      	ldr	r2, [pc, #132]	; (8000378 <MX_GPIO_Init+0xb8>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b1f      	ldr	r3, [pc, #124]	; (8000378 <MX_GPIO_Init+0xb8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0320 	and.w	r3, r3, #32
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <MX_GPIO_Init+0xb8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a1b      	ldr	r2, [pc, #108]	; (8000378 <MX_GPIO_Init+0xb8>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_GPIO_Init+0xb8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	4816      	ldr	r0, [pc, #88]	; (800037c <MX_GPIO_Init+0xbc>)
 8000324:	f000 fc2a 	bl	8000b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2302      	movs	r3, #2
 8000338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	480e      	ldr	r0, [pc, #56]	; (800037c <MX_GPIO_Init+0xbc>)
 8000342:	f000 fa97 	bl	8000874 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000346:	2340      	movs	r3, #64	; 0x40
 8000348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_GPIO_Init+0xc0>)
 800034c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034e:	2301      	movs	r3, #1
 8000350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4619      	mov	r1, r3
 8000358:	480a      	ldr	r0, [pc, #40]	; (8000384 <MX_GPIO_Init+0xc4>)
 800035a:	f000 fa8b 	bl	8000874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	2017      	movs	r0, #23
 8000364:	f000 fa5b 	bl	800081e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000368:	2017      	movs	r0, #23
 800036a:	f000 fa74 	bl	8000856 <HAL_NVIC_EnableIRQ>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40011000 	.word	0x40011000
 8000380:	10210000 	.word	0x10210000
 8000384:	40010800 	.word	0x40010800

08000388 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	80fb      	strh	r3, [r7, #6]
	if(read_sw1_state) read_sw1_state = 0;
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <HAL_GPIO_EXTI_Callback+0x1a>
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
	else read_sw1_state = 1;

	//HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
}
 80003a0:	e002      	b.n	80003a8 <HAL_GPIO_EXTI_Callback+0x20>
	else read_sw1_state = 1;
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	601a      	str	r2, [r3, #0]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000094 	.word	0x20000094

080003b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d101      	bne.n	80003ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ca:	f000 f933 	bl	8000634 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40012c00 	.word	0x40012c00

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e0:	b672      	cpsid	i
}
 80003e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <Error_Handler+0x8>
	...

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a14      	ldr	r2, [pc, #80]	; (8000444 <HAL_MspInit+0x5c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <HAL_MspInit+0x5c>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_MspInit+0x60>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_MspInit+0x60>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000
 8000448:	40010000 	.word	0x40010000

0800044c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b08c      	sub	sp, #48	; 0x30
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800045c:	2200      	movs	r2, #0
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	2019      	movs	r0, #25
 8000462:	f000 f9dc 	bl	800081e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000466:	2019      	movs	r0, #25
 8000468:	f000 f9f5 	bl	8000856 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <HAL_InitTick+0x9c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <HAL_InitTick+0x9c>)
 8000472:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <HAL_InitTick+0x9c>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000484:	f107 0210 	add.w	r2, r7, #16
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	4611      	mov	r1, r2
 800048e:	4618      	mov	r0, r3
 8000490:	f000 ff80 	bl	8001394 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000494:	f000 ff6a 	bl	800136c <HAL_RCC_GetPCLK2Freq>
 8000498:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800049c:	4a13      	ldr	r2, [pc, #76]	; (80004ec <HAL_InitTick+0xa0>)
 800049e:	fba2 2303 	umull	r2, r3, r2, r3
 80004a2:	0c9b      	lsrs	r3, r3, #18
 80004a4:	3b01      	subs	r3, #1
 80004a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004a8:	4b11      	ldr	r3, [pc, #68]	; (80004f0 <HAL_InitTick+0xa4>)
 80004aa:	4a12      	ldr	r2, [pc, #72]	; (80004f4 <HAL_InitTick+0xa8>)
 80004ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <HAL_InitTick+0xa4>)
 80004b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_InitTick+0xa4>)
 80004b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_InitTick+0xa4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <HAL_InitTick+0xa4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004c8:	4809      	ldr	r0, [pc, #36]	; (80004f0 <HAL_InitTick+0xa4>)
 80004ca:	f000 ffb1 	bl	8001430 <HAL_TIM_Base_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d104      	bne.n	80004de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004d4:	4806      	ldr	r0, [pc, #24]	; (80004f0 <HAL_InitTick+0xa4>)
 80004d6:	f001 f803 	bl	80014e0 <HAL_TIM_Base_Start_IT>
 80004da:	4603      	mov	r3, r0
 80004dc:	e000      	b.n	80004e0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004de:	2301      	movs	r3, #1
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3730      	adds	r7, #48	; 0x30
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000
 80004ec:	431bde83 	.word	0x431bde83
 80004f0:	200001f8 	.word	0x200001f8
 80004f4:	40012c00 	.word	0x40012c00

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000526:	2040      	movs	r0, #64	; 0x40
 8000528:	f000 fb40 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <TIM1_UP_IRQHandler+0x10>)
 8000536:	f001 f825 	bl	8001584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200001f8 	.word	0x200001f8

08000544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800054c:	4a14      	ldr	r2, [pc, #80]	; (80005a0 <_sbrk+0x5c>)
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <_sbrk+0x60>)
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <_sbrk+0x64>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <_sbrk+0x64>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <_sbrk+0x68>)
 8000564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	693a      	ldr	r2, [r7, #16]
 8000570:	429a      	cmp	r2, r3
 8000572:	d207      	bcs.n	8000584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000574:	f003 fad2 	bl	8003b1c <__errno>
 8000578:	4603      	mov	r3, r0
 800057a:	220c      	movs	r2, #12
 800057c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	e009      	b.n	8000598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <_sbrk+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <_sbrk+0x64>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4413      	add	r3, r2
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <_sbrk+0x64>)
 8000594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000596:	68fb      	ldr	r3, [r7, #12]
}
 8000598:	4618      	mov	r0, r3
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20005000 	.word	0x20005000
 80005a4:	00000400 	.word	0x00000400
 80005a8:	20000098 	.word	0x20000098
 80005ac:	20000298 	.word	0x20000298

080005b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005bc:	f7ff fff8 	bl	80005b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005c2:	490c      	ldr	r1, [pc, #48]	; (80005f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005c4:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005d8:	4c09      	ldr	r4, [pc, #36]	; (8000600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e6:	f003 fa9f 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff fde7 	bl	80001bc <main>
  bx lr
 80005ee:	4770      	bx	lr
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80005f8:	08003dac 	.word	0x08003dac
  ldr r2, =_sbss
 80005fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000600:	20000294 	.word	0x20000294

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>
	...

08000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_Init+0x28>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f8f5 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ff14 	bl	800044c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f7ff fee0 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_IncTick+0x1c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <HAL_IncTick+0x20>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a03      	ldr	r2, [pc, #12]	; (8000654 <HAL_IncTick+0x20>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	20000008 	.word	0x20000008
 8000654:	20000240 	.word	0x20000240

08000658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return uwTick;
 800065c:	4b02      	ldr	r3, [pc, #8]	; (8000668 <HAL_GetTick+0x10>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr
 8000668:	20000240 	.word	0x20000240

0800066c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000674:	f7ff fff0 	bl	8000658 <HAL_GetTick>
 8000678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000684:	d005      	beq.n	8000692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_Delay+0x44>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	461a      	mov	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000692:	bf00      	nop
 8000694:	f7ff ffe0 	bl	8000658 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d8f7      	bhi.n	8000694 <HAL_Delay+0x28>
  {
  }
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000008 	.word	0x20000008

080006b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006e6:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <__NVIC_SetPriorityGrouping+0x44>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <__NVIC_GetPriorityGrouping+0x18>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	f003 0307 	and.w	r3, r3, #7
}
 800070a:	4618      	mov	r0, r3
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	db0b      	blt.n	8000742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 021f 	and.w	r2, r3, #31
 8000730:	4906      	ldr	r1, [pc, #24]	; (800074c <__NVIC_EnableIRQ+0x34>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	095b      	lsrs	r3, r3, #5
 8000738:	2001      	movs	r0, #1
 800073a:	fa00 f202 	lsl.w	r2, r0, r2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	e000e100 	.word	0xe000e100

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	; (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff4f 	bl	80006b4 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff64 	bl	80006fc <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ffb2 	bl	80007a4 <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff81 	bl	8000750 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff57 	bl	8000718 <__NVIC_EnableIRQ>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	b480      	push	{r7}
 8000876:	b08b      	sub	sp, #44	; 0x2c
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000886:	e169      	b.n	8000b5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000888:	2201      	movs	r2, #1
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	f040 8158 	bne.w	8000b56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4a9a      	ldr	r2, [pc, #616]	; (8000b14 <HAL_GPIO_Init+0x2a0>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d05e      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008b0:	4a98      	ldr	r2, [pc, #608]	; (8000b14 <HAL_GPIO_Init+0x2a0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d875      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008b6:	4a98      	ldr	r2, [pc, #608]	; (8000b18 <HAL_GPIO_Init+0x2a4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d058      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008bc:	4a96      	ldr	r2, [pc, #600]	; (8000b18 <HAL_GPIO_Init+0x2a4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d86f      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008c2:	4a96      	ldr	r2, [pc, #600]	; (8000b1c <HAL_GPIO_Init+0x2a8>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d052      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008c8:	4a94      	ldr	r2, [pc, #592]	; (8000b1c <HAL_GPIO_Init+0x2a8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d869      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008ce:	4a94      	ldr	r2, [pc, #592]	; (8000b20 <HAL_GPIO_Init+0x2ac>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d04c      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008d4:	4a92      	ldr	r2, [pc, #584]	; (8000b20 <HAL_GPIO_Init+0x2ac>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d863      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008da:	4a92      	ldr	r2, [pc, #584]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d046      	beq.n	800096e <HAL_GPIO_Init+0xfa>
 80008e0:	4a90      	ldr	r2, [pc, #576]	; (8000b24 <HAL_GPIO_Init+0x2b0>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d85d      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008e6:	2b12      	cmp	r3, #18
 80008e8:	d82a      	bhi.n	8000940 <HAL_GPIO_Init+0xcc>
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d859      	bhi.n	80009a2 <HAL_GPIO_Init+0x12e>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <HAL_GPIO_Init+0x80>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	0800096f 	.word	0x0800096f
 80008f8:	08000949 	.word	0x08000949
 80008fc:	0800095b 	.word	0x0800095b
 8000900:	0800099d 	.word	0x0800099d
 8000904:	080009a3 	.word	0x080009a3
 8000908:	080009a3 	.word	0x080009a3
 800090c:	080009a3 	.word	0x080009a3
 8000910:	080009a3 	.word	0x080009a3
 8000914:	080009a3 	.word	0x080009a3
 8000918:	080009a3 	.word	0x080009a3
 800091c:	080009a3 	.word	0x080009a3
 8000920:	080009a3 	.word	0x080009a3
 8000924:	080009a3 	.word	0x080009a3
 8000928:	080009a3 	.word	0x080009a3
 800092c:	080009a3 	.word	0x080009a3
 8000930:	080009a3 	.word	0x080009a3
 8000934:	080009a3 	.word	0x080009a3
 8000938:	08000951 	.word	0x08000951
 800093c:	08000965 	.word	0x08000965
 8000940:	4a79      	ldr	r2, [pc, #484]	; (8000b28 <HAL_GPIO_Init+0x2b4>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d013      	beq.n	800096e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000946:	e02c      	b.n	80009a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e029      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	3304      	adds	r3, #4
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e024      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	3308      	adds	r3, #8
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e01f      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	330c      	adds	r3, #12
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e01a      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000976:	2304      	movs	r3, #4
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e013      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d105      	bne.n	8000990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000984:	2308      	movs	r3, #8
 8000986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	611a      	str	r2, [r3, #16]
          break;
 800098e:	e009      	b.n	80009a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000990:	2308      	movs	r3, #8
 8000992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	615a      	str	r2, [r3, #20]
          break;
 800099a:	e003      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e000      	b.n	80009a4 <HAL_GPIO_Init+0x130>
          break;
 80009a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	2bff      	cmp	r3, #255	; 0xff
 80009a8:	d801      	bhi.n	80009ae <HAL_GPIO_Init+0x13a>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	e001      	b.n	80009b2 <HAL_GPIO_Init+0x13e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3304      	adds	r3, #4
 80009b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d802      	bhi.n	80009c0 <HAL_GPIO_Init+0x14c>
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	e002      	b.n	80009c6 <HAL_GPIO_Init+0x152>
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	3b08      	subs	r3, #8
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	210f      	movs	r1, #15
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	401a      	ands	r2, r3
 80009d8:	6a39      	ldr	r1, [r7, #32]
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	fa01 f303 	lsl.w	r3, r1, r3
 80009e0:	431a      	orrs	r2, r3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 80b1 	beq.w	8000b56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009f4:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a4c      	ldr	r2, [pc, #304]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <HAL_GPIO_Init+0x2b8>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a0c:	4a48      	ldr	r2, [pc, #288]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	3302      	adds	r3, #2
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	220f      	movs	r2, #15
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a40      	ldr	r2, [pc, #256]	; (8000b34 <HAL_GPIO_Init+0x2c0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d013      	beq.n	8000a60 <HAL_GPIO_Init+0x1ec>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <HAL_GPIO_Init+0x2c4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d00d      	beq.n	8000a5c <HAL_GPIO_Init+0x1e8>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a3e      	ldr	r2, [pc, #248]	; (8000b3c <HAL_GPIO_Init+0x2c8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d007      	beq.n	8000a58 <HAL_GPIO_Init+0x1e4>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <HAL_GPIO_Init+0x2cc>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d101      	bne.n	8000a54 <HAL_GPIO_Init+0x1e0>
 8000a50:	2303      	movs	r3, #3
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a54:	2304      	movs	r3, #4
 8000a56:	e004      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <HAL_GPIO_Init+0x1ee>
 8000a60:	2300      	movs	r3, #0
 8000a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a64:	f002 0203 	and.w	r2, r2, #3
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	4093      	lsls	r3, r2
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a72:	492f      	ldr	r1, [pc, #188]	; (8000b30 <HAL_GPIO_Init+0x2bc>)
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3302      	adds	r3, #2
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	492c      	ldr	r1, [pc, #176]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	608b      	str	r3, [r1, #8]
 8000a98:	e006      	b.n	8000aa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	4928      	ldr	r1, [pc, #160]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d006      	beq.n	8000ac2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ab6:	68da      	ldr	r2, [r3, #12]
 8000ab8:	4922      	ldr	r1, [pc, #136]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60cb      	str	r3, [r1, #12]
 8000ac0:	e006      	b.n	8000ad0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	491e      	ldr	r1, [pc, #120]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d006      	beq.n	8000aea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	4918      	ldr	r1, [pc, #96]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	604b      	str	r3, [r1, #4]
 8000ae8:	e006      	b.n	8000af8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000aec:	685a      	ldr	r2, [r3, #4]
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	4914      	ldr	r1, [pc, #80]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000af4:	4013      	ands	r3, r2
 8000af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d021      	beq.n	8000b48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	490e      	ldr	r1, [pc, #56]	; (8000b44 <HAL_GPIO_Init+0x2d0>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	600b      	str	r3, [r1, #0]
 8000b10:	e021      	b.n	8000b56 <HAL_GPIO_Init+0x2e2>
 8000b12:	bf00      	nop
 8000b14:	10320000 	.word	0x10320000
 8000b18:	10310000 	.word	0x10310000
 8000b1c:	10220000 	.word	0x10220000
 8000b20:	10210000 	.word	0x10210000
 8000b24:	10120000 	.word	0x10120000
 8000b28:	10110000 	.word	0x10110000
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	40010800 	.word	0x40010800
 8000b38:	40010c00 	.word	0x40010c00
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40011400 	.word	0x40011400
 8000b44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_GPIO_Init+0x304>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4909      	ldr	r1, [pc, #36]	; (8000b78 <HAL_GPIO_Init+0x304>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	3301      	adds	r3, #1
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b62:	fa22 f303 	lsr.w	r3, r2, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f47f ae8e 	bne.w	8000888 <HAL_GPIO_Init+0x14>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	372c      	adds	r7, #44	; 0x2c
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	40010400 	.word	0x40010400

08000b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b98:	e003      	b.n	8000ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	611a      	str	r2, [r3, #16]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d006      	beq.n	8000bd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fbdc 	bl	8000388 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e26c      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8087 	beq.w	8000d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bfc:	4b92      	ldr	r3, [pc, #584]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d00c      	beq.n	8000c22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c08:	4b8f      	ldr	r3, [pc, #572]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 030c 	and.w	r3, r3, #12
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d112      	bne.n	8000c3a <HAL_RCC_OscConfig+0x5e>
 8000c14:	4b8c      	ldr	r3, [pc, #560]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c20:	d10b      	bne.n	8000c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c22:	4b89      	ldr	r3, [pc, #548]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d06c      	beq.n	8000d08 <HAL_RCC_OscConfig+0x12c>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d168      	bne.n	8000d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e246      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c42:	d106      	bne.n	8000c52 <HAL_RCC_OscConfig+0x76>
 8000c44:	4b80      	ldr	r3, [pc, #512]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a7f      	ldr	r2, [pc, #508]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	e02e      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x98>
 8000c5a:	4b7b      	ldr	r3, [pc, #492]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a7a      	ldr	r2, [pc, #488]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b78      	ldr	r3, [pc, #480]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a77      	ldr	r2, [pc, #476]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e01d      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c7c:	d10c      	bne.n	8000c98 <HAL_RCC_OscConfig+0xbc>
 8000c7e:	4b72      	ldr	r3, [pc, #456]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a71      	ldr	r2, [pc, #452]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	4b6f      	ldr	r3, [pc, #444]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a6e      	ldr	r2, [pc, #440]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e00b      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
 8000c98:	4b6b      	ldr	r3, [pc, #428]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a6a      	ldr	r2, [pc, #424]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b68      	ldr	r3, [pc, #416]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a67      	ldr	r2, [pc, #412]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d013      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fcce 	bl	8000658 <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fcca 	bl	8000658 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b64      	cmp	r3, #100	; 0x64
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e1fa      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f0      	beq.n	8000cc0 <HAL_RCC_OscConfig+0xe4>
 8000cde:	e014      	b.n	8000d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fcba 	bl	8000658 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce8:	f7ff fcb6 	bl	8000658 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b64      	cmp	r3, #100	; 0x64
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e1e6      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x10c>
 8000d06:	e000      	b.n	8000d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d063      	beq.n	8000dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d16:	4b4c      	ldr	r3, [pc, #304]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d22:	4b49      	ldr	r3, [pc, #292]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	2b08      	cmp	r3, #8
 8000d2c:	d11c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x18c>
 8000d2e:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d116      	bne.n	8000d68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3a:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d005      	beq.n	8000d52 <HAL_RCC_OscConfig+0x176>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d001      	beq.n	8000d52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e1ba      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d52:	4b3d      	ldr	r3, [pc, #244]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	4939      	ldr	r1, [pc, #228]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	e03a      	b.n	8000dde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d020      	beq.n	8000db2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d70:	4b36      	ldr	r3, [pc, #216]	; (8000e4c <HAL_RCC_OscConfig+0x270>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d76:	f7ff fc6f 	bl	8000658 <HAL_GetTick>
 8000d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7c:	e008      	b.n	8000d90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7e:	f7ff fc6b 	bl	8000658 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d901      	bls.n	8000d90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e19b      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f0      	beq.n	8000d7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4927      	ldr	r1, [pc, #156]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	4313      	orrs	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
 8000db0:	e015      	b.n	8000dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <HAL_RCC_OscConfig+0x270>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fc4e 	bl	8000658 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fc4a 	bl	8000658 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e17a      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f0      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d03a      	beq.n	8000e60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d019      	beq.n	8000e26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df8:	f7ff fc2e 	bl	8000658 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e00:	f7ff fc2a 	bl	8000658 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e15a      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e12:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 fae8 	bl	80013f4 <RCC_Delay>
 8000e24:	e01c      	b.n	8000e60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2c:	f7ff fc14 	bl	8000658 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e32:	e00f      	b.n	8000e54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e34:	f7ff fc10 	bl	8000658 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d908      	bls.n	8000e54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e140      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	42420000 	.word	0x42420000
 8000e50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e54:	4b9e      	ldr	r3, [pc, #632]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1e9      	bne.n	8000e34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80a6 	beq.w	8000fba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e72:	4b97      	ldr	r3, [pc, #604]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10d      	bne.n	8000e9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b94      	ldr	r3, [pc, #592]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a93      	ldr	r2, [pc, #588]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b91      	ldr	r3, [pc, #580]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e96:	2301      	movs	r3, #1
 8000e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9a:	4b8e      	ldr	r3, [pc, #568]	; (80010d4 <HAL_RCC_OscConfig+0x4f8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d118      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ea6:	4b8b      	ldr	r3, [pc, #556]	; (80010d4 <HAL_RCC_OscConfig+0x4f8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a8a      	ldr	r2, [pc, #552]	; (80010d4 <HAL_RCC_OscConfig+0x4f8>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb2:	f7ff fbd1 	bl	8000658 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eba:	f7ff fbcd 	bl	8000658 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b64      	cmp	r3, #100	; 0x64
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e0fd      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ecc:	4b81      	ldr	r3, [pc, #516]	; (80010d4 <HAL_RCC_OscConfig+0x4f8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x312>
 8000ee0:	4b7b      	ldr	r3, [pc, #492]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a7a      	ldr	r2, [pc, #488]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6213      	str	r3, [r2, #32]
 8000eec:	e02d      	b.n	8000f4a <HAL_RCC_OscConfig+0x36e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x334>
 8000ef6:	4b76      	ldr	r3, [pc, #472]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a75      	ldr	r2, [pc, #468]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	6213      	str	r3, [r2, #32]
 8000f02:	4b73      	ldr	r3, [pc, #460]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a72      	ldr	r2, [pc, #456]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	f023 0304 	bic.w	r3, r3, #4
 8000f0c:	6213      	str	r3, [r2, #32]
 8000f0e:	e01c      	b.n	8000f4a <HAL_RCC_OscConfig+0x36e>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d10c      	bne.n	8000f32 <HAL_RCC_OscConfig+0x356>
 8000f18:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a6c      	ldr	r2, [pc, #432]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	4b6a      	ldr	r3, [pc, #424]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	4a69      	ldr	r2, [pc, #420]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6213      	str	r3, [r2, #32]
 8000f30:	e00b      	b.n	8000f4a <HAL_RCC_OscConfig+0x36e>
 8000f32:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	4a66      	ldr	r2, [pc, #408]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6213      	str	r3, [r2, #32]
 8000f3e:	4b64      	ldr	r3, [pc, #400]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	4a63      	ldr	r2, [pc, #396]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f44:	f023 0304 	bic.w	r3, r3, #4
 8000f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d015      	beq.n	8000f7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f52:	f7ff fb81 	bl	8000658 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f58:	e00a      	b.n	8000f70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5a:	f7ff fb7d 	bl	8000658 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e0ab      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f70:	4b57      	ldr	r3, [pc, #348]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0ee      	beq.n	8000f5a <HAL_RCC_OscConfig+0x37e>
 8000f7c:	e014      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fb6b 	bl	8000658 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f86:	f7ff fb67 	bl	8000658 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e095      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ee      	bne.n	8000f86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d105      	bne.n	8000fba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fae:	4b48      	ldr	r3, [pc, #288]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a47      	ldr	r2, [pc, #284]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8081 	beq.w	80010c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc4:	4b42      	ldr	r3, [pc, #264]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d061      	beq.n	8001094 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d146      	bne.n	8001066 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd8:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <HAL_RCC_OscConfig+0x4fc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fb3b 	bl	8000658 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fb37 	bl	8000658 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e067      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff8:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f0      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100c:	d108      	bne.n	8001020 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	492d      	ldr	r1, [pc, #180]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a19      	ldr	r1, [r3, #32]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	430b      	orrs	r3, r1
 8001032:	4927      	ldr	r1, [pc, #156]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_RCC_OscConfig+0x4fc>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff fb0b 	bl	8000658 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001046:	f7ff fb07 	bl	8000658 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e037      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x46a>
 8001064:	e02f      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <HAL_RCC_OscConfig+0x4fc>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff faf4 	bl	8000658 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001074:	f7ff faf0 	bl	8000658 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e020      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x498>
 8001092:	e018      	b.n	80010c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e013      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d106      	bne.n	80010c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010be:	429a      	cmp	r2, r3
 80010c0:	d001      	beq.n	80010c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40007000 	.word	0x40007000
 80010d8:	42420060 	.word	0x42420060

080010dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e0d0      	b.n	8001292 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f0:	4b6a      	ldr	r3, [pc, #424]	; (800129c <HAL_RCC_ClockConfig+0x1c0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d910      	bls.n	8001120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fe:	4b67      	ldr	r3, [pc, #412]	; (800129c <HAL_RCC_ClockConfig+0x1c0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f023 0207 	bic.w	r2, r3, #7
 8001106:	4965      	ldr	r1, [pc, #404]	; (800129c <HAL_RCC_ClockConfig+0x1c0>)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800110e:	4b63      	ldr	r3, [pc, #396]	; (800129c <HAL_RCC_ClockConfig+0x1c0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d001      	beq.n	8001120 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0b8      	b.n	8001292 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d020      	beq.n	800116e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a58      	ldr	r2, [pc, #352]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001142:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0308 	and.w	r3, r3, #8
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001150:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4a52      	ldr	r2, [pc, #328]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800115a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800115c:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	494d      	ldr	r1, [pc, #308]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	4313      	orrs	r3, r2
 800116c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d040      	beq.n	80011fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d107      	bne.n	8001192 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d115      	bne.n	80011ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e07f      	b.n	8001292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d107      	bne.n	80011aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d109      	bne.n	80011ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e073      	b.n	8001292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e06b      	b.n	8001292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f023 0203 	bic.w	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4936      	ldr	r1, [pc, #216]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011cc:	f7ff fa44 	bl	8000658 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d4:	f7ff fa40 	bl	8000658 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e053      	b.n	8001292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 020c 	and.w	r2, r3, #12
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d1eb      	bne.n	80011d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <HAL_RCC_ClockConfig+0x1c0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d210      	bcs.n	800122c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120a:	4b24      	ldr	r3, [pc, #144]	; (800129c <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 0207 	bic.w	r2, r3, #7
 8001212:	4922      	ldr	r1, [pc, #136]	; (800129c <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e032      	b.n	8001292 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d008      	beq.n	800124a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	4916      	ldr	r1, [pc, #88]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d009      	beq.n	800126a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	490e      	ldr	r1, [pc, #56]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800126a:	f000 f821 	bl	80012b0 <HAL_RCC_GetSysClockFreq>
 800126e:	4602      	mov	r2, r0
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	490a      	ldr	r1, [pc, #40]	; (80012a4 <HAL_RCC_ClockConfig+0x1c8>)
 800127c:	5ccb      	ldrb	r3, [r1, r3]
 800127e:	fa22 f303 	lsr.w	r3, r2, r3
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_RCC_ClockConfig+0x1d0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f8de 	bl	800044c <HAL_InitTick>

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40022000 	.word	0x40022000
 80012a0:	40021000 	.word	0x40021000
 80012a4:	08003d78 	.word	0x08003d78
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000004 	.word	0x20000004

080012b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_RCC_GetSysClockFreq+0x94>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b04      	cmp	r3, #4
 80012d8:	d002      	beq.n	80012e0 <HAL_RCC_GetSysClockFreq+0x30>
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d003      	beq.n	80012e6 <HAL_RCC_GetSysClockFreq+0x36>
 80012de:	e027      	b.n	8001330 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_RCC_GetSysClockFreq+0x98>)
 80012e2:	613b      	str	r3, [r7, #16]
      break;
 80012e4:	e027      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	0c9b      	lsrs	r3, r3, #18
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_RCC_GetSysClockFreq+0x9c>)
 80012f0:	5cd3      	ldrb	r3, [r2, r3]
 80012f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d010      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_RCC_GetSysClockFreq+0x94>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	0c5b      	lsrs	r3, r3, #17
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <HAL_RCC_GetSysClockFreq+0xa0>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_RCC_GetSysClockFreq+0x98>)
 8001312:	fb02 f203 	mul.w	r2, r2, r3
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e004      	b.n	800132a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	613b      	str	r3, [r7, #16]
      break;
 800132e:	e002      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_RCC_GetSysClockFreq+0x98>)
 8001332:	613b      	str	r3, [r7, #16]
      break;
 8001334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001336:	693b      	ldr	r3, [r7, #16]
}
 8001338:	4618      	mov	r0, r3
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	007a1200 	.word	0x007a1200
 800134c:	08003d90 	.word	0x08003d90
 8001350:	08003da0 	.word	0x08003da0
 8001354:	003d0900 	.word	0x003d0900

08001358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_RCC_GetHCLKFreq+0x10>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000000 	.word	0x20000000

0800136c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001370:	f7ff fff2 	bl	8001358 <HAL_RCC_GetHCLKFreq>
 8001374:	4602      	mov	r2, r0
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	0adb      	lsrs	r3, r3, #11
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	4903      	ldr	r1, [pc, #12]	; (8001390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	08003d88 	.word	0x08003d88

08001394 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	220f      	movs	r2, #15
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_RCC_GetClockConfig+0x58>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_RCC_GetClockConfig+0x58>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_GetClockConfig+0x58>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_RCC_GetClockConfig+0x58>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0207 	and.w	r2, r3, #7
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40022000 	.word	0x40022000

080013f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <RCC_Delay+0x34>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <RCC_Delay+0x38>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0a5b      	lsrs	r3, r3, #9
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001410:	bf00      	nop
  }
  while (Delay --);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1e5a      	subs	r2, r3, #1
 8001416:	60fa      	str	r2, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f9      	bne.n	8001410 <RCC_Delay+0x1c>
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	20000000 	.word	0x20000000
 800142c:	10624dd3 	.word	0x10624dd3

08001430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e041      	b.n	80014c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f839 	bl	80014ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3304      	adds	r3, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f000 f9b4 	bl	80017dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d001      	beq.n	80014f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e03a      	b.n	800156e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a18      	ldr	r2, [pc, #96]	; (8001578 <HAL_TIM_Base_Start_IT+0x98>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00e      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x58>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001522:	d009      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x58>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_TIM_Base_Start_IT+0x9c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d004      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x58>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_TIM_Base_Start_IT+0xa0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d111      	bne.n	800155c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b06      	cmp	r3, #6
 8001548:	d010      	beq.n	800156c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800155a:	e007      	b.n	800156c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40012c00 	.word	0x40012c00
 800157c:	40000400 	.word	0x40000400
 8001580:	40000800 	.word	0x40000800

08001584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b02      	cmp	r3, #2
 8001598:	d122      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d11b      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0202 	mvn.w	r2, #2
 80015b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f8ed 	bl	80017a6 <HAL_TIM_IC_CaptureCallback>
 80015cc:	e005      	b.n	80015da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8e0 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f8ef 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d122      	bne.n	8001634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d11b      	bne.n	8001634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0204 	mvn.w	r2, #4
 8001604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f8c3 	bl	80017a6 <HAL_TIM_IC_CaptureCallback>
 8001620:	e005      	b.n	800162e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f8b6 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f8c5 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b08      	cmp	r3, #8
 8001640:	d122      	bne.n	8001688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b08      	cmp	r3, #8
 800164e:	d11b      	bne.n	8001688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0208 	mvn.w	r2, #8
 8001658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f899 	bl	80017a6 <HAL_TIM_IC_CaptureCallback>
 8001674:	e005      	b.n	8001682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f88c 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f89b 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b10      	cmp	r3, #16
 8001694:	d122      	bne.n	80016dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d11b      	bne.n	80016dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0210 	mvn.w	r2, #16
 80016ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2208      	movs	r2, #8
 80016b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f86f 	bl	80017a6 <HAL_TIM_IC_CaptureCallback>
 80016c8:	e005      	b.n	80016d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f862 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f871 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10e      	bne.n	8001708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0201 	mvn.w	r2, #1
 8001700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7fe fe58 	bl	80003b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	2b80      	cmp	r3, #128	; 0x80
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001720:	2b80      	cmp	r3, #128	; 0x80
 8001722:	d107      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800172c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f8bf 	bl	80018b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173e:	2b40      	cmp	r3, #64	; 0x40
 8001740:	d10e      	bne.n	8001760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174c:	2b40      	cmp	r3, #64	; 0x40
 800174e:	d107      	bne.n	8001760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f835 	bl	80017ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b20      	cmp	r3, #32
 800176c:	d10e      	bne.n	800178c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b20      	cmp	r3, #32
 800177a:	d107      	bne.n	800178c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0220 	mvn.w	r2, #32
 8001784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f88a 	bl	80018a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a29      	ldr	r2, [pc, #164]	; (8001894 <TIM_Base_SetConfig+0xb8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d00b      	beq.n	800180c <TIM_Base_SetConfig+0x30>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017fa:	d007      	beq.n	800180c <TIM_Base_SetConfig+0x30>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a26      	ldr	r2, [pc, #152]	; (8001898 <TIM_Base_SetConfig+0xbc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d003      	beq.n	800180c <TIM_Base_SetConfig+0x30>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <TIM_Base_SetConfig+0xc0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d108      	bne.n	800181e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <TIM_Base_SetConfig+0xb8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00b      	beq.n	800183e <TIM_Base_SetConfig+0x62>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182c:	d007      	beq.n	800183e <TIM_Base_SetConfig+0x62>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <TIM_Base_SetConfig+0xbc>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d003      	beq.n	800183e <TIM_Base_SetConfig+0x62>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a18      	ldr	r2, [pc, #96]	; (800189c <TIM_Base_SetConfig+0xc0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d108      	bne.n	8001850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <TIM_Base_SetConfig+0xb8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d103      	bne.n	8001884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	615a      	str	r2, [r3, #20]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40012c00 	.word	0x40012c00
 8001898:	40000400 	.word	0x40000400
 800189c:	40000800 	.word	0x40000800

080018a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <xTaskCreate>:
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af04      	add	r7, sp, #16
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 fae8 	bl	8002eac <pvPortMalloc>
 80018dc:	6178      	str	r0, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d013      	beq.n	800190c <xTaskCreate+0x48>
 80018e4:	207c      	movs	r0, #124	; 0x7c
 80018e6:	f001 fae1 	bl	8002eac <pvPortMalloc>
 80018ea:	61f8      	str	r0, [r7, #28]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <xTaskCreate+0x40>
 80018f2:	227c      	movs	r2, #124	; 0x7c
 80018f4:	2100      	movs	r1, #0
 80018f6:	69f8      	ldr	r0, [r7, #28]
 80018f8:	f002 f958 	bl	8003bac <memset>
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
 8001902:	e005      	b.n	8001910 <xTaskCreate+0x4c>
 8001904:	6978      	ldr	r0, [r7, #20]
 8001906:	f001 fae3 	bl	8002ed0 <vPortFree>
 800190a:	e001      	b.n	8001910 <xTaskCreate+0x4c>
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d013      	beq.n	800193e <xTaskCreate+0x7a>
 8001916:	2300      	movs	r3, #0
 8001918:	9303      	str	r3, [sp, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	9302      	str	r3, [sp, #8]
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 f80e 	bl	800194e <prvInitialiseNewTask>
 8001932:	69f8      	ldr	r0, [r7, #28]
 8001934:	f000 f89a 	bl	8001a6c <prvAddNewTaskToReadyList>
 8001938:	2301      	movs	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	e002      	b.n	8001944 <xTaskCreate+0x80>
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	4618      	mov	r0, r3
 8001948:	3720      	adds	r7, #32
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <prvInitialiseNewTask>:
 800194e:	b580      	push	{r7, lr}
 8001950:	b088      	sub	sp, #32
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	461a      	mov	r2, r3
 8001966:	21a5      	movs	r1, #165	; 0xa5
 8001968:	f002 f920 	bl	8003bac <memset>
 800196c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001976:	3b01      	subs	r3, #1
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f023 0307 	bic.w	r3, r3, #7
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00a      	beq.n	80019a6 <prvInitialiseNewTask+0x58>
 8001990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001994:	f383 8811 	msr	BASEPRI, r3
 8001998:	f3bf 8f6f 	isb	sy
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	bf00      	nop
 80019a4:	e7fe      	b.n	80019a4 <prvInitialiseNewTask+0x56>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01e      	beq.n	80019ea <prvInitialiseNewTask+0x9c>
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	e012      	b.n	80019d8 <prvInitialiseNewTask+0x8a>
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	4413      	add	r3, r2
 80019b8:	7819      	ldrb	r1, [r3, #0]
 80019ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	3334      	adds	r3, #52	; 0x34
 80019c2:	460a      	mov	r2, r1
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d006      	beq.n	80019e0 <prvInitialiseNewTask+0x92>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	2b13      	cmp	r3, #19
 80019dc:	d9e9      	bls.n	80019b2 <prvInitialiseNewTask+0x64>
 80019de:	e000      	b.n	80019e2 <prvInitialiseNewTask+0x94>
 80019e0:	bf00      	nop
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d90a      	bls.n	8001a06 <prvInitialiseNewTask+0xb8>
 80019f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f4:	f383 8811 	msr	BASEPRI, r3
 80019f8:	f3bf 8f6f 	isb	sy
 80019fc:	f3bf 8f4f 	dsb	sy
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	bf00      	nop
 8001a04:	e7fe      	b.n	8001a04 <prvInitialiseNewTask+0xb6>
 8001a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d901      	bls.n	8001a10 <prvInitialiseNewTask+0xc2>
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a1a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 fa86 	bl	8002f32 <vListInitialiseItem>
 8001a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a28:	3318      	adds	r3, #24
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fa81 	bl	8002f32 <vListInitialiseItem>
 8001a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a38:	f1c3 0205 	rsb	r2, r3, #5
 8001a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3e:	619a      	str	r2, [r3, #24]
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	69b8      	ldr	r0, [r7, #24]
 8001a4c:	f001 fade 	bl	800300c <pxPortInitialiseStack>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <prvInitialiseNewTask+0x114>
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	bf00      	nop
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <prvAddNewTaskToReadyList>:
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	f001 fbbc 	bl	80031f0 <vPortEnterCritical>
 8001a78:	4b41      	ldr	r3, [pc, #260]	; (8001b80 <prvAddNewTaskToReadyList+0x114>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	4a40      	ldr	r2, [pc, #256]	; (8001b80 <prvAddNewTaskToReadyList+0x114>)
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <prvAddNewTaskToReadyList+0x118>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <prvAddNewTaskToReadyList+0x32>
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	; (8001b84 <prvAddNewTaskToReadyList+0x118>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <prvAddNewTaskToReadyList+0x114>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d110      	bne.n	8001aba <prvAddNewTaskToReadyList+0x4e>
 8001a98:	f000 fe62 	bl	8002760 <prvInitialiseTaskLists>
 8001a9c:	e00d      	b.n	8001aba <prvAddNewTaskToReadyList+0x4e>
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <prvAddNewTaskToReadyList+0x11c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <prvAddNewTaskToReadyList+0x4e>
 8001aa6:	4b37      	ldr	r3, [pc, #220]	; (8001b84 <prvAddNewTaskToReadyList+0x118>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d802      	bhi.n	8001aba <prvAddNewTaskToReadyList+0x4e>
 8001ab4:	4a33      	ldr	r2, [pc, #204]	; (8001b84 <prvAddNewTaskToReadyList+0x118>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <prvAddNewTaskToReadyList+0x120>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <prvAddNewTaskToReadyList+0x120>)
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <prvAddNewTaskToReadyList+0x120>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	649a      	str	r2, [r3, #72]	; 0x48
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <prvAddNewTaskToReadyList+0x124>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d903      	bls.n	8001ae0 <prvAddNewTaskToReadyList+0x74>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	4a2c      	ldr	r2, [pc, #176]	; (8001b90 <prvAddNewTaskToReadyList+0x124>)
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae4:	492b      	ldr	r1, [pc, #172]	; (8001b94 <prvAddNewTaskToReadyList+0x128>)
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3304      	adds	r3, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	3204      	adds	r2, #4
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	1d1a      	adds	r2, r3, #4
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <prvAddNewTaskToReadyList+0x128>)
 8001b24:	441a      	add	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2e:	4919      	ldr	r1, [pc, #100]	; (8001b94 <prvAddNewTaskToReadyList+0x128>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	1c59      	adds	r1, r3, #1
 8001b3e:	4815      	ldr	r0, [pc, #84]	; (8001b94 <prvAddNewTaskToReadyList+0x128>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4403      	add	r3, r0
 8001b4a:	6019      	str	r1, [r3, #0]
 8001b4c:	f001 fb80 	bl	8003250 <vPortExitCritical>
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <prvAddNewTaskToReadyList+0x11c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <prvAddNewTaskToReadyList+0x10a>
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <prvAddNewTaskToReadyList+0x118>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d207      	bcs.n	8001b76 <prvAddNewTaskToReadyList+0x10a>
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <prvAddNewTaskToReadyList+0x12c>)
 8001b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	f3bf 8f4f 	dsb	sy
 8001b72:	f3bf 8f6f 	isb	sy
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000174 	.word	0x20000174
 8001b84:	2000009c 	.word	0x2000009c
 8001b88:	20000180 	.word	0x20000180
 8001b8c:	20000190 	.word	0x20000190
 8001b90:	2000017c 	.word	0x2000017c
 8001b94:	200000a0 	.word	0x200000a0
 8001b98:	e000ed04 	.word	0xe000ed04

08001b9c <vTaskDelay>:
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d017      	beq.n	8001bde <vTaskDelay+0x42>
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <vTaskDelay+0x60>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <vTaskDelay+0x30>
 8001bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bba:	f383 8811 	msr	BASEPRI, r3
 8001bbe:	f3bf 8f6f 	isb	sy
 8001bc2:	f3bf 8f4f 	dsb	sy
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	bf00      	nop
 8001bca:	e7fe      	b.n	8001bca <vTaskDelay+0x2e>
 8001bcc:	f000 f86c 	bl	8001ca8 <vTaskSuspendAll>
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fe7a 	bl	80028cc <prvAddCurrentTaskToDelayedList>
 8001bd8:	f000 f8aa 	bl	8001d30 <xTaskResumeAll>
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <vTaskDelay+0x58>
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <vTaskDelay+0x64>)
 8001be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	f3bf 8f6f 	isb	sy
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000019c 	.word	0x2000019c
 8001c00:	e000ed04 	.word	0xe000ed04

08001c04 <vTaskStartScheduler>:
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <vTaskStartScheduler+0x88>)
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	491e      	ldr	r1, [pc, #120]	; (8001c90 <vTaskStartScheduler+0x8c>)
 8001c18:	481e      	ldr	r0, [pc, #120]	; (8001c94 <vTaskStartScheduler+0x90>)
 8001c1a:	f7ff fe53 	bl	80018c4 <xTaskCreate>
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <vTaskStartScheduler+0x28>
 8001c26:	f000 febf 	bl	80029a8 <xTimerCreateTimerTask>
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d116      	bne.n	8001c60 <vTaskStartScheduler+0x5c>
 8001c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	bf00      	nop
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <vTaskStartScheduler+0x94>)
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <vTaskStartScheduler+0x98>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <vTaskStartScheduler+0x9c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f001 fa57 	bl	800310c <xPortStartScheduler>
 8001c5e:	e00e      	b.n	8001c7e <vTaskStartScheduler+0x7a>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c66:	d10a      	bne.n	8001c7e <vTaskStartScheduler+0x7a>
 8001c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	bf00      	nop
 8001c7c:	e7fe      	b.n	8001c7c <vTaskStartScheduler+0x78>
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <vTaskStartScheduler+0xa0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000198 	.word	0x20000198
 8001c90:	08003d60 	.word	0x08003d60
 8001c94:	08002675 	.word	0x08002675
 8001c98:	20000194 	.word	0x20000194
 8001c9c:	20000180 	.word	0x20000180
 8001ca0:	20000178 	.word	0x20000178
 8001ca4:	2000000c 	.word	0x2000000c

08001ca8 <vTaskSuspendAll>:
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <vTaskSuspendAll+0x18>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a03      	ldr	r2, [pc, #12]	; (8001cc0 <vTaskSuspendAll+0x18>)
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	2000019c 	.word	0x2000019c

08001cc4 <prvGetExpectedIdleTime>:
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	2300      	movs	r3, #0
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <prvGetExpectedIdleTime+0x58>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <prvGetExpectedIdleTime+0x16>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <prvGetExpectedIdleTime+0x5c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <prvGetExpectedIdleTime+0x26>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	e012      	b.n	8001d10 <prvGetExpectedIdleTime+0x4c>
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <prvGetExpectedIdleTime+0x60>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d902      	bls.n	8001cf8 <prvGetExpectedIdleTime+0x34>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	e00b      	b.n	8001d10 <prvGetExpectedIdleTime+0x4c>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <prvGetExpectedIdleTime+0x40>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	e005      	b.n	8001d10 <prvGetExpectedIdleTime+0x4c>
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <prvGetExpectedIdleTime+0x64>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <prvGetExpectedIdleTime+0x68>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	2000017c 	.word	0x2000017c
 8001d20:	2000009c 	.word	0x2000009c
 8001d24:	200000a0 	.word	0x200000a0
 8001d28:	20000194 	.word	0x20000194
 8001d2c:	20000178 	.word	0x20000178

08001d30 <xTaskResumeAll>:
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <xTaskResumeAll+0x1d4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <xTaskResumeAll+0x2c>
 8001d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4a:	f383 8811 	msr	BASEPRI, r3
 8001d4e:	f3bf 8f6f 	isb	sy
 8001d52:	f3bf 8f4f 	dsb	sy
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	bf00      	nop
 8001d5a:	e7fe      	b.n	8001d5a <xTaskResumeAll+0x2a>
 8001d5c:	f001 fa48 	bl	80031f0 <vPortEnterCritical>
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <xTaskResumeAll+0x1d4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <xTaskResumeAll+0x1d4>)
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <xTaskResumeAll+0x1d4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 80c1 	bne.w	8001ef6 <xTaskResumeAll+0x1c6>
 8001d74:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <xTaskResumeAll+0x1d8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80bc 	beq.w	8001ef6 <xTaskResumeAll+0x1c6>
 8001d7e:	e08b      	b.n	8001e98 <xTaskResumeAll+0x168>
 8001d80:	4b62      	ldr	r3, [pc, #392]	; (8001f0c <xTaskResumeAll+0x1dc>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	6a12      	ldr	r2, [r2, #32]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	69d2      	ldr	r2, [r2, #28]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3318      	adds	r3, #24
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d103      	bne.n	8001db6 <xTaskResumeAll+0x86>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	6a1a      	ldr	r2, [r3, #32]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	2200      	movs	r2, #0
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	1e5a      	subs	r2, r3, #1
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	68d2      	ldr	r2, [r2, #12]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	6892      	ldr	r2, [r2, #8]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	3304      	adds	r3, #4
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d103      	bne.n	8001df4 <xTaskResumeAll+0xc4>
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	4b41      	ldr	r3, [pc, #260]	; (8001f10 <xTaskResumeAll+0x1e0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d903      	bls.n	8001e18 <xTaskResumeAll+0xe8>
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	4a3e      	ldr	r2, [pc, #248]	; (8001f10 <xTaskResumeAll+0x1e0>)
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1c:	493d      	ldr	r1, [pc, #244]	; (8001f14 <xTaskResumeAll+0x1e4>)
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	3304      	adds	r3, #4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	3204      	adds	r2, #4
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	1d1a      	adds	r2, r3, #4
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4a2e      	ldr	r2, [pc, #184]	; (8001f14 <xTaskResumeAll+0x1e4>)
 8001e5c:	441a      	add	r2, r3
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	615a      	str	r2, [r3, #20]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e66:	492b      	ldr	r1, [pc, #172]	; (8001f14 <xTaskResumeAll+0x1e4>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1c59      	adds	r1, r3, #1
 8001e76:	4827      	ldr	r0, [pc, #156]	; (8001f14 <xTaskResumeAll+0x1e4>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4403      	add	r3, r0
 8001e82:	6019      	str	r1, [r3, #0]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <xTaskResumeAll+0x1e8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d302      	bcc.n	8001e98 <xTaskResumeAll+0x168>
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <xTaskResumeAll+0x1ec>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <xTaskResumeAll+0x1dc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f47f af6f 	bne.w	8001d80 <xTaskResumeAll+0x50>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <xTaskResumeAll+0x17c>
 8001ea8:	f000 fcd8 	bl	800285c <prvResetNextTaskUnblockTime>
 8001eac:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <xTaskResumeAll+0x1f0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d010      	beq.n	8001eda <xTaskResumeAll+0x1aa>
 8001eb8:	f000 f89e 	bl	8001ff8 <xTaskIncrementTick>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <xTaskResumeAll+0x198>
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <xTaskResumeAll+0x1ec>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f1      	bne.n	8001eb8 <xTaskResumeAll+0x188>
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <xTaskResumeAll+0x1f0>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <xTaskResumeAll+0x1ec>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d009      	beq.n	8001ef6 <xTaskResumeAll+0x1c6>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <xTaskResumeAll+0x1f4>)
 8001ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	f3bf 8f6f 	isb	sy
 8001ef6:	f001 f9ab 	bl	8003250 <vPortExitCritical>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4618      	mov	r0, r3
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2000019c 	.word	0x2000019c
 8001f08:	20000174 	.word	0x20000174
 8001f0c:	20000134 	.word	0x20000134
 8001f10:	2000017c 	.word	0x2000017c
 8001f14:	200000a0 	.word	0x200000a0
 8001f18:	2000009c 	.word	0x2000009c
 8001f1c:	20000188 	.word	0x20000188
 8001f20:	20000184 	.word	0x20000184
 8001f24:	e000ed04 	.word	0xe000ed04

08001f28 <xTaskGetTickCount>:
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <xTaskGetTickCount+0x18>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr
 8001f40:	20000178 	.word	0x20000178

08001f44 <vTaskStepTick>:
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <vTaskStepTick+0xa4>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	441a      	add	r2, r3
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <vTaskStepTick+0xa8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d90a      	bls.n	8001f72 <vTaskStepTick+0x2e>
 8001f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f60:	f383 8811 	msr	BASEPRI, r3
 8001f64:	f3bf 8f6f 	isb	sy
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	bf00      	nop
 8001f70:	e7fe      	b.n	8001f70 <vTaskStepTick+0x2c>
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <vTaskStepTick+0xa4>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	441a      	add	r2, r3
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <vTaskStepTick+0xa8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d128      	bne.n	8001fd4 <vTaskStepTick+0x90>
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <vTaskStepTick+0xac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10a      	bne.n	8001fa0 <vTaskStepTick+0x5c>
 8001f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	bf00      	nop
 8001f9e:	e7fe      	b.n	8001f9e <vTaskStepTick+0x5a>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10a      	bne.n	8001fbc <vTaskStepTick+0x78>
 8001fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001faa:	f383 8811 	msr	BASEPRI, r3
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	f3bf 8f4f 	dsb	sy
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	bf00      	nop
 8001fba:	e7fe      	b.n	8001fba <vTaskStepTick+0x76>
 8001fbc:	f001 f918 	bl	80031f0 <vPortEnterCritical>
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <vTaskStepTick+0xb0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <vTaskStepTick+0xb0>)
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	f001 f941 	bl	8003250 <vPortExitCritical>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <vTaskStepTick+0xa4>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	4a02      	ldr	r2, [pc, #8]	; (8001fe8 <vTaskStepTick+0xa4>)
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000178 	.word	0x20000178
 8001fec:	20000194 	.word	0x20000194
 8001ff0:	2000019c 	.word	0x2000019c
 8001ff4:	20000184 	.word	0x20000184

08001ff8 <xTaskIncrementTick>:
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	4b7e      	ldr	r3, [pc, #504]	; (80021fc <xTaskIncrementTick+0x204>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 80ed 	bne.w	80021e6 <xTaskIncrementTick+0x1ee>
 800200c:	4b7c      	ldr	r3, [pc, #496]	; (8002200 <xTaskIncrementTick+0x208>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	4a7a      	ldr	r2, [pc, #488]	; (8002200 <xTaskIncrementTick+0x208>)
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d120      	bne.n	8002062 <xTaskIncrementTick+0x6a>
 8002020:	4b78      	ldr	r3, [pc, #480]	; (8002204 <xTaskIncrementTick+0x20c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <xTaskIncrementTick+0x48>
 800202a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202e:	f383 8811 	msr	BASEPRI, r3
 8002032:	f3bf 8f6f 	isb	sy
 8002036:	f3bf 8f4f 	dsb	sy
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	bf00      	nop
 800203e:	e7fe      	b.n	800203e <xTaskIncrementTick+0x46>
 8002040:	4b70      	ldr	r3, [pc, #448]	; (8002204 <xTaskIncrementTick+0x20c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	4b70      	ldr	r3, [pc, #448]	; (8002208 <xTaskIncrementTick+0x210>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6e      	ldr	r2, [pc, #440]	; (8002204 <xTaskIncrementTick+0x20c>)
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4a6e      	ldr	r2, [pc, #440]	; (8002208 <xTaskIncrementTick+0x210>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b6d      	ldr	r3, [pc, #436]	; (800220c <xTaskIncrementTick+0x214>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a6c      	ldr	r2, [pc, #432]	; (800220c <xTaskIncrementTick+0x214>)
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	f000 fbfd 	bl	800285c <prvResetNextTaskUnblockTime>
 8002062:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <xTaskIncrementTick+0x218>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6a3a      	ldr	r2, [r7, #32]
 8002068:	429a      	cmp	r2, r3
 800206a:	f0c0 80a7 	bcc.w	80021bc <xTaskIncrementTick+0x1c4>
 800206e:	4b65      	ldr	r3, [pc, #404]	; (8002204 <xTaskIncrementTick+0x20c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <xTaskIncrementTick+0x8a>
 8002078:	4b65      	ldr	r3, [pc, #404]	; (8002210 <xTaskIncrementTick+0x218>)
 800207a:	f04f 32ff 	mov.w	r2, #4294967295
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e09c      	b.n	80021bc <xTaskIncrementTick+0x1c4>
 8002082:	4b60      	ldr	r3, [pc, #384]	; (8002204 <xTaskIncrementTick+0x20c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	6a3a      	ldr	r2, [r7, #32]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	429a      	cmp	r2, r3
 8002098:	d203      	bcs.n	80020a2 <xTaskIncrementTick+0xaa>
 800209a:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <xTaskIncrementTick+0x218>)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	e08c      	b.n	80021bc <xTaskIncrementTick+0x1c4>
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	68d2      	ldr	r2, [r2, #12]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	6892      	ldr	r2, [r2, #8]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	3304      	adds	r3, #4
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d103      	bne.n	80020d0 <xTaskIncrementTick+0xd8>
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1e5a      	subs	r2, r3, #1
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01e      	beq.n	8002126 <xTaskIncrementTick+0x12e>
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	6a12      	ldr	r2, [r2, #32]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	69d2      	ldr	r2, [r2, #28]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	3318      	adds	r3, #24
 800210a:	429a      	cmp	r2, r3
 800210c:	d103      	bne.n	8002116 <xTaskIncrementTick+0x11e>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	6a1a      	ldr	r2, [r3, #32]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2200      	movs	r2, #0
 800211a:	629a      	str	r2, [r3, #40]	; 0x28
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	1e5a      	subs	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <xTaskIncrementTick+0x21c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d903      	bls.n	800213a <xTaskIncrementTick+0x142>
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002136:	4a37      	ldr	r2, [pc, #220]	; (8002214 <xTaskIncrementTick+0x21c>)
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213e:	4936      	ldr	r1, [pc, #216]	; (8002218 <xTaskIncrementTick+0x220>)
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3304      	adds	r3, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	609a      	str	r2, [r3, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	3204      	adds	r2, #4
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	1d1a      	adds	r2, r3, #4
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4a26      	ldr	r2, [pc, #152]	; (8002218 <xTaskIncrementTick+0x220>)
 800217e:	441a      	add	r2, r3
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	615a      	str	r2, [r3, #20]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002188:	4923      	ldr	r1, [pc, #140]	; (8002218 <xTaskIncrementTick+0x220>)
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	481f      	ldr	r0, [pc, #124]	; (8002218 <xTaskIncrementTick+0x220>)
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4403      	add	r3, r0
 80021a4:	6019      	str	r1, [r3, #0]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <xTaskIncrementTick+0x224>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f67f af5c 	bls.w	800206e <xTaskIncrementTick+0x76>
 80021b6:	2301      	movs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	e758      	b.n	800206e <xTaskIncrementTick+0x76>
 80021bc:	4b17      	ldr	r3, [pc, #92]	; (800221c <xTaskIncrementTick+0x224>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c2:	4915      	ldr	r1, [pc, #84]	; (8002218 <xTaskIncrementTick+0x220>)
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d901      	bls.n	80021d8 <xTaskIncrementTick+0x1e0>
 80021d4:	2301      	movs	r3, #1
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <xTaskIncrementTick+0x228>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <xTaskIncrementTick+0x1f8>
 80021e0:	2301      	movs	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
 80021e4:	e004      	b.n	80021f0 <xTaskIncrementTick+0x1f8>
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <xTaskIncrementTick+0x22c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <xTaskIncrementTick+0x22c>)
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	4618      	mov	r0, r3
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	2000019c 	.word	0x2000019c
 8002200:	20000178 	.word	0x20000178
 8002204:	2000012c 	.word	0x2000012c
 8002208:	20000130 	.word	0x20000130
 800220c:	2000018c 	.word	0x2000018c
 8002210:	20000194 	.word	0x20000194
 8002214:	2000017c 	.word	0x2000017c
 8002218:	200000a0 	.word	0x200000a0
 800221c:	2000009c 	.word	0x2000009c
 8002220:	20000188 	.word	0x20000188
 8002224:	20000184 	.word	0x20000184

08002228 <vTaskSwitchContext>:
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <vTaskSwitchContext+0xa4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <vTaskSwitchContext+0x16>
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <vTaskSwitchContext+0xa8>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e041      	b.n	80022c2 <vTaskSwitchContext+0x9a>
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <vTaskSwitchContext+0xa8>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <vTaskSwitchContext+0xac>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e010      	b.n	800226e <vTaskSwitchContext+0x46>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10a      	bne.n	8002268 <vTaskSwitchContext+0x40>
 8002252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	bf00      	nop
 8002266:	e7fe      	b.n	8002266 <vTaskSwitchContext+0x3e>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3b01      	subs	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	491a      	ldr	r1, [pc, #104]	; (80022d8 <vTaskSwitchContext+0xb0>)
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0e4      	beq.n	800224c <vTaskSwitchContext+0x24>
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4a12      	ldr	r2, [pc, #72]	; (80022d8 <vTaskSwitchContext+0xb0>)
 800228e:	4413      	add	r3, r2
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3308      	adds	r3, #8
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d104      	bne.n	80022b2 <vTaskSwitchContext+0x8a>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a08      	ldr	r2, [pc, #32]	; (80022dc <vTaskSwitchContext+0xb4>)
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <vTaskSwitchContext+0xac>)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	2000019c 	.word	0x2000019c
 80022d0:	20000188 	.word	0x20000188
 80022d4:	2000017c 	.word	0x2000017c
 80022d8:	200000a0 	.word	0x200000a0
 80022dc:	2000009c 	.word	0x2000009c

080022e0 <vTaskPlaceOnEventList>:
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <vTaskPlaceOnEventList+0x26>
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	bf00      	nop
 8002304:	e7fe      	b.n	8002304 <vTaskPlaceOnEventList+0x24>
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <vTaskPlaceOnEventList+0x44>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3318      	adds	r3, #24
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fe1b 	bl	8002f4a <vListInsert>
 8002314:	2101      	movs	r1, #1
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	f000 fad8 	bl	80028cc <prvAddCurrentTaskToDelayedList>
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000009c 	.word	0x2000009c

08002328 <vTaskPlaceOnEventListRestricted>:
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <vTaskPlaceOnEventListRestricted+0x28>
 800233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233e:	f383 8811 	msr	BASEPRI, r3
 8002342:	f3bf 8f6f 	isb	sy
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	bf00      	nop
 800234e:	e7fe      	b.n	800234e <vTaskPlaceOnEventListRestricted+0x26>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	61da      	str	r2, [r3, #28]
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	6892      	ldr	r2, [r2, #8]
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <vTaskPlaceOnEventListRestricted+0x88>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	3218      	adds	r2, #24
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f103 0218 	add.w	r2, r3, #24
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <vTaskPlaceOnEventListRestricted+0x88>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <vTaskPlaceOnEventListRestricted+0x76>
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	68b8      	ldr	r0, [r7, #8]
 80023a2:	f000 fa93 	bl	80028cc <prvAddCurrentTaskToDelayedList>
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000009c 	.word	0x2000009c

080023b4 <xTaskRemoveFromEventList>:
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	623b      	str	r3, [r7, #32]
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <xTaskRemoveFromEventList+0x2c>
 80023ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	bf00      	nop
 80023de:	e7fe      	b.n	80023de <xTaskRemoveFromEventList+0x2a>
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	6a3a      	ldr	r2, [r7, #32]
 80023ec:	6a12      	ldr	r2, [r2, #32]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	6a3a      	ldr	r2, [r7, #32]
 80023f6:	69d2      	ldr	r2, [r2, #28]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	3318      	adds	r3, #24
 8002402:	429a      	cmp	r2, r3
 8002404:	d103      	bne.n	800240e <xTaskRemoveFromEventList+0x5a>
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	6a1a      	ldr	r2, [r3, #32]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	2200      	movs	r2, #0
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1e5a      	subs	r2, r3, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	4b4b      	ldr	r3, [pc, #300]	; (800254c <xTaskRemoveFromEventList+0x198>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d161      	bne.n	80024ea <xTaskRemoveFromEventList+0x136>
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	6a3a      	ldr	r2, [r7, #32]
 8002432:	68d2      	ldr	r2, [r2, #12]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	6a3a      	ldr	r2, [r7, #32]
 800243c:	6892      	ldr	r2, [r2, #8]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	3304      	adds	r3, #4
 8002448:	429a      	cmp	r2, r3
 800244a:	d103      	bne.n	8002454 <xTaskRemoveFromEventList+0xa0>
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	6a3b      	ldr	r3, [r7, #32]
 8002456:	2200      	movs	r2, #0
 8002458:	615a      	str	r2, [r3, #20]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1e5a      	subs	r2, r3, #1
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <xTaskRemoveFromEventList+0x19c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d903      	bls.n	8002478 <xTaskRemoveFromEventList+0xc4>
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	4a36      	ldr	r2, [pc, #216]	; (8002550 <xTaskRemoveFromEventList+0x19c>)
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	4935      	ldr	r1, [pc, #212]	; (8002554 <xTaskRemoveFromEventList+0x1a0>)
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	3304      	adds	r3, #4
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	3204      	adds	r2, #4
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	1d1a      	adds	r2, r3, #4
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4a26      	ldr	r2, [pc, #152]	; (8002554 <xTaskRemoveFromEventList+0x1a0>)
 80024bc:	441a      	add	r2, r3
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	615a      	str	r2, [r3, #20]
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c6:	4923      	ldr	r1, [pc, #140]	; (8002554 <xTaskRemoveFromEventList+0x1a0>)
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1c59      	adds	r1, r3, #1
 80024d6:	481f      	ldr	r0, [pc, #124]	; (8002554 <xTaskRemoveFromEventList+0x1a0>)
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4403      	add	r3, r0
 80024e2:	6019      	str	r1, [r3, #0]
 80024e4:	f000 f9ba 	bl	800285c <prvResetNextTaskUnblockTime>
 80024e8:	e01b      	b.n	8002522 <xTaskRemoveFromEventList+0x16e>
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <xTaskRemoveFromEventList+0x1a4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	61da      	str	r2, [r3, #28]
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	621a      	str	r2, [r3, #32]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	6a3a      	ldr	r2, [r7, #32]
 8002504:	3218      	adds	r2, #24
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f103 0218 	add.w	r2, r3, #24
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	609a      	str	r2, [r3, #8]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	4a10      	ldr	r2, [pc, #64]	; (8002558 <xTaskRemoveFromEventList+0x1a4>)
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <xTaskRemoveFromEventList+0x1a4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <xTaskRemoveFromEventList+0x1a4>)
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <xTaskRemoveFromEventList+0x1a8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	429a      	cmp	r2, r3
 800252e:	d905      	bls.n	800253c <xTaskRemoveFromEventList+0x188>
 8002530:	2301      	movs	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <xTaskRemoveFromEventList+0x1ac>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e001      	b.n	8002540 <xTaskRemoveFromEventList+0x18c>
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	4618      	mov	r0, r3
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000019c 	.word	0x2000019c
 8002550:	2000017c 	.word	0x2000017c
 8002554:	200000a0 	.word	0x200000a0
 8002558:	20000134 	.word	0x20000134
 800255c:	2000009c 	.word	0x2000009c
 8002560:	20000188 	.word	0x20000188

08002564 <vTaskInternalSetTimeOutState>:
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <vTaskInternalSetTimeOutState+0x24>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <vTaskInternalSetTimeOutState+0x28>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	2000018c 	.word	0x2000018c
 800258c:	20000178 	.word	0x20000178

08002590 <xTaskCheckForTimeOut>:
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <xTaskCheckForTimeOut+0x26>
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	bf00      	nop
 80025b4:	e7fe      	b.n	80025b4 <xTaskCheckForTimeOut+0x24>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <xTaskCheckForTimeOut+0x42>
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	bf00      	nop
 80025d0:	e7fe      	b.n	80025d0 <xTaskCheckForTimeOut+0x40>
 80025d2:	f000 fe0d 	bl	80031f0 <vPortEnterCritical>
 80025d6:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <xTaskCheckForTimeOut+0xc4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ee:	d102      	bne.n	80025f6 <xTaskCheckForTimeOut+0x66>
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	e026      	b.n	8002644 <xTaskCheckForTimeOut+0xb4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <xTaskCheckForTimeOut+0xc8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d00a      	beq.n	8002618 <xTaskCheckForTimeOut+0x88>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	429a      	cmp	r2, r3
 800260a:	d305      	bcc.n	8002618 <xTaskCheckForTimeOut+0x88>
 800260c:	2301      	movs	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e015      	b.n	8002644 <xTaskCheckForTimeOut+0xb4>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	429a      	cmp	r2, r3
 8002620:	d20b      	bcs.n	800263a <xTaskCheckForTimeOut+0xaa>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	1ad2      	subs	r2, r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ff98 	bl	8002564 <vTaskInternalSetTimeOutState>
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	e004      	b.n	8002644 <xTaskCheckForTimeOut+0xb4>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	2301      	movs	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	f000 fe04 	bl	8003250 <vPortExitCritical>
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4618      	mov	r0, r3
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000178 	.word	0x20000178
 8002658:	2000018c 	.word	0x2000018c

0800265c <vTaskMissedYield>:
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <vTaskMissedYield+0x14>)
 8002662:	2201      	movs	r2, #1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	bf00      	nop
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000188 	.word	0x20000188

08002674 <prvIdleTask>:
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	f000 f8b0 	bl	80027e0 <prvCheckTasksWaitingTermination>
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <prvIdleTask+0x70>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d907      	bls.n	8002698 <prvIdleTask+0x24>
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <prvIdleTask+0x74>)
 800268a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f7ff fb14 	bl	8001cc4 <prvGetExpectedIdleTime>
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d9eb      	bls.n	800267c <prvIdleTask+0x8>
 80026a4:	f7ff fb00 	bl	8001ca8 <vTaskSuspendAll>
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <prvIdleTask+0x78>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <prvIdleTask+0x7c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d20a      	bcs.n	80026ca <prvIdleTask+0x56>
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	bf00      	nop
 80026c8:	e7fe      	b.n	80026c8 <prvIdleTask+0x54>
 80026ca:	f7ff fafb 	bl	8001cc4 <prvGetExpectedIdleTime>
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d902      	bls.n	80026dc <prvIdleTask+0x68>
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fe28 	bl	800332c <vPortSuppressTicksAndSleep>
 80026dc:	f7ff fb28 	bl	8001d30 <xTaskResumeAll>
 80026e0:	e7cc      	b.n	800267c <prvIdleTask+0x8>
 80026e2:	bf00      	nop
 80026e4:	200000a0 	.word	0x200000a0
 80026e8:	e000ed04 	.word	0xe000ed04
 80026ec:	20000194 	.word	0x20000194
 80026f0:	20000178 	.word	0x20000178

080026f4 <eTaskConfirmSleepModeStatus>:
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	2301      	movs	r3, #1
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	2301      	movs	r3, #1
 8002700:	71fb      	strb	r3, [r7, #7]
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <eTaskConfirmSleepModeStatus+0x58>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <eTaskConfirmSleepModeStatus+0x1c>
 800270a:	2300      	movs	r3, #0
 800270c:	71fb      	strb	r3, [r7, #7]
 800270e:	e017      	b.n	8002740 <eTaskConfirmSleepModeStatus+0x4c>
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <eTaskConfirmSleepModeStatus+0x5c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <eTaskConfirmSleepModeStatus+0x2a>
 8002718:	2300      	movs	r3, #0
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	e010      	b.n	8002740 <eTaskConfirmSleepModeStatus+0x4c>
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <eTaskConfirmSleepModeStatus+0x60>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <eTaskConfirmSleepModeStatus+0x38>
 8002726:	2300      	movs	r3, #0
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	e009      	b.n	8002740 <eTaskConfirmSleepModeStatus+0x4c>
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <eTaskConfirmSleepModeStatus+0x64>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <eTaskConfirmSleepModeStatus+0x68>)
 8002732:	6819      	ldr	r1, [r3, #0]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	1acb      	subs	r3, r1, r3
 8002738:	429a      	cmp	r2, r3
 800273a:	d101      	bne.n	8002740 <eTaskConfirmSleepModeStatus+0x4c>
 800273c:	2302      	movs	r3, #2
 800273e:	71fb      	strb	r3, [r7, #7]
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	20000134 	.word	0x20000134
 8002750:	20000188 	.word	0x20000188
 8002754:	20000184 	.word	0x20000184
 8002758:	20000160 	.word	0x20000160
 800275c:	20000174 	.word	0x20000174

08002760 <prvInitialiseTaskLists>:
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	e00c      	b.n	8002786 <prvInitialiseTaskLists+0x26>
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <prvInitialiseTaskLists+0x60>)
 8002778:	4413      	add	r3, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fbba 	bl	8002ef4 <vListInitialise>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3301      	adds	r3, #1
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d9ef      	bls.n	800276c <prvInitialiseTaskLists+0xc>
 800278c:	480d      	ldr	r0, [pc, #52]	; (80027c4 <prvInitialiseTaskLists+0x64>)
 800278e:	f000 fbb1 	bl	8002ef4 <vListInitialise>
 8002792:	480d      	ldr	r0, [pc, #52]	; (80027c8 <prvInitialiseTaskLists+0x68>)
 8002794:	f000 fbae 	bl	8002ef4 <vListInitialise>
 8002798:	480c      	ldr	r0, [pc, #48]	; (80027cc <prvInitialiseTaskLists+0x6c>)
 800279a:	f000 fbab 	bl	8002ef4 <vListInitialise>
 800279e:	480c      	ldr	r0, [pc, #48]	; (80027d0 <prvInitialiseTaskLists+0x70>)
 80027a0:	f000 fba8 	bl	8002ef4 <vListInitialise>
 80027a4:	480b      	ldr	r0, [pc, #44]	; (80027d4 <prvInitialiseTaskLists+0x74>)
 80027a6:	f000 fba5 	bl	8002ef4 <vListInitialise>
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <prvInitialiseTaskLists+0x78>)
 80027ac:	4a05      	ldr	r2, [pc, #20]	; (80027c4 <prvInitialiseTaskLists+0x64>)
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <prvInitialiseTaskLists+0x7c>)
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <prvInitialiseTaskLists+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200000a0 	.word	0x200000a0
 80027c4:	20000104 	.word	0x20000104
 80027c8:	20000118 	.word	0x20000118
 80027cc:	20000134 	.word	0x20000134
 80027d0:	20000148 	.word	0x20000148
 80027d4:	20000160 	.word	0x20000160
 80027d8:	2000012c 	.word	0x2000012c
 80027dc:	20000130 	.word	0x20000130

080027e0 <prvCheckTasksWaitingTermination>:
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	e019      	b.n	800281c <prvCheckTasksWaitingTermination+0x3c>
 80027e8:	f000 fd02 	bl	80031f0 <vPortEnterCritical>
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <prvCheckTasksWaitingTermination+0x50>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fbde 	bl	8002fba <uxListRemove>
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <prvCheckTasksWaitingTermination+0x54>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <prvCheckTasksWaitingTermination+0x54>)
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <prvCheckTasksWaitingTermination+0x58>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3b01      	subs	r3, #1
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <prvCheckTasksWaitingTermination+0x58>)
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	f000 fd1d 	bl	8003250 <vPortExitCritical>
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f810 	bl	800283c <prvDeleteTCB>
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <prvCheckTasksWaitingTermination+0x58>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e1      	bne.n	80027e8 <prvCheckTasksWaitingTermination+0x8>
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000148 	.word	0x20000148
 8002834:	20000174 	.word	0x20000174
 8002838:	2000015c 	.word	0x2000015c

0800283c <prvDeleteTCB>:
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fb41 	bl	8002ed0 <vPortFree>
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fb3e 	bl	8002ed0 <vPortFree>
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <prvResetNextTaskUnblockTime>:
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <prvResetNextTaskUnblockTime+0x2c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d104      	bne.n	8002874 <prvResetNextTaskUnblockTime+0x18>
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <prvResetNextTaskUnblockTime+0x30>)
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e005      	b.n	8002880 <prvResetNextTaskUnblockTime+0x24>
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <prvResetNextTaskUnblockTime+0x2c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a03      	ldr	r2, [pc, #12]	; (800288c <prvResetNextTaskUnblockTime+0x30>)
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	2000012c 	.word	0x2000012c
 800288c:	20000194 	.word	0x20000194

08002890 <xTaskGetSchedulerState>:
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <xTaskGetSchedulerState+0x34>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <xTaskGetSchedulerState+0x14>
 800289e:	2301      	movs	r3, #1
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	e008      	b.n	80028b6 <xTaskGetSchedulerState+0x26>
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <xTaskGetSchedulerState+0x38>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <xTaskGetSchedulerState+0x22>
 80028ac:	2302      	movs	r3, #2
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	e001      	b.n	80028b6 <xTaskGetSchedulerState+0x26>
 80028b2:	2300      	movs	r3, #0
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000180 	.word	0x20000180
 80028c8:	2000019c 	.word	0x2000019c

080028cc <prvAddCurrentTaskToDelayedList>:
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <prvAddCurrentTaskToDelayedList+0xc4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3304      	adds	r3, #4
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fb69 	bl	8002fba <uxListRemove>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d124      	bne.n	800293a <prvAddCurrentTaskToDelayedList+0x6e>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d021      	beq.n	800293a <prvAddCurrentTaskToDelayedList+0x6e>
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <prvAddCurrentTaskToDelayedList+0xcc>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	6892      	ldr	r2, [r2, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	3204      	adds	r2, #4
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	1d1a      	adds	r2, r3, #4
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <prvAddCurrentTaskToDelayedList+0xcc>)
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <prvAddCurrentTaskToDelayedList+0xcc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	4a19      	ldr	r2, [pc, #100]	; (8002998 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	bf00      	nop
 8002938:	e026      	b.n	8002988 <prvAddCurrentTaskToDelayedList+0xbc>
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	429a      	cmp	r2, r3
 8002950:	d209      	bcs.n	8002966 <prvAddCurrentTaskToDelayedList+0x9a>
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <prvAddCurrentTaskToDelayedList+0xd0>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f000 faf3 	bl	8002f4a <vListInsert>
 8002964:	e010      	b.n	8002988 <prvAddCurrentTaskToDelayedList+0xbc>
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3304      	adds	r3, #4
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f000 fae9 	bl	8002f4a <vListInsert>
 8002978:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	429a      	cmp	r2, r3
 8002980:	d202      	bcs.n	8002988 <prvAddCurrentTaskToDelayedList+0xbc>
 8002982:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000178 	.word	0x20000178
 8002994:	2000009c 	.word	0x2000009c
 8002998:	20000160 	.word	0x20000160
 800299c:	20000130 	.word	0x20000130
 80029a0:	2000012c 	.word	0x2000012c
 80029a4:	20000194 	.word	0x20000194

080029a8 <xTimerCreateTimerTask>:
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	f000 fa45 	bl	8002e40 <prvCheckForValidListAndQueue>
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <xTimerCreateTimerTask+0x54>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <xTimerCreateTimerTask+0x2c>
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <xTimerCreateTimerTask+0x58>)
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	2303      	movs	r3, #3
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2300      	movs	r3, #0
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	490e      	ldr	r1, [pc, #56]	; (8002a04 <xTimerCreateTimerTask+0x5c>)
 80029cc:	480e      	ldr	r0, [pc, #56]	; (8002a08 <xTimerCreateTimerTask+0x60>)
 80029ce:	f7fe ff79 	bl	80018c4 <xTaskCreate>
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <xTimerCreateTimerTask+0x48>
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	bf00      	nop
 80029ee:	e7fe      	b.n	80029ee <xTimerCreateTimerTask+0x46>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200001d0 	.word	0x200001d0
 8002a00:	200001d4 	.word	0x200001d4
 8002a04:	08003d68 	.word	0x08003d68
 8002a08:	08002ab1 	.word	0x08002ab1

08002a0c <prvReloadTimer>:
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	e008      	b.n	8002a2c <prvReloadTimer+0x20>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	4413      	add	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	4798      	blx	r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	18d1      	adds	r1, r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f8db 	bl	8002bf4 <prvInsertTimerInActiveList>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ea      	bne.n	8002a1a <prvReloadTimer+0xe>
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <prvProcessExpiredTimer>:
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <prvProcessExpiredTimer+0x5c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 faa6 	bl	8002fba <uxListRemove>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <prvProcessExpiredTimer+0x38>
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f7ff ffc3 	bl	8002a0c <prvReloadTimer>
 8002a86:	e008      	b.n	8002a9a <prvProcessExpiredTimer+0x4a>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	4798      	blx	r3
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200001c8 	.word	0x200001c8

08002ab0 <prvTimerTask>:
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f857 	bl	8002b70 <prvGetNextExpireTime>
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f803 	bl	8002ad4 <prvProcessTimerOrBlockTask>
 8002ace:	f000 f8d3 	bl	8002c78 <prvProcessReceivedCommands>
 8002ad2:	e7f1      	b.n	8002ab8 <prvTimerTask+0x8>

08002ad4 <prvProcessTimerOrBlockTask>:
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	f7ff f8e3 	bl	8001ca8 <vTaskSuspendAll>
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f864 	bl	8002bb4 <prvSampleTimeNow>
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d130      	bne.n	8002b56 <prvProcessTimerOrBlockTask+0x82>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <prvProcessTimerOrBlockTask+0x3c>
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d806      	bhi.n	8002b10 <prvProcessTimerOrBlockTask+0x3c>
 8002b02:	f7ff f915 	bl	8001d30 <xTaskResumeAll>
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ffa1 	bl	8002a50 <prvProcessExpiredTimer>
 8002b0e:	e024      	b.n	8002b5a <prvProcessTimerOrBlockTask+0x86>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <prvProcessTimerOrBlockTask+0x54>
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <prvProcessTimerOrBlockTask+0x90>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <prvProcessTimerOrBlockTask+0x50>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <prvProcessTimerOrBlockTask+0x52>
 8002b24:	2300      	movs	r3, #0
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <prvProcessTimerOrBlockTask+0x94>)
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4619      	mov	r1, r3
 8002b36:	f000 ffbd 	bl	8003ab4 <vQueueWaitForMessageRestricted>
 8002b3a:	f7ff f8f9 	bl	8001d30 <xTaskResumeAll>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <prvProcessTimerOrBlockTask+0x86>
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <prvProcessTimerOrBlockTask+0x98>)
 8002b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	e001      	b.n	8002b5a <prvProcessTimerOrBlockTask+0x86>
 8002b56:	f7ff f8eb 	bl	8001d30 <xTaskResumeAll>
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200001cc 	.word	0x200001cc
 8002b68:	200001d0 	.word	0x200001d0
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <prvGetNextExpireTime>:
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <prvGetNextExpireTime+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <prvGetNextExpireTime+0x16>
 8002b82:	2201      	movs	r2, #1
 8002b84:	e000      	b.n	8002b88 <prvGetNextExpireTime+0x18>
 8002b86:	2200      	movs	r2, #0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <prvGetNextExpireTime+0x30>
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <prvGetNextExpireTime+0x40>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	e001      	b.n	8002ba4 <prvGetNextExpireTime+0x34>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	200001c8 	.word	0x200001c8

08002bb4 <prvSampleTimeNow>:
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	f7ff f9b4 	bl	8001f28 <xTaskGetTickCount>
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <prvSampleTimeNow+0x3c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d205      	bcs.n	8002bd8 <prvSampleTimeNow+0x24>
 8002bcc:	f000 f912 	bl	8002df4 <prvSwitchTimerLists>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e002      	b.n	8002bde <prvSampleTimeNow+0x2a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <prvSampleTimeNow+0x3c>)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200001d8 	.word	0x200001d8

08002bf4 <prvInsertTimerInActiveList>:
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	611a      	str	r2, [r3, #16]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d812      	bhi.n	8002c40 <prvInsertTimerInActiveList+0x4c>
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	1ad2      	subs	r2, r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d302      	bcc.n	8002c2e <prvInsertTimerInActiveList+0x3a>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	e01b      	b.n	8002c66 <prvInsertTimerInActiveList+0x72>
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <prvInsertTimerInActiveList+0x7c>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3304      	adds	r3, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f000 f986 	bl	8002f4a <vListInsert>
 8002c3e:	e012      	b.n	8002c66 <prvInsertTimerInActiveList+0x72>
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d206      	bcs.n	8002c56 <prvInsertTimerInActiveList+0x62>
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d302      	bcc.n	8002c56 <prvInsertTimerInActiveList+0x62>
 8002c50:	2301      	movs	r3, #1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e007      	b.n	8002c66 <prvInsertTimerInActiveList+0x72>
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <prvInsertTimerInActiveList+0x80>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4610      	mov	r0, r2
 8002c62:	f000 f972 	bl	8002f4a <vListInsert>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	200001cc 	.word	0x200001cc
 8002c74:	200001c8 	.word	0x200001c8

08002c78 <prvProcessReceivedCommands>:
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	e0a6      	b.n	8002dce <prvProcessReceivedCommands+0x156>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f2c0 80a2 	blt.w	8002dcc <prvProcessReceivedCommands+0x154>
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <prvProcessReceivedCommands+0x26>
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3304      	adds	r3, #4
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f98e 	bl	8002fba <uxListRemove>
 8002c9e:	1d3b      	adds	r3, r7, #4
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff87 	bl	8002bb4 <prvSampleTimeNow>
 8002ca6:	61b8      	str	r0, [r7, #24]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	f200 808e 	bhi.w	8002dce <prvProcessReceivedCommands+0x156>
 8002cb2:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <prvProcessReceivedCommands+0x40>)
 8002cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	08002cdd 	.word	0x08002cdd
 8002cc0:	08002d45 	.word	0x08002d45
 8002cc4:	08002d59 	.word	0x08002d59
 8002cc8:	08002da3 	.word	0x08002da3
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002cdd 	.word	0x08002cdd
 8002cd4:	08002d45 	.word	0x08002d45
 8002cd8:	08002d59 	.word	0x08002d59
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	18d1      	adds	r1, r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	69f8      	ldr	r0, [r7, #28]
 8002cfc:	f7ff ff7a 	bl	8002bf4 <prvInsertTimerInActiveList>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d063      	beq.n	8002dce <prvProcessReceivedCommands+0x156>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <prvProcessReceivedCommands+0xb0>
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	69f8      	ldr	r0, [r7, #28]
 8002d22:	f7ff fe73 	bl	8002a0c <prvReloadTimer>
 8002d26:	e008      	b.n	8002d3a <prvProcessReceivedCommands+0xc2>
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	69f8      	ldr	r0, [r7, #28]
 8002d40:	4798      	blx	r3
 8002d42:	e044      	b.n	8002dce <prvProcessReceivedCommands+0x156>
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002d56:	e03a      	b.n	8002dce <prvProcessReceivedCommands+0x156>
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	619a      	str	r2, [r3, #24]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <prvProcessReceivedCommands+0x116>
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <prvProcessReceivedCommands+0x114>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	18d1      	adds	r1, r2, r3
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	69f8      	ldr	r0, [r7, #28]
 8002d9c:	f7ff ff2a 	bl	8002bf4 <prvInsertTimerInActiveList>
 8002da0:	e015      	b.n	8002dce <prvProcessReceivedCommands+0x156>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d103      	bne.n	8002db8 <prvProcessReceivedCommands+0x140>
 8002db0:	69f8      	ldr	r0, [r7, #28]
 8002db2:	f000 f88d 	bl	8002ed0 <vPortFree>
 8002db6:	e00a      	b.n	8002dce <prvProcessReceivedCommands+0x156>
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dbe:	f023 0301 	bic.w	r3, r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8002dca:	e000      	b.n	8002dce <prvProcessReceivedCommands+0x156>
 8002dcc:	bf00      	nop
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <prvProcessReceivedCommands+0x178>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f107 0108 	add.w	r1, r7, #8
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fcaf 	bl	800373c <xQueueReceive>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f af4d 	bne.w	8002c80 <prvProcessReceivedCommands+0x8>
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	3720      	adds	r7, #32
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200001d0 	.word	0x200001d0

08002df4 <prvSwitchTimerLists>:
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	e009      	b.n	8002e10 <prvSwitchTimerLists+0x1c>
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <prvSwitchTimerLists+0x44>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	f04f 31ff 	mov.w	r1, #4294967295
 8002e0a:	6838      	ldr	r0, [r7, #0]
 8002e0c:	f7ff fe20 	bl	8002a50 <prvProcessExpiredTimer>
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <prvSwitchTimerLists+0x44>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <prvSwitchTimerLists+0x8>
 8002e1a:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <prvSwitchTimerLists+0x44>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <prvSwitchTimerLists+0x48>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a04      	ldr	r2, [pc, #16]	; (8002e38 <prvSwitchTimerLists+0x44>)
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4a04      	ldr	r2, [pc, #16]	; (8002e3c <prvSwitchTimerLists+0x48>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200001c8 	.word	0x200001c8
 8002e3c:	200001cc 	.word	0x200001cc

08002e40 <prvCheckForValidListAndQueue>:
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	f000 f9d4 	bl	80031f0 <vPortEnterCritical>
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <prvCheckForValidListAndQueue+0x54>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d11d      	bne.n	8002e8c <prvCheckForValidListAndQueue+0x4c>
 8002e50:	4811      	ldr	r0, [pc, #68]	; (8002e98 <prvCheckForValidListAndQueue+0x58>)
 8002e52:	f000 f84f 	bl	8002ef4 <vListInitialise>
 8002e56:	4811      	ldr	r0, [pc, #68]	; (8002e9c <prvCheckForValidListAndQueue+0x5c>)
 8002e58:	f000 f84c 	bl	8002ef4 <vListInitialise>
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <prvCheckForValidListAndQueue+0x60>)
 8002e5e:	4a0e      	ldr	r2, [pc, #56]	; (8002e98 <prvCheckForValidListAndQueue+0x58>)
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <prvCheckForValidListAndQueue+0x64>)
 8002e64:	4a0d      	ldr	r2, [pc, #52]	; (8002e9c <prvCheckForValidListAndQueue+0x5c>)
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	210c      	movs	r1, #12
 8002e6c:	200a      	movs	r0, #10
 8002e6e:	f000 fbf3 	bl	8003658 <xQueueGenericCreate>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <prvCheckForValidListAndQueue+0x54>)
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <prvCheckForValidListAndQueue+0x54>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <prvCheckForValidListAndQueue+0x4c>
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <prvCheckForValidListAndQueue+0x54>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4908      	ldr	r1, [pc, #32]	; (8002ea8 <prvCheckForValidListAndQueue+0x68>)
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fdc6 	bl	8003a18 <vQueueAddToRegistry>
 8002e8c:	f000 f9e0 	bl	8003250 <vPortExitCritical>
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200001d0 	.word	0x200001d0
 8002e98:	200001a0 	.word	0x200001a0
 8002e9c:	200001b4 	.word	0x200001b4
 8002ea0:	200001c8 	.word	0x200001c8
 8002ea4:	200001cc 	.word	0x200001cc
 8002ea8:	08003d70 	.word	0x08003d70

08002eac <pvPortMalloc>:
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	f7fe fef8 	bl	8001ca8 <vTaskSuspendAll>
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fe59 	bl	8003b70 <malloc>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	f7fe ff35 	bl	8001d30 <xTaskResumeAll>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <vPortFree>:
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <vPortFree+0x1c>
 8002ede:	f7fe fee3 	bl	8001ca8 <vTaskSuspendAll>
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fe4c 	bl	8003b80 <free>
 8002ee8:	f7fe ff22 	bl	8001d30 <xTaskResumeAll>
 8002eec:	bf00      	nop
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <vListInitialise>:
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f103 0208 	add.w	r2, r3, #8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	605a      	str	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f103 0208 	add.w	r2, r3, #8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f103 0208 	add.w	r2, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <vListInitialiseItem>:
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <vListInsert>:
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	6039      	str	r1, [r7, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d103      	bne.n	8002f6a <vListInsert+0x20>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e00c      	b.n	8002f84 <vListInsert+0x3a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e002      	b.n	8002f78 <vListInsert+0x2e>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d2f6      	bcs.n	8002f72 <vListInsert+0x28>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	611a      	str	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <uxListRemove>:
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6892      	ldr	r2, [r2, #8]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6852      	ldr	r2, [r2, #4]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d103      	bne.n	8002fee <uxListRemove+0x34>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	1e5a      	subs	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <pxPortInitialiseStack>:
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3b04      	subs	r3, #4
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3b04      	subs	r3, #4
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f023 0201 	bic.w	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	3b04      	subs	r3, #4
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	4a08      	ldr	r2, [pc, #32]	; (8003060 <pxPortInitialiseStack+0x54>)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	3b14      	subs	r3, #20
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	3b20      	subs	r3, #32
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	08003065 	.word	0x08003065

08003064 <prvTaskExitError>:
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <prvTaskExitError+0x54>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d00a      	beq.n	800308e <prvTaskExitError+0x2a>
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <prvTaskExitError+0x28>
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0fc      	beq.n	80030a4 <prvTaskExitError+0x40>
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000010 	.word	0x20000010
 80030bc:	00000000 	.word	0x00000000

080030c0 <SVC_Handler>:
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <pxCurrentTCBConst2>)
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	6808      	ldr	r0, [r1, #0]
 80030c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80030ca:	f380 8809 	msr	PSP, r0
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f380 8811 	msr	BASEPRI, r0
 80030da:	f04e 0e0d 	orr.w	lr, lr, #13
 80030de:	4770      	bx	lr

080030e0 <pxCurrentTCBConst2>:
 80030e0:	2000009c 	.word	0x2000009c
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop

080030e8 <prvPortStartFirstTask>:
 80030e8:	4806      	ldr	r0, [pc, #24]	; (8003104 <prvPortStartFirstTask+0x1c>)
 80030ea:	6800      	ldr	r0, [r0, #0]
 80030ec:	6800      	ldr	r0, [r0, #0]
 80030ee:	f380 8808 	msr	MSP, r0
 80030f2:	b662      	cpsie	i
 80030f4:	b661      	cpsie	f
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	df00      	svc	0
 8003100:	bf00      	nop
 8003102:	0000      	.short	0x0000
 8003104:	e000ed08 	.word	0xe000ed08
 8003108:	bf00      	nop
 800310a:	bf00      	nop

0800310c <xPortStartScheduler>:
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	4b32      	ldr	r3, [pc, #200]	; (80031dc <xPortStartScheduler+0xd0>)
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	b2db      	uxtb	r3, r3
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	22ff      	movs	r2, #255	; 0xff
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	70fb      	strb	r3, [r7, #3]
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <xPortStartScheduler+0xd4>)
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <xPortStartScheduler+0xd8>)
 800313c:	2207      	movs	r2, #7
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e009      	b.n	8003156 <xPortStartScheduler+0x4a>
 8003142:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3b01      	subs	r3, #1
 8003148:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <xPortStartScheduler+0xd8>)
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	b2db      	uxtb	r3, r3
 8003154:	70fb      	strb	r3, [r7, #3]
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b80      	cmp	r3, #128	; 0x80
 8003160:	d0ef      	beq.n	8003142 <xPortStartScheduler+0x36>
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f1c3 0307 	rsb	r3, r3, #7
 800316a:	2b04      	cmp	r3, #4
 800316c:	d00a      	beq.n	8003184 <xPortStartScheduler+0x78>
 800316e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	bf00      	nop
 8003182:	e7fe      	b.n	8003182 <xPortStartScheduler+0x76>
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	4a16      	ldr	r2, [pc, #88]	; (80031e4 <xPortStartScheduler+0xd8>)
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003196:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <xPortStartScheduler+0xd8>)
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <xPortStartScheduler+0xdc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a10      	ldr	r2, [pc, #64]	; (80031e8 <xPortStartScheduler+0xdc>)
 80031a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <xPortStartScheduler+0xdc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a0d      	ldr	r2, [pc, #52]	; (80031e8 <xPortStartScheduler+0xdc>)
 80031b4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	f000 f981 	bl	80034c0 <vPortSetupTimerInterrupt>
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <xPortStartScheduler+0xe0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f7ff ff90 	bl	80030e8 <prvPortStartFirstTask>
 80031c8:	f7ff f82e 	bl	8002228 <vTaskSwitchContext>
 80031cc:	f7ff ff4a 	bl	8003064 <prvTaskExitError>
 80031d0:	2300      	movs	r3, #0
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000e400 	.word	0xe000e400
 80031e0:	200001e8 	.word	0x200001e8
 80031e4:	200001ec 	.word	0x200001ec
 80031e8:	e000ed20 	.word	0xe000ed20
 80031ec:	20000010 	.word	0x20000010

080031f0 <vPortEnterCritical>:
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	bf00      	nop
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <vPortEnterCritical+0x58>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <vPortEnterCritical+0x58>)
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <vPortEnterCritical+0x58>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d10f      	bne.n	800323c <vPortEnterCritical+0x4c>
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <vPortEnterCritical+0x5c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <vPortEnterCritical+0x4c>
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	bf00      	nop
 800323a:	e7fe      	b.n	800323a <vPortEnterCritical+0x4a>
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000010 	.word	0x20000010
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <vPortExitCritical>:
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <vPortExitCritical+0x4c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <vPortExitCritical+0x24>
 800325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003262:	f383 8811 	msr	BASEPRI, r3
 8003266:	f3bf 8f6f 	isb	sy
 800326a:	f3bf 8f4f 	dsb	sy
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	bf00      	nop
 8003272:	e7fe      	b.n	8003272 <vPortExitCritical+0x22>
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <vPortExitCritical+0x4c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3b01      	subs	r3, #1
 800327a:	4a08      	ldr	r2, [pc, #32]	; (800329c <vPortExitCritical+0x4c>)
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b07      	ldr	r3, [pc, #28]	; (800329c <vPortExitCritical+0x4c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <vPortExitCritical+0x42>
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000010 	.word	0x20000010

080032a0 <PendSV_Handler>:
 80032a0:	f3ef 8009 	mrs	r0, PSP
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <pxCurrentTCBConst>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80032b0:	6010      	str	r0, [r2, #0]
 80032b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80032b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80032ba:	f380 8811 	msr	BASEPRI, r0
 80032be:	f7fe ffb3 	bl	8002228 <vTaskSwitchContext>
 80032c2:	f04f 0000 	mov.w	r0, #0
 80032c6:	f380 8811 	msr	BASEPRI, r0
 80032ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	6808      	ldr	r0, [r1, #0]
 80032d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80032d6:	f380 8809 	msr	PSP, r0
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	4770      	bx	lr

080032e0 <pxCurrentTCBConst>:
 80032e0:	2000009c 	.word	0x2000009c
 80032e4:	bf00      	nop
 80032e6:	bf00      	nop

080032e8 <SysTick_Handler>:
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	bf00      	nop
 8003302:	f7fe fe79 	bl	8001ff8 <xTaskIncrementTick>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <SysTick_Handler+0x2c>
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <SysTick_Handler+0x40>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	e000ed04 	.word	0xe000ed04

0800332c <vPortSuppressTicksAndSleep>:
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	4b5b      	ldr	r3, [pc, #364]	; (80034a4 <vPortSuppressTicksAndSleep+0x178>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d902      	bls.n	8003344 <vPortSuppressTicksAndSleep+0x18>
 800333e:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <vPortSuppressTicksAndSleep+0x178>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	b672      	cpsid	i
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f7ff f9d1 	bl	80026f4 <eTaskConfirmSleepModeStatus>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <vPortSuppressTicksAndSleep+0x30>
 8003358:	b662      	cpsie	i
 800335a:	e09e      	b.n	800349a <vPortSuppressTicksAndSleep+0x16e>
 800335c:	4b52      	ldr	r3, [pc, #328]	; (80034a8 <vPortSuppressTicksAndSleep+0x17c>)
 800335e:	2206      	movs	r2, #6
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	4b52      	ldr	r3, [pc, #328]	; (80034ac <vPortSuppressTicksAndSleep+0x180>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <vPortSuppressTicksAndSleep+0x48>
 800336e:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	4a4d      	ldr	r2, [pc, #308]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4413      	add	r3, r2
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <vPortSuppressTicksAndSleep+0x188>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <vPortSuppressTicksAndSleep+0x78>
 8003392:	4b48      	ldr	r3, [pc, #288]	; (80034b4 <vPortSuppressTicksAndSleep+0x188>)
 8003394:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	4b45      	ldr	r3, [pc, #276]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	61fb      	str	r3, [r7, #28]
 80033a4:	4b44      	ldr	r3, [pc, #272]	; (80034b8 <vPortSuppressTicksAndSleep+0x18c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d904      	bls.n	80033b8 <vPortSuppressTicksAndSleep+0x8c>
 80033ae:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <vPortSuppressTicksAndSleep+0x18c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	4a40      	ldr	r2, [pc, #256]	; (80034bc <vPortSuppressTicksAndSleep+0x190>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <vPortSuppressTicksAndSleep+0x180>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <vPortSuppressTicksAndSleep+0x17c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <vPortSuppressTicksAndSleep+0x17c>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <vPortSuppressTicksAndSleep+0xb8>
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	bf30      	wfi
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	b662      	cpsie	i
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	b672      	cpsid	i
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <vPortSuppressTicksAndSleep+0x17c>)
 80033fa:	2206      	movs	r2, #6
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <vPortSuppressTicksAndSleep+0x17c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01d      	beq.n	8003446 <vPortSuppressTicksAndSleep+0x11a>
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b27      	ldr	r3, [pc, #156]	; (80034ac <vPortSuppressTicksAndSleep+0x180>)
 8003410:	6819      	ldr	r1, [r3, #0]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	1acb      	subs	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3b01      	subs	r3, #1
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <vPortSuppressTicksAndSleep+0x18c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	429a      	cmp	r2, r3
 8003424:	d904      	bls.n	8003430 <vPortSuppressTicksAndSleep+0x104>
 8003426:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	429a      	cmp	r2, r3
 800342e:	d903      	bls.n	8003438 <vPortSuppressTicksAndSleep+0x10c>
 8003430:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3b01      	subs	r3, #1
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	4a20      	ldr	r2, [pc, #128]	; (80034bc <vPortSuppressTicksAndSleep+0x190>)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3b01      	subs	r3, #1
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	e01a      	b.n	800347c <vPortSuppressTicksAndSleep+0x150>
 8003446:	4b19      	ldr	r3, [pc, #100]	; (80034ac <vPortSuppressTicksAndSleep+0x180>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	4b18      	ldr	r3, [pc, #96]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	fb02 f203 	mul.w	r2, r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	3301      	adds	r3, #1
 800346c:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	fb02 f203 	mul.w	r2, r2, r3
 8003474:	4911      	ldr	r1, [pc, #68]	; (80034bc <vPortSuppressTicksAndSleep+0x190>)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	600b      	str	r3, [r1, #0]
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <vPortSuppressTicksAndSleep+0x180>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <vPortSuppressTicksAndSleep+0x17c>)
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <vPortSuppressTicksAndSleep+0x184>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0b      	ldr	r2, [pc, #44]	; (80034bc <vPortSuppressTicksAndSleep+0x190>)
 800348e:	3b01      	subs	r3, #1
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	69b8      	ldr	r0, [r7, #24]
 8003494:	f7fe fd56 	bl	8001f44 <vTaskStepTick>
 8003498:	b662      	cpsie	i
 800349a:	bf00      	nop
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200001e0 	.word	0x200001e0
 80034a8:	e000e010 	.word	0xe000e010
 80034ac:	e000e018 	.word	0xe000e018
 80034b0:	200001dc 	.word	0x200001dc
 80034b4:	e000ed04 	.word	0xe000ed04
 80034b8:	200001e4 	.word	0x200001e4
 80034bc:	e000e014 	.word	0xe000e014

080034c0 <vPortSetupTimerInterrupt>:
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <vPortSetupTimerInterrupt+0x58>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a14      	ldr	r2, [pc, #80]	; (800351c <vPortSetupTimerInterrupt+0x5c>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	4a13      	ldr	r2, [pc, #76]	; (8003520 <vPortSetupTimerInterrupt+0x60>)
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <vPortSetupTimerInterrupt+0x60>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	4a10      	ldr	r2, [pc, #64]	; (8003524 <vPortSetupTimerInterrupt+0x64>)
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	4b10      	ldr	r3, [pc, #64]	; (8003528 <vPortSetupTimerInterrupt+0x68>)
 80034e6:	225e      	movs	r2, #94	; 0x5e
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <vPortSetupTimerInterrupt+0x6c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <vPortSetupTimerInterrupt+0x70>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	4b08      	ldr	r3, [pc, #32]	; (8003518 <vPortSetupTimerInterrupt+0x58>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a08      	ldr	r2, [pc, #32]	; (800351c <vPortSetupTimerInterrupt+0x5c>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	4a0c      	ldr	r2, [pc, #48]	; (8003534 <vPortSetupTimerInterrupt+0x74>)
 8003504:	3b01      	subs	r3, #1
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <vPortSetupTimerInterrupt+0x6c>)
 800350a:	2207      	movs	r2, #7
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000000 	.word	0x20000000
 800351c:	10624dd3 	.word	0x10624dd3
 8003520:	200001dc 	.word	0x200001dc
 8003524:	200001e0 	.word	0x200001e0
 8003528:	200001e4 	.word	0x200001e4
 800352c:	e000e010 	.word	0xe000e010
 8003530:	e000e018 	.word	0xe000e018
 8003534:	e000e014 	.word	0xe000e014

08003538 <xQueueGenericReset>:
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
 8003542:	2301      	movs	r3, #1
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <xQueueGenericReset+0x2e>
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <xQueueGenericReset+0x2c>
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d05d      	beq.n	8003628 <xQueueGenericReset+0xf0>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d059      	beq.n	8003628 <xQueueGenericReset+0xf0>
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	2100      	movs	r1, #0
 800357e:	fba3 2302 	umull	r2, r3, r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d000      	beq.n	8003588 <xQueueGenericReset+0x50>
 8003586:	2101      	movs	r1, #1
 8003588:	460b      	mov	r3, r1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d14c      	bne.n	8003628 <xQueueGenericReset+0xf0>
 800358e:	f7ff fe2f 	bl	80031f0 <vPortEnterCritical>
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359a:	6939      	ldr	r1, [r7, #16]
 800359c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	441a      	add	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2200      	movs	r2, #0
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	605a      	str	r2, [r3, #4]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	3b01      	subs	r3, #1
 80035c0:	6939      	ldr	r1, [r7, #16]
 80035c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	441a      	add	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	22ff      	movs	r2, #255	; 0xff
 80035d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	22ff      	movs	r2, #255	; 0xff
 80035da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d114      	bne.n	800360e <xQueueGenericReset+0xd6>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01a      	beq.n	8003622 <xQueueGenericReset+0xea>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	3310      	adds	r3, #16
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe fedf 	bl	80023b4 <xTaskRemoveFromEventList>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d012      	beq.n	8003622 <xQueueGenericReset+0xea>
 80035fc:	4b15      	ldr	r3, [pc, #84]	; (8003654 <xQueueGenericReset+0x11c>)
 80035fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	e009      	b.n	8003622 <xQueueGenericReset+0xea>
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3310      	adds	r3, #16
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fc6e 	bl	8002ef4 <vListInitialise>
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3324      	adds	r3, #36	; 0x24
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fc69 	bl	8002ef4 <vListInitialise>
 8003622:	f7ff fe15 	bl	8003250 <vPortExitCritical>
 8003626:	e001      	b.n	800362c <xQueueGenericReset+0xf4>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <xQueueGenericReset+0x110>
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	bf00      	nop
 8003646:	e7fe      	b.n	8003646 <xQueueGenericReset+0x10e>
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	e000ed04 	.word	0xe000ed04

08003658 <xQueueGenericCreate>:
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	71fb      	strb	r3, [r7, #7]
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02e      	beq.n	80036ce <xQueueGenericCreate+0x76>
 8003670:	2100      	movs	r1, #0
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	fba3 2302 	umull	r2, r3, r3, r2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d000      	beq.n	8003680 <xQueueGenericCreate+0x28>
 800367e:	2101      	movs	r1, #1
 8003680:	460b      	mov	r3, r1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d123      	bne.n	80036ce <xQueueGenericCreate+0x76>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003692:	d81c      	bhi.n	80036ce <xQueueGenericCreate+0x76>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	3350      	adds	r3, #80	; 0x50
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fc02 	bl	8002eac <pvPortMalloc>
 80036a8:	61f8      	str	r0, [r7, #28]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01c      	beq.n	80036ea <xQueueGenericCreate+0x92>
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3350      	adds	r3, #80	; 0x50
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	79fa      	ldrb	r2, [r7, #7]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4613      	mov	r3, r2
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f814 	bl	80036f4 <prvInitialiseNewQueue>
 80036cc:	e00d      	b.n	80036ea <xQueueGenericCreate+0x92>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10a      	bne.n	80036ea <xQueueGenericCreate+0x92>
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	bf00      	nop
 80036e8:	e7fe      	b.n	80036e8 <xQueueGenericCreate+0x90>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	4618      	mov	r0, r3
 80036ee:	3720      	adds	r7, #32
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <prvInitialiseNewQueue>:
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	70fb      	strb	r3, [r7, #3]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d103      	bne.n	8003710 <prvInitialiseNewQueue+0x1c>
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	e002      	b.n	8003716 <prvInitialiseNewQueue+0x22>
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	63da      	str	r2, [r3, #60]	; 0x3c
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40
 8003722:	2101      	movs	r1, #1
 8003724:	69b8      	ldr	r0, [r7, #24]
 8003726:	f7ff ff07 	bl	8003538 <xQueueGenericReset>
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003732:	bf00      	nop
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <xQueueReceive>:
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	; 0x30
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <xQueueReceive+0x30>
 8003756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	623b      	str	r3, [r7, #32]
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <xQueueReceive+0x2e>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <xQueueReceive+0x3e>
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <xQueueReceive+0x42>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueReceive+0x44>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueReceive+0x5e>
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueReceive+0x5c>
 800379a:	f7ff f879 	bl	8002890 <xTaskGetSchedulerState>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <xQueueReceive+0x6e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <xQueueReceive+0x72>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <xQueueReceive+0x74>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueReceive+0x8e>
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueReceive+0x8c>
 80037ca:	f7ff fd11 	bl	80031f0 <vPortEnterCritical>
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01f      	beq.n	800381a <xQueueReceive+0xde>
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037de:	f000 f88d 	bl	80038fc <prvCopyDataFromQueue>
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	1e5a      	subs	r2, r3, #1
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00f      	beq.n	8003812 <xQueueReceive+0xd6>
 80037f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f4:	3310      	adds	r3, #16
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fddc 	bl	80023b4 <xTaskRemoveFromEventList>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <xQueueReceive+0xd6>
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <xQueueReceive+0x1bc>)
 8003804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f7ff fd1d 	bl	8003250 <vPortExitCritical>
 8003816:	2301      	movs	r3, #1
 8003818:	e069      	b.n	80038ee <xQueueReceive+0x1b2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d103      	bne.n	8003828 <xQueueReceive+0xec>
 8003820:	f7ff fd16 	bl	8003250 <vPortExitCritical>
 8003824:	2300      	movs	r3, #0
 8003826:	e062      	b.n	80038ee <xQueueReceive+0x1b2>
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <xQueueReceive+0x100>
 800382e:	f107 0310 	add.w	r3, r7, #16
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fe96 	bl	8002564 <vTaskInternalSetTimeOutState>
 8003838:	2301      	movs	r3, #1
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383c:	f7ff fd08 	bl	8003250 <vPortExitCritical>
 8003840:	f7fe fa32 	bl	8001ca8 <vTaskSuspendAll>
 8003844:	f7ff fcd4 	bl	80031f0 <vPortEnterCritical>
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800384e:	b25b      	sxtb	r3, r3
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d103      	bne.n	800385e <xQueueReceive+0x122>
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003864:	b25b      	sxtb	r3, r3
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	d103      	bne.n	8003874 <xQueueReceive+0x138>
 800386c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003874:	f7ff fcec 	bl	8003250 <vPortExitCritical>
 8003878:	1d3a      	adds	r2, r7, #4
 800387a:	f107 0310 	add.w	r3, r7, #16
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe fe85 	bl	8002590 <xTaskCheckForTimeOut>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d123      	bne.n	80038d4 <xQueueReceive+0x198>
 800388c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800388e:	f000 f8ad 	bl	80039ec <prvIsQueueEmpty>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d017      	beq.n	80038c8 <xQueueReceive+0x18c>
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	3324      	adds	r3, #36	; 0x24
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe fd1d 	bl	80022e0 <vTaskPlaceOnEventList>
 80038a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038a8:	f000 f84e 	bl	8003948 <prvUnlockQueue>
 80038ac:	f7fe fa40 	bl	8001d30 <xTaskResumeAll>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d189      	bne.n	80037ca <xQueueReceive+0x8e>
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <xQueueReceive+0x1bc>)
 80038b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	e780      	b.n	80037ca <xQueueReceive+0x8e>
 80038c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ca:	f000 f83d 	bl	8003948 <prvUnlockQueue>
 80038ce:	f7fe fa2f 	bl	8001d30 <xTaskResumeAll>
 80038d2:	e77a      	b.n	80037ca <xQueueReceive+0x8e>
 80038d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d6:	f000 f837 	bl	8003948 <prvUnlockQueue>
 80038da:	f7fe fa29 	bl	8001d30 <xTaskResumeAll>
 80038de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e0:	f000 f884 	bl	80039ec <prvIsQueueEmpty>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f43f af6f 	beq.w	80037ca <xQueueReceive+0x8e>
 80038ec:	2300      	movs	r3, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	3730      	adds	r7, #48	; 0x30
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <prvCopyDataFromQueue>:
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d018      	beq.n	8003940 <prvCopyDataFromQueue+0x44>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	441a      	add	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60da      	str	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	429a      	cmp	r2, r3
 8003926:	d303      	bcc.n	8003930 <prvCopyDataFromQueue+0x34>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68d9      	ldr	r1, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	461a      	mov	r2, r3
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f928 	bl	8003b90 <memcpy>
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvUnlockQueue>:
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	f7ff fc4e 	bl	80031f0 <vPortEnterCritical>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800395a:	73fb      	strb	r3, [r7, #15]
 800395c:	e011      	b.n	8003982 <prvUnlockQueue+0x3a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2b00      	cmp	r3, #0
 8003964:	d012      	beq.n	800398c <prvUnlockQueue+0x44>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3324      	adds	r3, #36	; 0x24
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fd22 	bl	80023b4 <xTaskRemoveFromEventList>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <prvUnlockQueue+0x32>
 8003976:	f7fe fe71 	bl	800265c <vTaskMissedYield>
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	3b01      	subs	r3, #1
 800397e:	b2db      	uxtb	r3, r3
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003986:	2b00      	cmp	r3, #0
 8003988:	dce9      	bgt.n	800395e <prvUnlockQueue+0x16>
 800398a:	e000      	b.n	800398e <prvUnlockQueue+0x46>
 800398c:	bf00      	nop
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003996:	f7ff fc5b 	bl	8003250 <vPortExitCritical>
 800399a:	f7ff fc29 	bl	80031f0 <vPortEnterCritical>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a4:	73bb      	strb	r3, [r7, #14]
 80039a6:	e011      	b.n	80039cc <prvUnlockQueue+0x84>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d012      	beq.n	80039d6 <prvUnlockQueue+0x8e>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3310      	adds	r3, #16
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe fcfd 	bl	80023b4 <xTaskRemoveFromEventList>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <prvUnlockQueue+0x7c>
 80039c0:	f7fe fe4c 	bl	800265c <vTaskMissedYield>
 80039c4:	7bbb      	ldrb	r3, [r7, #14]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	73bb      	strb	r3, [r7, #14]
 80039cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	dce9      	bgt.n	80039a8 <prvUnlockQueue+0x60>
 80039d4:	e000      	b.n	80039d8 <prvUnlockQueue+0x90>
 80039d6:	bf00      	nop
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	22ff      	movs	r2, #255	; 0xff
 80039dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039e0:	f7ff fc36 	bl	8003250 <vPortExitCritical>
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <prvIsQueueEmpty>:
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	f7ff fbfc 	bl	80031f0 <vPortEnterCritical>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d102      	bne.n	8003a06 <prvIsQueueEmpty+0x1a>
 8003a00:	2301      	movs	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e001      	b.n	8003a0a <prvIsQueueEmpty+0x1e>
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	f7ff fc21 	bl	8003250 <vPortExitCritical>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <vQueueAddToRegistry>:
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <vQueueAddToRegistry+0x2a>
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <vQueueAddToRegistry+0x28>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d024      	beq.n	8003a92 <vQueueAddToRegistry+0x7a>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e01e      	b.n	8003a8c <vQueueAddToRegistry+0x74>
 8003a4e:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <vQueueAddToRegistry+0x98>)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d105      	bne.n	8003a6a <vQueueAddToRegistry+0x52>
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <vQueueAddToRegistry+0x98>)
 8003a64:	4413      	add	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	e013      	b.n	8003a92 <vQueueAddToRegistry+0x7a>
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <vQueueAddToRegistry+0x6e>
 8003a70:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <vQueueAddToRegistry+0x98>)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <vQueueAddToRegistry+0x6e>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <vQueueAddToRegistry+0x98>)
 8003a82:	4413      	add	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b07      	cmp	r3, #7
 8003a90:	d9dd      	bls.n	8003a4e <vQueueAddToRegistry+0x36>
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <vQueueAddToRegistry+0x8c>
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000244 	.word	0x20000244

08003ab4 <vQueueWaitForMessageRestricted>:
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	f7ff fb94 	bl	80031f0 <vPortEnterCritical>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d103      	bne.n	8003ade <vQueueWaitForMessageRestricted+0x2a>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d103      	bne.n	8003af4 <vQueueWaitForMessageRestricted+0x40>
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003af4:	f7ff fbac 	bl	8003250 <vPortExitCritical>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <vQueueWaitForMessageRestricted+0x5a>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	3324      	adds	r3, #36	; 0x24
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fe fc0d 	bl	8002328 <vTaskPlaceOnEventListRestricted>
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f7ff ff1a 	bl	8003948 <prvUnlockQueue>
 8003b14:	bf00      	nop
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <__errno>:
 8003b1c:	4b01      	ldr	r3, [pc, #4]	; (8003b24 <__errno+0x8>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000014 	.word	0x20000014

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	4d0c      	ldr	r5, [pc, #48]	; (8003b60 <__libc_init_array+0x38>)
 8003b2e:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b30:	1b64      	subs	r4, r4, r5
 8003b32:	10a4      	asrs	r4, r4, #2
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	f000 f904 	bl	8003d44 <_init>
 8003b3c:	2600      	movs	r6, #0
 8003b3e:	4d0a      	ldr	r5, [pc, #40]	; (8003b68 <__libc_init_array+0x40>)
 8003b40:	4c0a      	ldr	r4, [pc, #40]	; (8003b6c <__libc_init_array+0x44>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08003da4 	.word	0x08003da4
 8003b64:	08003da4 	.word	0x08003da4
 8003b68:	08003da4 	.word	0x08003da4
 8003b6c:	08003da8 	.word	0x08003da8

08003b70 <malloc>:
 8003b70:	4b02      	ldr	r3, [pc, #8]	; (8003b7c <malloc+0xc>)
 8003b72:	4601      	mov	r1, r0
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	f000 b86d 	b.w	8003c54 <_malloc_r>
 8003b7a:	bf00      	nop
 8003b7c:	20000014 	.word	0x20000014

08003b80 <free>:
 8003b80:	4b02      	ldr	r3, [pc, #8]	; (8003b8c <free+0xc>)
 8003b82:	4601      	mov	r1, r0
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	f000 b819 	b.w	8003bbc <_free_r>
 8003b8a:	bf00      	nop
 8003b8c:	20000014 	.word	0x20000014

08003b90 <memcpy>:
 8003b90:	440a      	add	r2, r1
 8003b92:	4291      	cmp	r1, r2
 8003b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b98:	d100      	bne.n	8003b9c <memcpy+0xc>
 8003b9a:	4770      	bx	lr
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ba2:	4291      	cmp	r1, r2
 8003ba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ba8:	d1f9      	bne.n	8003b9e <memcpy+0xe>
 8003baa:	bd10      	pop	{r4, pc}

08003bac <memset>:
 8003bac:	4603      	mov	r3, r0
 8003bae:	4402      	add	r2, r0
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d100      	bne.n	8003bb6 <memset+0xa>
 8003bb4:	4770      	bx	lr
 8003bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bba:	e7f9      	b.n	8003bb0 <memset+0x4>

08003bbc <_free_r>:
 8003bbc:	b538      	push	{r3, r4, r5, lr}
 8003bbe:	4605      	mov	r5, r0
 8003bc0:	2900      	cmp	r1, #0
 8003bc2:	d043      	beq.n	8003c4c <_free_r+0x90>
 8003bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc8:	1f0c      	subs	r4, r1, #4
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bfb8      	it	lt
 8003bce:	18e4      	addlt	r4, r4, r3
 8003bd0:	f000 f8aa 	bl	8003d28 <__malloc_lock>
 8003bd4:	4a1e      	ldr	r2, [pc, #120]	; (8003c50 <_free_r+0x94>)
 8003bd6:	6813      	ldr	r3, [r2, #0]
 8003bd8:	4610      	mov	r0, r2
 8003bda:	b933      	cbnz	r3, 8003bea <_free_r+0x2e>
 8003bdc:	6063      	str	r3, [r4, #4]
 8003bde:	6014      	str	r4, [r2, #0]
 8003be0:	4628      	mov	r0, r5
 8003be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003be6:	f000 b8a5 	b.w	8003d34 <__malloc_unlock>
 8003bea:	42a3      	cmp	r3, r4
 8003bec:	d90a      	bls.n	8003c04 <_free_r+0x48>
 8003bee:	6821      	ldr	r1, [r4, #0]
 8003bf0:	1862      	adds	r2, r4, r1
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	bf01      	itttt	eq
 8003bf6:	681a      	ldreq	r2, [r3, #0]
 8003bf8:	685b      	ldreq	r3, [r3, #4]
 8003bfa:	1852      	addeq	r2, r2, r1
 8003bfc:	6022      	streq	r2, [r4, #0]
 8003bfe:	6063      	str	r3, [r4, #4]
 8003c00:	6004      	str	r4, [r0, #0]
 8003c02:	e7ed      	b.n	8003be0 <_free_r+0x24>
 8003c04:	461a      	mov	r2, r3
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	b10b      	cbz	r3, 8003c0e <_free_r+0x52>
 8003c0a:	42a3      	cmp	r3, r4
 8003c0c:	d9fa      	bls.n	8003c04 <_free_r+0x48>
 8003c0e:	6811      	ldr	r1, [r2, #0]
 8003c10:	1850      	adds	r0, r2, r1
 8003c12:	42a0      	cmp	r0, r4
 8003c14:	d10b      	bne.n	8003c2e <_free_r+0x72>
 8003c16:	6820      	ldr	r0, [r4, #0]
 8003c18:	4401      	add	r1, r0
 8003c1a:	1850      	adds	r0, r2, r1
 8003c1c:	4283      	cmp	r3, r0
 8003c1e:	6011      	str	r1, [r2, #0]
 8003c20:	d1de      	bne.n	8003be0 <_free_r+0x24>
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4401      	add	r1, r0
 8003c28:	6011      	str	r1, [r2, #0]
 8003c2a:	6053      	str	r3, [r2, #4]
 8003c2c:	e7d8      	b.n	8003be0 <_free_r+0x24>
 8003c2e:	d902      	bls.n	8003c36 <_free_r+0x7a>
 8003c30:	230c      	movs	r3, #12
 8003c32:	602b      	str	r3, [r5, #0]
 8003c34:	e7d4      	b.n	8003be0 <_free_r+0x24>
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	1821      	adds	r1, r4, r0
 8003c3a:	428b      	cmp	r3, r1
 8003c3c:	bf01      	itttt	eq
 8003c3e:	6819      	ldreq	r1, [r3, #0]
 8003c40:	685b      	ldreq	r3, [r3, #4]
 8003c42:	1809      	addeq	r1, r1, r0
 8003c44:	6021      	streq	r1, [r4, #0]
 8003c46:	6063      	str	r3, [r4, #4]
 8003c48:	6054      	str	r4, [r2, #4]
 8003c4a:	e7c9      	b.n	8003be0 <_free_r+0x24>
 8003c4c:	bd38      	pop	{r3, r4, r5, pc}
 8003c4e:	bf00      	nop
 8003c50:	200001f0 	.word	0x200001f0

08003c54 <_malloc_r>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	1ccd      	adds	r5, r1, #3
 8003c58:	f025 0503 	bic.w	r5, r5, #3
 8003c5c:	3508      	adds	r5, #8
 8003c5e:	2d0c      	cmp	r5, #12
 8003c60:	bf38      	it	cc
 8003c62:	250c      	movcc	r5, #12
 8003c64:	2d00      	cmp	r5, #0
 8003c66:	4606      	mov	r6, r0
 8003c68:	db01      	blt.n	8003c6e <_malloc_r+0x1a>
 8003c6a:	42a9      	cmp	r1, r5
 8003c6c:	d903      	bls.n	8003c76 <_malloc_r+0x22>
 8003c6e:	230c      	movs	r3, #12
 8003c70:	6033      	str	r3, [r6, #0]
 8003c72:	2000      	movs	r0, #0
 8003c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c76:	f000 f857 	bl	8003d28 <__malloc_lock>
 8003c7a:	4921      	ldr	r1, [pc, #132]	; (8003d00 <_malloc_r+0xac>)
 8003c7c:	680a      	ldr	r2, [r1, #0]
 8003c7e:	4614      	mov	r4, r2
 8003c80:	b99c      	cbnz	r4, 8003caa <_malloc_r+0x56>
 8003c82:	4f20      	ldr	r7, [pc, #128]	; (8003d04 <_malloc_r+0xb0>)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	b923      	cbnz	r3, 8003c92 <_malloc_r+0x3e>
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	f000 f83c 	bl	8003d08 <_sbrk_r>
 8003c90:	6038      	str	r0, [r7, #0]
 8003c92:	4629      	mov	r1, r5
 8003c94:	4630      	mov	r0, r6
 8003c96:	f000 f837 	bl	8003d08 <_sbrk_r>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	d123      	bne.n	8003ce6 <_malloc_r+0x92>
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	6033      	str	r3, [r6, #0]
 8003ca4:	f000 f846 	bl	8003d34 <__malloc_unlock>
 8003ca8:	e7e3      	b.n	8003c72 <_malloc_r+0x1e>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	1b5b      	subs	r3, r3, r5
 8003cae:	d417      	bmi.n	8003ce0 <_malloc_r+0x8c>
 8003cb0:	2b0b      	cmp	r3, #11
 8003cb2:	d903      	bls.n	8003cbc <_malloc_r+0x68>
 8003cb4:	6023      	str	r3, [r4, #0]
 8003cb6:	441c      	add	r4, r3
 8003cb8:	6025      	str	r5, [r4, #0]
 8003cba:	e004      	b.n	8003cc6 <_malloc_r+0x72>
 8003cbc:	6863      	ldr	r3, [r4, #4]
 8003cbe:	42a2      	cmp	r2, r4
 8003cc0:	bf0c      	ite	eq
 8003cc2:	600b      	streq	r3, [r1, #0]
 8003cc4:	6053      	strne	r3, [r2, #4]
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	f000 f834 	bl	8003d34 <__malloc_unlock>
 8003ccc:	f104 000b 	add.w	r0, r4, #11
 8003cd0:	1d23      	adds	r3, r4, #4
 8003cd2:	f020 0007 	bic.w	r0, r0, #7
 8003cd6:	1ac2      	subs	r2, r0, r3
 8003cd8:	d0cc      	beq.n	8003c74 <_malloc_r+0x20>
 8003cda:	1a1b      	subs	r3, r3, r0
 8003cdc:	50a3      	str	r3, [r4, r2]
 8003cde:	e7c9      	b.n	8003c74 <_malloc_r+0x20>
 8003ce0:	4622      	mov	r2, r4
 8003ce2:	6864      	ldr	r4, [r4, #4]
 8003ce4:	e7cc      	b.n	8003c80 <_malloc_r+0x2c>
 8003ce6:	1cc4      	adds	r4, r0, #3
 8003ce8:	f024 0403 	bic.w	r4, r4, #3
 8003cec:	42a0      	cmp	r0, r4
 8003cee:	d0e3      	beq.n	8003cb8 <_malloc_r+0x64>
 8003cf0:	1a21      	subs	r1, r4, r0
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f000 f808 	bl	8003d08 <_sbrk_r>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d1dd      	bne.n	8003cb8 <_malloc_r+0x64>
 8003cfc:	e7cf      	b.n	8003c9e <_malloc_r+0x4a>
 8003cfe:	bf00      	nop
 8003d00:	200001f0 	.word	0x200001f0
 8003d04:	200001f4 	.word	0x200001f4

08003d08 <_sbrk_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	4d05      	ldr	r5, [pc, #20]	; (8003d24 <_sbrk_r+0x1c>)
 8003d0e:	4604      	mov	r4, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	602b      	str	r3, [r5, #0]
 8003d14:	f7fc fc16 	bl	8000544 <_sbrk>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_sbrk_r+0x1a>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_sbrk_r+0x1a>
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	20000284 	.word	0x20000284

08003d28 <__malloc_lock>:
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <__malloc_lock+0x8>)
 8003d2a:	f000 b809 	b.w	8003d40 <__retarget_lock_acquire_recursive>
 8003d2e:	bf00      	nop
 8003d30:	2000028c 	.word	0x2000028c

08003d34 <__malloc_unlock>:
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <__malloc_unlock+0x8>)
 8003d36:	f000 b804 	b.w	8003d42 <__retarget_lock_release_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	2000028c 	.word	0x2000028c

08003d40 <__retarget_lock_acquire_recursive>:
 8003d40:	4770      	bx	lr

08003d42 <__retarget_lock_release_recursive>:
 8003d42:	4770      	bx	lr

08003d44 <_init>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr

08003d50 <_fini>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr
