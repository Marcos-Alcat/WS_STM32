
interrup-RTOS-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b4c  08005b4c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005b4c  08005b4c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b4c  08005b4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000078  08005bcc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005bcc  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fa1  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea9  00000000  00000000  00034042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00036ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00037f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d76  00000000  00000000  00038e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d6d  00000000  00000000  00052bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095be6  00000000  00000000  0006495b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  000fa594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005acc 	.word	0x08005acc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005acc 	.word	0x08005acc

08000150 <Adc>:

int tarea = 0;
uint32_t pMillis;
#define THRESHOLD_VALUE 2048

static void Adc(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
		/*
		 * La función HAL-ADC-Start-IT() es responsable de permitir la interrupción y inicio de la conversión de ADC de los canales regulares.
		 * Toma en un solo parámetro que es el puntero de la estructura ADC-HandleTypeDef que contiene los parámetros de configuración para el
		 * ADC especificado. En nuestro caso es "&hadc1.
		 */
		HAL_ADC_Start_IT(&hadc1);
 8000158:	4801      	ldr	r0, [pc, #4]	; (8000160 <Adc+0x10>)
 800015a:	f000 fd03 	bl	8000b64 <HAL_ADC_Start_IT>
 800015e:	e7fb      	b.n	8000158 <Adc+0x8>
 8000160:	20000208 	.word	0x20000208

08000164 <Led>:
		// This delay marks the conversion rate
		//vTaskDelay(100/portTICK_PERIOD_MS);
	}
}

static void Led(void *pvParameters){
 8000164:	b580      	push	{r7, lr}
 8000166:	b084      	sub	sp, #16
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	uint16_t received_value;
	while (1){
		// Reads the value from the queue
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 800016c:	4b04      	ldr	r3, [pc, #16]	; (8000180 <Led+0x1c>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	f107 010e 	add.w	r1, r7, #14
 8000174:	f04f 32ff 	mov.w	r2, #4294967295
 8000178:	4618      	mov	r0, r3
 800017a:	f002 ff13 	bl	8002fa4 <xQueueReceive>
 800017e:	e7f5      	b.n	800016c <Led+0x8>
 8000180:	20000238 	.word	0x20000238
 8000184:	00000000 	.word	0x00000000

08000188 <Config>:
			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
		}
	}
}

static void Config(void *pvParameters){
 8000188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800018c:	b085      	sub	sp, #20
 800018e:	af00      	add	r7, sp, #0
 8000190:	6078      	str	r0, [r7, #4]
	//unsigned portBASE_TYPE uxPriority;
	//uxPriority = uxTaskPriorityGet( NULL );
	uint16_t received_value;
	while (1){
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000192:	4b35      	ldr	r3, [pc, #212]	; (8000268 <Config+0xe0>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f04f 31ff 	mov.w	r1, #4294967295
 800019a:	4618      	mov	r0, r3
 800019c:	f002 ffe2 	bl	8003164 <xQueueSemaphoreTake>
		vTaskPrioritySet( xTarea_ADC_Handle, 3);
 80001a0:	4b32      	ldr	r3, [pc, #200]	; (800026c <Config+0xe4>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2103      	movs	r1, #3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f003 fbf0 	bl	800398c <vTaskPrioritySet>
		HAL_ADC_Start_IT(&hadc1);
 80001ac:	4830      	ldr	r0, [pc, #192]	; (8000270 <Config+0xe8>)
 80001ae:	f000 fcd9 	bl	8000b64 <HAL_ADC_Start_IT>
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 80001b2:	4b30      	ldr	r3, [pc, #192]	; (8000274 <Config+0xec>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	f107 010e 	add.w	r1, r7, #14
 80001ba:	f04f 32ff 	mov.w	r2, #4294967295
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fef0 	bl	8002fa4 <xQueueReceive>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
 80001c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ca:	482b      	ldr	r0, [pc, #172]	; (8000278 <Config+0xf0>)
 80001cc:	f001 fa54 	bl	8001678 <HAL_GPIO_WritePin>
		while(received_value<2300){
 80001d0:	e00b      	b.n	80001ea <Config+0x62>
			HAL_ADC_Start_IT(&hadc1);
 80001d2:	4827      	ldr	r0, [pc, #156]	; (8000270 <Config+0xe8>)
 80001d4:	f000 fcc6 	bl	8000b64 <HAL_ADC_Start_IT>
			xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 80001d8:	4b26      	ldr	r3, [pc, #152]	; (8000274 <Config+0xec>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f107 010e 	add.w	r1, r7, #14
 80001e0:	f04f 32ff 	mov.w	r2, #4294967295
 80001e4:	4618      	mov	r0, r3
 80001e6:	f002 fedd 	bl	8002fa4 <xQueueReceive>
		while(received_value<2300){
 80001ea:	89fb      	ldrh	r3, [r7, #14]
 80001ec:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d9ee      	bls.n	80001d2 <Config+0x4a>
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fa:	481f      	ldr	r0, [pc, #124]	; (8000278 <Config+0xf0>)
 80001fc:	f001 fa3c 	bl	8001678 <HAL_GPIO_WritePin>

		//vTaskDelay(1000/portTICK_PERIOD_MS);

		//tomo el tiempo
		pMillis = HAL_GetTick();
 8000200:	f000 fbce 	bl	80009a0 <HAL_GetTick>
 8000204:	4603      	mov	r3, r0
 8000206:	4a1d      	ldr	r2, [pc, #116]	; (800027c <Config+0xf4>)
 8000208:	6013      	str	r3, [r2, #0]
		while (HAL_GetTick()>(pMillis + 4000000000)) {
 800020a:	e005      	b.n	8000218 <Config+0x90>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	4819      	ldr	r0, [pc, #100]	; (8000278 <Config+0xf0>)
 8000214:	f001 fa30 	bl	8001678 <HAL_GPIO_WritePin>
		while (HAL_GetTick()>(pMillis + 4000000000)) {
 8000218:	f000 fbc2 	bl	80009a0 <HAL_GetTick>
 800021c:	4603      	mov	r3, r0
 800021e:	4698      	mov	r8, r3
 8000220:	f04f 0900 	mov.w	r9, #0
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <Config+0xf4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	461a      	mov	r2, r3
 800022a:	f04f 0300 	mov.w	r3, #0
 800022e:	a10c      	add	r1, pc, #48	; (adr r1, 8000260 <Config+0xd8>)
 8000230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000234:	1814      	adds	r4, r2, r0
 8000236:	eb43 0501 	adc.w	r5, r3, r1
 800023a:	4544      	cmp	r4, r8
 800023c:	eb75 0309 	sbcs.w	r3, r5, r9
 8000240:	dbe4      	blt.n	800020c <Config+0x84>
		}
		//entro a un while que compara ese tiempo con el tiempo actual, si pasan 4 segundos sale
		pMillis = pMillis - HAL_GetTick();
 8000242:	4b0e      	ldr	r3, [pc, #56]	; (800027c <Config+0xf4>)
 8000244:	681e      	ldr	r6, [r3, #0]
 8000246:	f000 fbab 	bl	80009a0 <HAL_GetTick>
 800024a:	4603      	mov	r3, r0
 800024c:	1af3      	subs	r3, r6, r3
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <Config+0xf4>)
 8000250:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <Config+0xf0>)
 800025a:	f001 fa0d 	bl	8001678 <HAL_GPIO_WritePin>
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 800025e:	e798      	b.n	8000192 <Config+0xa>
 8000260:	ee6b2800 	.word	0xee6b2800
 8000264:	00000000 	.word	0x00000000
 8000268:	2000023c 	.word	0x2000023c
 800026c:	20000098 	.word	0x20000098
 8000270:	20000208 	.word	0x20000208
 8000274:	20000238 	.word	0x20000238
 8000278:	40011000 	.word	0x40011000
 800027c:	20000204 	.word	0x20000204

08000280 <HAL_ADC_ConvCpltCallback>:
		//HAL_Delay(80);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	static portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	static uint16_t adc_value = 0;

	// Obtains the conversion result
	adc_value = HAL_ADC_GetValue(hadc);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 fd21 	bl	8000cd0 <HAL_ADC_GetValue>
 800028e:	4603      	mov	r3, r0
 8000290:	b29a      	uxth	r2, r3
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HAL_ADC_ConvCpltCallback+0x5c>)
 8000294:	801a      	strh	r2, [r3, #0]

	// Sends the value to the queue
	xQueueOverwriteFromISR(adc_queue, &adc_value, &xHigherPriorityTaskWoken); //en la cinfig de interrup: ADC1 y ADC2 global poner una prioridad de 5, sino queda trabado ahí.
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HAL_ADC_ConvCpltCallback+0x60>)
 8000298:	6818      	ldr	r0, [r3, #0]
 800029a:	2302      	movs	r3, #2
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <HAL_ADC_ConvCpltCallback+0x64>)
 800029e:	490f      	ldr	r1, [pc, #60]	; (80002dc <HAL_ADC_ConvCpltCallback+0x5c>)
 80002a0:	f002 fd2a 	bl	8002cf8 <xQueueGenericSendFromISR>
	if(adc_value<2300)
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <HAL_ADC_ConvCpltCallback+0x5c>)
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d805      	bhi.n	80002bc <HAL_ADC_ConvCpltCallback+0x3c>
		xSemaphoreGiveFromISR(my_semph1, &xHigherPriorityTaskWoken);
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	490b      	ldr	r1, [pc, #44]	; (80002e4 <HAL_ADC_ConvCpltCallback+0x64>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fdd0 	bl	8002e5c <xQueueGiveFromISR>
	//xQueueOverwriteFromISR(adc_queue, &adc_value, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <HAL_ADC_ConvCpltCallback+0x64>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d007      	beq.n	80002d4 <HAL_ADC_ConvCpltCallback+0x54>
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <HAL_ADC_ConvCpltCallback+0x6c>)
 80002c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	f3bf 8f4f 	dsb	sy
 80002d0:	f3bf 8f6f 	isb	sy

	//dos botones: max: 1981
	//boton up: 2750
	//boton min: 2574
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000009c 	.word	0x2000009c
 80002e0:	20000238 	.word	0x20000238
 80002e4:	200000a0 	.word	0x200000a0
 80002e8:	2000023c 	.word	0x2000023c
 80002ec:	e000ed04 	.word	0xe000ed04

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f6:	f000 fb2b 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fa:	f000 f86b 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fe:	f000 f94f 	bl	80005a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000302:	f000 f8c3 	bl	800048c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000306:	f000 f8ff 	bl	8000508 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800030a:	2201      	movs	r2, #1
 800030c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000310:	4824      	ldr	r0, [pc, #144]	; (80003a4 <main+0xb4>)
 8000312:	f001 f9b1 	bl	8001678 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim2);
 8000316:	4824      	ldr	r0, [pc, #144]	; (80003a8 <main+0xb8>)
 8000318:	f001 fef6 	bl	8002108 <HAL_TIM_Base_Start>
  adc_queue = xQueueCreate(1,sizeof(uint16_t));
 800031c:	2200      	movs	r2, #0
 800031e:	2102      	movs	r1, #2
 8000320:	2001      	movs	r0, #1
 8000322:	f002 fb79 	bl	8002a18 <xQueueGenericCreate>
 8000326:	4603      	mov	r3, r0
 8000328:	4a20      	ldr	r2, [pc, #128]	; (80003ac <main+0xbc>)
 800032a:	6013      	str	r3, [r2, #0]
  vSemaphoreCreateBinary(my_semph1);
 800032c:	2203      	movs	r2, #3
 800032e:	2100      	movs	r1, #0
 8000330:	2001      	movs	r0, #1
 8000332:	f002 fb71 	bl	8002a18 <xQueueGenericCreate>
 8000336:	4603      	mov	r3, r0
 8000338:	4a1d      	ldr	r2, [pc, #116]	; (80003b0 <main+0xc0>)
 800033a:	6013      	str	r3, [r2, #0]
 800033c:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <main+0xc0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d006      	beq.n	8000352 <main+0x62>
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <main+0xc0>)
 8000346:	6818      	ldr	r0, [r3, #0]
 8000348:	2300      	movs	r3, #0
 800034a:	2200      	movs	r2, #0
 800034c:	2100      	movs	r1, #0
 800034e:	f002 fbd5 	bl	8002afc <xQueueGenericSend>
  xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <main+0xc0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f04f 31ff 	mov.w	r1, #4294967295
 800035a:	4618      	mov	r0, r3
 800035c:	f002 ff02 	bl	8003164 <xQueueSemaphoreTake>
  xTaskCreate(Adc, "ADC task", configMINIMAL_STACK_SIZE, NULL, 2, &xTarea_ADC_Handle);
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <main+0xc4>)
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	2302      	movs	r3, #2
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2300      	movs	r3, #0
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	4912      	ldr	r1, [pc, #72]	; (80003b8 <main+0xc8>)
 800036e:	4813      	ldr	r0, [pc, #76]	; (80003bc <main+0xcc>)
 8000370:	f003 f9a0 	bl	80036b4 <xTaskCreate>
  xTaskCreate(Led, "Led task", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000374:	2300      	movs	r3, #0
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	2302      	movs	r3, #2
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	2300      	movs	r3, #0
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	490f      	ldr	r1, [pc, #60]	; (80003c0 <main+0xd0>)
 8000382:	4810      	ldr	r0, [pc, #64]	; (80003c4 <main+0xd4>)
 8000384:	f003 f996 	bl	80036b4 <xTaskCreate>
  xTaskCreate(Config, "Config task", 200, NULL, 3, &xTarea_Config_Handle);
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <main+0xd8>)
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2303      	movs	r3, #3
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2300      	movs	r3, #0
 8000392:	22c8      	movs	r2, #200	; 0xc8
 8000394:	490d      	ldr	r1, [pc, #52]	; (80003cc <main+0xdc>)
 8000396:	480e      	ldr	r0, [pc, #56]	; (80003d0 <main+0xe0>)
 8000398:	f003 f98c 	bl	80036b4 <xTaskCreate>

  vTaskStartScheduler();
 800039c:	f003 fbbc 	bl	8003b18 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80003a0:	e7fe      	b.n	80003a0 <main+0xb0>
 80003a2:	bf00      	nop
 80003a4:	40011000 	.word	0x40011000
 80003a8:	20000240 	.word	0x20000240
 80003ac:	20000238 	.word	0x20000238
 80003b0:	2000023c 	.word	0x2000023c
 80003b4:	20000098 	.word	0x20000098
 80003b8:	08005ae4 	.word	0x08005ae4
 80003bc:	08000151 	.word	0x08000151
 80003c0:	08005af0 	.word	0x08005af0
 80003c4:	08000165 	.word	0x08000165
 80003c8:	20000094 	.word	0x20000094
 80003cc:	08005afc 	.word	0x08005afc
 80003d0:	08000189 	.word	0x08000189

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b094      	sub	sp, #80	; 0x50
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003de:	2228      	movs	r2, #40	; 0x28
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f005 faa6 	bl	8005934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000404:	2301      	movs	r3, #1
 8000406:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	2301      	movs	r3, #1
 8000414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2302      	movs	r3, #2
 8000418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000420:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000424:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042a:	4618      	mov	r0, r3
 800042c:	f001 f93c 	bl	80016a8 <HAL_RCC_OscConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000436:	f000 f911 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	230f      	movs	r3, #15
 800043c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	2302      	movs	r3, #2
 8000440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2102      	movs	r1, #2
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fba6 	bl	8001ba8 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000462:	f000 f8fb 	bl	800065c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000466:	2302      	movs	r3, #2
 8000468:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800046a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800046e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fd42 	bl	8001efc <HAL_RCCEx_PeriphCLKConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800047e:	f000 f8ed 	bl	800065c <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3750      	adds	r7, #80	; 0x50
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_ADC1_Init+0x74>)
 800049e:	4a19      	ldr	r2, [pc, #100]	; (8000504 <MX_ADC1_Init+0x78>)
 80004a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <MX_ADC1_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_ADC1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_ADC1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_ADC1_Init+0x74>)
 80004b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_ADC1_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_ADC1_Init+0x74>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <MX_ADC1_Init+0x74>)
 80004ca:	f000 fa73 	bl	80009b4 <HAL_ADC_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004d4:	f000 f8c2 	bl	800065c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004d8:	2305      	movs	r3, #5
 80004da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004dc:	2301      	movs	r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	4619      	mov	r1, r3
 80004e8:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_ADC1_Init+0x74>)
 80004ea:	f000 fcc5 	bl	8000e78 <HAL_ADC_ConfigChannel>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004f4:	f000 f8b2 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000208 	.word	0x20000208
 8000504:	40012400 	.word	0x40012400

08000508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051c:	463b      	mov	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000524:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_TIM2_Init+0x94>)
 8000526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_TIM2_Init+0x94>)
 800052e:	2247      	movs	r2, #71	; 0x47
 8000530:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <MX_TIM2_Init+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_TIM2_Init+0x94>)
 800053a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_TIM2_Init+0x94>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_TIM2_Init+0x94>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800054c:	4813      	ldr	r0, [pc, #76]	; (800059c <MX_TIM2_Init+0x94>)
 800054e:	f001 fd8b 	bl	8002068 <HAL_TIM_Base_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000558:	f000 f880 	bl	800065c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	4619      	mov	r1, r3
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <MX_TIM2_Init+0x94>)
 800056a:	f001 ff71 	bl	8002450 <HAL_TIM_ConfigClockSource>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000574:	f000 f872 	bl	800065c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_TIM2_Init+0x94>)
 8000586:	f002 f947 	bl	8002818 <HAL_TIMEx_MasterConfigSynchronization>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000590:	f000 f864 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000240 	.word	0x20000240

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_GPIO_Init+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <MX_GPIO_Init+0x90>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_GPIO_Init+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0310 	and.w	r3, r3, #16
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_GPIO_Init+0x90>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <MX_GPIO_Init+0x90>)
 80005d2:	f043 0320 	orr.w	r3, r3, #32
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_GPIO_Init+0x90>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0320 	and.w	r3, r3, #32
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_GPIO_Init+0x90>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <MX_GPIO_Init+0x90>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_GPIO_Init+0x90>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	480c      	ldr	r0, [pc, #48]	; (8000634 <MX_GPIO_Init+0x94>)
 8000604:	f001 f838 	bl	8001678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2302      	movs	r3, #2
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_GPIO_Init+0x94>)
 8000622:	f000 fea5 	bl	8001370 <HAL_GPIO_Init>

}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	40011000 	.word	0x40011000

08000638 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d101      	bne.n	800064e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800064a:	f000 f997 	bl	800097c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40012c00 	.word	0x40012c00

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_MspInit+0x5c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_MspInit+0x5c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <HAL_MspInit+0x5c>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x5c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_MspInit+0x60>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_MspInit+0x60>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <HAL_ADC_MspInit+0x7c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d129      	bne.n	8000740 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_ADC_MspInit+0x80>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a16      	ldr	r2, [pc, #88]	; (800074c <HAL_ADC_MspInit+0x80>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_ADC_MspInit+0x80>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_ADC_MspInit+0x80>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <HAL_ADC_MspInit+0x80>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_ADC_MspInit+0x80>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_BTN_INT_Pin;
 800071c:	2320      	movs	r3, #32
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000720:	2303      	movs	r3, #3
 8000722:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <HAL_ADC_MspInit+0x84>)
 800072c:	f000 fe20 	bl	8001370 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2105      	movs	r1, #5
 8000734:	2012      	movs	r0, #18
 8000736:	f000 fdf0 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800073a:	2012      	movs	r0, #18
 800073c:	f000 fe09 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40012400 	.word	0x40012400
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800

08000754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000764:	d10b      	bne.n	800077e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_TIM_Base_MspInit+0x34>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_TIM_Base_MspInit+0x34>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_TIM_Base_MspInit+0x34>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800079c:	2200      	movs	r2, #0
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	2019      	movs	r0, #25
 80007a2:	f000 fdba 	bl	800131a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007a6:	2019      	movs	r0, #25
 80007a8:	f000 fdd3 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_InitTick+0x9c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <HAL_InitTick+0x9c>)
 80007b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_InitTick+0x9c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c4:	f107 0210 	add.w	r2, r7, #16
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fb46 	bl	8001e60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007d4:	f001 fb30 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 80007d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <HAL_InitTick+0xa0>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0c9b      	lsrs	r3, r3, #18
 80007e4:	3b01      	subs	r3, #1
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_InitTick+0xa4>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <HAL_InitTick+0xa8>)
 80007ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_InitTick+0xa4>)
 80007f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_InitTick+0xa4>)
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_InitTick+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_InitTick+0xa4>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <HAL_InitTick+0xa4>)
 800080a:	f001 fc2d 	bl	8002068 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d104      	bne.n	800081e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <HAL_InitTick+0xa4>)
 8000816:	f001 fcc1 	bl	800219c <HAL_TIM_Base_Start_IT>
 800081a:	4603      	mov	r3, r0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3730      	adds	r7, #48	; 0x30
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	431bde83 	.word	0x431bde83
 8000830:	20000288 	.word	0x20000288
 8000834:	40012c00 	.word	0x40012c00

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
	...

08000864 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <ADC1_2_IRQHandler+0x10>)
 800086a:	f000 fa3d 	bl	8000ce8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000208 	.word	0x20000208

08000878 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <TIM1_UP_IRQHandler+0x10>)
 800087e:	f001 fcdf 	bl	8002240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000288 	.word	0x20000288

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f004 fff2 	bl	80058a4 <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20005000 	.word	0x20005000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	200000a4 	.word	0x200000a4
 80008f4:	20000328 	.word	0x20000328

080008f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000904:	f7ff fff8 	bl	80008f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800090a:	490c      	ldr	r1, [pc, #48]	; (800093c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <LoopFillZerobss+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a09      	ldr	r2, [pc, #36]	; (8000944 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000920:	4c09      	ldr	r4, [pc, #36]	; (8000948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092e:	f004 ffbf 	bl	80058b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000932:	f7ff fcdd 	bl	80002f0 <main>
  bx lr
 8000936:	4770      	bx	lr
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000940:	08005b54 	.word	0x08005b54
  ldr r2, =_sbss
 8000944:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000948:	20000324 	.word	0x20000324

0800094c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <CAN1_RX1_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_Init+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <HAL_Init+0x28>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 fccf 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff ff10 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fe7c 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x1c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x20>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a03      	ldr	r2, [pc, #12]	; (800099c <HAL_IncTick+0x20>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000008 	.word	0x20000008
 800099c:	200002d0 	.word	0x200002d0

080009a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <HAL_GetTick+0x10>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	200002d0 	.word	0x200002d0

080009b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e0be      	b.n	8000b54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fe6a 	bl	80006cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 fb8f 	bl	800111c <ADC_ConversionStop_Disable>
 80009fe:	4603      	mov	r3, r0
 8000a00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	f003 0310 	and.w	r3, r3, #16
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 8099 	bne.w	8000b42 <HAL_ADC_Init+0x18e>
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f040 8095 	bne.w	8000b42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a20:	f023 0302 	bic.w	r3, r3, #2
 8000a24:	f043 0202 	orr.w	r2, r3, #2
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7b1b      	ldrb	r3, [r3, #12]
 8000a3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a4c:	d003      	beq.n	8000a56 <HAL_ADC_Init+0xa2>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d102      	bne.n	8000a5c <HAL_ADC_Init+0xa8>
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	e000      	b.n	8000a5e <HAL_ADC_Init+0xaa>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7d1b      	ldrb	r3, [r3, #20]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d119      	bne.n	8000aa0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7b1b      	ldrb	r3, [r3, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d109      	bne.n	8000a88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	035a      	lsls	r2, r3, #13
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	e00b      	b.n	8000aa0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	f043 0220 	orr.w	r2, r3, #32
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	f043 0201 	orr.w	r2, r3, #1
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_Init+0x1a8>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	6812      	ldr	r2, [r2, #0]
 8000ac2:	68b9      	ldr	r1, [r7, #8]
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad0:	d003      	beq.n	8000ada <HAL_ADC_Init+0x126>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d104      	bne.n	8000ae4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	051b      	lsls	r3, r3, #20
 8000ae2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_ADC_Init+0x1ac>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d10b      	bne.n	8000b20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	f023 0303 	bic.w	r3, r3, #3
 8000b16:	f043 0201 	orr.w	r2, r3, #1
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b1e:	e018      	b.n	8000b52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	f023 0312 	bic.w	r3, r3, #18
 8000b28:	f043 0210 	orr.w	r2, r3, #16
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	f043 0201 	orr.w	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b40:	e007      	b.n	8000b52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	f043 0210 	orr.w	r2, r3, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b60:	ff1f0efe 	.word	0xff1f0efe

08000b64 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d101      	bne.n	8000b7e <HAL_ADC_Start_IT+0x1a>
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	e0a0      	b.n	8000cc0 <HAL_ADC_Start_IT+0x15c>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fa6e 	bl	8001068 <ADC_Enable>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 808f 	bne.w	8000cb6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ba0:	f023 0301 	bic.w	r3, r3, #1
 8000ba4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a45      	ldr	r2, [pc, #276]	; (8000cc8 <HAL_ADC_Start_IT+0x164>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d105      	bne.n	8000bc2 <HAL_ADC_Start_IT+0x5e>
 8000bb6:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <HAL_ADC_Start_IT+0x168>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d115      	bne.n	8000bee <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d026      	beq.n	8000c2a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000be4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bec:	e01d      	b.n	8000c2a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a33      	ldr	r2, [pc, #204]	; (8000ccc <HAL_ADC_Start_IT+0x168>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d004      	beq.n	8000c0e <HAL_ADC_Start_IT+0xaa>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <HAL_ADC_Start_IT+0x164>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d10d      	bne.n	8000c2a <HAL_ADC_Start_IT+0xc6>
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <HAL_ADC_Start_IT+0x168>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	f023 0206 	bic.w	r2, r3, #6
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c42:	e002      	b.n	8000c4a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f06f 0202 	mvn.w	r2, #2
 8000c5a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0220 	orr.w	r2, r2, #32
 8000c6a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c7a:	d113      	bne.n	8000ca4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c80:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_ADC_Start_IT+0x164>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d105      	bne.n	8000c92 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_ADC_Start_IT+0x168>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d108      	bne.n	8000ca4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	e00c      	b.n	8000cbe <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	e003      	b.n	8000cbe <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40012800 	.word	0x40012800
 8000ccc:	40012400 	.word	0x40012400

08000cd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	f003 0320 	and.w	r3, r3, #32
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d03e      	beq.n	8000d88 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d039      	beq.n	8000d88 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d105      	bne.n	8000d2c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d3a:	d11d      	bne.n	8000d78 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d119      	bne.n	8000d78 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0220 	bic.w	r2, r2, #32
 8000d52:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d105      	bne.n	8000d78 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	f043 0201 	orr.w	r2, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fa81 	bl	8000280 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f06f 0212 	mvn.w	r2, #18
 8000d86:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d04d      	beq.n	8000e2e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d048      	beq.n	8000e2e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d105      	bne.n	8000db4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000dbe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000dc2:	d012      	beq.n	8000dea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d125      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ddc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000de0:	d11d      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d119      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d105      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 f9bd 	bl	800119e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f06f 020c 	mvn.w	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d012      	beq.n	8000e5e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00d      	beq.n	8000e5e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f809 	bl	8000e66 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f06f 0201 	mvn.w	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d101      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x20>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e0dc      	b.n	8001052 <HAL_ADC_ConfigChannel+0x1da>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b06      	cmp	r3, #6
 8000ea6:	d81c      	bhi.n	8000ee2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3b05      	subs	r3, #5
 8000eba:	221f      	movs	r2, #31
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	4019      	ands	r1, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3b05      	subs	r3, #5
 8000ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee0:	e03c      	b.n	8000f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b0c      	cmp	r3, #12
 8000ee8:	d81c      	bhi.n	8000f24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	3b23      	subs	r3, #35	; 0x23
 8000efc:	221f      	movs	r2, #31
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4019      	ands	r1, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	3b23      	subs	r3, #35	; 0x23
 8000f16:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	631a      	str	r2, [r3, #48]	; 0x30
 8000f22:	e01b      	b.n	8000f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	3b41      	subs	r3, #65	; 0x41
 8000f36:	221f      	movs	r2, #31
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b41      	subs	r3, #65	; 0x41
 8000f50:	fa00 f203 	lsl.w	r2, r0, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	d91c      	bls.n	8000f9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68d9      	ldr	r1, [r3, #12]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	3b1e      	subs	r3, #30
 8000f76:	2207      	movs	r2, #7
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4019      	ands	r1, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6898      	ldr	r0, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3b1e      	subs	r3, #30
 8000f90:	fa00 f203 	lsl.w	r2, r0, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	e019      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6919      	ldr	r1, [r3, #16]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	2207      	movs	r2, #7
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4019      	ands	r1, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	6898      	ldr	r0, [r3, #8]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d003      	beq.n	8000fe2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fde:	2b11      	cmp	r3, #17
 8000fe0:	d132      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_ADC_ConfigChannel+0x1e4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d125      	bne.n	8001038 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d126      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001008:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b10      	cmp	r3, #16
 8001010:	d11a      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_ADC_ConfigChannel+0x1e8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <HAL_ADC_ConfigChannel+0x1ec>)
 8001018:	fba2 2303 	umull	r2, r3, r2, r3
 800101c:	0c9a      	lsrs	r2, r3, #18
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001028:	e002      	b.n	8001030 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3b01      	subs	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f9      	bne.n	800102a <HAL_ADC_ConfigChannel+0x1b2>
 8001036:	e007      	b.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	f043 0220 	orr.w	r2, r3, #32
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40012400 	.word	0x40012400
 8001060:	20000000 	.word	0x20000000
 8001064:	431bde83 	.word	0x431bde83

08001068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b01      	cmp	r3, #1
 8001084:	d040      	beq.n	8001108 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0201 	orr.w	r2, r2, #1
 8001094:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <ADC_Enable+0xac>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <ADC_Enable+0xb0>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	0c9b      	lsrs	r3, r3, #18
 80010a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010a4:	e002      	b.n	80010ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010b2:	f7ff fc75 	bl	80009a0 <HAL_GetTick>
 80010b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010b8:	e01f      	b.n	80010fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010ba:	f7ff fc71 	bl	80009a0 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d918      	bls.n	80010fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d011      	beq.n	80010fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	f043 0210 	orr.w	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e007      	b.n	800110a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d1d8      	bne.n	80010ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000000 	.word	0x20000000
 8001118:	431bde83 	.word	0x431bde83

0800111c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b01      	cmp	r3, #1
 8001134:	d12e      	bne.n	8001194 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001146:	f7ff fc2b 	bl	80009a0 <HAL_GetTick>
 800114a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800114c:	e01b      	b.n	8001186 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800114e:	f7ff fc27 	bl	80009a0 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d914      	bls.n	8001186 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10d      	bne.n	8001186 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f043 0210 	orr.w	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e007      	b.n	8001196 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b01      	cmp	r3, #1
 8001192:	d0dc      	beq.n	800114e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4906      	ldr	r1, [pc, #24]	; (8001248 <__NVIC_EnableIRQ+0x34>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff4f 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff64 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ffb2 	bl	80012a0 <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff81 	bl	800124c <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff57 	bl	8001214 <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	e169      	b.n	8001658 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001384:	2201      	movs	r2, #1
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8158 	bne.w	8001652 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a9a      	ldr	r2, [pc, #616]	; (8001610 <HAL_GPIO_Init+0x2a0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d05e      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013ac:	4a98      	ldr	r2, [pc, #608]	; (8001610 <HAL_GPIO_Init+0x2a0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d875      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013b2:	4a98      	ldr	r2, [pc, #608]	; (8001614 <HAL_GPIO_Init+0x2a4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d058      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013b8:	4a96      	ldr	r2, [pc, #600]	; (8001614 <HAL_GPIO_Init+0x2a4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d86f      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013be:	4a96      	ldr	r2, [pc, #600]	; (8001618 <HAL_GPIO_Init+0x2a8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d052      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013c4:	4a94      	ldr	r2, [pc, #592]	; (8001618 <HAL_GPIO_Init+0x2a8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d869      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013ca:	4a94      	ldr	r2, [pc, #592]	; (800161c <HAL_GPIO_Init+0x2ac>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d04c      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013d0:	4a92      	ldr	r2, [pc, #584]	; (800161c <HAL_GPIO_Init+0x2ac>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d863      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013d6:	4a92      	ldr	r2, [pc, #584]	; (8001620 <HAL_GPIO_Init+0x2b0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d046      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013dc:	4a90      	ldr	r2, [pc, #576]	; (8001620 <HAL_GPIO_Init+0x2b0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d85d      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d82a      	bhi.n	800143c <HAL_GPIO_Init+0xcc>
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d859      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013ea:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <HAL_GPIO_Init+0x80>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	0800146b 	.word	0x0800146b
 80013f4:	08001445 	.word	0x08001445
 80013f8:	08001457 	.word	0x08001457
 80013fc:	08001499 	.word	0x08001499
 8001400:	0800149f 	.word	0x0800149f
 8001404:	0800149f 	.word	0x0800149f
 8001408:	0800149f 	.word	0x0800149f
 800140c:	0800149f 	.word	0x0800149f
 8001410:	0800149f 	.word	0x0800149f
 8001414:	0800149f 	.word	0x0800149f
 8001418:	0800149f 	.word	0x0800149f
 800141c:	0800149f 	.word	0x0800149f
 8001420:	0800149f 	.word	0x0800149f
 8001424:	0800149f 	.word	0x0800149f
 8001428:	0800149f 	.word	0x0800149f
 800142c:	0800149f 	.word	0x0800149f
 8001430:	0800149f 	.word	0x0800149f
 8001434:	0800144d 	.word	0x0800144d
 8001438:	08001461 	.word	0x08001461
 800143c:	4a79      	ldr	r2, [pc, #484]	; (8001624 <HAL_GPIO_Init+0x2b4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001442:	e02c      	b.n	800149e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e029      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	3304      	adds	r3, #4
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e024      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	3308      	adds	r3, #8
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e01f      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	330c      	adds	r3, #12
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e01a      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001472:	2304      	movs	r3, #4
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e013      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	611a      	str	r2, [r3, #16]
          break;
 800148a:	e009      	b.n	80014a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148c:	2308      	movs	r3, #8
 800148e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	615a      	str	r2, [r3, #20]
          break;
 8001496:	e003      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          break;
 800149e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d801      	bhi.n	80014aa <HAL_GPIO_Init+0x13a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	e001      	b.n	80014ae <HAL_GPIO_Init+0x13e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3304      	adds	r3, #4
 80014ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d802      	bhi.n	80014bc <HAL_GPIO_Init+0x14c>
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	e002      	b.n	80014c2 <HAL_GPIO_Init+0x152>
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	3b08      	subs	r3, #8
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	210f      	movs	r1, #15
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	401a      	ands	r2, r3
 80014d4:	6a39      	ldr	r1, [r7, #32]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	431a      	orrs	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80b1 	beq.w	8001652 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014f0:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001508:	4a48      	ldr	r2, [pc, #288]	; (800162c <HAL_GPIO_Init+0x2bc>)
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4013      	ands	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a40      	ldr	r2, [pc, #256]	; (8001630 <HAL_GPIO_Init+0x2c0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d013      	beq.n	800155c <HAL_GPIO_Init+0x1ec>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a3f      	ldr	r2, [pc, #252]	; (8001634 <HAL_GPIO_Init+0x2c4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d00d      	beq.n	8001558 <HAL_GPIO_Init+0x1e8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a3e      	ldr	r2, [pc, #248]	; (8001638 <HAL_GPIO_Init+0x2c8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d007      	beq.n	8001554 <HAL_GPIO_Init+0x1e4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a3d      	ldr	r2, [pc, #244]	; (800163c <HAL_GPIO_Init+0x2cc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_GPIO_Init+0x1e0>
 800154c:	2303      	movs	r3, #3
 800154e:	e006      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001550:	2304      	movs	r3, #4
 8001552:	e004      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001554:	2302      	movs	r3, #2
 8001556:	e002      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 800155c:	2300      	movs	r3, #0
 800155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001560:	f002 0203 	and.w	r2, r2, #3
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	4093      	lsls	r3, r2
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156e:	492f      	ldr	r1, [pc, #188]	; (800162c <HAL_GPIO_Init+0x2bc>)
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	492c      	ldr	r1, [pc, #176]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	4928      	ldr	r1, [pc, #160]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	4922      	ldr	r1, [pc, #136]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60cb      	str	r3, [r1, #12]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	491e      	ldr	r1, [pc, #120]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4918      	ldr	r1, [pc, #96]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4914      	ldr	r1, [pc, #80]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d021      	beq.n	8001644 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	490e      	ldr	r1, [pc, #56]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e021      	b.n	8001652 <HAL_GPIO_Init+0x2e2>
 800160e:	bf00      	nop
 8001610:	10320000 	.word	0x10320000
 8001614:	10310000 	.word	0x10310000
 8001618:	10220000 	.word	0x10220000
 800161c:	10210000 	.word	0x10210000
 8001620:	10120000 	.word	0x10120000
 8001624:	10110000 	.word	0x10110000
 8001628:	40021000 	.word	0x40021000
 800162c:	40010000 	.word	0x40010000
 8001630:	40010800 	.word	0x40010800
 8001634:	40010c00 	.word	0x40010c00
 8001638:	40011000 	.word	0x40011000
 800163c:	40011400 	.word	0x40011400
 8001640:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_GPIO_Init+0x304>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	43db      	mvns	r3, r3
 800164c:	4909      	ldr	r1, [pc, #36]	; (8001674 <HAL_GPIO_Init+0x304>)
 800164e:	4013      	ands	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	3301      	adds	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f ae8e 	bne.w	8001384 <HAL_GPIO_Init+0x14>
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	372c      	adds	r7, #44	; 0x2c
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40010400 	.word	0x40010400

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001694:	e003      	b.n	800169e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	611a      	str	r2, [r3, #16]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e26c      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8087 	beq.w	80017d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c8:	4b92      	ldr	r3, [pc, #584]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d00c      	beq.n	80016ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d4:	4b8f      	ldr	r3, [pc, #572]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d112      	bne.n	8001706 <HAL_RCC_OscConfig+0x5e>
 80016e0:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d10b      	bne.n	8001706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ee:	4b89      	ldr	r3, [pc, #548]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d06c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x12c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d168      	bne.n	80017d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e246      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x76>
 8001710:	4b80      	ldr	r3, [pc, #512]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a7f      	ldr	r2, [pc, #508]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e02e      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x98>
 8001726:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a7a      	ldr	r2, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b78      	ldr	r3, [pc, #480]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a77      	ldr	r2, [pc, #476]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e01d      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0xbc>
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a71      	ldr	r2, [pc, #452]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6e      	ldr	r2, [pc, #440]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 8001764:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a6a      	ldr	r2, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a67      	ldr	r2, [pc, #412]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff f90c 	bl	80009a0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff f908 	bl	80009a0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1fa      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0xe4>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff f8f8 	bl	80009a0 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff f8f4 	bl	80009a0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1e6      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x10c>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d063      	beq.n	80018aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e2:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d11c      	bne.n	8001834 <HAL_RCC_OscConfig+0x18c>
 80017fa:	4b46      	ldr	r3, [pc, #280]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d116      	bne.n	8001834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x176>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e1ba      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4939      	ldr	r1, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	e03a      	b.n	80018aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff f8ad 	bl	80009a0 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff f8a9 	bl	80009a0 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e19b      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4927      	ldr	r1, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff f88c 	bl	80009a0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff f888 	bl	80009a0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e17a      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03a      	beq.n	800192c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d019      	beq.n	80018f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff f86c 	bl	80009a0 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff f868 	bl	80009a0 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e15a      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f000 fae8 	bl	8001ec0 <RCC_Delay>
 80018f0:	e01c      	b.n	800192c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff f852 	bl	80009a0 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fe:	e00f      	b.n	8001920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff f84e 	bl	80009a0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d908      	bls.n	8001920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e140      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	42420000 	.word	0x42420000
 800191c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001920:	4b9e      	ldr	r3, [pc, #632]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e9      	bne.n	8001900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a6 	beq.w	8001a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193e:	4b97      	ldr	r3, [pc, #604]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10d      	bne.n	8001966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a93      	ldr	r2, [pc, #588]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b91      	ldr	r3, [pc, #580]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b8e      	ldr	r3, [pc, #568]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a8a      	ldr	r2, [pc, #552]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197e:	f7ff f80f 	bl	80009a0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001986:	f7ff f80b 	bl	80009a0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b64      	cmp	r3, #100	; 0x64
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e0fd      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x312>
 80019ac:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a7a      	ldr	r2, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	e02d      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x334>
 80019c2:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6213      	str	r3, [r2, #32]
 80019ce:	4b73      	ldr	r3, [pc, #460]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a72      	ldr	r2, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6213      	str	r3, [r2, #32]
 80019da:	e01c      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d10c      	bne.n	80019fe <HAL_RCC_OscConfig+0x356>
 80019e4:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a6c      	ldr	r2, [pc, #432]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a69      	ldr	r2, [pc, #420]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e00b      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019fe:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a66      	ldr	r2, [pc, #408]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	4b64      	ldr	r3, [pc, #400]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a63      	ldr	r2, [pc, #396]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d015      	beq.n	8001a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7fe ffbf 	bl	80009a0 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7fe ffbb 	bl	80009a0 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0ab      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ee      	beq.n	8001a26 <HAL_RCC_OscConfig+0x37e>
 8001a48:	e014      	b.n	8001a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7fe ffa9 	bl	80009a0 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7fe ffa5 	bl	80009a0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e095      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ee      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7a:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a47      	ldr	r2, [pc, #284]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8081 	beq.w	8001b92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a90:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d061      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d146      	bne.n	8001b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_OscConfig+0x4fc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7fe ff79 	bl	80009a0 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7fe ff75 	bl	80009a0 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e067      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d108      	bne.n	8001aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	492d      	ldr	r1, [pc, #180]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a19      	ldr	r1, [r3, #32]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	430b      	orrs	r3, r1
 8001afe:	4927      	ldr	r1, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x4fc>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7fe ff49 	bl	80009a0 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7fe ff45 	bl	80009a0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e037      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x46a>
 8001b30:	e02f      	b.n	8001b92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_RCC_OscConfig+0x4fc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7fe ff32 	bl	80009a0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7fe ff2e 	bl	80009a0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e020      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x498>
 8001b5e:	e018      	b.n	8001b92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e013      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	42420060 	.word	0x42420060

08001ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0d0      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d910      	bls.n	8001bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4965      	ldr	r1, [pc, #404]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0b8      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	494d      	ldr	r1, [pc, #308]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d040      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d115      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e07f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e073      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f023 0203 	bic.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4936      	ldr	r1, [pc, #216]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c98:	f7fe fe82 	bl	80009a0 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7fe fe7e 	bl	80009a0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e053      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 020c 	and.w	r2, r3, #12
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1eb      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d210      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 0207 	bic.w	r2, r3, #7
 8001cde:	4922      	ldr	r1, [pc, #136]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e032      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4916      	ldr	r1, [pc, #88]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	490e      	ldr	r1, [pc, #56]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d36:	f000 f821 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	490a      	ldr	r1, [pc, #40]	; (8001d70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	5ccb      	ldrb	r3, [r1, r3]
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1cc>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fd18 	bl	800078c <HAL_InitTick>

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08005b20 	.word	0x08005b20
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x30>
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x36>
 8001daa:	e027      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dae:	613b      	str	r3, [r7, #16]
      break;
 8001db0:	e027      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0c9b      	lsrs	r3, r3, #18
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0c5b      	lsrs	r3, r3, #17
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dde:	fb02 f203 	mul.w	r2, r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e004      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	613b      	str	r3, [r7, #16]
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfe:	613b      	str	r3, [r7, #16]
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	693b      	ldr	r3, [r7, #16]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	007a1200 	.word	0x007a1200
 8001e18:	08005b38 	.word	0x08005b38
 8001e1c:	08005b48 	.word	0x08005b48
 8001e20:	003d0900 	.word	0x003d0900

08001e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b02      	ldr	r3, [pc, #8]	; (8001e34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20000000 	.word	0x20000000

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e3c:	f7ff fff2 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	0adb      	lsrs	r3, r3, #11
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08005b30 	.word	0x08005b30

08001e60 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_GetClockConfig+0x58>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_RCC_GetClockConfig+0x58>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_GetClockConfig+0x58>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_RCC_GetClockConfig+0x58>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_RCC_GetClockConfig+0x5c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0207 	and.w	r2, r3, #7
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <RCC_Delay+0x34>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <RCC_Delay+0x38>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a5b      	lsrs	r3, r3, #9
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001edc:	bf00      	nop
  }
  while (Delay --);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e5a      	subs	r2, r3, #1
 8001ee2:	60fa      	str	r2, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f9      	bne.n	8001edc <RCC_Delay+0x1c>
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	10624dd3 	.word	0x10624dd3

08001efc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d07d      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	61d3      	str	r3, [r2, #28]
 8001f34:	4b49      	ldr	r3, [pc, #292]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d118      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a42      	ldr	r2, [pc, #264]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fd20 	bl	80009a0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	e008      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7fe fd1c 	bl	80009a0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e06d      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f82:	4b36      	ldr	r3, [pc, #216]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d02e      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d027      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fb6:	4a29      	ldr	r2, [pc, #164]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d014      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fceb 	bl	80009a0 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe fce7 	bl	80009a0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e036      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4917      	ldr	r1, [pc, #92]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4a13      	ldr	r2, [pc, #76]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002012:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	490b      	ldr	r1, [pc, #44]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4904      	ldr	r1, [pc, #16]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	42420440 	.word	0x42420440

08002068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e041      	b.n	80020fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fb60 	bl	8000754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f000 fabe 	bl	8002628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d001      	beq.n	8002120 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e032      	b.n	8002186 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <HAL_TIM_Base_Start+0x88>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00e      	beq.n	8002150 <HAL_TIM_Base_Start+0x48>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213a:	d009      	beq.n	8002150 <HAL_TIM_Base_Start+0x48>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <HAL_TIM_Base_Start+0x8c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_TIM_Base_Start+0x48>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_TIM_Base_Start+0x90>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d111      	bne.n	8002174 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b06      	cmp	r3, #6
 8002160:	d010      	beq.n	8002184 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002172:	e007      	b.n	8002184 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800

0800219c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d001      	beq.n	80021b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e03a      	b.n	800222a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_TIM_Base_Start_IT+0x98>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00e      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x58>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021de:	d009      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x58>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HAL_TIM_Base_Start_IT+0x9c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d004      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x58>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_TIM_Base_Start_IT+0xa0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d111      	bne.n	8002218 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b06      	cmp	r3, #6
 8002204:	d010      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002216:	e007      	b.n	8002228 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	40012c00 	.word	0x40012c00
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800

08002240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0202 	mvn.w	r2, #2
 800226c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f9b4 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f9a7 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f9b6 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d122      	bne.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d11b      	bne.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0204 	mvn.w	r2, #4
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f98a 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f97d 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f98c 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d122      	bne.n	8002344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b08      	cmp	r3, #8
 800230a:	d11b      	bne.n	8002344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0208 	mvn.w	r2, #8
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2204      	movs	r2, #4
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f960 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f953 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f962 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b10      	cmp	r3, #16
 8002350:	d122      	bne.n	8002398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b10      	cmp	r3, #16
 800235e:	d11b      	bne.n	8002398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0210 	mvn.w	r2, #16
 8002368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2208      	movs	r2, #8
 800236e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f936 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f929 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f938 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10e      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0201 	mvn.w	r2, #1
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe f93a 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	2b80      	cmp	r3, #128	; 0x80
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa7b 	bl	80028e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8fc 	bl	8002614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	d107      	bne.n	8002448 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0220 	mvn.w	r2, #32
 8002440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa46 	bl	80028d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_TIM_ConfigClockSource+0x1c>
 8002468:	2302      	movs	r3, #2
 800246a:	e0b4      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0x186>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800248a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a4:	d03e      	beq.n	8002524 <HAL_TIM_ConfigClockSource+0xd4>
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024aa:	f200 8087 	bhi.w	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b2:	f000 8086 	beq.w	80025c2 <HAL_TIM_ConfigClockSource+0x172>
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ba:	d87f      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b70      	cmp	r3, #112	; 0x70
 80024be:	d01a      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0xa6>
 80024c0:	2b70      	cmp	r3, #112	; 0x70
 80024c2:	d87b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b60      	cmp	r3, #96	; 0x60
 80024c6:	d050      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x11a>
 80024c8:	2b60      	cmp	r3, #96	; 0x60
 80024ca:	d877      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b50      	cmp	r3, #80	; 0x50
 80024ce:	d03c      	beq.n	800254a <HAL_TIM_ConfigClockSource+0xfa>
 80024d0:	2b50      	cmp	r3, #80	; 0x50
 80024d2:	d873      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d058      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x13a>
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d86f      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b30      	cmp	r3, #48	; 0x30
 80024de:	d064      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024e0:	2b30      	cmp	r3, #48	; 0x30
 80024e2:	d86b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d060      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d867      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d05a      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024f4:	e062      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f000 f968 	bl	80027da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	609a      	str	r2, [r3, #8]
      break;
 8002522:	e04f      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f000 f951 	bl	80027da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002546:	609a      	str	r2, [r3, #8]
      break;
 8002548:	e03c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f8c8 	bl	80026ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2150      	movs	r1, #80	; 0x50
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f91f 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 8002568:	e02c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f8e6 	bl	8002748 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2160      	movs	r1, #96	; 0x60
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f90f 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 8002588:	e01c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	461a      	mov	r2, r3
 8002598:	f000 f8a8 	bl	80026ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2140      	movs	r1, #64	; 0x40
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f8ff 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 80025a8:	e00c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f000 f8f6 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 80025ba:	e003      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
      break;
 80025c0:	e000      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
	...

08002628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <TIM_Base_SetConfig+0xb8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00b      	beq.n	8002658 <TIM_Base_SetConfig+0x30>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002646:	d007      	beq.n	8002658 <TIM_Base_SetConfig+0x30>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <TIM_Base_SetConfig+0xbc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x30>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <TIM_Base_SetConfig+0xc0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <TIM_Base_SetConfig+0xb8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00b      	beq.n	800268a <TIM_Base_SetConfig+0x62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d007      	beq.n	800268a <TIM_Base_SetConfig+0x62>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <TIM_Base_SetConfig+0xbc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d003      	beq.n	800268a <TIM_Base_SetConfig+0x62>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <TIM_Base_SetConfig+0xc0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <TIM_Base_SetConfig+0xb8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d103      	bne.n	80026d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	615a      	str	r2, [r3, #20]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800

080026ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0201 	bic.w	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f023 030a 	bic.w	r3, r3, #10
 8002728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f023 0210 	bic.w	r2, r3, #16
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	031b      	lsls	r3, r3, #12
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002784:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	621a      	str	r2, [r3, #32]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f043 0307 	orr.w	r3, r3, #7
 80027c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b087      	sub	sp, #28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	021a      	lsls	r2, r3, #8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4313      	orrs	r3, r2
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	609a      	str	r2, [r3, #8]
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800282c:	2302      	movs	r3, #2
 800282e:	e046      	b.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00e      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d009      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10c      	bne.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40000800 	.word	0x40000800

080028d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <xQueueGenericReset>:
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	2301      	movs	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xQueueGenericReset+0x2e>
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericReset+0x2c>
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05d      	beq.n	80029e8 <xQueueGenericReset+0xf0>
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d059      	beq.n	80029e8 <xQueueGenericReset+0xf0>
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	2100      	movs	r1, #0
 800293e:	fba3 2302 	umull	r2, r3, r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d000      	beq.n	8002948 <xQueueGenericReset+0x50>
 8002946:	2101      	movs	r1, #1
 8002948:	460b      	mov	r3, r1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d14c      	bne.n	80029e8 <xQueueGenericReset+0xf0>
 800294e:	f002 fdc7 	bl	80054e0 <vPortEnterCritical>
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	6939      	ldr	r1, [r7, #16]
 800295c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	441a      	add	r2, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2200      	movs	r2, #0
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	3b01      	subs	r3, #1
 8002980:	6939      	ldr	r1, [r7, #16]
 8002982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	441a      	add	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	22ff      	movs	r2, #255	; 0xff
 8002992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d114      	bne.n	80029ce <xQueueGenericReset+0xd6>
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01a      	beq.n	80029e2 <xQueueGenericReset+0xea>
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	3310      	adds	r3, #16
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 fc93 	bl	80042dc <xTaskRemoveFromEventList>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d012      	beq.n	80029e2 <xQueueGenericReset+0xea>
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <xQueueGenericReset+0x11c>)
 80029be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	e009      	b.n	80029e2 <xQueueGenericReset+0xea>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	3310      	adds	r3, #16
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 fc06 	bl	80051e4 <vListInitialise>
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	3324      	adds	r3, #36	; 0x24
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 fc01 	bl	80051e4 <vListInitialise>
 80029e2:	f002 fdad 	bl	8005540 <vPortExitCritical>
 80029e6:	e001      	b.n	80029ec <xQueueGenericReset+0xf4>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <xQueueGenericReset+0x110>
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	bf00      	nop
 8002a06:	e7fe      	b.n	8002a06 <xQueueGenericReset+0x10e>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xQueueGenericCreate>:
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	71fb      	strb	r3, [r7, #7]
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02e      	beq.n	8002a8e <xQueueGenericCreate+0x76>
 8002a30:	2100      	movs	r1, #0
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d000      	beq.n	8002a40 <xQueueGenericCreate+0x28>
 8002a3e:	2101      	movs	r1, #1
 8002a40:	460b      	mov	r3, r1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d123      	bne.n	8002a8e <xQueueGenericCreate+0x76>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
 8002a4e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002a52:	d81c      	bhi.n	8002a8e <xQueueGenericCreate+0x76>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3350      	adds	r3, #80	; 0x50
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fb9a 	bl	800519c <pvPortMalloc>
 8002a68:	61f8      	str	r0, [r7, #28]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01c      	beq.n	8002aaa <xQueueGenericCreate+0x92>
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3350      	adds	r3, #80	; 0x50
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	79fa      	ldrb	r2, [r7, #7]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f814 	bl	8002ab4 <prvInitialiseNewQueue>
 8002a8c:	e00d      	b.n	8002aaa <xQueueGenericCreate+0x92>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <xQueueGenericCreate+0x92>
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	bf00      	nop
 8002aa8:	e7fe      	b.n	8002aa8 <xQueueGenericCreate+0x90>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <prvInitialiseNewQueue>:
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	70fb      	strb	r3, [r7, #3]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <prvInitialiseNewQueue+0x1c>
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e002      	b.n	8002ad6 <prvInitialiseNewQueue+0x22>
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	69b8      	ldr	r0, [r7, #24]
 8002ae6:	f7ff ff07 	bl	80028f8 <xQueueGenericReset>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <xQueueGenericSend>:
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08e      	sub	sp, #56	; 0x38
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <xQueueGenericSend+0x32>
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <xQueueGenericSend+0x30>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <xQueueGenericSend+0x40>
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <xQueueGenericSend+0x44>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <xQueueGenericSend+0x46>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <xQueueGenericSend+0x60>
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	bf00      	nop
 8002b5a:	e7fe      	b.n	8002b5a <xQueueGenericSend+0x5e>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d103      	bne.n	8002b6a <xQueueGenericSend+0x6e>
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <xQueueGenericSend+0x72>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <xQueueGenericSend+0x74>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10a      	bne.n	8002b8a <xQueueGenericSend+0x8e>
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	623b      	str	r3, [r7, #32]
 8002b86:	bf00      	nop
 8002b88:	e7fe      	b.n	8002b88 <xQueueGenericSend+0x8c>
 8002b8a:	f001 fe15 	bl	80047b8 <xTaskGetSchedulerState>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <xQueueGenericSend+0x9e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <xQueueGenericSend+0xa2>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <xQueueGenericSend+0xa4>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <xQueueGenericSend+0xbe>
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericSend+0xbc>
 8002bba:	f002 fc91 	bl	80054e0 <vPortEnterCritical>
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <xQueueGenericSend+0xd4>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d129      	bne.n	8002c24 <xQueueGenericSend+0x128>
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd6:	f000 fbda 	bl	800338e <prvCopyDataToQueue>
 8002bda:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <xQueueGenericSend+0x10a>
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	3324      	adds	r3, #36	; 0x24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fb77 	bl	80042dc <xTaskRemoveFromEventList>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <xQueueGenericSend+0x120>
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <xQueueGenericSend+0x1f8>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	e00a      	b.n	8002c1c <xQueueGenericSend+0x120>
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <xQueueGenericSend+0x120>
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <xQueueGenericSend+0x1f8>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f002 fc90 	bl	8005540 <vPortExitCritical>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e063      	b.n	8002cec <xQueueGenericSend+0x1f0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <xQueueGenericSend+0x136>
 8002c2a:	f002 fc89 	bl	8005540 <vPortExitCritical>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e05c      	b.n	8002cec <xQueueGenericSend+0x1f0>
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <xQueueGenericSend+0x14a>
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 fc25 	bl	800448c <vTaskInternalSetTimeOutState>
 8002c42:	2301      	movs	r3, #1
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
 8002c46:	f002 fc7b 	bl	8005540 <vPortExitCritical>
 8002c4a:	f000 ffb7 	bl	8003bbc <vTaskSuspendAll>
 8002c4e:	f002 fc47 	bl	80054e0 <vPortEnterCritical>
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d103      	bne.n	8002c68 <xQueueGenericSend+0x16c>
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d103      	bne.n	8002c7e <xQueueGenericSend+0x182>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c7e:	f002 fc5f 	bl	8005540 <vPortExitCritical>
 8002c82:	1d3a      	adds	r2, r7, #4
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fc14 	bl	80044b8 <xTaskCheckForTimeOut>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d124      	bne.n	8002ce0 <xQueueGenericSend+0x1e4>
 8002c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c98:	f000 fc71 	bl	800357e <prvIsQueueFull>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <xQueueGenericSend+0x1d8>
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 faac 	bl	8004208 <vTaskPlaceOnEventList>
 8002cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb2:	f000 fbfc 	bl	80034ae <prvUnlockQueue>
 8002cb6:	f000 ffc5 	bl	8003c44 <xTaskResumeAll>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f47f af7c 	bne.w	8002bba <xQueueGenericSend+0xbe>
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <xQueueGenericSend+0x1f8>)
 8002cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	e772      	b.n	8002bba <xQueueGenericSend+0xbe>
 8002cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd6:	f000 fbea 	bl	80034ae <prvUnlockQueue>
 8002cda:	f000 ffb3 	bl	8003c44 <xTaskResumeAll>
 8002cde:	e76c      	b.n	8002bba <xQueueGenericSend+0xbe>
 8002ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce2:	f000 fbe4 	bl	80034ae <prvUnlockQueue>
 8002ce6:	f000 ffad 	bl	8003c44 <xTaskResumeAll>
 8002cea:	2300      	movs	r3, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	3738      	adds	r7, #56	; 0x38
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <xQueueGenericSendFromISR>:
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b092      	sub	sp, #72	; 0x48
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
 8002d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueGenericSendFromISR+0x2e>
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericSendFromISR+0x2c>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <xQueueGenericSendFromISR+0x3c>
 8002d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <xQueueGenericSendFromISR+0x40>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <xQueueGenericSendFromISR+0x42>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <xQueueGenericSendFromISR+0x5c>
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d50:	bf00      	nop
 8002d52:	e7fe      	b.n	8002d52 <xQueueGenericSendFromISR+0x5a>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d103      	bne.n	8002d62 <xQueueGenericSendFromISR+0x6a>
 8002d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <xQueueGenericSendFromISR+0x6e>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <xQueueGenericSendFromISR+0x70>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xQueueGenericSendFromISR+0x8a>
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xQueueGenericSendFromISR+0x88>
 8002d82:	f002 fd51 	bl	8005828 <vPortValidateInterruptPriority>
 8002d86:	f3ef 8211 	mrs	r2, BASEPRI
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	623a      	str	r2, [r7, #32]
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <xQueueGenericSendFromISR+0xbc>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d146      	bne.n	8002e42 <xQueueGenericSendFromISR+0x14a>
 8002db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002dca:	f000 fae0 	bl	800338e <prvCopyDataToQueue>
 8002dce:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d112      	bne.n	8002dfe <xQueueGenericSendFromISR+0x106>
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02d      	beq.n	8002e3c <xQueueGenericSendFromISR+0x144>
 8002de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 fa79 	bl	80042dc <xTaskRemoveFromEventList>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d025      	beq.n	8002e3c <xQueueGenericSendFromISR+0x144>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d022      	beq.n	8002e3c <xQueueGenericSendFromISR+0x144>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e01e      	b.n	8002e3c <xQueueGenericSendFromISR+0x144>
 8002dfe:	f001 f82b 	bl	8003e58 <uxTaskGetNumberOfTasks>
 8002e02:	6338      	str	r0, [r7, #48]	; 0x30
 8002e04:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d916      	bls.n	8002e3c <xQueueGenericSendFromISR+0x144>
 8002e0e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002e12:	2b7f      	cmp	r3, #127	; 0x7f
 8002e14:	d10a      	bne.n	8002e2c <xQueueGenericSendFromISR+0x134>
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	bf00      	nop
 8002e2a:	e7fe      	b.n	8002e2a <xQueueGenericSendFromISR+0x132>
 8002e2c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002e30:	3301      	adds	r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	b25a      	sxtb	r2, r3
 8002e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e40:	e001      	b.n	8002e46 <xQueueGenericSendFromISR+0x14e>
 8002e42:	2300      	movs	r3, #0
 8002e44:	647b      	str	r3, [r7, #68]	; 0x44
 8002e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	bf00      	nop
 8002e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e54:	4618      	mov	r0, r3
 8002e56:	3748      	adds	r7, #72	; 0x48
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <xQueueGiveFromISR>:
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b090      	sub	sp, #64	; 0x40
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <xQueueGiveFromISR+0x2a>
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <xQueueGiveFromISR+0x28>
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <xQueueGiveFromISR+0x48>
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	bf00      	nop
 8002ea2:	e7fe      	b.n	8002ea2 <xQueueGiveFromISR+0x46>
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <xQueueGiveFromISR+0x58>
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <xQueueGiveFromISR+0x5c>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <xQueueGiveFromISR+0x5e>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <xQueueGiveFromISR+0x78>
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	bf00      	nop
 8002ed2:	e7fe      	b.n	8002ed2 <xQueueGiveFromISR+0x76>
 8002ed4:	f002 fca8 	bl	8005828 <vPortValidateInterruptPriority>
 8002ed8:	f3ef 8211 	mrs	r2, BASEPRI
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	61ba      	str	r2, [r7, #24]
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d242      	bcs.n	8002f8a <xQueueGiveFromISR+0x12e>
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
 8002f16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d112      	bne.n	8002f46 <xQueueGiveFromISR+0xea>
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d02d      	beq.n	8002f84 <xQueueGiveFromISR+0x128>
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	3324      	adds	r3, #36	; 0x24
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 f9d5 	bl	80042dc <xTaskRemoveFromEventList>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d025      	beq.n	8002f84 <xQueueGiveFromISR+0x128>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d022      	beq.n	8002f84 <xQueueGiveFromISR+0x128>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e01e      	b.n	8002f84 <xQueueGiveFromISR+0x128>
 8002f46:	f000 ff87 	bl	8003e58 <uxTaskGetNumberOfTasks>
 8002f4a:	62b8      	str	r0, [r7, #40]	; 0x28
 8002f4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d916      	bls.n	8002f84 <xQueueGiveFromISR+0x128>
 8002f56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f5c:	d10a      	bne.n	8002f74 <xQueueGiveFromISR+0x118>
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <xQueueGiveFromISR+0x116>
 8002f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f84:	2301      	movs	r3, #1
 8002f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f88:	e001      	b.n	8002f8e <xQueueGiveFromISR+0x132>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	bf00      	nop
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3740      	adds	r7, #64	; 0x40
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <xQueueReceive>:
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <xQueueReceive+0x30>
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <xQueueReceive+0x2e>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <xQueueReceive+0x3e>
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <xQueueReceive+0x42>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <xQueueReceive+0x44>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <xQueueReceive+0x5e>
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <xQueueReceive+0x5c>
 8003002:	f001 fbd9 	bl	80047b8 <xTaskGetSchedulerState>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <xQueueReceive+0x6e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <xQueueReceive+0x72>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <xQueueReceive+0x74>
 8003016:	2300      	movs	r3, #0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <xQueueReceive+0x8e>
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xQueueReceive+0x8c>
 8003032:	f002 fa55 	bl	80054e0 <vPortEnterCritical>
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01f      	beq.n	8003082 <xQueueReceive+0xde>
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003046:	f000 fa0c 	bl	8003462 <prvCopyDataFromQueue>
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	1e5a      	subs	r2, r3, #1
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	639a      	str	r2, [r3, #56]	; 0x38
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00f      	beq.n	800307a <xQueueReceive+0xd6>
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	3310      	adds	r3, #16
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f93c 	bl	80042dc <xTaskRemoveFromEventList>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <xQueueReceive+0xd6>
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <xQueueReceive+0x1bc>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f002 fa61 	bl	8005540 <vPortExitCritical>
 800307e:	2301      	movs	r3, #1
 8003080:	e069      	b.n	8003156 <xQueueReceive+0x1b2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <xQueueReceive+0xec>
 8003088:	f002 fa5a 	bl	8005540 <vPortExitCritical>
 800308c:	2300      	movs	r3, #0
 800308e:	e062      	b.n	8003156 <xQueueReceive+0x1b2>
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <xQueueReceive+0x100>
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f9f6 	bl	800448c <vTaskInternalSetTimeOutState>
 80030a0:	2301      	movs	r3, #1
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a4:	f002 fa4c 	bl	8005540 <vPortExitCritical>
 80030a8:	f000 fd88 	bl	8003bbc <vTaskSuspendAll>
 80030ac:	f002 fa18 	bl	80054e0 <vPortEnterCritical>
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b6:	b25b      	sxtb	r3, r3
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d103      	bne.n	80030c6 <xQueueReceive+0x122>
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d103      	bne.n	80030dc <xQueueReceive+0x138>
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030dc:	f002 fa30 	bl	8005540 <vPortExitCritical>
 80030e0:	1d3a      	adds	r2, r7, #4
 80030e2:	f107 0310 	add.w	r3, r7, #16
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 f9e5 	bl	80044b8 <xTaskCheckForTimeOut>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d123      	bne.n	800313c <xQueueReceive+0x198>
 80030f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f6:	f000 fa2c 	bl	8003552 <prvIsQueueEmpty>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <xQueueReceive+0x18c>
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	3324      	adds	r3, #36	; 0x24
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f001 f87d 	bl	8004208 <vTaskPlaceOnEventList>
 800310e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003110:	f000 f9cd 	bl	80034ae <prvUnlockQueue>
 8003114:	f000 fd96 	bl	8003c44 <xTaskResumeAll>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d189      	bne.n	8003032 <xQueueReceive+0x8e>
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <xQueueReceive+0x1bc>)
 8003120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	e780      	b.n	8003032 <xQueueReceive+0x8e>
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f000 f9bc 	bl	80034ae <prvUnlockQueue>
 8003136:	f000 fd85 	bl	8003c44 <xTaskResumeAll>
 800313a:	e77a      	b.n	8003032 <xQueueReceive+0x8e>
 800313c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313e:	f000 f9b6 	bl	80034ae <prvUnlockQueue>
 8003142:	f000 fd7f 	bl	8003c44 <xTaskResumeAll>
 8003146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003148:	f000 fa03 	bl	8003552 <prvIsQueueEmpty>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f43f af6f 	beq.w	8003032 <xQueueReceive+0x8e>
 8003154:	2300      	movs	r3, #0
 8003156:	4618      	mov	r0, r3
 8003158:	3730      	adds	r7, #48	; 0x30
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	e000ed04 	.word	0xe000ed04

08003164 <xQueueSemaphoreTake>:
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	; 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
 8003176:	2300      	movs	r3, #0
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueSemaphoreTake+0x32>
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueSemaphoreTake+0x30>
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <xQueueSemaphoreTake+0x50>
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <xQueueSemaphoreTake+0x4e>
 80031b4:	f001 fb00 	bl	80047b8 <xTaskGetSchedulerState>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <xQueueSemaphoreTake+0x60>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <xQueueSemaphoreTake+0x64>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <xQueueSemaphoreTake+0x66>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <xQueueSemaphoreTake+0x80>
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <xQueueSemaphoreTake+0x7e>
 80031e4:	f002 f97c 	bl	80054e0 <vPortEnterCritical>
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d024      	beq.n	800323e <xQueueSemaphoreTake+0xda>
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <xQueueSemaphoreTake+0xaa>
 8003204:	f001 fcc6 	bl	8004b94 <pvTaskIncrementMutexHeldCount>
 8003208:	4602      	mov	r2, r0
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00f      	beq.n	8003236 <xQueueSemaphoreTake+0xd2>
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	3310      	adds	r3, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f001 f85e 	bl	80042dc <xTaskRemoveFromEventList>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <xQueueSemaphoreTake+0xd2>
 8003226:	4b4d      	ldr	r3, [pc, #308]	; (800335c <xQueueSemaphoreTake+0x1f8>)
 8003228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f002 f983 	bl	8005540 <vPortExitCritical>
 800323a:	2301      	movs	r3, #1
 800323c:	e089      	b.n	8003352 <xQueueSemaphoreTake+0x1ee>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <xQueueSemaphoreTake+0xe8>
 8003244:	f002 f97c 	bl	8005540 <vPortExitCritical>
 8003248:	2300      	movs	r3, #0
 800324a:	e082      	b.n	8003352 <xQueueSemaphoreTake+0x1ee>
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <xQueueSemaphoreTake+0xfc>
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	4618      	mov	r0, r3
 8003258:	f001 f918 	bl	800448c <vTaskInternalSetTimeOutState>
 800325c:	2301      	movs	r3, #1
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003260:	f002 f96e 	bl	8005540 <vPortExitCritical>
 8003264:	f000 fcaa 	bl	8003bbc <vTaskSuspendAll>
 8003268:	f002 f93a 	bl	80054e0 <vPortEnterCritical>
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003272:	b25b      	sxtb	r3, r3
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d103      	bne.n	8003282 <xQueueSemaphoreTake+0x11e>
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003288:	b25b      	sxtb	r3, r3
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328e:	d103      	bne.n	8003298 <xQueueSemaphoreTake+0x134>
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003298:	f002 f952 	bl	8005540 <vPortExitCritical>
 800329c:	463a      	mov	r2, r7
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 f907 	bl	80044b8 <xTaskCheckForTimeOut>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d132      	bne.n	8003316 <xQueueSemaphoreTake+0x1b2>
 80032b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032b2:	f000 f94e 	bl	8003552 <prvIsQueueEmpty>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d026      	beq.n	800330a <xQueueSemaphoreTake+0x1a6>
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <xQueueSemaphoreTake+0x174>
 80032c4:	f002 f90c 	bl	80054e0 <vPortEnterCritical>
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 fa91 	bl	80047f4 <xTaskPriorityInherit>
 80032d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80032d4:	f002 f934 	bl	8005540 <vPortExitCritical>
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	3324      	adds	r3, #36	; 0x24
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 ff91 	bl	8004208 <vTaskPlaceOnEventList>
 80032e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032e8:	f000 f8e1 	bl	80034ae <prvUnlockQueue>
 80032ec:	f000 fcaa 	bl	8003c44 <xTaskResumeAll>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f47f af76 	bne.w	80031e4 <xQueueSemaphoreTake+0x80>
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <xQueueSemaphoreTake+0x1f8>)
 80032fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	e76c      	b.n	80031e4 <xQueueSemaphoreTake+0x80>
 800330a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800330c:	f000 f8cf 	bl	80034ae <prvUnlockQueue>
 8003310:	f000 fc98 	bl	8003c44 <xTaskResumeAll>
 8003314:	e766      	b.n	80031e4 <xQueueSemaphoreTake+0x80>
 8003316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003318:	f000 f8c9 	bl	80034ae <prvUnlockQueue>
 800331c:	f000 fc92 	bl	8003c44 <xTaskResumeAll>
 8003320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003322:	f000 f916 	bl	8003552 <prvIsQueueEmpty>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f43f af5b 	beq.w	80031e4 <xQueueSemaphoreTake+0x80>
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <xQueueSemaphoreTake+0x1ec>
 8003334:	f002 f8d4 	bl	80054e0 <vPortEnterCritical>
 8003338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800333a:	f000 f811 	bl	8003360 <prvGetDisinheritPriorityAfterTimeout>
 800333e:	61f8      	str	r0, [r7, #28]
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	69f9      	ldr	r1, [r7, #28]
 8003346:	4618      	mov	r0, r3
 8003348:	f001 fb7a 	bl	8004a40 <vTaskPriorityDisinheritAfterTimeout>
 800334c:	f002 f8f8 	bl	8005540 <vPortExitCritical>
 8003350:	2300      	movs	r3, #0
 8003352:	4618      	mov	r0, r3
 8003354:	3730      	adds	r7, #48	; 0x30
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <prvGetDisinheritPriorityAfterTimeout>:
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d006      	beq.n	800337e <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1c3 0305 	rsb	r3, r3, #5
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e001      	b.n	8003382 <prvGetDisinheritPriorityAfterTimeout+0x22>
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <prvCopyDataToQueue>:
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <prvCopyDataToQueue+0x3a>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d14d      	bne.n	8003450 <prvCopyDataToQueue+0xc2>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 faab 	bl	8004914 <xTaskPriorityDisinherit>
 80033be:	6178      	str	r0, [r7, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	e043      	b.n	8003450 <prvCopyDataToQueue+0xc2>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <prvCopyDataToQueue+0x74>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6858      	ldr	r0, [r3, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	461a      	mov	r2, r3
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	f002 fa9d 	bl	8005918 <memcpy>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	441a      	add	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d32b      	bcc.n	8003450 <prvCopyDataToQueue+0xc2>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	e026      	b.n	8003450 <prvCopyDataToQueue+0xc2>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68d8      	ldr	r0, [r3, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	461a      	mov	r2, r3
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	f002 fa83 	bl	8005918 <memcpy>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	425b      	negs	r3, r3
 800341c:	441a      	add	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d207      	bcs.n	800343e <prvCopyDataToQueue+0xb0>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	425b      	negs	r3, r3
 8003438:	441a      	add	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d105      	bne.n	8003450 <prvCopyDataToQueue+0xc2>
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <prvCopyDataToQueue+0xc2>
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	3b01      	subs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	639a      	str	r2, [r3, #56]	; 0x38
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <prvCopyDataFromQueue>:
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d018      	beq.n	80034a6 <prvCopyDataFromQueue+0x44>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d303      	bcc.n	8003496 <prvCopyDataFromQueue+0x34>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68d9      	ldr	r1, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	461a      	mov	r2, r3
 80034a0:	6838      	ldr	r0, [r7, #0]
 80034a2:	f002 fa39 	bl	8005918 <memcpy>
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <prvUnlockQueue>:
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	f002 f813 	bl	80054e0 <vPortEnterCritical>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e011      	b.n	80034e8 <prvUnlockQueue+0x3a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <prvUnlockQueue+0x44>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 ff03 	bl	80042dc <xTaskRemoveFromEventList>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <prvUnlockQueue+0x32>
 80034dc:	f001 f852 	bl	8004584 <vTaskMissedYield>
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	dce9      	bgt.n	80034c4 <prvUnlockQueue+0x16>
 80034f0:	e000      	b.n	80034f4 <prvUnlockQueue+0x46>
 80034f2:	bf00      	nop
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	22ff      	movs	r2, #255	; 0xff
 80034f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034fc:	f002 f820 	bl	8005540 <vPortExitCritical>
 8003500:	f001 ffee 	bl	80054e0 <vPortEnterCritical>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800350a:	73bb      	strb	r3, [r7, #14]
 800350c:	e011      	b.n	8003532 <prvUnlockQueue+0x84>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <prvUnlockQueue+0x8e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3310      	adds	r3, #16
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fede 	bl	80042dc <xTaskRemoveFromEventList>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <prvUnlockQueue+0x7c>
 8003526:	f001 f82d 	bl	8004584 <vTaskMissedYield>
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	3b01      	subs	r3, #1
 800352e:	b2db      	uxtb	r3, r3
 8003530:	73bb      	strb	r3, [r7, #14]
 8003532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003536:	2b00      	cmp	r3, #0
 8003538:	dce9      	bgt.n	800350e <prvUnlockQueue+0x60>
 800353a:	e000      	b.n	800353e <prvUnlockQueue+0x90>
 800353c:	bf00      	nop
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003546:	f001 fffb 	bl	8005540 <vPortExitCritical>
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <prvIsQueueEmpty>:
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	f001 ffc1 	bl	80054e0 <vPortEnterCritical>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <prvIsQueueEmpty+0x1a>
 8003566:	2301      	movs	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e001      	b.n	8003570 <prvIsQueueEmpty+0x1e>
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	f001 ffe6 	bl	8005540 <vPortExitCritical>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <prvIsQueueFull>:
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	f001 ffab 	bl	80054e0 <vPortEnterCritical>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	429a      	cmp	r2, r3
 8003594:	d102      	bne.n	800359c <prvIsQueueFull+0x1e>
 8003596:	2301      	movs	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e001      	b.n	80035a0 <prvIsQueueFull+0x22>
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	f001 ffce 	bl	8005540 <vPortExitCritical>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <vQueueAddToRegistry>:
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <vQueueAddToRegistry+0x2a>
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <vQueueAddToRegistry+0x28>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d024      	beq.n	800362a <vQueueAddToRegistry+0x7a>
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e01e      	b.n	8003624 <vQueueAddToRegistry+0x74>
 80035e6:	4a18      	ldr	r2, [pc, #96]	; (8003648 <vQueueAddToRegistry+0x98>)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d105      	bne.n	8003602 <vQueueAddToRegistry+0x52>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4a13      	ldr	r2, [pc, #76]	; (8003648 <vQueueAddToRegistry+0x98>)
 80035fc:	4413      	add	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	e013      	b.n	800362a <vQueueAddToRegistry+0x7a>
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <vQueueAddToRegistry+0x6e>
 8003608:	4a0f      	ldr	r2, [pc, #60]	; (8003648 <vQueueAddToRegistry+0x98>)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <vQueueAddToRegistry+0x6e>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <vQueueAddToRegistry+0x98>)
 800361a:	4413      	add	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3301      	adds	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b07      	cmp	r3, #7
 8003628:	d9dd      	bls.n	80035e6 <vQueueAddToRegistry+0x36>
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <vQueueAddToRegistry+0x8c>
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	200002d4 	.word	0x200002d4

0800364c <vQueueWaitForMessageRestricted>:
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	f001 ff40 	bl	80054e0 <vPortEnterCritical>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003666:	b25b      	sxtb	r3, r3
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d103      	bne.n	8003676 <vQueueWaitForMessageRestricted+0x2a>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367c:	b25b      	sxtb	r3, r3
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d103      	bne.n	800368c <vQueueWaitForMessageRestricted+0x40>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800368c:	f001 ff58 	bl	8005540 <vPortExitCritical>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <vQueueWaitForMessageRestricted+0x5a>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3324      	adds	r3, #36	; 0x24
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fdd5 	bl	8004250 <vTaskPlaceOnEventListRestricted>
 80036a6:	6978      	ldr	r0, [r7, #20]
 80036a8:	f7ff ff01 	bl	80034ae <prvUnlockQueue>
 80036ac:	bf00      	nop
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <xTaskCreate>:
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	; 0x30
 80036b8:	af04      	add	r7, sp, #16
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fd68 	bl	800519c <pvPortMalloc>
 80036cc:	6178      	str	r0, [r7, #20]
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <xTaskCreate+0x48>
 80036d4:	207c      	movs	r0, #124	; 0x7c
 80036d6:	f001 fd61 	bl	800519c <pvPortMalloc>
 80036da:	61f8      	str	r0, [r7, #28]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <xTaskCreate+0x40>
 80036e2:	227c      	movs	r2, #124	; 0x7c
 80036e4:	2100      	movs	r1, #0
 80036e6:	69f8      	ldr	r0, [r7, #28]
 80036e8:	f002 f924 	bl	8005934 <memset>
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
 80036f2:	e005      	b.n	8003700 <xTaskCreate+0x4c>
 80036f4:	6978      	ldr	r0, [r7, #20]
 80036f6:	f001 fd63 	bl	80051c0 <vPortFree>
 80036fa:	e001      	b.n	8003700 <xTaskCreate+0x4c>
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d013      	beq.n	800372e <xTaskCreate+0x7a>
 8003706:	2300      	movs	r3, #0
 8003708:	9303      	str	r3, [sp, #12]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	9302      	str	r3, [sp, #8]
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f80e 	bl	800373e <prvInitialiseNewTask>
 8003722:	69f8      	ldr	r0, [r7, #28]
 8003724:	f000 f89a 	bl	800385c <prvAddNewTaskToReadyList>
 8003728:	2301      	movs	r3, #1
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	e002      	b.n	8003734 <xTaskCreate+0x80>
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <prvInitialiseNewTask>:
 800373e:	b580      	push	{r7, lr}
 8003740:	b088      	sub	sp, #32
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	461a      	mov	r2, r3
 8003756:	21a5      	movs	r1, #165	; 0xa5
 8003758:	f002 f8ec 	bl	8005934 <memset>
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003766:	3b01      	subs	r3, #1
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f023 0307 	bic.w	r3, r3, #7
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <prvInitialiseNewTask+0x58>
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <prvInitialiseNewTask+0x56>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01e      	beq.n	80037da <prvInitialiseNewTask+0x9c>
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	e012      	b.n	80037c8 <prvInitialiseNewTask+0x8a>
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	7819      	ldrb	r1, [r3, #0]
 80037aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	3334      	adds	r3, #52	; 0x34
 80037b2:	460a      	mov	r2, r1
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <prvInitialiseNewTask+0x92>
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3301      	adds	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b13      	cmp	r3, #19
 80037cc:	d9e9      	bls.n	80037a2 <prvInitialiseNewTask+0x64>
 80037ce:	e000      	b.n	80037d2 <prvInitialiseNewTask+0x94>
 80037d0:	bf00      	nop
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d90a      	bls.n	80037f6 <prvInitialiseNewTask+0xb8>
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <prvInitialiseNewTask+0xb6>
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d901      	bls.n	8003800 <prvInitialiseNewTask+0xc2>
 80037fc:	2304      	movs	r3, #4
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380a:	651a      	str	r2, [r3, #80]	; 0x50
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	3304      	adds	r3, #4
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fd06 	bl	8005222 <vListInitialiseItem>
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	3318      	adds	r3, #24
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fd01 	bl	8005222 <vListInitialiseItem>
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003824:	611a      	str	r2, [r3, #16]
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	f1c3 0205 	rsb	r2, r3, #5
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	619a      	str	r2, [r3, #24]
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	68f9      	ldr	r1, [r7, #12]
 800383a:	69b8      	ldr	r0, [r7, #24]
 800383c:	f001 fd5e 	bl	80052fc <pxPortInitialiseStack>
 8003840:	4602      	mov	r2, r0
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <prvInitialiseNewTask+0x114>
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	bf00      	nop
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <prvAddNewTaskToReadyList>:
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	f001 fe3c 	bl	80054e0 <vPortEnterCritical>
 8003868:	4b41      	ldr	r3, [pc, #260]	; (8003970 <prvAddNewTaskToReadyList+0x114>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	4a40      	ldr	r2, [pc, #256]	; (8003970 <prvAddNewTaskToReadyList+0x114>)
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b40      	ldr	r3, [pc, #256]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <prvAddNewTaskToReadyList+0x32>
 800387a:	4a3e      	ldr	r2, [pc, #248]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <prvAddNewTaskToReadyList+0x114>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d110      	bne.n	80038aa <prvAddNewTaskToReadyList+0x4e>
 8003888:	f000 fefe 	bl	8004688 <prvInitialiseTaskLists>
 800388c:	e00d      	b.n	80038aa <prvAddNewTaskToReadyList+0x4e>
 800388e:	4b3a      	ldr	r3, [pc, #232]	; (8003978 <prvAddNewTaskToReadyList+0x11c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <prvAddNewTaskToReadyList+0x4e>
 8003896:	4b37      	ldr	r3, [pc, #220]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d802      	bhi.n	80038aa <prvAddNewTaskToReadyList+0x4e>
 80038a4:	4a33      	ldr	r2, [pc, #204]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b34      	ldr	r3, [pc, #208]	; (800397c <prvAddNewTaskToReadyList+0x120>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a32      	ldr	r2, [pc, #200]	; (800397c <prvAddNewTaskToReadyList+0x120>)
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <prvAddNewTaskToReadyList+0x120>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	649a      	str	r2, [r3, #72]	; 0x48
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <prvAddNewTaskToReadyList+0x124>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d903      	bls.n	80038d0 <prvAddNewTaskToReadyList+0x74>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4a2c      	ldr	r2, [pc, #176]	; (8003980 <prvAddNewTaskToReadyList+0x124>)
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	492b      	ldr	r1, [pc, #172]	; (8003984 <prvAddNewTaskToReadyList+0x128>)
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	3304      	adds	r3, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	3204      	adds	r2, #4
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	1d1a      	adds	r2, r3, #4
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <prvAddNewTaskToReadyList+0x128>)
 8003914:	441a      	add	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	615a      	str	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	4919      	ldr	r1, [pc, #100]	; (8003984 <prvAddNewTaskToReadyList+0x128>)
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	1c59      	adds	r1, r3, #1
 800392e:	4815      	ldr	r0, [pc, #84]	; (8003984 <prvAddNewTaskToReadyList+0x128>)
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4403      	add	r3, r0
 800393a:	6019      	str	r1, [r3, #0]
 800393c:	f001 fe00 	bl	8005540 <vPortExitCritical>
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <prvAddNewTaskToReadyList+0x11c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00e      	beq.n	8003966 <prvAddNewTaskToReadyList+0x10a>
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	429a      	cmp	r2, r3
 8003954:	d207      	bcs.n	8003966 <prvAddNewTaskToReadyList+0x10a>
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <prvAddNewTaskToReadyList+0x12c>)
 8003958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000180 	.word	0x20000180
 8003974:	200000a8 	.word	0x200000a8
 8003978:	2000018c 	.word	0x2000018c
 800397c:	2000019c 	.word	0x2000019c
 8003980:	20000188 	.word	0x20000188
 8003984:	200000ac 	.word	0x200000ac
 8003988:	e000ed04 	.word	0xe000ed04

0800398c <vTaskPrioritySet>:
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d90a      	bls.n	80039b6 <vTaskPrioritySet+0x2a>
 80039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	bf00      	nop
 80039b4:	e7fe      	b.n	80039b4 <vTaskPrioritySet+0x28>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d901      	bls.n	80039c0 <vTaskPrioritySet+0x34>
 80039bc:	2304      	movs	r3, #4
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	f001 fd8e 	bl	80054e0 <vPortEnterCritical>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <vTaskPrioritySet+0x44>
 80039ca:	4b4f      	ldr	r3, [pc, #316]	; (8003b08 <vTaskPrioritySet+0x17c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	e000      	b.n	80039d2 <vTaskPrioritySet+0x46>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	f000 808c 	beq.w	8003afc <vTaskPrioritySet+0x170>
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d90d      	bls.n	8003a08 <vTaskPrioritySet+0x7c>
 80039ec:	4b46      	ldr	r3, [pc, #280]	; (8003b08 <vTaskPrioritySet+0x17c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d00f      	beq.n	8003a16 <vTaskPrioritySet+0x8a>
 80039f6:	4b44      	ldr	r3, [pc, #272]	; (8003b08 <vTaskPrioritySet+0x17c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d309      	bcc.n	8003a16 <vTaskPrioritySet+0x8a>
 8003a02:	2301      	movs	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e006      	b.n	8003a16 <vTaskPrioritySet+0x8a>
 8003a08:	4b3f      	ldr	r3, [pc, #252]	; (8003b08 <vTaskPrioritySet+0x17c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d101      	bne.n	8003a16 <vTaskPrioritySet+0x8a>
 8003a12:	2301      	movs	r3, #1
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d102      	bne.n	8003a2e <vTaskPrioritySet+0xa2>
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	651a      	str	r2, [r3, #80]	; 0x50
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	db04      	blt.n	8003a46 <vTaskPrioritySet+0xba>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	f1c3 0205 	rsb	r2, r3, #5
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	619a      	str	r2, [r3, #24]
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	6959      	ldr	r1, [r3, #20]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4a2d      	ldr	r2, [pc, #180]	; (8003b0c <vTaskPrioritySet+0x180>)
 8003a56:	4413      	add	r3, r2
 8003a58:	4299      	cmp	r1, r3
 8003a5a:	d144      	bne.n	8003ae6 <vTaskPrioritySet+0x15a>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fc22 	bl	80052aa <uxListRemove>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6a:	4b29      	ldr	r3, [pc, #164]	; (8003b10 <vTaskPrioritySet+0x184>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d903      	bls.n	8003a7a <vTaskPrioritySet+0xee>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <vTaskPrioritySet+0x184>)
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7e:	4923      	ldr	r1, [pc, #140]	; (8003b0c <vTaskPrioritySet+0x180>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	609a      	str	r2, [r3, #8]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	3204      	adds	r2, #4
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <vTaskPrioritySet+0x180>)
 8003abe:	441a      	add	r2, r3
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	615a      	str	r2, [r3, #20]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	4910      	ldr	r1, [pc, #64]	; (8003b0c <vTaskPrioritySet+0x180>)
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	1c59      	adds	r1, r3, #1
 8003ad8:	480c      	ldr	r0, [pc, #48]	; (8003b0c <vTaskPrioritySet+0x180>)
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4403      	add	r3, r0
 8003ae4:	6019      	str	r1, [r3, #0]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <vTaskPrioritySet+0x170>
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <vTaskPrioritySet+0x188>)
 8003aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f001 fd20 	bl	8005540 <vPortExitCritical>
 8003b00:	bf00      	nop
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	200000a8 	.word	0x200000a8
 8003b0c:	200000ac 	.word	0x200000ac
 8003b10:	20000188 	.word	0x20000188
 8003b14:	e000ed04 	.word	0xe000ed04

08003b18 <vTaskStartScheduler>:
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <vTaskStartScheduler+0x88>)
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	2300      	movs	r3, #0
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2300      	movs	r3, #0
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	491e      	ldr	r1, [pc, #120]	; (8003ba4 <vTaskStartScheduler+0x8c>)
 8003b2c:	481e      	ldr	r0, [pc, #120]	; (8003ba8 <vTaskStartScheduler+0x90>)
 8003b2e:	f7ff fdc1 	bl	80036b4 <xTaskCreate>
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <vTaskStartScheduler+0x28>
 8003b3a:	f001 f8ad 	bl	8004c98 <xTimerCreateTimerTask>
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d116      	bne.n	8003b74 <vTaskStartScheduler+0x5c>
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	bf00      	nop
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <vTaskStartScheduler+0x94>)
 8003b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <vTaskStartScheduler+0x98>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <vTaskStartScheduler+0x9c>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f001 fc45 	bl	80053fc <xPortStartScheduler>
 8003b72:	e00e      	b.n	8003b92 <vTaskStartScheduler+0x7a>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d10a      	bne.n	8003b92 <vTaskStartScheduler+0x7a>
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	f383 8811 	msr	BASEPRI, r3
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	f3bf 8f4f 	dsb	sy
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	bf00      	nop
 8003b90:	e7fe      	b.n	8003b90 <vTaskStartScheduler+0x78>
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <vTaskStartScheduler+0xa0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200001a4 	.word	0x200001a4
 8003ba4:	08005b08 	.word	0x08005b08
 8003ba8:	0800459d 	.word	0x0800459d
 8003bac:	200001a0 	.word	0x200001a0
 8003bb0:	2000018c 	.word	0x2000018c
 8003bb4:	20000184 	.word	0x20000184
 8003bb8:	2000000c 	.word	0x2000000c

08003bbc <vTaskSuspendAll>:
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <vTaskSuspendAll+0x18>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	4a03      	ldr	r2, [pc, #12]	; (8003bd4 <vTaskSuspendAll+0x18>)
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	bf00      	nop
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	200001a8 	.word	0x200001a8

08003bd8 <prvGetExpectedIdleTime>:
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	2300      	movs	r3, #0
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <prvGetExpectedIdleTime+0x58>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <prvGetExpectedIdleTime+0x16>
 8003bea:	2301      	movs	r3, #1
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <prvGetExpectedIdleTime+0x5c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <prvGetExpectedIdleTime+0x26>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	e012      	b.n	8003c24 <prvGetExpectedIdleTime+0x4c>
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	; (8003c38 <prvGetExpectedIdleTime+0x60>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d902      	bls.n	8003c0c <prvGetExpectedIdleTime+0x34>
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	e00b      	b.n	8003c24 <prvGetExpectedIdleTime+0x4c>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <prvGetExpectedIdleTime+0x40>
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	e005      	b.n	8003c24 <prvGetExpectedIdleTime+0x4c>
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <prvGetExpectedIdleTime+0x64>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <prvGetExpectedIdleTime+0x68>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	20000188 	.word	0x20000188
 8003c34:	200000a8 	.word	0x200000a8
 8003c38:	200000ac 	.word	0x200000ac
 8003c3c:	200001a0 	.word	0x200001a0
 8003c40:	20000184 	.word	0x20000184

08003c44 <xTaskResumeAll>:
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	4b71      	ldr	r3, [pc, #452]	; (8003e18 <xTaskResumeAll+0x1d4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <xTaskResumeAll+0x2c>
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	607b      	str	r3, [r7, #4]
 8003c6c:	bf00      	nop
 8003c6e:	e7fe      	b.n	8003c6e <xTaskResumeAll+0x2a>
 8003c70:	f001 fc36 	bl	80054e0 <vPortEnterCritical>
 8003c74:	4b68      	ldr	r3, [pc, #416]	; (8003e18 <xTaskResumeAll+0x1d4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	4a67      	ldr	r2, [pc, #412]	; (8003e18 <xTaskResumeAll+0x1d4>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <xTaskResumeAll+0x1d4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f040 80c1 	bne.w	8003e0a <xTaskResumeAll+0x1c6>
 8003c88:	4b64      	ldr	r3, [pc, #400]	; (8003e1c <xTaskResumeAll+0x1d8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80bc 	beq.w	8003e0a <xTaskResumeAll+0x1c6>
 8003c92:	e08b      	b.n	8003dac <xTaskResumeAll+0x168>
 8003c94:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <xTaskResumeAll+0x1dc>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	6a12      	ldr	r2, [r2, #32]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	69d2      	ldr	r2, [r2, #28]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3318      	adds	r3, #24
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d103      	bne.n	8003cca <xTaskResumeAll+0x86>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	1e5a      	subs	r2, r3, #1
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	68d2      	ldr	r2, [r2, #12]
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	6892      	ldr	r2, [r2, #8]
 8003cf2:	605a      	str	r2, [r3, #4]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d103      	bne.n	8003d08 <xTaskResumeAll+0xc4>
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	615a      	str	r2, [r3, #20]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	1e5a      	subs	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	4b41      	ldr	r3, [pc, #260]	; (8003e24 <xTaskResumeAll+0x1e0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d903      	bls.n	8003d2c <xTaskResumeAll+0xe8>
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	4a3e      	ldr	r2, [pc, #248]	; (8003e24 <xTaskResumeAll+0x1e0>)
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	493d      	ldr	r1, [pc, #244]	; (8003e28 <xTaskResumeAll+0x1e4>)
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	3204      	adds	r2, #4
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	1d1a      	adds	r2, r3, #4
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	609a      	str	r2, [r3, #8]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <xTaskResumeAll+0x1e4>)
 8003d70:	441a      	add	r2, r3
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	615a      	str	r2, [r3, #20]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	492b      	ldr	r1, [pc, #172]	; (8003e28 <xTaskResumeAll+0x1e4>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	1c59      	adds	r1, r3, #1
 8003d8a:	4827      	ldr	r0, [pc, #156]	; (8003e28 <xTaskResumeAll+0x1e4>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4403      	add	r3, r0
 8003d96:	6019      	str	r1, [r3, #0]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <xTaskResumeAll+0x1e8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <xTaskResumeAll+0x168>
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <xTaskResumeAll+0x1ec>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <xTaskResumeAll+0x1dc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f af6f 	bne.w	8003c94 <xTaskResumeAll+0x50>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <xTaskResumeAll+0x17c>
 8003dbc:	f000 fce2 	bl	8004784 <prvResetNextTaskUnblockTime>
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <xTaskResumeAll+0x1f0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d010      	beq.n	8003dee <xTaskResumeAll+0x1aa>
 8003dcc:	f000 f8a8 	bl	8003f20 <xTaskIncrementTick>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <xTaskResumeAll+0x198>
 8003dd6:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <xTaskResumeAll+0x1ec>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f1      	bne.n	8003dcc <xTaskResumeAll+0x188>
 8003de8:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <xTaskResumeAll+0x1f0>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <xTaskResumeAll+0x1ec>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <xTaskResumeAll+0x1c6>
 8003df6:	2301      	movs	r3, #1
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <xTaskResumeAll+0x1f4>)
 8003dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f001 fb99 	bl	8005540 <vPortExitCritical>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	4618      	mov	r0, r3
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200001a8 	.word	0x200001a8
 8003e1c:	20000180 	.word	0x20000180
 8003e20:	20000140 	.word	0x20000140
 8003e24:	20000188 	.word	0x20000188
 8003e28:	200000ac 	.word	0x200000ac
 8003e2c:	200000a8 	.word	0x200000a8
 8003e30:	20000194 	.word	0x20000194
 8003e34:	20000190 	.word	0x20000190
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <xTaskGetTickCount>:
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4b04      	ldr	r3, [pc, #16]	; (8003e54 <xTaskGetTickCount+0x18>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	20000184 	.word	0x20000184

08003e58 <uxTaskGetNumberOfTasks>:
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4b02      	ldr	r3, [pc, #8]	; (8003e68 <uxTaskGetNumberOfTasks+0x10>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	20000180 	.word	0x20000180

08003e6c <vTaskStepTick>:
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	4b26      	ldr	r3, [pc, #152]	; (8003f10 <vTaskStepTick+0xa4>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	441a      	add	r2, r3
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <vTaskStepTick+0xa8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d90a      	bls.n	8003e9a <vTaskStepTick+0x2e>
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <vTaskStepTick+0x2c>
 8003e9a:	4b1d      	ldr	r3, [pc, #116]	; (8003f10 <vTaskStepTick+0xa4>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	441a      	add	r2, r3
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <vTaskStepTick+0xa8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d128      	bne.n	8003efc <vTaskStepTick+0x90>
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <vTaskStepTick+0xac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <vTaskStepTick+0x5c>
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	bf00      	nop
 8003ec6:	e7fe      	b.n	8003ec6 <vTaskStepTick+0x5a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <vTaskStepTick+0x78>
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <vTaskStepTick+0x76>
 8003ee4:	f001 fafc 	bl	80054e0 <vPortEnterCritical>
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <vTaskStepTick+0xb0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3301      	adds	r3, #1
 8003eee:	4a0b      	ldr	r2, [pc, #44]	; (8003f1c <vTaskStepTick+0xb0>)
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	f001 fb25 	bl	8005540 <vPortExitCritical>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <vTaskStepTick+0xa4>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	4a02      	ldr	r2, [pc, #8]	; (8003f10 <vTaskStepTick+0xa4>)
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	bf00      	nop
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	20000184 	.word	0x20000184
 8003f14:	200001a0 	.word	0x200001a0
 8003f18:	200001a8 	.word	0x200001a8
 8003f1c:	20000190 	.word	0x20000190

08003f20 <xTaskIncrementTick>:
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	2300      	movs	r3, #0
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2a:	4b7e      	ldr	r3, [pc, #504]	; (8004124 <xTaskIncrementTick+0x204>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 80ed 	bne.w	800410e <xTaskIncrementTick+0x1ee>
 8003f34:	4b7c      	ldr	r3, [pc, #496]	; (8004128 <xTaskIncrementTick+0x208>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	623b      	str	r3, [r7, #32]
 8003f3c:	4a7a      	ldr	r2, [pc, #488]	; (8004128 <xTaskIncrementTick+0x208>)
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d120      	bne.n	8003f8a <xTaskIncrementTick+0x6a>
 8003f48:	4b78      	ldr	r3, [pc, #480]	; (800412c <xTaskIncrementTick+0x20c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <xTaskIncrementTick+0x48>
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <xTaskIncrementTick+0x46>
 8003f68:	4b70      	ldr	r3, [pc, #448]	; (800412c <xTaskIncrementTick+0x20c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	4b70      	ldr	r3, [pc, #448]	; (8004130 <xTaskIncrementTick+0x210>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6e      	ldr	r2, [pc, #440]	; (800412c <xTaskIncrementTick+0x20c>)
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4a6e      	ldr	r2, [pc, #440]	; (8004130 <xTaskIncrementTick+0x210>)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	4b6d      	ldr	r3, [pc, #436]	; (8004134 <xTaskIncrementTick+0x214>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3301      	adds	r3, #1
 8003f82:	4a6c      	ldr	r2, [pc, #432]	; (8004134 <xTaskIncrementTick+0x214>)
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	f000 fbfd 	bl	8004784 <prvResetNextTaskUnblockTime>
 8003f8a:	4b6b      	ldr	r3, [pc, #428]	; (8004138 <xTaskIncrementTick+0x218>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6a3a      	ldr	r2, [r7, #32]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	f0c0 80a7 	bcc.w	80040e4 <xTaskIncrementTick+0x1c4>
 8003f96:	4b65      	ldr	r3, [pc, #404]	; (800412c <xTaskIncrementTick+0x20c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <xTaskIncrementTick+0x8a>
 8003fa0:	4b65      	ldr	r3, [pc, #404]	; (8004138 <xTaskIncrementTick+0x218>)
 8003fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e09c      	b.n	80040e4 <xTaskIncrementTick+0x1c4>
 8003faa:	4b60      	ldr	r3, [pc, #384]	; (800412c <xTaskIncrementTick+0x20c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	6a3a      	ldr	r2, [r7, #32]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d203      	bcs.n	8003fca <xTaskIncrementTick+0xaa>
 8003fc2:	4a5d      	ldr	r2, [pc, #372]	; (8004138 <xTaskIncrementTick+0x218>)
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	e08c      	b.n	80040e4 <xTaskIncrementTick+0x1c4>
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	68d2      	ldr	r2, [r2, #12]
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	6892      	ldr	r2, [r2, #8]
 8003fe2:	605a      	str	r2, [r3, #4]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	3304      	adds	r3, #4
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d103      	bne.n	8003ff8 <xTaskIncrementTick+0xd8>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	615a      	str	r2, [r3, #20]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	1e5a      	subs	r2, r3, #1
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01e      	beq.n	800404e <xTaskIncrementTick+0x12e>
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	6a12      	ldr	r2, [r2, #32]
 800401e:	609a      	str	r2, [r3, #8]
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	69d2      	ldr	r2, [r2, #28]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	3318      	adds	r3, #24
 8004032:	429a      	cmp	r2, r3
 8004034:	d103      	bne.n	800403e <xTaskIncrementTick+0x11e>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	6a1a      	ldr	r2, [r3, #32]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2200      	movs	r2, #0
 8004042:	629a      	str	r2, [r3, #40]	; 0x28
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	4b3a      	ldr	r3, [pc, #232]	; (800413c <xTaskIncrementTick+0x21c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d903      	bls.n	8004062 <xTaskIncrementTick+0x142>
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a37      	ldr	r2, [pc, #220]	; (800413c <xTaskIncrementTick+0x21c>)
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004066:	4936      	ldr	r1, [pc, #216]	; (8004140 <xTaskIncrementTick+0x220>)
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	3304      	adds	r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	3204      	adds	r2, #4
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	1d1a      	adds	r2, r3, #4
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4a26      	ldr	r2, [pc, #152]	; (8004140 <xTaskIncrementTick+0x220>)
 80040a6:	441a      	add	r2, r3
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	615a      	str	r2, [r3, #20]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	4923      	ldr	r1, [pc, #140]	; (8004140 <xTaskIncrementTick+0x220>)
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	1c59      	adds	r1, r3, #1
 80040c0:	481f      	ldr	r0, [pc, #124]	; (8004140 <xTaskIncrementTick+0x220>)
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4403      	add	r3, r0
 80040cc:	6019      	str	r1, [r3, #0]
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d2:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <xTaskIncrementTick+0x224>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	429a      	cmp	r2, r3
 80040da:	f67f af5c 	bls.w	8003f96 <xTaskIncrementTick+0x76>
 80040de:	2301      	movs	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
 80040e2:	e758      	b.n	8003f96 <xTaskIncrementTick+0x76>
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <xTaskIncrementTick+0x224>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ea:	4915      	ldr	r1, [pc, #84]	; (8004140 <xTaskIncrementTick+0x220>)
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d901      	bls.n	8004100 <xTaskIncrementTick+0x1e0>
 80040fc:	2301      	movs	r3, #1
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <xTaskIncrementTick+0x228>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <xTaskIncrementTick+0x1f8>
 8004108:	2301      	movs	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	e004      	b.n	8004118 <xTaskIncrementTick+0x1f8>
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <xTaskIncrementTick+0x22c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <xTaskIncrementTick+0x22c>)
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	4618      	mov	r0, r3
 800411c:	3728      	adds	r7, #40	; 0x28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	200001a8 	.word	0x200001a8
 8004128:	20000184 	.word	0x20000184
 800412c:	20000138 	.word	0x20000138
 8004130:	2000013c 	.word	0x2000013c
 8004134:	20000198 	.word	0x20000198
 8004138:	200001a0 	.word	0x200001a0
 800413c:	20000188 	.word	0x20000188
 8004140:	200000ac 	.word	0x200000ac
 8004144:	200000a8 	.word	0x200000a8
 8004148:	20000194 	.word	0x20000194
 800414c:	20000190 	.word	0x20000190

08004150 <vTaskSwitchContext>:
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <vTaskSwitchContext+0xa4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <vTaskSwitchContext+0x16>
 800415e:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <vTaskSwitchContext+0xa8>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	e041      	b.n	80041ea <vTaskSwitchContext+0x9a>
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <vTaskSwitchContext+0xa8>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	4b23      	ldr	r3, [pc, #140]	; (80041fc <vTaskSwitchContext+0xac>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e010      	b.n	8004196 <vTaskSwitchContext+0x46>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <vTaskSwitchContext+0x40>
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <vTaskSwitchContext+0x3e>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b01      	subs	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	491a      	ldr	r1, [pc, #104]	; (8004200 <vTaskSwitchContext+0xb0>)
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0e4      	beq.n	8004174 <vTaskSwitchContext+0x24>
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4a12      	ldr	r2, [pc, #72]	; (8004200 <vTaskSwitchContext+0xb0>)
 80041b6:	4413      	add	r3, r2
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	3308      	adds	r3, #8
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d104      	bne.n	80041da <vTaskSwitchContext+0x8a>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a08      	ldr	r2, [pc, #32]	; (8004204 <vTaskSwitchContext+0xb4>)
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4a05      	ldr	r2, [pc, #20]	; (80041fc <vTaskSwitchContext+0xac>)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	200001a8 	.word	0x200001a8
 80041f8:	20000194 	.word	0x20000194
 80041fc:	20000188 	.word	0x20000188
 8004200:	200000ac 	.word	0x200000ac
 8004204:	200000a8 	.word	0x200000a8

08004208 <vTaskPlaceOnEventList>:
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <vTaskPlaceOnEventList+0x26>
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	bf00      	nop
 800422c:	e7fe      	b.n	800422c <vTaskPlaceOnEventList+0x24>
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <vTaskPlaceOnEventList+0x44>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3318      	adds	r3, #24
 8004234:	4619      	mov	r1, r3
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 ffff 	bl	800523a <vListInsert>
 800423c:	2101      	movs	r1, #1
 800423e:	6838      	ldr	r0, [r7, #0]
 8004240:	f000 fcbc 	bl	8004bbc <prvAddCurrentTaskToDelayedList>
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	200000a8 	.word	0x200000a8

08004250 <vTaskPlaceOnEventListRestricted>:
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <vTaskPlaceOnEventListRestricted+0x28>
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vTaskPlaceOnEventListRestricted+0x26>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <vTaskPlaceOnEventListRestricted+0x88>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	61da      	str	r2, [r3, #28]
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <vTaskPlaceOnEventListRestricted+0x88>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	6892      	ldr	r2, [r2, #8]
 800428e:	621a      	str	r2, [r3, #32]
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <vTaskPlaceOnEventListRestricted+0x88>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	3218      	adds	r2, #24
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <vTaskPlaceOnEventListRestricted+0x88>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f103 0218 	add.w	r2, r3, #24
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <vTaskPlaceOnEventListRestricted+0x88>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <vTaskPlaceOnEventListRestricted+0x76>
 80042c0:	f04f 33ff 	mov.w	r3, #4294967295
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	68b8      	ldr	r0, [r7, #8]
 80042ca:	f000 fc77 	bl	8004bbc <prvAddCurrentTaskToDelayedList>
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200000a8 	.word	0x200000a8

080042dc <xTaskRemoveFromEventList>:
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <xTaskRemoveFromEventList+0x2c>
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xTaskRemoveFromEventList+0x2a>
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	6a3a      	ldr	r2, [r7, #32]
 8004314:	6a12      	ldr	r2, [r2, #32]
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	69d2      	ldr	r2, [r2, #28]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	3318      	adds	r3, #24
 800432a:	429a      	cmp	r2, r3
 800432c:	d103      	bne.n	8004336 <xTaskRemoveFromEventList+0x5a>
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	6a1a      	ldr	r2, [r3, #32]
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	2200      	movs	r2, #0
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	1e5a      	subs	r2, r3, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <xTaskRemoveFromEventList+0x198>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d161      	bne.n	8004412 <xTaskRemoveFromEventList+0x136>
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	6a3a      	ldr	r2, [r7, #32]
 800435a:	68d2      	ldr	r2, [r2, #12]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	6892      	ldr	r2, [r2, #8]
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	3304      	adds	r3, #4
 8004370:	429a      	cmp	r2, r3
 8004372:	d103      	bne.n	800437c <xTaskRemoveFromEventList+0xa0>
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	2200      	movs	r2, #0
 8004380:	615a      	str	r2, [r3, #20]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1e5a      	subs	r2, r3, #1
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	4b39      	ldr	r3, [pc, #228]	; (8004478 <xTaskRemoveFromEventList+0x19c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d903      	bls.n	80043a0 <xTaskRemoveFromEventList+0xc4>
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	4a36      	ldr	r2, [pc, #216]	; (8004478 <xTaskRemoveFromEventList+0x19c>)
 800439e:	6013      	str	r3, [r2, #0]
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a4:	4935      	ldr	r1, [pc, #212]	; (800447c <xTaskRemoveFromEventList+0x1a0>)
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	3304      	adds	r3, #4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	60da      	str	r2, [r3, #12]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	3204      	adds	r2, #4
 80043cc:	605a      	str	r2, [r3, #4]
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	1d1a      	adds	r2, r3, #4
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	609a      	str	r2, [r3, #8]
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4a26      	ldr	r2, [pc, #152]	; (800447c <xTaskRemoveFromEventList+0x1a0>)
 80043e4:	441a      	add	r2, r3
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	615a      	str	r2, [r3, #20]
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	4923      	ldr	r1, [pc, #140]	; (800447c <xTaskRemoveFromEventList+0x1a0>)
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	1c59      	adds	r1, r3, #1
 80043fe:	481f      	ldr	r0, [pc, #124]	; (800447c <xTaskRemoveFromEventList+0x1a0>)
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4403      	add	r3, r0
 800440a:	6019      	str	r1, [r3, #0]
 800440c:	f000 f9ba 	bl	8004784 <prvResetNextTaskUnblockTime>
 8004410:	e01b      	b.n	800444a <xTaskRemoveFromEventList+0x16e>
 8004412:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <xTaskRemoveFromEventList+0x1a4>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	61da      	str	r2, [r3, #28]
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	621a      	str	r2, [r3, #32]
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	6a3a      	ldr	r2, [r7, #32]
 800442c:	3218      	adds	r2, #24
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f103 0218 	add.w	r2, r3, #24
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	4a10      	ldr	r2, [pc, #64]	; (8004480 <xTaskRemoveFromEventList+0x1a4>)
 800443e:	629a      	str	r2, [r3, #40]	; 0x28
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <xTaskRemoveFromEventList+0x1a4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	4a0e      	ldr	r2, [pc, #56]	; (8004480 <xTaskRemoveFromEventList+0x1a4>)
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <xTaskRemoveFromEventList+0x1a8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	429a      	cmp	r2, r3
 8004456:	d905      	bls.n	8004464 <xTaskRemoveFromEventList+0x188>
 8004458:	2301      	movs	r3, #1
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <xTaskRemoveFromEventList+0x1ac>)
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e001      	b.n	8004468 <xTaskRemoveFromEventList+0x18c>
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	4618      	mov	r0, r3
 800446c:	3728      	adds	r7, #40	; 0x28
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200001a8 	.word	0x200001a8
 8004478:	20000188 	.word	0x20000188
 800447c:	200000ac 	.word	0x200000ac
 8004480:	20000140 	.word	0x20000140
 8004484:	200000a8 	.word	0x200000a8
 8004488:	20000194 	.word	0x20000194

0800448c <vTaskInternalSetTimeOutState>:
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <vTaskInternalSetTimeOutState+0x24>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <vTaskInternalSetTimeOutState+0x28>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	605a      	str	r2, [r3, #4]
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000198 	.word	0x20000198
 80044b4:	20000184 	.word	0x20000184

080044b8 <xTaskCheckForTimeOut>:
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <xTaskCheckForTimeOut+0x26>
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <xTaskCheckForTimeOut+0x24>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <xTaskCheckForTimeOut+0x42>
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <xTaskCheckForTimeOut+0x40>
 80044fa:	f000 fff1 	bl	80054e0 <vPortEnterCritical>
 80044fe:	4b1f      	ldr	r3, [pc, #124]	; (800457c <xTaskCheckForTimeOut+0xc4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d102      	bne.n	800451e <xTaskCheckForTimeOut+0x66>
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e026      	b.n	800456c <xTaskCheckForTimeOut+0xb4>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b17      	ldr	r3, [pc, #92]	; (8004580 <xTaskCheckForTimeOut+0xc8>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d00a      	beq.n	8004540 <xTaskCheckForTimeOut+0x88>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	429a      	cmp	r2, r3
 8004532:	d305      	bcc.n	8004540 <xTaskCheckForTimeOut+0x88>
 8004534:	2301      	movs	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e015      	b.n	800456c <xTaskCheckForTimeOut+0xb4>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	429a      	cmp	r2, r3
 8004548:	d20b      	bcs.n	8004562 <xTaskCheckForTimeOut+0xaa>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	1ad2      	subs	r2, r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff ff98 	bl	800448c <vTaskInternalSetTimeOutState>
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	e004      	b.n	800456c <xTaskCheckForTimeOut+0xb4>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	2301      	movs	r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	f000 ffe8 	bl	8005540 <vPortExitCritical>
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000184 	.word	0x20000184
 8004580:	20000198 	.word	0x20000198

08004584 <vTaskMissedYield>:
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
 8004588:	4b03      	ldr	r3, [pc, #12]	; (8004598 <vTaskMissedYield+0x14>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	bf00      	nop
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000194 	.word	0x20000194

0800459c <prvIdleTask>:
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	f000 f8b0 	bl	8004708 <prvCheckTasksWaitingTermination>
 80045a8:	4b18      	ldr	r3, [pc, #96]	; (800460c <prvIdleTask+0x70>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d907      	bls.n	80045c0 <prvIdleTask+0x24>
 80045b0:	4b17      	ldr	r3, [pc, #92]	; (8004610 <prvIdleTask+0x74>)
 80045b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f7ff fb0a 	bl	8003bd8 <prvGetExpectedIdleTime>
 80045c4:	60f8      	str	r0, [r7, #12]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d9eb      	bls.n	80045a4 <prvIdleTask+0x8>
 80045cc:	f7ff faf6 	bl	8003bbc <vTaskSuspendAll>
 80045d0:	4b10      	ldr	r3, [pc, #64]	; (8004614 <prvIdleTask+0x78>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b10      	ldr	r3, [pc, #64]	; (8004618 <prvIdleTask+0x7c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d20a      	bcs.n	80045f2 <prvIdleTask+0x56>
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <prvIdleTask+0x54>
 80045f2:	f7ff faf1 	bl	8003bd8 <prvGetExpectedIdleTime>
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d902      	bls.n	8004604 <prvIdleTask+0x68>
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f001 f80c 	bl	800561c <vPortSuppressTicksAndSleep>
 8004604:	f7ff fb1e 	bl	8003c44 <xTaskResumeAll>
 8004608:	e7cc      	b.n	80045a4 <prvIdleTask+0x8>
 800460a:	bf00      	nop
 800460c:	200000ac 	.word	0x200000ac
 8004610:	e000ed04 	.word	0xe000ed04
 8004614:	200001a0 	.word	0x200001a0
 8004618:	20000184 	.word	0x20000184

0800461c <eTaskConfirmSleepModeStatus>:
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	2301      	movs	r3, #1
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	2301      	movs	r3, #1
 8004628:	71fb      	strb	r3, [r7, #7]
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <eTaskConfirmSleepModeStatus+0x58>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <eTaskConfirmSleepModeStatus+0x1c>
 8004632:	2300      	movs	r3, #0
 8004634:	71fb      	strb	r3, [r7, #7]
 8004636:	e017      	b.n	8004668 <eTaskConfirmSleepModeStatus+0x4c>
 8004638:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <eTaskConfirmSleepModeStatus+0x5c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <eTaskConfirmSleepModeStatus+0x2a>
 8004640:	2300      	movs	r3, #0
 8004642:	71fb      	strb	r3, [r7, #7]
 8004644:	e010      	b.n	8004668 <eTaskConfirmSleepModeStatus+0x4c>
 8004646:	4b0d      	ldr	r3, [pc, #52]	; (800467c <eTaskConfirmSleepModeStatus+0x60>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <eTaskConfirmSleepModeStatus+0x38>
 800464e:	2300      	movs	r3, #0
 8004650:	71fb      	strb	r3, [r7, #7]
 8004652:	e009      	b.n	8004668 <eTaskConfirmSleepModeStatus+0x4c>
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <eTaskConfirmSleepModeStatus+0x64>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <eTaskConfirmSleepModeStatus+0x68>)
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	1acb      	subs	r3, r1, r3
 8004660:	429a      	cmp	r2, r3
 8004662:	d101      	bne.n	8004668 <eTaskConfirmSleepModeStatus+0x4c>
 8004664:	2302      	movs	r3, #2
 8004666:	71fb      	strb	r3, [r7, #7]
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr
 8004674:	20000140 	.word	0x20000140
 8004678:	20000194 	.word	0x20000194
 800467c:	20000190 	.word	0x20000190
 8004680:	2000016c 	.word	0x2000016c
 8004684:	20000180 	.word	0x20000180

08004688 <prvInitialiseTaskLists>:
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	e00c      	b.n	80046ae <prvInitialiseTaskLists+0x26>
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <prvInitialiseTaskLists+0x60>)
 80046a0:	4413      	add	r3, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fd9e 	bl	80051e4 <vListInitialise>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3301      	adds	r3, #1
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d9ef      	bls.n	8004694 <prvInitialiseTaskLists+0xc>
 80046b4:	480d      	ldr	r0, [pc, #52]	; (80046ec <prvInitialiseTaskLists+0x64>)
 80046b6:	f000 fd95 	bl	80051e4 <vListInitialise>
 80046ba:	480d      	ldr	r0, [pc, #52]	; (80046f0 <prvInitialiseTaskLists+0x68>)
 80046bc:	f000 fd92 	bl	80051e4 <vListInitialise>
 80046c0:	480c      	ldr	r0, [pc, #48]	; (80046f4 <prvInitialiseTaskLists+0x6c>)
 80046c2:	f000 fd8f 	bl	80051e4 <vListInitialise>
 80046c6:	480c      	ldr	r0, [pc, #48]	; (80046f8 <prvInitialiseTaskLists+0x70>)
 80046c8:	f000 fd8c 	bl	80051e4 <vListInitialise>
 80046cc:	480b      	ldr	r0, [pc, #44]	; (80046fc <prvInitialiseTaskLists+0x74>)
 80046ce:	f000 fd89 	bl	80051e4 <vListInitialise>
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <prvInitialiseTaskLists+0x78>)
 80046d4:	4a05      	ldr	r2, [pc, #20]	; (80046ec <prvInitialiseTaskLists+0x64>)
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <prvInitialiseTaskLists+0x7c>)
 80046da:	4a05      	ldr	r2, [pc, #20]	; (80046f0 <prvInitialiseTaskLists+0x68>)
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200000ac 	.word	0x200000ac
 80046ec:	20000110 	.word	0x20000110
 80046f0:	20000124 	.word	0x20000124
 80046f4:	20000140 	.word	0x20000140
 80046f8:	20000154 	.word	0x20000154
 80046fc:	2000016c 	.word	0x2000016c
 8004700:	20000138 	.word	0x20000138
 8004704:	2000013c 	.word	0x2000013c

08004708 <prvCheckTasksWaitingTermination>:
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	e019      	b.n	8004744 <prvCheckTasksWaitingTermination+0x3c>
 8004710:	f000 fee6 	bl	80054e0 <vPortEnterCritical>
 8004714:	4b10      	ldr	r3, [pc, #64]	; (8004758 <prvCheckTasksWaitingTermination+0x50>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fdc2 	bl	80052aa <uxListRemove>
 8004726:	4b0d      	ldr	r3, [pc, #52]	; (800475c <prvCheckTasksWaitingTermination+0x54>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3b01      	subs	r3, #1
 800472c:	4a0b      	ldr	r2, [pc, #44]	; (800475c <prvCheckTasksWaitingTermination+0x54>)
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <prvCheckTasksWaitingTermination+0x58>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3b01      	subs	r3, #1
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <prvCheckTasksWaitingTermination+0x58>)
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	f000 ff01 	bl	8005540 <vPortExitCritical>
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f810 	bl	8004764 <prvDeleteTCB>
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <prvCheckTasksWaitingTermination+0x58>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e1      	bne.n	8004710 <prvCheckTasksWaitingTermination+0x8>
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000154 	.word	0x20000154
 800475c:	20000180 	.word	0x20000180
 8004760:	20000168 	.word	0x20000168

08004764 <prvDeleteTCB>:
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fd25 	bl	80051c0 <vPortFree>
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fd22 	bl	80051c0 <vPortFree>
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <prvResetNextTaskUnblockTime>:
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <prvResetNextTaskUnblockTime+0x2c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d104      	bne.n	800479c <prvResetNextTaskUnblockTime+0x18>
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <prvResetNextTaskUnblockTime+0x30>)
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e005      	b.n	80047a8 <prvResetNextTaskUnblockTime+0x24>
 800479c:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <prvResetNextTaskUnblockTime+0x2c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a03      	ldr	r2, [pc, #12]	; (80047b4 <prvResetNextTaskUnblockTime+0x30>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	20000138 	.word	0x20000138
 80047b4:	200001a0 	.word	0x200001a0

080047b8 <xTaskGetSchedulerState>:
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <xTaskGetSchedulerState+0x34>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <xTaskGetSchedulerState+0x14>
 80047c6:	2301      	movs	r3, #1
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	e008      	b.n	80047de <xTaskGetSchedulerState+0x26>
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <xTaskGetSchedulerState+0x38>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <xTaskGetSchedulerState+0x22>
 80047d4:	2302      	movs	r3, #2
 80047d6:	607b      	str	r3, [r7, #4]
 80047d8:	e001      	b.n	80047de <xTaskGetSchedulerState+0x26>
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	2000018c 	.word	0x2000018c
 80047f0:	200001a8 	.word	0x200001a8

080047f4 <xTaskPriorityInherit>:
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d079      	beq.n	80048fe <xTaskPriorityInherit+0x10a>
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480e:	4b3e      	ldr	r3, [pc, #248]	; (8004908 <xTaskPriorityInherit+0x114>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	429a      	cmp	r2, r3
 8004816:	d269      	bcs.n	80048ec <xTaskPriorityInherit+0xf8>
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db06      	blt.n	800482e <xTaskPriorityInherit+0x3a>
 8004820:	4b39      	ldr	r3, [pc, #228]	; (8004908 <xTaskPriorityInherit+0x114>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	f1c3 0205 	rsb	r2, r3, #5
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	619a      	str	r2, [r3, #24]
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	6959      	ldr	r1, [r3, #20]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4a33      	ldr	r2, [pc, #204]	; (800490c <xTaskPriorityInherit+0x118>)
 8004840:	4413      	add	r3, r2
 8004842:	4299      	cmp	r1, r3
 8004844:	d14a      	bne.n	80048dc <xTaskPriorityInherit+0xe8>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	3304      	adds	r3, #4
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fd2d 	bl	80052aa <uxListRemove>
 8004850:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <xTaskPriorityInherit+0x114>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	62da      	str	r2, [r3, #44]	; 0x2c
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800485e:	4b2c      	ldr	r3, [pc, #176]	; (8004910 <xTaskPriorityInherit+0x11c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d903      	bls.n	800486e <xTaskPriorityInherit+0x7a>
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	4a29      	ldr	r2, [pc, #164]	; (8004910 <xTaskPriorityInherit+0x11c>)
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	4926      	ldr	r1, [pc, #152]	; (800490c <xTaskPriorityInherit+0x118>)
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	3304      	adds	r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	60da      	str	r2, [r3, #12]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	3204      	adds	r2, #4
 800489a:	605a      	str	r2, [r3, #4]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1d1a      	adds	r2, r3, #4
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4a16      	ldr	r2, [pc, #88]	; (800490c <xTaskPriorityInherit+0x118>)
 80048b2:	441a      	add	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	615a      	str	r2, [r3, #20]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	4913      	ldr	r1, [pc, #76]	; (800490c <xTaskPriorityInherit+0x118>)
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	1c59      	adds	r1, r3, #1
 80048cc:	480f      	ldr	r0, [pc, #60]	; (800490c <xTaskPriorityInherit+0x118>)
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4403      	add	r3, r0
 80048d8:	6019      	str	r1, [r3, #0]
 80048da:	e004      	b.n	80048e6 <xTaskPriorityInherit+0xf2>
 80048dc:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <xTaskPriorityInherit+0x114>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80048e6:	2301      	movs	r3, #1
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	e008      	b.n	80048fe <xTaskPriorityInherit+0x10a>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <xTaskPriorityInherit+0x114>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d201      	bcs.n	80048fe <xTaskPriorityInherit+0x10a>
 80048fa:	2301      	movs	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	200000a8 	.word	0x200000a8
 800490c:	200000ac 	.word	0x200000ac
 8004910:	20000188 	.word	0x20000188

08004914 <xTaskPriorityDisinherit>:
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d07e      	beq.n	8004a28 <xTaskPriorityDisinherit+0x114>
 800492a:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <xTaskPriorityDisinherit+0x120>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	d00a      	beq.n	800494a <xTaskPriorityDisinherit+0x36>
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xTaskPriorityDisinherit+0x34>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <xTaskPriorityDisinherit+0x54>
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xTaskPriorityDisinherit+0x52>
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497a:	429a      	cmp	r2, r3
 800497c:	d054      	beq.n	8004a28 <xTaskPriorityDisinherit+0x114>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004982:	2b00      	cmp	r3, #0
 8004984:	d150      	bne.n	8004a28 <xTaskPriorityDisinherit+0x114>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	3304      	adds	r3, #4
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fc8d 	bl	80052aa <uxListRemove>
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499c:	f1c3 0205 	rsb	r2, r3, #5
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	619a      	str	r2, [r3, #24]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a8:	4b23      	ldr	r3, [pc, #140]	; (8004a38 <xTaskPriorityDisinherit+0x124>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d903      	bls.n	80049b8 <xTaskPriorityDisinherit+0xa4>
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	4a20      	ldr	r2, [pc, #128]	; (8004a38 <xTaskPriorityDisinherit+0x124>)
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049bc:	491f      	ldr	r1, [pc, #124]	; (8004a3c <xTaskPriorityDisinherit+0x128>)
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3304      	adds	r3, #4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	60da      	str	r2, [r3, #12]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	3204      	adds	r2, #4
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	1d1a      	adds	r2, r3, #4
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	609a      	str	r2, [r3, #8]
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <xTaskPriorityDisinherit+0x128>)
 80049fc:	441a      	add	r2, r3
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	615a      	str	r2, [r3, #20]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a06:	490d      	ldr	r1, [pc, #52]	; (8004a3c <xTaskPriorityDisinherit+0x128>)
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1c59      	adds	r1, r3, #1
 8004a16:	4809      	ldr	r0, [pc, #36]	; (8004a3c <xTaskPriorityDisinherit+0x128>)
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4403      	add	r3, r0
 8004a22:	6019      	str	r1, [r3, #0]
 8004a24:	2301      	movs	r3, #1
 8004a26:	61fb      	str	r3, [r7, #28]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200000a8 	.word	0x200000a8
 8004a38:	20000188 	.word	0x20000188
 8004a3c:	200000ac 	.word	0x200000ac

08004a40 <vTaskPriorityDisinheritAfterTimeout>:
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	2301      	movs	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8093 	beq.w	8004b80 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d902      	bls.n	8004a88 <vTaskPriorityDisinheritAfterTimeout+0x48>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
 8004a86:	e002      	b.n	8004a8e <vTaskPriorityDisinheritAfterTimeout+0x4e>
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d073      	beq.n	8004b80 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d16e      	bne.n	8004b80 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a3a      	ldr	r2, [r7, #32]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d10a      	bne.n	8004ac2 <vTaskPriorityDisinheritAfterTimeout+0x82>
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004acc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	db04      	blt.n	8004ae0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f1c3 0205 	rsb	r2, r3, #5
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	619a      	str	r2, [r3, #24]
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	6959      	ldr	r1, [r3, #20]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4a27      	ldr	r2, [pc, #156]	; (8004b8c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004af0:	4413      	add	r3, r2
 8004af2:	4299      	cmp	r1, r3
 8004af4:	d144      	bne.n	8004b80 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fbd5 	bl	80052aa <uxListRemove>
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d903      	bls.n	8004b14 <vTaskPriorityDisinheritAfterTimeout+0xd4>
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	491c      	ldr	r1, [pc, #112]	; (8004b8c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3304      	adds	r3, #4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	60da      	str	r2, [r3, #12]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	6a3a      	ldr	r2, [r7, #32]
 8004b3e:	3204      	adds	r2, #4
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	1d1a      	adds	r2, r3, #4
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4a0d      	ldr	r2, [pc, #52]	; (8004b8c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004b58:	441a      	add	r2, r3
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	615a      	str	r2, [r3, #20]
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b62:	490a      	ldr	r1, [pc, #40]	; (8004b8c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	1c59      	adds	r1, r3, #1
 8004b72:	4806      	ldr	r0, [pc, #24]	; (8004b8c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4403      	add	r3, r0
 8004b7e:	6019      	str	r1, [r3, #0]
 8004b80:	bf00      	nop
 8004b82:	3728      	adds	r7, #40	; 0x28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200000a8 	.word	0x200000a8
 8004b8c:	200000ac 	.word	0x200000ac
 8004b90:	20000188 	.word	0x20000188

08004b94 <pvTaskIncrementMutexHeldCount>:
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <pvTaskIncrementMutexHeldCount+0x16>
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ba6:	3201      	adds	r2, #1
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
 8004baa:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	200000a8 	.word	0x200000a8

08004bbc <prvAddCurrentTaskToDelayedList>:
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
 8004bc6:	4b2e      	ldr	r3, [pc, #184]	; (8004c80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	4b2d      	ldr	r3, [pc, #180]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fb69 	bl	80052aa <uxListRemove>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d124      	bne.n	8004c2a <prvAddCurrentTaskToDelayedList+0x6e>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d021      	beq.n	8004c2a <prvAddCurrentTaskToDelayedList+0x6e>
 8004be6:	4b28      	ldr	r3, [pc, #160]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	6892      	ldr	r2, [r2, #8]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	3204      	adds	r2, #4
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	1d1a      	adds	r2, r3, #4
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c1a:	615a      	str	r2, [r3, #20]
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	bf00      	nop
 8004c28:	e026      	b.n	8004c78 <prvAddCurrentTaskToDelayedList+0xbc>
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d209      	bcs.n	8004c56 <prvAddCurrentTaskToDelayedList+0x9a>
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <prvAddCurrentTaskToDelayedList+0xd0>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f000 faf3 	bl	800523a <vListInsert>
 8004c54:	e010      	b.n	8004c78 <prvAddCurrentTaskToDelayedList+0xbc>
 8004c56:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4619      	mov	r1, r3
 8004c62:	4610      	mov	r0, r2
 8004c64:	f000 fae9 	bl	800523a <vListInsert>
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d202      	bcs.n	8004c78 <prvAddCurrentTaskToDelayedList+0xbc>
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6013      	str	r3, [r2, #0]
 8004c78:	bf00      	nop
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000184 	.word	0x20000184
 8004c84:	200000a8 	.word	0x200000a8
 8004c88:	2000016c 	.word	0x2000016c
 8004c8c:	2000013c 	.word	0x2000013c
 8004c90:	20000138 	.word	0x20000138
 8004c94:	200001a0 	.word	0x200001a0

08004c98 <xTimerCreateTimerTask>:
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	607b      	str	r3, [r7, #4]
 8004ca2:	f000 fa45 	bl	8005130 <prvCheckForValidListAndQueue>
 8004ca6:	4b11      	ldr	r3, [pc, #68]	; (8004cec <xTimerCreateTimerTask+0x54>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <xTimerCreateTimerTask+0x2c>
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <xTimerCreateTimerTask+0x58>)
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2280      	movs	r2, #128	; 0x80
 8004cba:	490e      	ldr	r1, [pc, #56]	; (8004cf4 <xTimerCreateTimerTask+0x5c>)
 8004cbc:	480e      	ldr	r0, [pc, #56]	; (8004cf8 <xTimerCreateTimerTask+0x60>)
 8004cbe:	f7fe fcf9 	bl	80036b4 <xTaskCreate>
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <xTimerCreateTimerTask+0x48>
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	bf00      	nop
 8004cde:	e7fe      	b.n	8004cde <xTimerCreateTimerTask+0x46>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200001dc 	.word	0x200001dc
 8004cf0:	200001e0 	.word	0x200001e0
 8004cf4:	08005b10 	.word	0x08005b10
 8004cf8:	08004da1 	.word	0x08004da1

08004cfc <prvReloadTimer>:
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	e008      	b.n	8004d1c <prvReloadTimer+0x20>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4413      	add	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	4798      	blx	r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	18d1      	adds	r1, r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f8db 	bl	8004ee4 <prvInsertTimerInActiveList>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ea      	bne.n	8004d0a <prvReloadTimer+0xe>
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <prvProcessExpiredTimer>:
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <prvProcessExpiredTimer+0x5c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 faa6 	bl	80052aa <uxListRemove>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <prvProcessExpiredTimer+0x38>
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ffc3 	bl	8004cfc <prvReloadTimer>
 8004d76:	e008      	b.n	8004d8a <prvProcessExpiredTimer+0x4a>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	4798      	blx	r3
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	200001d4 	.word	0x200001d4

08004da0 <prvTimerTask>:
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	f107 0308 	add.w	r3, r7, #8
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 f857 	bl	8004e60 <prvGetNextExpireTime>
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4619      	mov	r1, r3
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f803 	bl	8004dc4 <prvProcessTimerOrBlockTask>
 8004dbe:	f000 f8d3 	bl	8004f68 <prvProcessReceivedCommands>
 8004dc2:	e7f1      	b.n	8004da8 <prvTimerTask+0x8>

08004dc4 <prvProcessTimerOrBlockTask>:
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
 8004dce:	f7fe fef5 	bl	8003bbc <vTaskSuspendAll>
 8004dd2:	f107 0308 	add.w	r3, r7, #8
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 f864 	bl	8004ea4 <prvSampleTimeNow>
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d130      	bne.n	8004e46 <prvProcessTimerOrBlockTask+0x82>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <prvProcessTimerOrBlockTask+0x3c>
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d806      	bhi.n	8004e00 <prvProcessTimerOrBlockTask+0x3c>
 8004df2:	f7fe ff27 	bl	8003c44 <xTaskResumeAll>
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff ffa1 	bl	8004d40 <prvProcessExpiredTimer>
 8004dfe:	e024      	b.n	8004e4a <prvProcessTimerOrBlockTask+0x86>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <prvProcessTimerOrBlockTask+0x54>
 8004e06:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <prvProcessTimerOrBlockTask+0x90>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <prvProcessTimerOrBlockTask+0x50>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <prvProcessTimerOrBlockTask+0x52>
 8004e14:	2300      	movs	r3, #0
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <prvProcessTimerOrBlockTask+0x94>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	4619      	mov	r1, r3
 8004e26:	f7fe fc11 	bl	800364c <vQueueWaitForMessageRestricted>
 8004e2a:	f7fe ff0b 	bl	8003c44 <xTaskResumeAll>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <prvProcessTimerOrBlockTask+0x86>
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <prvProcessTimerOrBlockTask+0x98>)
 8004e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	e001      	b.n	8004e4a <prvProcessTimerOrBlockTask+0x86>
 8004e46:	f7fe fefd 	bl	8003c44 <xTaskResumeAll>
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200001d8 	.word	0x200001d8
 8004e58:	200001dc 	.word	0x200001dc
 8004e5c:	e000ed04 	.word	0xe000ed04

08004e60 <prvGetNextExpireTime>:
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <prvGetNextExpireTime+0x40>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <prvGetNextExpireTime+0x16>
 8004e72:	2201      	movs	r2, #1
 8004e74:	e000      	b.n	8004e78 <prvGetNextExpireTime+0x18>
 8004e76:	2200      	movs	r2, #0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <prvGetNextExpireTime+0x30>
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <prvGetNextExpireTime+0x40>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	e001      	b.n	8004e94 <prvGetNextExpireTime+0x34>
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr
 8004ea0:	200001d4 	.word	0x200001d4

08004ea4 <prvSampleTimeNow>:
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	f7fe ffc6 	bl	8003e3c <xTaskGetTickCount>
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <prvSampleTimeNow+0x3c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d205      	bcs.n	8004ec8 <prvSampleTimeNow+0x24>
 8004ebc:	f000 f912 	bl	80050e4 <prvSwitchTimerLists>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <prvSampleTimeNow+0x2a>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <prvSampleTimeNow+0x3c>)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200001e4 	.word	0x200001e4

08004ee4 <prvInsertTimerInActiveList>:
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	605a      	str	r2, [r3, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	611a      	str	r2, [r3, #16]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d812      	bhi.n	8004f30 <prvInsertTimerInActiveList+0x4c>
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <prvInsertTimerInActiveList+0x3a>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e01b      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <prvInsertTimerInActiveList+0x7c>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 f986 	bl	800523a <vListInsert>
 8004f2e:	e012      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d206      	bcs.n	8004f46 <prvInsertTimerInActiveList+0x62>
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d302      	bcc.n	8004f46 <prvInsertTimerInActiveList+0x62>
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e007      	b.n	8004f56 <prvInsertTimerInActiveList+0x72>
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <prvInsertTimerInActiveList+0x80>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f000 f972 	bl	800523a <vListInsert>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	200001d8 	.word	0x200001d8
 8004f64:	200001d4 	.word	0x200001d4

08004f68 <prvProcessReceivedCommands>:
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	e0a6      	b.n	80050be <prvProcessReceivedCommands+0x156>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f2c0 80a2 	blt.w	80050bc <prvProcessReceivedCommands+0x154>
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d004      	beq.n	8004f8e <prvProcessReceivedCommands+0x26>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f98e 	bl	80052aa <uxListRemove>
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ff87 	bl	8004ea4 <prvSampleTimeNow>
 8004f96:	61b8      	str	r0, [r7, #24]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	f200 808e 	bhi.w	80050be <prvProcessReceivedCommands+0x156>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <prvProcessReceivedCommands+0x40>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fcd 	.word	0x08004fcd
 8004fb0:	08005035 	.word	0x08005035
 8004fb4:	08005049 	.word	0x08005049
 8004fb8:	08005093 	.word	0x08005093
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	08004fcd 	.word	0x08004fcd
 8004fc4:	08005035 	.word	0x08005035
 8004fc8:	08005049 	.word	0x08005049
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	18d1      	adds	r1, r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	69f8      	ldr	r0, [r7, #28]
 8004fec:	f7ff ff7a 	bl	8004ee4 <prvInsertTimerInActiveList>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d063      	beq.n	80050be <prvProcessReceivedCommands+0x156>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d009      	beq.n	8005018 <prvProcessReceivedCommands+0xb0>
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	4413      	add	r3, r2
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4619      	mov	r1, r3
 8005010:	69f8      	ldr	r0, [r7, #28]
 8005012:	f7ff fe73 	bl	8004cfc <prvReloadTimer>
 8005016:	e008      	b.n	800502a <prvProcessReceivedCommands+0xc2>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	b2da      	uxtb	r2, r3
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	69f8      	ldr	r0, [r7, #28]
 8005030:	4798      	blx	r3
 8005032:	e044      	b.n	80050be <prvProcessReceivedCommands+0x156>
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005046:	e03a      	b.n	80050be <prvProcessReceivedCommands+0x156>
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	b2da      	uxtb	r2, r3
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	619a      	str	r2, [r3, #24]
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10a      	bne.n	800507e <prvProcessReceivedCommands+0x116>
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	bf00      	nop
 800507c:	e7fe      	b.n	800507c <prvProcessReceivedCommands+0x114>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	18d1      	adds	r1, r2, r3
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	69f8      	ldr	r0, [r7, #28]
 800508c:	f7ff ff2a 	bl	8004ee4 <prvInsertTimerInActiveList>
 8005090:	e015      	b.n	80050be <prvProcessReceivedCommands+0x156>
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d103      	bne.n	80050a8 <prvProcessReceivedCommands+0x140>
 80050a0:	69f8      	ldr	r0, [r7, #28]
 80050a2:	f000 f88d 	bl	80051c0 <vPortFree>
 80050a6:	e00a      	b.n	80050be <prvProcessReceivedCommands+0x156>
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80050ba:	e000      	b.n	80050be <prvProcessReceivedCommands+0x156>
 80050bc:	bf00      	nop
 80050be:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <prvProcessReceivedCommands+0x178>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f107 0108 	add.w	r1, r7, #8
 80050c6:	2200      	movs	r2, #0
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fd ff6b 	bl	8002fa4 <xQueueReceive>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f47f af4d 	bne.w	8004f70 <prvProcessReceivedCommands+0x8>
 80050d6:	bf00      	nop
 80050d8:	bf00      	nop
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	200001dc 	.word	0x200001dc

080050e4 <prvSwitchTimerLists>:
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	e009      	b.n	8005100 <prvSwitchTimerLists+0x1c>
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <prvSwitchTimerLists+0x44>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	f04f 31ff 	mov.w	r1, #4294967295
 80050fa:	6838      	ldr	r0, [r7, #0]
 80050fc:	f7ff fe20 	bl	8004d40 <prvProcessExpiredTimer>
 8005100:	4b09      	ldr	r3, [pc, #36]	; (8005128 <prvSwitchTimerLists+0x44>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <prvSwitchTimerLists+0x8>
 800510a:	4b07      	ldr	r3, [pc, #28]	; (8005128 <prvSwitchTimerLists+0x44>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	607b      	str	r3, [r7, #4]
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <prvSwitchTimerLists+0x48>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a04      	ldr	r2, [pc, #16]	; (8005128 <prvSwitchTimerLists+0x44>)
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4a04      	ldr	r2, [pc, #16]	; (800512c <prvSwitchTimerLists+0x48>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6013      	str	r3, [r2, #0]
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200001d4 	.word	0x200001d4
 800512c:	200001d8 	.word	0x200001d8

08005130 <prvCheckForValidListAndQueue>:
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
 8005134:	f000 f9d4 	bl	80054e0 <vPortEnterCritical>
 8005138:	4b12      	ldr	r3, [pc, #72]	; (8005184 <prvCheckForValidListAndQueue+0x54>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d11d      	bne.n	800517c <prvCheckForValidListAndQueue+0x4c>
 8005140:	4811      	ldr	r0, [pc, #68]	; (8005188 <prvCheckForValidListAndQueue+0x58>)
 8005142:	f000 f84f 	bl	80051e4 <vListInitialise>
 8005146:	4811      	ldr	r0, [pc, #68]	; (800518c <prvCheckForValidListAndQueue+0x5c>)
 8005148:	f000 f84c 	bl	80051e4 <vListInitialise>
 800514c:	4b10      	ldr	r3, [pc, #64]	; (8005190 <prvCheckForValidListAndQueue+0x60>)
 800514e:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <prvCheckForValidListAndQueue+0x58>)
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	4b10      	ldr	r3, [pc, #64]	; (8005194 <prvCheckForValidListAndQueue+0x64>)
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <prvCheckForValidListAndQueue+0x5c>)
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	2200      	movs	r2, #0
 800515a:	210c      	movs	r1, #12
 800515c:	200a      	movs	r0, #10
 800515e:	f7fd fc5b 	bl	8002a18 <xQueueGenericCreate>
 8005162:	4603      	mov	r3, r0
 8005164:	4a07      	ldr	r2, [pc, #28]	; (8005184 <prvCheckForValidListAndQueue+0x54>)
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	4b06      	ldr	r3, [pc, #24]	; (8005184 <prvCheckForValidListAndQueue+0x54>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <prvCheckForValidListAndQueue+0x4c>
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <prvCheckForValidListAndQueue+0x54>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4908      	ldr	r1, [pc, #32]	; (8005198 <prvCheckForValidListAndQueue+0x68>)
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fa1a 	bl	80035b0 <vQueueAddToRegistry>
 800517c:	f000 f9e0 	bl	8005540 <vPortExitCritical>
 8005180:	bf00      	nop
 8005182:	bd80      	pop	{r7, pc}
 8005184:	200001dc 	.word	0x200001dc
 8005188:	200001ac 	.word	0x200001ac
 800518c:	200001c0 	.word	0x200001c0
 8005190:	200001d4 	.word	0x200001d4
 8005194:	200001d8 	.word	0x200001d8
 8005198:	08005b18 	.word	0x08005b18

0800519c <pvPortMalloc>:
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	f7fe fd0a 	bl	8003bbc <vTaskSuspendAll>
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fba5 	bl	80058f8 <malloc>
 80051ae:	4603      	mov	r3, r0
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	f7fe fd47 	bl	8003c44 <xTaskResumeAll>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <vPortFree>:
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d006      	beq.n	80051dc <vPortFree+0x1c>
 80051ce:	f7fe fcf5 	bl	8003bbc <vTaskSuspendAll>
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fb98 	bl	8005908 <free>
 80051d8:	f7fe fd34 	bl	8003c44 <xTaskResumeAll>
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <vListInitialise>:
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f103 0208 	add.w	r2, r3, #8
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	605a      	str	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f04f 32ff 	mov.w	r2, #4294967295
 80051fc:	609a      	str	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f103 0208 	add.w	r2, r3, #8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60da      	str	r2, [r3, #12]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f103 0208 	add.w	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr

08005222 <vListInitialiseItem>:
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	611a      	str	r2, [r3, #16]
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <vListInsert>:
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
 8005242:	6039      	str	r1, [r7, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005250:	d103      	bne.n	800525a <vListInsert+0x20>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e00c      	b.n	8005274 <vListInsert+0x3a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3308      	adds	r3, #8
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e002      	b.n	8005268 <vListInsert+0x2e>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	429a      	cmp	r2, r3
 8005272:	d2f6      	bcs.n	8005262 <vListInsert+0x28>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	609a      	str	r2, [r3, #8]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	605a      	str	r2, [r3, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	611a      	str	r2, [r3, #16]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	bf00      	nop
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr

080052aa <uxListRemove>:
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	6892      	ldr	r2, [r2, #8]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6852      	ldr	r2, [r2, #4]
 80052ca:	605a      	str	r2, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d103      	bne.n	80052de <uxListRemove+0x34>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	611a      	str	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	1e5a      	subs	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <pxPortInitialiseStack>:
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3b04      	subs	r3, #4
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b04      	subs	r3, #4
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b04      	subs	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	4a08      	ldr	r2, [pc, #32]	; (8005350 <pxPortInitialiseStack+0x54>)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b14      	subs	r3, #20
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b20      	subs	r3, #32
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr
 8005350:	08005355 	.word	0x08005355

08005354 <prvTaskExitError>:
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <prvTaskExitError+0x54>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d00a      	beq.n	800537e <prvTaskExitError+0x2a>
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <prvTaskExitError+0x28>
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	60bb      	str	r3, [r7, #8]
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0fc      	beq.n	8005394 <prvTaskExitError+0x40>
 800539a:	bf00      	nop
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	20000010 	.word	0x20000010
 80053ac:	00000000 	.word	0x00000000

080053b0 <SVC_Handler>:
 80053b0:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <pxCurrentTCBConst2>)
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	6808      	ldr	r0, [r1, #0]
 80053b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053ba:	f380 8809 	msr	PSP, r0
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f04f 0000 	mov.w	r0, #0
 80053c6:	f380 8811 	msr	BASEPRI, r0
 80053ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80053ce:	4770      	bx	lr

080053d0 <pxCurrentTCBConst2>:
 80053d0:	200000a8 	.word	0x200000a8
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop

080053d8 <prvPortStartFirstTask>:
 80053d8:	4806      	ldr	r0, [pc, #24]	; (80053f4 <prvPortStartFirstTask+0x1c>)
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	6800      	ldr	r0, [r0, #0]
 80053de:	f380 8808 	msr	MSP, r0
 80053e2:	b662      	cpsie	i
 80053e4:	b661      	cpsie	f
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	df00      	svc	0
 80053f0:	bf00      	nop
 80053f2:	0000      	.short	0x0000
 80053f4:	e000ed08 	.word	0xe000ed08
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop

080053fc <xPortStartScheduler>:
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	4b32      	ldr	r3, [pc, #200]	; (80054cc <xPortStartScheduler+0xd0>)
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	22ff      	movs	r2, #255	; 0xff
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	70fb      	strb	r3, [r7, #3]
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005424:	b2da      	uxtb	r2, r3
 8005426:	4b2a      	ldr	r3, [pc, #168]	; (80054d0 <xPortStartScheduler+0xd4>)
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <xPortStartScheduler+0xd8>)
 800542c:	2207      	movs	r2, #7
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e009      	b.n	8005446 <xPortStartScheduler+0x4a>
 8005432:	4b28      	ldr	r3, [pc, #160]	; (80054d4 <xPortStartScheduler+0xd8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3b01      	subs	r3, #1
 8005438:	4a26      	ldr	r2, [pc, #152]	; (80054d4 <xPortStartScheduler+0xd8>)
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	70fb      	strb	r3, [r7, #3]
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b80      	cmp	r3, #128	; 0x80
 8005450:	d0ef      	beq.n	8005432 <xPortStartScheduler+0x36>
 8005452:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <xPortStartScheduler+0xd8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f1c3 0307 	rsb	r3, r3, #7
 800545a:	2b04      	cmp	r3, #4
 800545c:	d00a      	beq.n	8005474 <xPortStartScheduler+0x78>
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	bf00      	nop
 8005472:	e7fe      	b.n	8005472 <xPortStartScheduler+0x76>
 8005474:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <xPortStartScheduler+0xd8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	4a16      	ldr	r2, [pc, #88]	; (80054d4 <xPortStartScheduler+0xd8>)
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <xPortStartScheduler+0xd8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005486:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <xPortStartScheduler+0xd8>)
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <xPortStartScheduler+0xdc>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a10      	ldr	r2, [pc, #64]	; (80054d8 <xPortStartScheduler+0xdc>)
 8005498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <xPortStartScheduler+0xdc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a0d      	ldr	r2, [pc, #52]	; (80054d8 <xPortStartScheduler+0xdc>)
 80054a4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	f000 f981 	bl	80057b0 <vPortSetupTimerInterrupt>
 80054ae:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <xPortStartScheduler+0xe0>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f7ff ff90 	bl	80053d8 <prvPortStartFirstTask>
 80054b8:	f7fe fe4a 	bl	8004150 <vTaskSwitchContext>
 80054bc:	f7ff ff4a 	bl	8005354 <prvTaskExitError>
 80054c0:	2300      	movs	r3, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	e000e400 	.word	0xe000e400
 80054d0:	200001f4 	.word	0x200001f4
 80054d4:	200001f8 	.word	0x200001f8
 80054d8:	e000ed20 	.word	0xe000ed20
 80054dc:	20000010 	.word	0x20000010

080054e0 <vPortEnterCritical>:
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	bf00      	nop
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <vPortEnterCritical+0x58>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3301      	adds	r3, #1
 8005500:	4a0d      	ldr	r2, [pc, #52]	; (8005538 <vPortEnterCritical+0x58>)
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <vPortEnterCritical+0x58>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d10f      	bne.n	800552c <vPortEnterCritical+0x4c>
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <vPortEnterCritical+0x5c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <vPortEnterCritical+0x4c>
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <vPortEnterCritical+0x4a>
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000010 	.word	0x20000010
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <vPortExitCritical>:
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	4b11      	ldr	r3, [pc, #68]	; (800558c <vPortExitCritical+0x4c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <vPortExitCritical+0x24>
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vPortExitCritical+0x22>
 8005564:	4b09      	ldr	r3, [pc, #36]	; (800558c <vPortExitCritical+0x4c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3b01      	subs	r3, #1
 800556a:	4a08      	ldr	r2, [pc, #32]	; (800558c <vPortExitCritical+0x4c>)
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b07      	ldr	r3, [pc, #28]	; (800558c <vPortExitCritical+0x4c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d105      	bne.n	8005582 <vPortExitCritical+0x42>
 8005576:	2300      	movs	r3, #0
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr
 800558c:	20000010 	.word	0x20000010

08005590 <PendSV_Handler>:
 8005590:	f3ef 8009 	mrs	r0, PSP
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4b0d      	ldr	r3, [pc, #52]	; (80055d0 <pxCurrentTCBConst>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055a0:	6010      	str	r0, [r2, #0]
 80055a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80055a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055aa:	f380 8811 	msr	BASEPRI, r0
 80055ae:	f7fe fdcf 	bl	8004150 <vTaskSwitchContext>
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f380 8811 	msr	BASEPRI, r0
 80055ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055be:	6819      	ldr	r1, [r3, #0]
 80055c0:	6808      	ldr	r0, [r1, #0]
 80055c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055c6:	f380 8809 	msr	PSP, r0
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	4770      	bx	lr

080055d0 <pxCurrentTCBConst>:
 80055d0:	200000a8 	.word	0x200000a8
 80055d4:	bf00      	nop
 80055d6:	bf00      	nop

080055d8 <SysTick_Handler>:
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
 80055f0:	bf00      	nop
 80055f2:	f7fe fc95 	bl	8003f20 <xTaskIncrementTick>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <SysTick_Handler+0x2c>
 80055fc:	4b06      	ldr	r3, [pc, #24]	; (8005618 <SysTick_Handler+0x40>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <vPortSuppressTicksAndSleep>:
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <vPortSuppressTicksAndSleep+0x178>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	429a      	cmp	r2, r3
 800562c:	d902      	bls.n	8005634 <vPortSuppressTicksAndSleep+0x18>
 800562e:	4b59      	ldr	r3, [pc, #356]	; (8005794 <vPortSuppressTicksAndSleep+0x178>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	607b      	str	r3, [r7, #4]
 8005634:	b672      	cpsid	i
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f7fe ffed 	bl	800461c <eTaskConfirmSleepModeStatus>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <vPortSuppressTicksAndSleep+0x30>
 8005648:	b662      	cpsie	i
 800564a:	e09e      	b.n	800578a <vPortSuppressTicksAndSleep+0x16e>
 800564c:	4b52      	ldr	r3, [pc, #328]	; (8005798 <vPortSuppressTicksAndSleep+0x17c>)
 800564e:	2206      	movs	r2, #6
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	4b52      	ldr	r3, [pc, #328]	; (800579c <vPortSuppressTicksAndSleep+0x180>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d102      	bne.n	8005664 <vPortSuppressTicksAndSleep+0x48>
 800565e:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	617b      	str	r3, [r7, #20]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3b01      	subs	r3, #1
 8005668:	4a4d      	ldr	r2, [pc, #308]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	fb02 f303 	mul.w	r3, r2, r3
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4413      	add	r3, r2
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	4b4b      	ldr	r3, [pc, #300]	; (80057a4 <vPortSuppressTicksAndSleep+0x188>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <vPortSuppressTicksAndSleep+0x78>
 8005682:	4b48      	ldr	r3, [pc, #288]	; (80057a4 <vPortSuppressTicksAndSleep+0x188>)
 8005684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	4b45      	ldr	r3, [pc, #276]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	4b44      	ldr	r3, [pc, #272]	; (80057a8 <vPortSuppressTicksAndSleep+0x18c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	429a      	cmp	r2, r3
 800569c:	d904      	bls.n	80056a8 <vPortSuppressTicksAndSleep+0x8c>
 800569e:	4b42      	ldr	r3, [pc, #264]	; (80057a8 <vPortSuppressTicksAndSleep+0x18c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	4a40      	ldr	r2, [pc, #256]	; (80057ac <vPortSuppressTicksAndSleep+0x190>)
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b3b      	ldr	r3, [pc, #236]	; (800579c <vPortSuppressTicksAndSleep+0x180>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	4b38      	ldr	r3, [pc, #224]	; (8005798 <vPortSuppressTicksAndSleep+0x17c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a37      	ldr	r2, [pc, #220]	; (8005798 <vPortSuppressTicksAndSleep+0x17c>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <vPortSuppressTicksAndSleep+0xb8>
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	bf30      	wfi
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	b662      	cpsie	i
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	b672      	cpsid	i
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <vPortSuppressTicksAndSleep+0x17c>)
 80056ea:	2206      	movs	r2, #6
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	4b2a      	ldr	r3, [pc, #168]	; (8005798 <vPortSuppressTicksAndSleep+0x17c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01d      	beq.n	8005736 <vPortSuppressTicksAndSleep+0x11a>
 80056fa:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b27      	ldr	r3, [pc, #156]	; (800579c <vPortSuppressTicksAndSleep+0x180>)
 8005700:	6819      	ldr	r1, [r3, #0]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	1acb      	subs	r3, r1, r3
 8005706:	4413      	add	r3, r2
 8005708:	3b01      	subs	r3, #1
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	4b26      	ldr	r3, [pc, #152]	; (80057a8 <vPortSuppressTicksAndSleep+0x18c>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d904      	bls.n	8005720 <vPortSuppressTicksAndSleep+0x104>
 8005716:	4b22      	ldr	r3, [pc, #136]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	429a      	cmp	r2, r3
 800571e:	d903      	bls.n	8005728 <vPortSuppressTicksAndSleep+0x10c>
 8005720:	4b1f      	ldr	r3, [pc, #124]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3b01      	subs	r3, #1
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <vPortSuppressTicksAndSleep+0x190>)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	3b01      	subs	r3, #1
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	e01a      	b.n	800576c <vPortSuppressTicksAndSleep+0x150>
 8005736:	4b19      	ldr	r3, [pc, #100]	; (800579c <vPortSuppressTicksAndSleep+0x180>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	fb02 f203 	mul.w	r2, r2, r3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	fbb2 f3f3 	udiv	r3, r2, r3
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	3301      	adds	r3, #1
 800575c:	4a10      	ldr	r2, [pc, #64]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	fb02 f203 	mul.w	r2, r2, r3
 8005764:	4911      	ldr	r1, [pc, #68]	; (80057ac <vPortSuppressTicksAndSleep+0x190>)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	600b      	str	r3, [r1, #0]
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <vPortSuppressTicksAndSleep+0x180>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <vPortSuppressTicksAndSleep+0x17c>)
 8005774:	2207      	movs	r2, #7
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <vPortSuppressTicksAndSleep+0x184>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <vPortSuppressTicksAndSleep+0x190>)
 800577e:	3b01      	subs	r3, #1
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	69b8      	ldr	r0, [r7, #24]
 8005784:	f7fe fb72 	bl	8003e6c <vTaskStepTick>
 8005788:	b662      	cpsie	i
 800578a:	bf00      	nop
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	200001ec 	.word	0x200001ec
 8005798:	e000e010 	.word	0xe000e010
 800579c:	e000e018 	.word	0xe000e018
 80057a0:	200001e8 	.word	0x200001e8
 80057a4:	e000ed04 	.word	0xe000ed04
 80057a8:	200001f0 	.word	0x200001f0
 80057ac:	e000e014 	.word	0xe000e014

080057b0 <vPortSetupTimerInterrupt>:
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	4b14      	ldr	r3, [pc, #80]	; (8005808 <vPortSetupTimerInterrupt+0x58>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a14      	ldr	r2, [pc, #80]	; (800580c <vPortSetupTimerInterrupt+0x5c>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	099b      	lsrs	r3, r3, #6
 80057c0:	4a13      	ldr	r2, [pc, #76]	; (8005810 <vPortSetupTimerInterrupt+0x60>)
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	4b12      	ldr	r3, [pc, #72]	; (8005810 <vPortSetupTimerInterrupt+0x60>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	4a10      	ldr	r2, [pc, #64]	; (8005814 <vPortSetupTimerInterrupt+0x64>)
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	4b10      	ldr	r3, [pc, #64]	; (8005818 <vPortSetupTimerInterrupt+0x68>)
 80057d6:	225e      	movs	r2, #94	; 0x5e
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	4b10      	ldr	r3, [pc, #64]	; (800581c <vPortSetupTimerInterrupt+0x6c>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <vPortSetupTimerInterrupt+0x70>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	4b08      	ldr	r3, [pc, #32]	; (8005808 <vPortSetupTimerInterrupt+0x58>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a08      	ldr	r2, [pc, #32]	; (800580c <vPortSetupTimerInterrupt+0x5c>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	099b      	lsrs	r3, r3, #6
 80057f2:	4a0c      	ldr	r2, [pc, #48]	; (8005824 <vPortSetupTimerInterrupt+0x74>)
 80057f4:	3b01      	subs	r3, #1
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <vPortSetupTimerInterrupt+0x6c>)
 80057fa:	2207      	movs	r2, #7
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	bf00      	nop
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000000 	.word	0x20000000
 800580c:	10624dd3 	.word	0x10624dd3
 8005810:	200001e8 	.word	0x200001e8
 8005814:	200001ec 	.word	0x200001ec
 8005818:	200001f0 	.word	0x200001f0
 800581c:	e000e010 	.word	0xe000e010
 8005820:	e000e018 	.word	0xe000e018
 8005824:	e000e014 	.word	0xe000e014

08005828 <vPortValidateInterruptPriority>:
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	f3ef 8305 	mrs	r3, IPSR
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	d914      	bls.n	8005864 <vPortValidateInterruptPriority+0x3c>
 800583a:	4a16      	ldr	r2, [pc, #88]	; (8005894 <vPortValidateInterruptPriority+0x6c>)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	72fb      	strb	r3, [r7, #11]
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <vPortValidateInterruptPriority+0x70>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	7afa      	ldrb	r2, [r7, #11]
 800584a:	429a      	cmp	r2, r3
 800584c:	d20a      	bcs.n	8005864 <vPortValidateInterruptPriority+0x3c>
 800584e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	bf00      	nop
 8005862:	e7fe      	b.n	8005862 <vPortValidateInterruptPriority+0x3a>
 8005864:	4b0d      	ldr	r3, [pc, #52]	; (800589c <vPortValidateInterruptPriority+0x74>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <vPortValidateInterruptPriority+0x78>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d90a      	bls.n	800588a <vPortValidateInterruptPriority+0x62>
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <vPortValidateInterruptPriority+0x60>
 800588a:	bf00      	nop
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr
 8005894:	e000e3f0 	.word	0xe000e3f0
 8005898:	200001f4 	.word	0x200001f4
 800589c:	e000ed0c 	.word	0xe000ed0c
 80058a0:	200001f8 	.word	0x200001f8

080058a4 <__errno>:
 80058a4:	4b01      	ldr	r3, [pc, #4]	; (80058ac <__errno+0x8>)
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000014 	.word	0x20000014

080058b0 <__libc_init_array>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	2600      	movs	r6, #0
 80058b4:	4d0c      	ldr	r5, [pc, #48]	; (80058e8 <__libc_init_array+0x38>)
 80058b6:	4c0d      	ldr	r4, [pc, #52]	; (80058ec <__libc_init_array+0x3c>)
 80058b8:	1b64      	subs	r4, r4, r5
 80058ba:	10a4      	asrs	r4, r4, #2
 80058bc:	42a6      	cmp	r6, r4
 80058be:	d109      	bne.n	80058d4 <__libc_init_array+0x24>
 80058c0:	f000 f904 	bl	8005acc <_init>
 80058c4:	2600      	movs	r6, #0
 80058c6:	4d0a      	ldr	r5, [pc, #40]	; (80058f0 <__libc_init_array+0x40>)
 80058c8:	4c0a      	ldr	r4, [pc, #40]	; (80058f4 <__libc_init_array+0x44>)
 80058ca:	1b64      	subs	r4, r4, r5
 80058cc:	10a4      	asrs	r4, r4, #2
 80058ce:	42a6      	cmp	r6, r4
 80058d0:	d105      	bne.n	80058de <__libc_init_array+0x2e>
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d8:	4798      	blx	r3
 80058da:	3601      	adds	r6, #1
 80058dc:	e7ee      	b.n	80058bc <__libc_init_array+0xc>
 80058de:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e2:	4798      	blx	r3
 80058e4:	3601      	adds	r6, #1
 80058e6:	e7f2      	b.n	80058ce <__libc_init_array+0x1e>
 80058e8:	08005b4c 	.word	0x08005b4c
 80058ec:	08005b4c 	.word	0x08005b4c
 80058f0:	08005b4c 	.word	0x08005b4c
 80058f4:	08005b50 	.word	0x08005b50

080058f8 <malloc>:
 80058f8:	4b02      	ldr	r3, [pc, #8]	; (8005904 <malloc+0xc>)
 80058fa:	4601      	mov	r1, r0
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	f000 b86d 	b.w	80059dc <_malloc_r>
 8005902:	bf00      	nop
 8005904:	20000014 	.word	0x20000014

08005908 <free>:
 8005908:	4b02      	ldr	r3, [pc, #8]	; (8005914 <free+0xc>)
 800590a:	4601      	mov	r1, r0
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	f000 b819 	b.w	8005944 <_free_r>
 8005912:	bf00      	nop
 8005914:	20000014 	.word	0x20000014

08005918 <memcpy>:
 8005918:	440a      	add	r2, r1
 800591a:	4291      	cmp	r1, r2
 800591c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005920:	d100      	bne.n	8005924 <memcpy+0xc>
 8005922:	4770      	bx	lr
 8005924:	b510      	push	{r4, lr}
 8005926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800592a:	4291      	cmp	r1, r2
 800592c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005930:	d1f9      	bne.n	8005926 <memcpy+0xe>
 8005932:	bd10      	pop	{r4, pc}

08005934 <memset>:
 8005934:	4603      	mov	r3, r0
 8005936:	4402      	add	r2, r0
 8005938:	4293      	cmp	r3, r2
 800593a:	d100      	bne.n	800593e <memset+0xa>
 800593c:	4770      	bx	lr
 800593e:	f803 1b01 	strb.w	r1, [r3], #1
 8005942:	e7f9      	b.n	8005938 <memset+0x4>

08005944 <_free_r>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	4605      	mov	r5, r0
 8005948:	2900      	cmp	r1, #0
 800594a:	d043      	beq.n	80059d4 <_free_r+0x90>
 800594c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005950:	1f0c      	subs	r4, r1, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfb8      	it	lt
 8005956:	18e4      	addlt	r4, r4, r3
 8005958:	f000 f8aa 	bl	8005ab0 <__malloc_lock>
 800595c:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <_free_r+0x94>)
 800595e:	6813      	ldr	r3, [r2, #0]
 8005960:	4610      	mov	r0, r2
 8005962:	b933      	cbnz	r3, 8005972 <_free_r+0x2e>
 8005964:	6063      	str	r3, [r4, #4]
 8005966:	6014      	str	r4, [r2, #0]
 8005968:	4628      	mov	r0, r5
 800596a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800596e:	f000 b8a5 	b.w	8005abc <__malloc_unlock>
 8005972:	42a3      	cmp	r3, r4
 8005974:	d90a      	bls.n	800598c <_free_r+0x48>
 8005976:	6821      	ldr	r1, [r4, #0]
 8005978:	1862      	adds	r2, r4, r1
 800597a:	4293      	cmp	r3, r2
 800597c:	bf01      	itttt	eq
 800597e:	681a      	ldreq	r2, [r3, #0]
 8005980:	685b      	ldreq	r3, [r3, #4]
 8005982:	1852      	addeq	r2, r2, r1
 8005984:	6022      	streq	r2, [r4, #0]
 8005986:	6063      	str	r3, [r4, #4]
 8005988:	6004      	str	r4, [r0, #0]
 800598a:	e7ed      	b.n	8005968 <_free_r+0x24>
 800598c:	461a      	mov	r2, r3
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	b10b      	cbz	r3, 8005996 <_free_r+0x52>
 8005992:	42a3      	cmp	r3, r4
 8005994:	d9fa      	bls.n	800598c <_free_r+0x48>
 8005996:	6811      	ldr	r1, [r2, #0]
 8005998:	1850      	adds	r0, r2, r1
 800599a:	42a0      	cmp	r0, r4
 800599c:	d10b      	bne.n	80059b6 <_free_r+0x72>
 800599e:	6820      	ldr	r0, [r4, #0]
 80059a0:	4401      	add	r1, r0
 80059a2:	1850      	adds	r0, r2, r1
 80059a4:	4283      	cmp	r3, r0
 80059a6:	6011      	str	r1, [r2, #0]
 80059a8:	d1de      	bne.n	8005968 <_free_r+0x24>
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	4401      	add	r1, r0
 80059b0:	6011      	str	r1, [r2, #0]
 80059b2:	6053      	str	r3, [r2, #4]
 80059b4:	e7d8      	b.n	8005968 <_free_r+0x24>
 80059b6:	d902      	bls.n	80059be <_free_r+0x7a>
 80059b8:	230c      	movs	r3, #12
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	e7d4      	b.n	8005968 <_free_r+0x24>
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1821      	adds	r1, r4, r0
 80059c2:	428b      	cmp	r3, r1
 80059c4:	bf01      	itttt	eq
 80059c6:	6819      	ldreq	r1, [r3, #0]
 80059c8:	685b      	ldreq	r3, [r3, #4]
 80059ca:	1809      	addeq	r1, r1, r0
 80059cc:	6021      	streq	r1, [r4, #0]
 80059ce:	6063      	str	r3, [r4, #4]
 80059d0:	6054      	str	r4, [r2, #4]
 80059d2:	e7c9      	b.n	8005968 <_free_r+0x24>
 80059d4:	bd38      	pop	{r3, r4, r5, pc}
 80059d6:	bf00      	nop
 80059d8:	200001fc 	.word	0x200001fc

080059dc <_malloc_r>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	1ccd      	adds	r5, r1, #3
 80059e0:	f025 0503 	bic.w	r5, r5, #3
 80059e4:	3508      	adds	r5, #8
 80059e6:	2d0c      	cmp	r5, #12
 80059e8:	bf38      	it	cc
 80059ea:	250c      	movcc	r5, #12
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	4606      	mov	r6, r0
 80059f0:	db01      	blt.n	80059f6 <_malloc_r+0x1a>
 80059f2:	42a9      	cmp	r1, r5
 80059f4:	d903      	bls.n	80059fe <_malloc_r+0x22>
 80059f6:	230c      	movs	r3, #12
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	2000      	movs	r0, #0
 80059fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fe:	f000 f857 	bl	8005ab0 <__malloc_lock>
 8005a02:	4921      	ldr	r1, [pc, #132]	; (8005a88 <_malloc_r+0xac>)
 8005a04:	680a      	ldr	r2, [r1, #0]
 8005a06:	4614      	mov	r4, r2
 8005a08:	b99c      	cbnz	r4, 8005a32 <_malloc_r+0x56>
 8005a0a:	4f20      	ldr	r7, [pc, #128]	; (8005a8c <_malloc_r+0xb0>)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	b923      	cbnz	r3, 8005a1a <_malloc_r+0x3e>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4630      	mov	r0, r6
 8005a14:	f000 f83c 	bl	8005a90 <_sbrk_r>
 8005a18:	6038      	str	r0, [r7, #0]
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f000 f837 	bl	8005a90 <_sbrk_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	d123      	bne.n	8005a6e <_malloc_r+0x92>
 8005a26:	230c      	movs	r3, #12
 8005a28:	4630      	mov	r0, r6
 8005a2a:	6033      	str	r3, [r6, #0]
 8005a2c:	f000 f846 	bl	8005abc <__malloc_unlock>
 8005a30:	e7e3      	b.n	80059fa <_malloc_r+0x1e>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	1b5b      	subs	r3, r3, r5
 8005a36:	d417      	bmi.n	8005a68 <_malloc_r+0x8c>
 8005a38:	2b0b      	cmp	r3, #11
 8005a3a:	d903      	bls.n	8005a44 <_malloc_r+0x68>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	441c      	add	r4, r3
 8005a40:	6025      	str	r5, [r4, #0]
 8005a42:	e004      	b.n	8005a4e <_malloc_r+0x72>
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	42a2      	cmp	r2, r4
 8005a48:	bf0c      	ite	eq
 8005a4a:	600b      	streq	r3, [r1, #0]
 8005a4c:	6053      	strne	r3, [r2, #4]
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 f834 	bl	8005abc <__malloc_unlock>
 8005a54:	f104 000b 	add.w	r0, r4, #11
 8005a58:	1d23      	adds	r3, r4, #4
 8005a5a:	f020 0007 	bic.w	r0, r0, #7
 8005a5e:	1ac2      	subs	r2, r0, r3
 8005a60:	d0cc      	beq.n	80059fc <_malloc_r+0x20>
 8005a62:	1a1b      	subs	r3, r3, r0
 8005a64:	50a3      	str	r3, [r4, r2]
 8005a66:	e7c9      	b.n	80059fc <_malloc_r+0x20>
 8005a68:	4622      	mov	r2, r4
 8005a6a:	6864      	ldr	r4, [r4, #4]
 8005a6c:	e7cc      	b.n	8005a08 <_malloc_r+0x2c>
 8005a6e:	1cc4      	adds	r4, r0, #3
 8005a70:	f024 0403 	bic.w	r4, r4, #3
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d0e3      	beq.n	8005a40 <_malloc_r+0x64>
 8005a78:	1a21      	subs	r1, r4, r0
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f000 f808 	bl	8005a90 <_sbrk_r>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d1dd      	bne.n	8005a40 <_malloc_r+0x64>
 8005a84:	e7cf      	b.n	8005a26 <_malloc_r+0x4a>
 8005a86:	bf00      	nop
 8005a88:	200001fc 	.word	0x200001fc
 8005a8c:	20000200 	.word	0x20000200

08005a90 <_sbrk_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	2300      	movs	r3, #0
 8005a94:	4d05      	ldr	r5, [pc, #20]	; (8005aac <_sbrk_r+0x1c>)
 8005a96:	4604      	mov	r4, r0
 8005a98:	4608      	mov	r0, r1
 8005a9a:	602b      	str	r3, [r5, #0]
 8005a9c:	f7fa fef6 	bl	800088c <_sbrk>
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	d102      	bne.n	8005aaa <_sbrk_r+0x1a>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	b103      	cbz	r3, 8005aaa <_sbrk_r+0x1a>
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	20000314 	.word	0x20000314

08005ab0 <__malloc_lock>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	; (8005ab8 <__malloc_lock+0x8>)
 8005ab2:	f000 b809 	b.w	8005ac8 <__retarget_lock_acquire_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	2000031c 	.word	0x2000031c

08005abc <__malloc_unlock>:
 8005abc:	4801      	ldr	r0, [pc, #4]	; (8005ac4 <__malloc_unlock+0x8>)
 8005abe:	f000 b804 	b.w	8005aca <__retarget_lock_release_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	2000031c 	.word	0x2000031c

08005ac8 <__retarget_lock_acquire_recursive>:
 8005ac8:	4770      	bx	lr

08005aca <__retarget_lock_release_recursive>:
 8005aca:	4770      	bx	lr

08005acc <_init>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr

08005ad8 <_fini>:
 8005ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ada:	bf00      	nop
 8005adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ade:	bc08      	pop	{r3}
 8005ae0:	469e      	mov	lr, r3
 8005ae2:	4770      	bx	lr
