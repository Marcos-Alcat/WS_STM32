
interrup-RTOS-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a14  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005b24  08005b24  00015b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b8c  08005b8c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b8c  08005b8c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b8c  08005b8c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000007c  08005c10  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005c10  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014010  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eba  00000000  00000000  000340b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00036f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00037fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d88  00000000  00000000  00038ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dec  00000000  00000000  00052c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c5c  00000000  00000000  00064a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa6c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004570  00000000  00000000  000fa71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b0c 	.word	0x08005b0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005b0c 	.word	0x08005b0c

08000150 <Adc>:
#define THRESHOLD_VALUE 2048
#define BTN_USER_OK 2100      //presiono dos botones valor ADC aprox: 1981.
#define BTN_USER_UP 2800	  //presiono boton UP valor ADC aprox: 2750.
#define BTN_USER_DOWN 2600    //presiono boton DOWN valor ADC aprox: 2574.

static void Adc(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
		/*
		 * La función HAL-ADC-Start-IT() es responsable de permitir la interrupción y inicio de la conversión de ADC de los canales regulares.
		 * Toma en un solo parámetro que es el puntero de la estructura ADC-HandleTypeDef que contiene los parámetros de configuración para el
		 * ADC especificado. En nuestro caso es "&hadc1.
		 */
		HAL_ADC_Start_IT(&hadc1);
 8000158:	4801      	ldr	r0, [pc, #4]	; (8000160 <Adc+0x10>)
 800015a:	f000 fd25 	bl	8000ba8 <HAL_ADC_Start_IT>
 800015e:	e7fb      	b.n	8000158 <Adc+0x8>
 8000160:	20000208 	.word	0x20000208

08000164 <Led>:
		// This delay marks the conversion rate
		//vTaskDelay(100/portTICK_PERIOD_MS);
	}
}

static void Led(void *pvParameters){
 8000164:	b580      	push	{r7, lr}
 8000166:	b084      	sub	sp, #16
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	uint16_t received_value;
	while (1){
		// Reads the value from the queue
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 800016c:	4b04      	ldr	r3, [pc, #16]	; (8000180 <Led+0x1c>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	f107 010e 	add.w	r1, r7, #14
 8000174:	f04f 32ff 	mov.w	r2, #4294967295
 8000178:	4618      	mov	r0, r3
 800017a:	f002 ff35 	bl	8002fe8 <xQueueReceive>
 800017e:	e7f5      	b.n	800016c <Led+0x8>
 8000180:	20000238 	.word	0x20000238

08000184 <Config>:
			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
		}
	}
}

static void Config(void *pvParameters){
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	//unsigned portBASE_TYPE uxPriority;
	//uxPriority = uxTaskPriorityGet( NULL );
	uint16_t ADC_value;
	char init_estate = 1;
 800018c:	2301      	movs	r3, #1
 800018e:	73fb      	strb	r3, [r7, #15]
	char Param_Config = 2;
 8000190:	2302      	movs	r3, #2
 8000192:	73bb      	strb	r3, [r7, #14]
	char E_Confir = 0;
 8000194:	2300      	movs	r3, #0
 8000196:	737b      	strb	r3, [r7, #13]
	char max = 70, min = 20; //xq pinto asi....
 8000198:	2346      	movs	r3, #70	; 0x46
 800019a:	733b      	strb	r3, [r7, #12]
 800019c:	2314      	movs	r3, #20
 800019e:	72fb      	strb	r3, [r7, #11]
	while (1){

		xSemaphoreTake(ADC_semph, portMAX_DELAY);
 80001a0:	4b43      	ldr	r3, [pc, #268]	; (80002b0 <Config+0x12c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	f04f 31ff 	mov.w	r1, #4294967295
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 fffd 	bl	80031a8 <xQueueSemaphoreTake>
		if (init_estate){                 //si init_estate es 1, significa que esta iniciando el sistema y debe verificar la cola.
 80001ae:	7bfb      	ldrb	r3, [r7, #15]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d009      	beq.n	80001c8 <Config+0x44>
			//aca deberia ir una funcion que verifique mejor los valores.
			if(!cola_max && !cola_max){   //solo si lee la cola y los valores son correctos
 80001b4:	4b3f      	ldr	r3, [pc, #252]	; (80002b4 <Config+0x130>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d105      	bne.n	80001c8 <Config+0x44>
 80001bc:	4b3d      	ldr	r3, [pc, #244]	; (80002b4 <Config+0x130>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d101      	bne.n	80001c8 <Config+0x44>
				init_estate = 0;          //si hay valores correctos ya no es necesaio verificar cola.
 80001c4:	2300      	movs	r3, #0
 80001c6:	73fb      	strb	r3, [r7, #15]
				//sube prioridad de memoria.
				//vuelve a tomar el semaforo y asi se bloquea. CREO....
			}
		}
		//Si llego a esta etapa significa que debe configurar valores, para eso fuerza interrupcion ADC para actualizar cola.
		HAL_ADC_Start_IT(&hadc1);
 80001c8:	483b      	ldr	r0, [pc, #236]	; (80002b8 <Config+0x134>)
 80001ca:	f000 fced 	bl	8000ba8 <HAL_ADC_Start_IT>
		xQueueReceive(adc_queue,&ADC_value,portMAX_DELAY);
 80001ce:	4b3b      	ldr	r3, [pc, #236]	; (80002bc <Config+0x138>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f107 0108 	add.w	r1, r7, #8
 80001d6:	f04f 32ff 	mov.w	r2, #4294967295
 80001da:	4618      	mov	r0, r3
 80001dc:	f002 ff04 	bl	8002fe8 <xQueueReceive>

		//la tarea pantalla debe poder leer su propia prioridad para saber si lee la cola CP(config-pantalla) o cola PA(Pantalla-Alarma)
		vTaskPrioritySet( xTarea_ADC_Handle, 3); //si aun no hay datos en la cola CP pantalla si bloquea hasat que primero aparezca valor de max. CREO.
 80001e0:	4b37      	ldr	r3, [pc, #220]	; (80002c0 <Config+0x13c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2103      	movs	r1, #3
 80001e6:	4618      	mov	r0, r3
 80001e8:	f003 fbf2 	bl	80039d0 <vTaskPrioritySet>


		//es muy probable que los if que tienen en su condicion un Param_Config se reemplacen por Switch CASE.
		if(Param_Config == 2){
 80001ec:	7bbb      	ldrb	r3, [r7, #14]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d11d      	bne.n	800022e <Config+0xaa>
			if ((BTN_USER_UP > ADC_value) && (ADC_value > BTN_USER_DOWN)){  //condicion que responde a boton UP.
 80001f2:	893b      	ldrh	r3, [r7, #8]
 80001f4:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 80001f8:	d20a      	bcs.n	8000210 <Config+0x8c>
 80001fa:	893b      	ldrh	r3, [r7, #8]
 80001fc:	f640 2228 	movw	r2, #2600	; 0xa28
 8000200:	4293      	cmp	r3, r2
 8000202:	d905      	bls.n	8000210 <Config+0x8c>
				max++;
 8000204:	7b3b      	ldrb	r3, [r7, #12]
 8000206:	3301      	adds	r3, #1
 8000208:	733b      	strb	r3, [r7, #12]
				E_Confir = 1;
 800020a:	2301      	movs	r3, #1
 800020c:	737b      	strb	r3, [r7, #13]
 800020e:	e02e      	b.n	800026e <Config+0xea>
			} //REBISAR ESTOY QUEMADO... JAJAJ
			else if ((BTN_USER_UP < ADC_value) && (ADC_value < BTN_USER_DOWN)){  //condicion que responde a boton DOWN.
 8000210:	893b      	ldrh	r3, [r7, #8]
 8000212:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000216:	d92a      	bls.n	800026e <Config+0xea>
 8000218:	893b      	ldrh	r3, [r7, #8]
 800021a:	f640 2227 	movw	r2, #2599	; 0xa27
 800021e:	4293      	cmp	r3, r2
 8000220:	d825      	bhi.n	800026e <Config+0xea>
				max--;
 8000222:	7b3b      	ldrb	r3, [r7, #12]
 8000224:	3b01      	subs	r3, #1
 8000226:	733b      	strb	r3, [r7, #12]
				E_Confir = 1;
 8000228:	2301      	movs	r3, #1
 800022a:	737b      	strb	r3, [r7, #13]
 800022c:	e01f      	b.n	800026e <Config+0xea>
			}
			//aca se manda el valor de max a la cola CP para verlo en el display.
		}
		else if(Param_Config == 1){
 800022e:	7bbb      	ldrb	r3, [r7, #14]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d11c      	bne.n	800026e <Config+0xea>
			if ((BTN_USER_UP > ADC_value) && (ADC_value > BTN_USER_DOWN)){  //condicion que responde a boton UP.
 8000234:	893b      	ldrh	r3, [r7, #8]
 8000236:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800023a:	d20a      	bcs.n	8000252 <Config+0xce>
 800023c:	893b      	ldrh	r3, [r7, #8]
 800023e:	f640 2228 	movw	r2, #2600	; 0xa28
 8000242:	4293      	cmp	r3, r2
 8000244:	d905      	bls.n	8000252 <Config+0xce>
				min++;
 8000246:	7afb      	ldrb	r3, [r7, #11]
 8000248:	3301      	adds	r3, #1
 800024a:	72fb      	strb	r3, [r7, #11]
				E_Confir = 1;
 800024c:	2301      	movs	r3, #1
 800024e:	737b      	strb	r3, [r7, #13]
 8000250:	e00d      	b.n	800026e <Config+0xea>
			} //REBISAR ESTOY QUEMADO... JAJAJ
			else if ((BTN_USER_UP < ADC_value) && (ADC_value < BTN_USER_DOWN)){  //condicion que responde a boton DOWN.
 8000252:	893b      	ldrh	r3, [r7, #8]
 8000254:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000258:	d909      	bls.n	800026e <Config+0xea>
 800025a:	893b      	ldrh	r3, [r7, #8]
 800025c:	f640 2227 	movw	r2, #2599	; 0xa27
 8000260:	4293      	cmp	r3, r2
 8000262:	d804      	bhi.n	800026e <Config+0xea>
				min--;
 8000264:	7afb      	ldrb	r3, [r7, #11]
 8000266:	3b01      	subs	r3, #1
 8000268:	72fb      	strb	r3, [r7, #11]
				E_Confir = 1;
 800026a:	2301      	movs	r3, #1
 800026c:	737b      	strb	r3, [r7, #13]
			}
			//aca se manda el valor de max a la cola CP para verlo en el display.
		}

		//este es el if de confirmacion de parametro:
		if((BTN_USER_OK > ADC_value)&&(E_Confir)){ //esto significa que se presionaron los dos botones y que prebiamente se configiro un parametro.
 800026e:	893b      	ldrh	r3, [r7, #8]
 8000270:	f640 0233 	movw	r2, #2099	; 0x833
 8000274:	4293      	cmp	r3, r2
 8000276:	d807      	bhi.n	8000288 <Config+0x104>
 8000278:	7b7b      	ldrb	r3, [r7, #13]
 800027a:	2b00      	cmp	r3, #0
 800027c:	d004      	beq.n	8000288 <Config+0x104>
			Param_Config--;
 800027e:	7bbb      	ldrb	r3, [r7, #14]
 8000280:	3b01      	subs	r3, #1
 8000282:	73bb      	strb	r3, [r7, #14]
			E_Confir=0;
 8000284:	2300      	movs	r3, #0
 8000286:	737b      	strb	r3, [r7, #13]
		}

		if(Param_Config>0) xSemaphoreGive(ADC_semph);  //mientras no se hayan configurado maximo y minimo sigue dando semaforo.
 8000288:	7bbb      	ldrb	r3, [r7, #14]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d007      	beq.n	800029e <Config+0x11a>
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <Config+0x12c>)
 8000290:	6818      	ldr	r0, [r3, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	2200      	movs	r2, #0
 8000296:	2100      	movs	r1, #0
 8000298:	f002 fc52 	bl	8002b40 <xQueueGenericSend>
 800029c:	e780      	b.n	80001a0 <Config+0x1c>
		else{											//si ya configuro ambos parametros debe finalizar.
			xSemaphoreTake(ADC_semph, portMAX_DELAY);
 800029e:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <Config+0x12c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f04f 31ff 	mov.w	r1, #4294967295
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 ff7e 	bl	80031a8 <xQueueSemaphoreTake>
		xSemaphoreTake(ADC_semph, portMAX_DELAY);
 80002ac:	e778      	b.n	80001a0 <Config+0x1c>
 80002ae:	bf00      	nop
 80002b0:	2000023c 	.word	0x2000023c
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000208 	.word	0x20000208
 80002bc:	20000238 	.word	0x20000238
 80002c0:	2000009c 	.word	0x2000009c

080002c4 <HAL_ADC_ConvCpltCallback>:

	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	static portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	static uint16_t adc_value = 0;

	// Obtains the conversion result
	adc_value = HAL_ADC_GetValue(hadc);
 80002cc:	6878      	ldr	r0, [r7, #4]
 80002ce:	f000 fd21 	bl	8000d14 <HAL_ADC_GetValue>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b12      	ldr	r3, [pc, #72]	; (8000320 <HAL_ADC_ConvCpltCallback+0x5c>)
 80002d8:	801a      	strh	r2, [r3, #0]

	// Sends the value to the queue
	xQueueOverwriteFromISR(adc_queue, &adc_value, &xHigherPriorityTaskWoken); //en la cinfig de interrup: ADC1 y ADC2 global poner una prioridad de 5, sino queda trabado ahí.
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <HAL_ADC_ConvCpltCallback+0x60>)
 80002dc:	6818      	ldr	r0, [r3, #0]
 80002de:	2302      	movs	r3, #2
 80002e0:	4a11      	ldr	r2, [pc, #68]	; (8000328 <HAL_ADC_ConvCpltCallback+0x64>)
 80002e2:	490f      	ldr	r1, [pc, #60]	; (8000320 <HAL_ADC_ConvCpltCallback+0x5c>)
 80002e4:	f002 fd2a 	bl	8002d3c <xQueueGenericSendFromISR>
	if(adc_value<BTN_USER_OK)
 80002e8:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <HAL_ADC_ConvCpltCallback+0x5c>)
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	f640 0233 	movw	r2, #2099	; 0x833
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d805      	bhi.n	8000300 <HAL_ADC_ConvCpltCallback+0x3c>
		xSemaphoreGiveFromISR(ADC_semph, &xHigherPriorityTaskWoken);
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <HAL_ADC_ConvCpltCallback+0x68>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	490b      	ldr	r1, [pc, #44]	; (8000328 <HAL_ADC_ConvCpltCallback+0x64>)
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fdd0 	bl	8002ea0 <xQueueGiveFromISR>
	//xQueueOverwriteFromISR(adc_queue, &adc_value, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_ADC_ConvCpltCallback+0x64>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d007      	beq.n	8000318 <HAL_ADC_ConvCpltCallback+0x54>
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <HAL_ADC_ConvCpltCallback+0x6c>)
 800030a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	f3bf 8f4f 	dsb	sy
 8000314:	f3bf 8f6f 	isb	sy

	//dos botones: max: 1981
	//boton up: 2750
	//boton min: 2574
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200000a0 	.word	0x200000a0
 8000324:	20000238 	.word	0x20000238
 8000328:	200000a4 	.word	0x200000a4
 800032c:	2000023c 	.word	0x2000023c
 8000330:	e000ed04 	.word	0xe000ed04

08000334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800033a:	f000 fb2b 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800033e:	f000 f86b 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000342:	f000 f94f 	bl	80005e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000346:	f000 f8c3 	bl	80004d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800034a:	f000 f8ff 	bl	800054c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000354:	4824      	ldr	r0, [pc, #144]	; (80003e8 <main+0xb4>)
 8000356:	f001 f9b1 	bl	80016bc <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim2);
 800035a:	4824      	ldr	r0, [pc, #144]	; (80003ec <main+0xb8>)
 800035c:	f001 fef6 	bl	800214c <HAL_TIM_Base_Start>
  adc_queue = xQueueCreate(1,sizeof(uint16_t));
 8000360:	2200      	movs	r2, #0
 8000362:	2102      	movs	r1, #2
 8000364:	2001      	movs	r0, #1
 8000366:	f002 fb79 	bl	8002a5c <xQueueGenericCreate>
 800036a:	4603      	mov	r3, r0
 800036c:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <main+0xbc>)
 800036e:	6013      	str	r3, [r2, #0]
  vSemaphoreCreateBinary(ADC_semph);
 8000370:	2203      	movs	r2, #3
 8000372:	2100      	movs	r1, #0
 8000374:	2001      	movs	r0, #1
 8000376:	f002 fb71 	bl	8002a5c <xQueueGenericCreate>
 800037a:	4603      	mov	r3, r0
 800037c:	4a1d      	ldr	r2, [pc, #116]	; (80003f4 <main+0xc0>)
 800037e:	6013      	str	r3, [r2, #0]
 8000380:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <main+0xc0>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d006      	beq.n	8000396 <main+0x62>
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <main+0xc0>)
 800038a:	6818      	ldr	r0, [r3, #0]
 800038c:	2300      	movs	r3, #0
 800038e:	2200      	movs	r2, #0
 8000390:	2100      	movs	r1, #0
 8000392:	f002 fbd5 	bl	8002b40 <xQueueGenericSend>
  xSemaphoreTake(ADC_semph, portMAX_DELAY);
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <main+0xc0>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f04f 31ff 	mov.w	r1, #4294967295
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 ff02 	bl	80031a8 <xQueueSemaphoreTake>
  xTaskCreate(Adc, "ADC task", configMINIMAL_STACK_SIZE, NULL, 2, &xTarea_ADC_Handle);
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <main+0xc4>)
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	2302      	movs	r3, #2
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	2300      	movs	r3, #0
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	4912      	ldr	r1, [pc, #72]	; (80003fc <main+0xc8>)
 80003b2:	4813      	ldr	r0, [pc, #76]	; (8000400 <main+0xcc>)
 80003b4:	f003 f9a0 	bl	80036f8 <xTaskCreate>
  xTaskCreate(Led, "Led task", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80003b8:	2300      	movs	r3, #0
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	2302      	movs	r3, #2
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	2280      	movs	r2, #128	; 0x80
 80003c4:	490f      	ldr	r1, [pc, #60]	; (8000404 <main+0xd0>)
 80003c6:	4810      	ldr	r0, [pc, #64]	; (8000408 <main+0xd4>)
 80003c8:	f003 f996 	bl	80036f8 <xTaskCreate>
  xTaskCreate(Config, "Config task", 200, NULL, 3, &xTarea_Config_Handle);
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <main+0xd8>)
 80003ce:	9301      	str	r3, [sp, #4]
 80003d0:	2303      	movs	r3, #3
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2300      	movs	r3, #0
 80003d6:	22c8      	movs	r2, #200	; 0xc8
 80003d8:	490d      	ldr	r1, [pc, #52]	; (8000410 <main+0xdc>)
 80003da:	480e      	ldr	r0, [pc, #56]	; (8000414 <main+0xe0>)
 80003dc:	f003 f98c 	bl	80036f8 <xTaskCreate>

  vTaskStartScheduler();
 80003e0:	f003 fbbc 	bl	8003b5c <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80003e4:	e7fe      	b.n	80003e4 <main+0xb0>
 80003e6:	bf00      	nop
 80003e8:	40011000 	.word	0x40011000
 80003ec:	20000240 	.word	0x20000240
 80003f0:	20000238 	.word	0x20000238
 80003f4:	2000023c 	.word	0x2000023c
 80003f8:	2000009c 	.word	0x2000009c
 80003fc:	08005b24 	.word	0x08005b24
 8000400:	08000151 	.word	0x08000151
 8000404:	08005b30 	.word	0x08005b30
 8000408:	08000165 	.word	0x08000165
 800040c:	20000098 	.word	0x20000098
 8000410:	08005b3c 	.word	0x08005b3c
 8000414:	08000185 	.word	0x08000185

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b094      	sub	sp, #80	; 0x50
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000422:	2228      	movs	r2, #40	; 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f005 faa4 	bl	8005974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000448:	2301      	movs	r3, #1
 800044a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800044c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000456:	2301      	movs	r3, #1
 8000458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045a:	2302      	movs	r3, #2
 800045c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000464:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000468:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046e:	4618      	mov	r0, r3
 8000470:	f001 f93c 	bl	80016ec <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800047a:	f000 f911 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2302      	movs	r3, #2
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fba6 	bl	8001bec <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004a6:	f000 f8fb 	bl	80006a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004aa:	2302      	movs	r3, #2
 80004ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 fd42 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004c2:	f000 f8ed 	bl	80006a0 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3750      	adds	r7, #80	; 0x50
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_ADC1_Init+0x74>)
 80004e2:	4a19      	ldr	r2, [pc, #100]	; (8000548 <MX_ADC1_Init+0x78>)
 80004e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <MX_ADC1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_ADC1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_ADC1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_ADC1_Init+0x74>)
 80004fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <MX_ADC1_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_ADC1_Init+0x74>)
 8000508:	2201      	movs	r2, #1
 800050a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <MX_ADC1_Init+0x74>)
 800050e:	f000 fa73 	bl	80009f8 <HAL_ADC_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000518:	f000 f8c2 	bl	80006a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800051c:	2305      	movs	r3, #5
 800051e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000520:	2301      	movs	r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4619      	mov	r1, r3
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <MX_ADC1_Init+0x74>)
 800052e:	f000 fcc5 	bl	8000ebc <HAL_ADC_ConfigChannel>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000538:	f000 f8b2 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000208 	.word	0x20000208
 8000548:	40012400 	.word	0x40012400

0800054c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <MX_TIM2_Init+0x94>)
 800056a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800056e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_TIM2_Init+0x94>)
 8000572:	2247      	movs	r2, #71	; 0x47
 8000574:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <MX_TIM2_Init+0x94>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_TIM2_Init+0x94>)
 800057e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000582:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <MX_TIM2_Init+0x94>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <MX_TIM2_Init+0x94>)
 800058c:	2200      	movs	r2, #0
 800058e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000590:	4813      	ldr	r0, [pc, #76]	; (80005e0 <MX_TIM2_Init+0x94>)
 8000592:	f001 fd8b 	bl	80020ac <HAL_TIM_Base_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800059c:	f000 f880 	bl	80006a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	4619      	mov	r1, r3
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <MX_TIM2_Init+0x94>)
 80005ae:	f001 ff71 	bl	8002494 <HAL_TIM_ConfigClockSource>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005b8:	f000 f872 	bl	80006a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_TIM2_Init+0x94>)
 80005ca:	f002 f947 	bl	800285c <HAL_TIMEx_MasterConfigSynchronization>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005d4:	f000 f864 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000240 	.word	0x20000240

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_GPIO_Init+0x90>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <MX_GPIO_Init+0x90>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_GPIO_Init+0x90>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0310 	and.w	r3, r3, #16
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_GPIO_Init+0x90>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a17      	ldr	r2, [pc, #92]	; (8000674 <MX_GPIO_Init+0x90>)
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_GPIO_Init+0x90>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0320 	and.w	r3, r3, #32
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_GPIO_Init+0x90>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a11      	ldr	r2, [pc, #68]	; (8000674 <MX_GPIO_Init+0x90>)
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_GPIO_Init+0x90>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_GPIO_Init+0x94>)
 8000648:	f001 f838 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800064c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_GPIO_Init+0x94>)
 8000666:	f000 fea5 	bl	80013b4 <HAL_GPIO_Init>

}
 800066a:	bf00      	nop
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	40011000 	.word	0x40011000

0800067c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d101      	bne.n	8000692 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800068e:	f000 f997 	bl	80009c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40012c00 	.word	0x40012c00

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_MspInit+0x5c>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_MspInit+0x5c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_MspInit+0x5c>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x5c>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_MspInit+0x5c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_MspInit+0x5c>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <HAL_MspInit+0x60>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_MspInit+0x60>)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000

08000710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a18      	ldr	r2, [pc, #96]	; (800078c <HAL_ADC_MspInit+0x7c>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d129      	bne.n	8000784 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_ADC_MspInit+0x80>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <HAL_ADC_MspInit+0x80>)
 8000736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_ADC_MspInit+0x80>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <HAL_ADC_MspInit+0x80>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a10      	ldr	r2, [pc, #64]	; (8000790 <HAL_ADC_MspInit+0x80>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_ADC_MspInit+0x80>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_BTN_INT_Pin;
 8000760:	2320      	movs	r3, #32
 8000762:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000764:	2303      	movs	r3, #3
 8000766:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <HAL_ADC_MspInit+0x84>)
 8000770:	f000 fe20 	bl	80013b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2105      	movs	r1, #5
 8000778:	2012      	movs	r0, #18
 800077a:	f000 fdf0 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800077e:	2012      	movs	r0, #18
 8000780:	f000 fe09 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40012400 	.word	0x40012400
 8000790:	40021000 	.word	0x40021000
 8000794:	40010800 	.word	0x40010800

08000798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007a8:	d10b      	bne.n	80007c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_TIM_Base_MspInit+0x34>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_TIM_Base_MspInit+0x34>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_TIM_Base_MspInit+0x34>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	2019      	movs	r0, #25
 80007e6:	f000 fdba 	bl	800135e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007ea:	2019      	movs	r0, #25
 80007ec:	f000 fdd3 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007f0:	4b1e      	ldr	r3, [pc, #120]	; (800086c <HAL_InitTick+0x9c>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a1d      	ldr	r2, [pc, #116]	; (800086c <HAL_InitTick+0x9c>)
 80007f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <HAL_InitTick+0x9c>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000808:	f107 0210 	add.w	r2, r7, #16
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fb46 	bl	8001ea4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000818:	f001 fb30 	bl	8001e7c <HAL_RCC_GetPCLK2Freq>
 800081c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <HAL_InitTick+0xa0>)
 8000822:	fba2 2303 	umull	r2, r3, r2, r3
 8000826:	0c9b      	lsrs	r3, r3, #18
 8000828:	3b01      	subs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_InitTick+0xa4>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <HAL_InitTick+0xa8>)
 8000830:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_InitTick+0xa4>)
 8000834:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000838:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_InitTick+0xa4>)
 800083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_InitTick+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_InitTick+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <HAL_InitTick+0xa4>)
 800084e:	f001 fc2d 	bl	80020ac <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d104      	bne.n	8000862 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <HAL_InitTick+0xa4>)
 800085a:	f001 fcc1 	bl	80021e0 <HAL_TIM_Base_Start_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3730      	adds	r7, #48	; 0x30
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	431bde83 	.word	0x431bde83
 8000874:	20000288 	.word	0x20000288
 8000878:	40012c00 	.word	0x40012c00

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
	...

080008a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <ADC1_2_IRQHandler+0x10>)
 80008ae:	f000 fa3d 	bl	8000d2c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000208 	.word	0x20000208

080008bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <TIM1_UP_IRQHandler+0x10>)
 80008c2:	f001 fcdf 	bl	8002284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000288 	.word	0x20000288

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f004 fff0 	bl	80058e4 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20005000 	.word	0x20005000
 8000930:	00000400 	.word	0x00000400
 8000934:	200000a8 	.word	0x200000a8
 8000938:	20000328 	.word	0x20000328

0800093c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000948:	f7ff fff8 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800094e:	490c      	ldr	r1, [pc, #48]	; (8000980 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a09      	ldr	r2, [pc, #36]	; (8000988 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000964:	4c09      	ldr	r4, [pc, #36]	; (800098c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f004 ffbd 	bl	80058f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000976:	f7ff fcdd 	bl	8000334 <main>
  bx lr
 800097a:	4770      	bx	lr
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000984:	08005b94 	.word	0x08005b94
  ldr r2, =_sbss
 8000988:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800098c:	20000324 	.word	0x20000324

08000990 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <CAN1_RX1_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_Init+0x28>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_Init+0x28>)
 800099e:	f043 0310 	orr.w	r3, r3, #16
 80009a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 fccf 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff ff10 	bl	80007d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fe7c 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <HAL_IncTick+0x20>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	2000000c 	.word	0x2000000c
 80009e0:	200002d0 	.word	0x200002d0

080009e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	200002d0 	.word	0x200002d0

080009f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d101      	bne.n	8000a1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e0be      	b.n	8000b98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d109      	bne.n	8000a3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fe6a 	bl	8000710 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f000 fb8f 	bl	8001160 <ADC_ConversionStop_Disable>
 8000a42:	4603      	mov	r3, r0
 8000a44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4a:	f003 0310 	and.w	r3, r3, #16
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f040 8099 	bne.w	8000b86 <HAL_ADC_Init+0x18e>
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f040 8095 	bne.w	8000b86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a64:	f023 0302 	bic.w	r3, r3, #2
 8000a68:	f043 0202 	orr.w	r2, r3, #2
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7b1b      	ldrb	r3, [r3, #12]
 8000a7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a90:	d003      	beq.n	8000a9a <HAL_ADC_Init+0xa2>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d102      	bne.n	8000aa0 <HAL_ADC_Init+0xa8>
 8000a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9e:	e000      	b.n	8000aa2 <HAL_ADC_Init+0xaa>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7d1b      	ldrb	r3, [r3, #20]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d119      	bne.n	8000ae4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7b1b      	ldrb	r3, [r3, #12]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d109      	bne.n	8000acc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	035a      	lsls	r2, r3, #13
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	e00b      	b.n	8000ae4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	f043 0220 	orr.w	r2, r3, #32
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000adc:	f043 0201 	orr.w	r2, r3, #1
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <HAL_ADC_Init+0x1a8>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	6812      	ldr	r2, [r2, #0]
 8000b06:	68b9      	ldr	r1, [r7, #8]
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b14:	d003      	beq.n	8000b1e <HAL_ADC_Init+0x126>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d104      	bne.n	8000b28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	051b      	lsls	r3, r3, #20
 8000b26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_ADC_Init+0x1ac>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d10b      	bne.n	8000b64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b56:	f023 0303 	bic.w	r3, r3, #3
 8000b5a:	f043 0201 	orr.w	r2, r3, #1
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b62:	e018      	b.n	8000b96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b68:	f023 0312 	bic.w	r3, r3, #18
 8000b6c:	f043 0210 	orr.w	r2, r3, #16
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b78:	f043 0201 	orr.w	r2, r3, #1
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b84:	e007      	b.n	8000b96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8a:	f043 0210 	orr.w	r2, r3, #16
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ba4:	ff1f0efe 	.word	0xff1f0efe

08000ba8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d101      	bne.n	8000bc2 <HAL_ADC_Start_IT+0x1a>
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	e0a0      	b.n	8000d04 <HAL_ADC_Start_IT+0x15c>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 fa6e 	bl	80010ac <ADC_Enable>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f040 808f 	bne.w	8000cfa <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000be4:	f023 0301 	bic.w	r3, r3, #1
 8000be8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a45      	ldr	r2, [pc, #276]	; (8000d0c <HAL_ADC_Start_IT+0x164>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d105      	bne.n	8000c06 <HAL_ADC_Start_IT+0x5e>
 8000bfa:	4b45      	ldr	r3, [pc, #276]	; (8000d10 <HAL_ADC_Start_IT+0x168>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d115      	bne.n	8000c32 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d026      	beq.n	8000c6e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c30:	e01d      	b.n	8000c6e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <HAL_ADC_Start_IT+0x168>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d004      	beq.n	8000c52 <HAL_ADC_Start_IT+0xaa>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a2f      	ldr	r2, [pc, #188]	; (8000d0c <HAL_ADC_Start_IT+0x164>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10d      	bne.n	8000c6e <HAL_ADC_Start_IT+0xc6>
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <HAL_ADC_Start_IT+0x168>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d007      	beq.n	8000c6e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7e:	f023 0206 	bic.w	r2, r3, #6
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c86:	e002      	b.n	8000c8e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f06f 0202 	mvn.w	r2, #2
 8000c9e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0220 	orr.w	r2, r2, #32
 8000cae:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000cba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cbe:	d113      	bne.n	8000ce8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cc4:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <HAL_ADC_Start_IT+0x164>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d105      	bne.n	8000cd6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_ADC_Start_IT+0x168>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d108      	bne.n	8000ce8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	e00c      	b.n	8000d02 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	e003      	b.n	8000d02 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40012800 	.word	0x40012800
 8000d10:	40012400 	.word	0x40012400

08000d14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d03e      	beq.n	8000dcc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d039      	beq.n	8000dcc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d105      	bne.n	8000d70 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d7a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d7e:	d11d      	bne.n	8000dbc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d119      	bne.n	8000dbc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0220 	bic.w	r2, r2, #32
 8000d96:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d105      	bne.n	8000dbc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	f043 0201 	orr.w	r2, r3, #1
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fa81 	bl	80002c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f06f 0212 	mvn.w	r2, #18
 8000dca:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d04d      	beq.n	8000e72 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d048      	beq.n	8000e72 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d105      	bne.n	8000df8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000e02:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000e06:	d012      	beq.n	8000e2e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d125      	bne.n	8000e62 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e20:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e24:	d11d      	bne.n	8000e62 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d119      	bne.n	8000e62 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e3c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d105      	bne.n	8000e62 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f9bd 	bl	80011e2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f06f 020c 	mvn.w	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d012      	beq.n	8000ea2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00d      	beq.n	8000ea2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f809 	bl	8000eaa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f06f 0201 	mvn.w	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d101      	bne.n	8000edc <HAL_ADC_ConfigChannel+0x20>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	e0dc      	b.n	8001096 <HAL_ADC_ConfigChannel+0x1da>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d81c      	bhi.n	8000f26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	3b05      	subs	r3, #5
 8000efe:	221f      	movs	r2, #31
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4019      	ands	r1, r3
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	3b05      	subs	r3, #5
 8000f18:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
 8000f24:	e03c      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b0c      	cmp	r3, #12
 8000f2c:	d81c      	bhi.n	8000f68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3b23      	subs	r3, #35	; 0x23
 8000f40:	221f      	movs	r2, #31
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	4019      	ands	r1, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	3b23      	subs	r3, #35	; 0x23
 8000f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
 8000f66:	e01b      	b.n	8000fa0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685a      	ldr	r2, [r3, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	3b41      	subs	r3, #65	; 0x41
 8000f7a:	221f      	movs	r2, #31
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	4019      	ands	r1, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	3b41      	subs	r3, #65	; 0x41
 8000f94:	fa00 f203 	lsl.w	r2, r0, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b09      	cmp	r3, #9
 8000fa6:	d91c      	bls.n	8000fe2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68d9      	ldr	r1, [r3, #12]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3b1e      	subs	r3, #30
 8000fba:	2207      	movs	r2, #7
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	4019      	ands	r1, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	6898      	ldr	r0, [r3, #8]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3b1e      	subs	r3, #30
 8000fd4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	e019      	b.n	8001016 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6919      	ldr	r1, [r3, #16]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6898      	ldr	r0, [r3, #8]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	fa00 f203 	lsl.w	r2, r0, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b10      	cmp	r3, #16
 800101c:	d003      	beq.n	8001026 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001022:	2b11      	cmp	r3, #17
 8001024:	d132      	bne.n	800108c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d125      	bne.n	800107c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d126      	bne.n	800108c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800104c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b10      	cmp	r3, #16
 8001054:	d11a      	bne.n	800108c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a13      	ldr	r2, [pc, #76]	; (80010a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	0c9a      	lsrs	r2, r3, #18
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800106c:	e002      	b.n	8001074 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3b01      	subs	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f9      	bne.n	800106e <HAL_ADC_ConfigChannel+0x1b2>
 800107a:	e007      	b.n	800108c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f043 0220 	orr.w	r2, r3, #32
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40012400 	.word	0x40012400
 80010a4:	20000004 	.word	0x20000004
 80010a8:	431bde83 	.word	0x431bde83

080010ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d040      	beq.n	800114c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <ADC_Enable+0xac>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a1f      	ldr	r2, [pc, #124]	; (800115c <ADC_Enable+0xb0>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	0c9b      	lsrs	r3, r3, #18
 80010e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010e8:	e002      	b.n	80010f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010f6:	f7ff fc75 	bl	80009e4 <HAL_GetTick>
 80010fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010fc:	e01f      	b.n	800113e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010fe:	f7ff fc71 	bl	80009e4 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d918      	bls.n	800113e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b01      	cmp	r3, #1
 8001118:	d011      	beq.n	800113e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	f043 0210 	orr.w	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e007      	b.n	800114e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d1d8      	bne.n	80010fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000004 	.word	0x20000004
 800115c:	431bde83 	.word	0x431bde83

08001160 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b01      	cmp	r3, #1
 8001178:	d12e      	bne.n	80011d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0201 	bic.w	r2, r2, #1
 8001188:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800118a:	f7ff fc2b 	bl	80009e4 <HAL_GetTick>
 800118e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001190:	e01b      	b.n	80011ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001192:	f7ff fc27 	bl	80009e4 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d914      	bls.n	80011ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d10d      	bne.n	80011ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b2:	f043 0210 	orr.w	r2, r3, #16
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e007      	b.n	80011da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d0dc      	beq.n	8001192 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4906      	ldr	r1, [pc, #24]	; (800128c <__NVIC_EnableIRQ+0x34>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff4f 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff64 	bl	800123c <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ffb2 	bl	80012e4 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff81 	bl	8001290 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff57 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b08b      	sub	sp, #44	; 0x2c
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c6:	e169      	b.n	800169c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013c8:	2201      	movs	r2, #1
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	f040 8158 	bne.w	8001696 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a9a      	ldr	r2, [pc, #616]	; (8001654 <HAL_GPIO_Init+0x2a0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d05e      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013f0:	4a98      	ldr	r2, [pc, #608]	; (8001654 <HAL_GPIO_Init+0x2a0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d875      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 80013f6:	4a98      	ldr	r2, [pc, #608]	; (8001658 <HAL_GPIO_Init+0x2a4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d058      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 80013fc:	4a96      	ldr	r2, [pc, #600]	; (8001658 <HAL_GPIO_Init+0x2a4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d86f      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001402:	4a96      	ldr	r2, [pc, #600]	; (800165c <HAL_GPIO_Init+0x2a8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d052      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001408:	4a94      	ldr	r2, [pc, #592]	; (800165c <HAL_GPIO_Init+0x2a8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d869      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800140e:	4a94      	ldr	r2, [pc, #592]	; (8001660 <HAL_GPIO_Init+0x2ac>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d04c      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001414:	4a92      	ldr	r2, [pc, #584]	; (8001660 <HAL_GPIO_Init+0x2ac>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d863      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800141a:	4a92      	ldr	r2, [pc, #584]	; (8001664 <HAL_GPIO_Init+0x2b0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d046      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
 8001420:	4a90      	ldr	r2, [pc, #576]	; (8001664 <HAL_GPIO_Init+0x2b0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d85d      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 8001426:	2b12      	cmp	r3, #18
 8001428:	d82a      	bhi.n	8001480 <HAL_GPIO_Init+0xcc>
 800142a:	2b12      	cmp	r3, #18
 800142c:	d859      	bhi.n	80014e2 <HAL_GPIO_Init+0x12e>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <HAL_GPIO_Init+0x80>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	080014af 	.word	0x080014af
 8001438:	08001489 	.word	0x08001489
 800143c:	0800149b 	.word	0x0800149b
 8001440:	080014dd 	.word	0x080014dd
 8001444:	080014e3 	.word	0x080014e3
 8001448:	080014e3 	.word	0x080014e3
 800144c:	080014e3 	.word	0x080014e3
 8001450:	080014e3 	.word	0x080014e3
 8001454:	080014e3 	.word	0x080014e3
 8001458:	080014e3 	.word	0x080014e3
 800145c:	080014e3 	.word	0x080014e3
 8001460:	080014e3 	.word	0x080014e3
 8001464:	080014e3 	.word	0x080014e3
 8001468:	080014e3 	.word	0x080014e3
 800146c:	080014e3 	.word	0x080014e3
 8001470:	080014e3 	.word	0x080014e3
 8001474:	080014e3 	.word	0x080014e3
 8001478:	08001491 	.word	0x08001491
 800147c:	080014a5 	.word	0x080014a5
 8001480:	4a79      	ldr	r2, [pc, #484]	; (8001668 <HAL_GPIO_Init+0x2b4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001486:	e02c      	b.n	80014e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	623b      	str	r3, [r7, #32]
          break;
 800148e:	e029      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	3304      	adds	r3, #4
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e024      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	3308      	adds	r3, #8
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e01f      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	330c      	adds	r3, #12
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e01a      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014b6:	2304      	movs	r3, #4
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e013      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c4:	2308      	movs	r3, #8
 80014c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	611a      	str	r2, [r3, #16]
          break;
 80014ce:	e009      	b.n	80014e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d0:	2308      	movs	r3, #8
 80014d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	615a      	str	r2, [r3, #20]
          break;
 80014da:	e003      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x130>
          break;
 80014e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2bff      	cmp	r3, #255	; 0xff
 80014e8:	d801      	bhi.n	80014ee <HAL_GPIO_Init+0x13a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	e001      	b.n	80014f2 <HAL_GPIO_Init+0x13e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3304      	adds	r3, #4
 80014f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2bff      	cmp	r3, #255	; 0xff
 80014f8:	d802      	bhi.n	8001500 <HAL_GPIO_Init+0x14c>
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	e002      	b.n	8001506 <HAL_GPIO_Init+0x152>
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	3b08      	subs	r3, #8
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	210f      	movs	r1, #15
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	401a      	ands	r2, r3
 8001518:	6a39      	ldr	r1, [r7, #32]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	431a      	orrs	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80b1 	beq.w	8001696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001534:	4b4d      	ldr	r3, [pc, #308]	; (800166c <HAL_GPIO_Init+0x2b8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a4c      	ldr	r2, [pc, #304]	; (800166c <HAL_GPIO_Init+0x2b8>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b4a      	ldr	r3, [pc, #296]	; (800166c <HAL_GPIO_Init+0x2b8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800154c:	4a48      	ldr	r2, [pc, #288]	; (8001670 <HAL_GPIO_Init+0x2bc>)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a40      	ldr	r2, [pc, #256]	; (8001674 <HAL_GPIO_Init+0x2c0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x1ec>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3f      	ldr	r2, [pc, #252]	; (8001678 <HAL_GPIO_Init+0x2c4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1e8>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3e      	ldr	r2, [pc, #248]	; (800167c <HAL_GPIO_Init+0x2c8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1e4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a3d      	ldr	r2, [pc, #244]	; (8001680 <HAL_GPIO_Init+0x2cc>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1e0>
 8001590:	2303      	movs	r3, #3
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001594:	2304      	movs	r3, #4
 8001596:	e004      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 8001598:	2302      	movs	r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_GPIO_Init+0x1ee>
 80015a0:	2300      	movs	r3, #0
 80015a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a4:	f002 0203 	and.w	r2, r2, #3
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	4093      	lsls	r3, r2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015b2:	492f      	ldr	r1, [pc, #188]	; (8001670 <HAL_GPIO_Init+0x2bc>)
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	3302      	adds	r3, #2
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	492c      	ldr	r1, [pc, #176]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4928      	ldr	r1, [pc, #160]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4922      	ldr	r1, [pc, #136]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	491e      	ldr	r1, [pc, #120]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4918      	ldr	r1, [pc, #96]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	4914      	ldr	r1, [pc, #80]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d021      	beq.n	8001688 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	490e      	ldr	r1, [pc, #56]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e021      	b.n	8001696 <HAL_GPIO_Init+0x2e2>
 8001652:	bf00      	nop
 8001654:	10320000 	.word	0x10320000
 8001658:	10310000 	.word	0x10310000
 800165c:	10220000 	.word	0x10220000
 8001660:	10210000 	.word	0x10210000
 8001664:	10120000 	.word	0x10120000
 8001668:	10110000 	.word	0x10110000
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000
 8001674:	40010800 	.word	0x40010800
 8001678:	40010c00 	.word	0x40010c00
 800167c:	40011000 	.word	0x40011000
 8001680:	40011400 	.word	0x40011400
 8001684:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_GPIO_Init+0x304>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	43db      	mvns	r3, r3
 8001690:	4909      	ldr	r1, [pc, #36]	; (80016b8 <HAL_GPIO_Init+0x304>)
 8001692:	4013      	ands	r3, r2
 8001694:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	3301      	adds	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	fa22 f303 	lsr.w	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f47f ae8e 	bne.w	80013c8 <HAL_GPIO_Init+0x14>
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	372c      	adds	r7, #44	; 0x2c
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016cc:	787b      	ldrb	r3, [r7, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016d8:	e003      	b.n	80016e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	611a      	str	r2, [r3, #16]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e26c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800170c:	4b92      	ldr	r3, [pc, #584]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00c      	beq.n	8001732 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001718:	4b8f      	ldr	r3, [pc, #572]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d112      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
 8001724:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d10b      	bne.n	800174a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4b89      	ldr	r3, [pc, #548]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06c      	beq.n	8001818 <HAL_RCC_OscConfig+0x12c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d168      	bne.n	8001818 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e246      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x76>
 8001754:	4b80      	ldr	r3, [pc, #512]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a7f      	ldr	r2, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e02e      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x98>
 800176a:	4b7b      	ldr	r3, [pc, #492]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7a      	ldr	r2, [pc, #488]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b78      	ldr	r3, [pc, #480]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a77      	ldr	r2, [pc, #476]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0xbc>
 800178e:	4b72      	ldr	r3, [pc, #456]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a71      	ldr	r2, [pc, #452]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6e      	ldr	r2, [pc, #440]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xd4>
 80017a8:	4b6b      	ldr	r3, [pc, #428]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6a      	ldr	r2, [pc, #424]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b68      	ldr	r3, [pc, #416]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a67      	ldr	r2, [pc, #412]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff f90c 	bl	80009e4 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff f908 	bl	80009e4 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1fa      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe4>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff f8f8 	bl	80009e4 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff f8f4 	bl	80009e4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1e6      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x10c>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d063      	beq.n	80018ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001826:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001832:	4b49      	ldr	r3, [pc, #292]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
 800183e:	4b46      	ldr	r3, [pc, #280]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1ba      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4939      	ldr	r1, [pc, #228]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e03a      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d020      	beq.n	80018c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff f8ad 	bl	80009e4 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff f8a9 	bl	80009e4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e19b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a0:	4b2d      	ldr	r3, [pc, #180]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4927      	ldr	r1, [pc, #156]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e015      	b.n	80018ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f88c 	bl	80009e4 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d0:	f7ff f888 	bl	80009e4 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e17a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03a      	beq.n	8001970 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d019      	beq.n	8001936 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff f86c 	bl	80009e4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff f868 	bl	80009e4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e15a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <HAL_RCC_OscConfig+0x26c>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 fae8 	bl	8001f04 <RCC_Delay>
 8001934:	e01c      	b.n	8001970 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff f852 	bl	80009e4 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001942:	e00f      	b.n	8001964 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff f84e 	bl	80009e4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d908      	bls.n	8001964 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e140      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	42420000 	.word	0x42420000
 8001960:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e9      	bne.n	8001944 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a6 	beq.w	8001aca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b97      	ldr	r3, [pc, #604]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10d      	bne.n	80019aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	4b94      	ldr	r3, [pc, #592]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a93      	ldr	r2, [pc, #588]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b91      	ldr	r3, [pc, #580]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b8e      	ldr	r3, [pc, #568]	; (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b8b      	ldr	r3, [pc, #556]	; (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a8a      	ldr	r2, [pc, #552]	; (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7ff f80f 	bl	80009e4 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff f80b 	bl	80009e4 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0fd      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b81      	ldr	r3, [pc, #516]	; (8001be4 <HAL_RCC_OscConfig+0x4f8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x312>
 80019f0:	4b7b      	ldr	r3, [pc, #492]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a7a      	ldr	r2, [pc, #488]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e02d      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x334>
 8001a06:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	4a75      	ldr	r2, [pc, #468]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	f023 0301 	bic.w	r3, r3, #1
 8001a10:	6213      	str	r3, [r2, #32]
 8001a12:	4b73      	ldr	r3, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a72      	ldr	r2, [pc, #456]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	f023 0304 	bic.w	r3, r3, #4
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	e01c      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b05      	cmp	r3, #5
 8001a26:	d10c      	bne.n	8001a42 <HAL_RCC_OscConfig+0x356>
 8001a28:	4b6d      	ldr	r3, [pc, #436]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a6c      	ldr	r2, [pc, #432]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	4b6a      	ldr	r3, [pc, #424]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a69      	ldr	r2, [pc, #420]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	e00b      	b.n	8001a5a <HAL_RCC_OscConfig+0x36e>
 8001a42:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4a66      	ldr	r2, [pc, #408]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6213      	str	r3, [r2, #32]
 8001a4e:	4b64      	ldr	r3, [pc, #400]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a63      	ldr	r2, [pc, #396]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d015      	beq.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7fe ffbf 	bl	80009e4 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7fe ffbb 	bl	80009e4 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0ab      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCC_OscConfig+0x37e>
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7fe ffa9 	bl	80009e4 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a96:	f7fe ffa5 	bl	80009e4 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e095      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d105      	bne.n	8001aca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abe:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a47      	ldr	r2, [pc, #284]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8081 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d061      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d146      	bne.n	8001b76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_RCC_OscConfig+0x4fc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7fe ff79 	bl	80009e4 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7fe ff75 	bl	80009e4 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e067      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d108      	bne.n	8001b30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	492d      	ldr	r1, [pc, #180]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a19      	ldr	r1, [r3, #32]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	430b      	orrs	r3, r1
 8001b42:	4927      	ldr	r1, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_RCC_OscConfig+0x4fc>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7fe ff49 	bl	80009e4 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7fe ff45 	bl	80009e4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e037      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46a>
 8001b74:	e02f      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <HAL_RCC_OscConfig+0x4fc>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7fe ff32 	bl	80009e4 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7fe ff2e 	bl	80009e4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e020      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x498>
 8001ba2:	e018      	b.n	8001bd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e013      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
 8001be8:	42420060 	.word	0x42420060

08001bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0d0      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4965      	ldr	r1, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b63      	ldr	r3, [pc, #396]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b8      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c48:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b50      	ldr	r3, [pc, #320]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	494d      	ldr	r1, [pc, #308]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d040      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d115      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e07f      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e073      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06b      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cca:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4936      	ldr	r1, [pc, #216]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7fe fe82 	bl	80009e4 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7fe fe7e 	bl	80009e4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e053      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 020c 	and.w	r2, r3, #12
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1eb      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d210      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4922      	ldr	r1, [pc, #136]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e032      	b.n	8001da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d008      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4916      	ldr	r1, [pc, #88]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7a:	f000 f821 	bl	8001dc0 <HAL_RCC_GetSysClockFreq>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	490a      	ldr	r1, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	5ccb      	ldrb	r3, [r1, r3]
 8001d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_RCC_ClockConfig+0x1cc>)
 8001d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1d0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fd18 	bl	80007d0 <HAL_InitTick>

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40021000 	.word	0x40021000
 8001db4:	08005b60 	.word	0x08005b60
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	20000008 	.word	0x20000008

08001dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d002      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x30>
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d003      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dee:	e027      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001df2:	613b      	str	r3, [r7, #16]
      break;
 8001df4:	e027      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0c9b      	lsrs	r3, r3, #18
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	0c5b      	lsrs	r3, r3, #17
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e22:	fb02 f203 	mul.w	r2, r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e004      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	613b      	str	r3, [r7, #16]
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e42:	613b      	str	r3, [r7, #16]
      break;
 8001e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e46:	693b      	ldr	r3, [r7, #16]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	371c      	adds	r7, #28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	007a1200 	.word	0x007a1200
 8001e5c:	08005b78 	.word	0x08005b78
 8001e60:	08005b88 	.word	0x08005b88
 8001e64:	003d0900 	.word	0x003d0900

08001e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	; (8001e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000004 	.word	0x20000004

08001e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e80:	f7ff fff2 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0adb      	lsrs	r3, r3, #11
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08005b70 	.word	0x08005b70

08001ea4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_RCC_GetClockConfig+0x58>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_RCC_GetClockConfig+0x58>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_RCC_GetClockConfig+0x58>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_RCC_GetClockConfig+0x58>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	08db      	lsrs	r3, r3, #3
 8001ede:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetClockConfig+0x5c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0207 	and.w	r2, r3, #7
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40022000 	.word	0x40022000

08001f04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <RCC_Delay+0x34>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <RCC_Delay+0x38>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	0a5b      	lsrs	r3, r3, #9
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f20:	bf00      	nop
  }
  while (Delay --);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	60fa      	str	r2, [r7, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f9      	bne.n	8001f20 <RCC_Delay+0x1c>
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	20000004 	.word	0x20000004
 8001f3c:	10624dd3 	.word	0x10624dd3

08001f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d07d      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f60:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10d      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f76:	61d3      	str	r3, [r2, #28]
 8001f78:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f84:	2301      	movs	r3, #1
 8001f86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d118      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a42      	ldr	r2, [pc, #264]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fd20 	bl	80009e4 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	e008      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa8:	f7fe fd1c 	bl	80009e4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e06d      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d02e      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d027      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fee:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ff4:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ffa:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d014      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fceb 	bl	80009e4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fce7 	bl	80009e4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e036      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ee      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4917      	ldr	r1, [pc, #92]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002042:	4313      	orrs	r3, r2
 8002044:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002056:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002064:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	490b      	ldr	r1, [pc, #44]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002082:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4904      	ldr	r1, [pc, #16]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40007000 	.word	0x40007000
 80020a8:	42420440 	.word	0x42420440

080020ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e041      	b.n	8002142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fb60 	bl	8000798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3304      	adds	r3, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	4610      	mov	r0, r2
 80020ec:	f000 fabe 	bl	800266c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b01      	cmp	r3, #1
 800215e:	d001      	beq.n	8002164 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e032      	b.n	80021ca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <HAL_TIM_Base_Start+0x88>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_TIM_Base_Start+0x48>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217e:	d009      	beq.n	8002194 <HAL_TIM_Base_Start+0x48>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <HAL_TIM_Base_Start+0x8c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_Base_Start+0x48>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <HAL_TIM_Base_Start+0x90>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d111      	bne.n	80021b8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d010      	beq.n	80021c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	e007      	b.n	80021c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	40012c00 	.word	0x40012c00
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000800 	.word	0x40000800

080021e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d001      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e03a      	b.n	800226e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a18      	ldr	r2, [pc, #96]	; (8002278 <HAL_TIM_Base_Start_IT+0x98>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x58>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002222:	d009      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x58>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <HAL_TIM_Base_Start_IT+0x9c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x58>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_TIM_Base_Start_IT+0xa0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d111      	bne.n	800225c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b06      	cmp	r3, #6
 8002248:	d010      	beq.n	800226c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225a:	e007      	b.n	800226c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800

08002284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0202 	mvn.w	r2, #2
 80022b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f9b4 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f9a7 	bl	8002622 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f9b6 	bl	8002646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0204 	mvn.w	r2, #4
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f98a 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f97d 	bl	8002622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f98c 	bl	8002646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0208 	mvn.w	r2, #8
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f960 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f953 	bl	8002622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f962 	bl	8002646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b10      	cmp	r3, #16
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0210 	mvn.w	r2, #16
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2208      	movs	r2, #8
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f936 	bl	8002634 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f929 	bl	8002622 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f938 	bl	8002646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0201 	mvn.w	r2, #1
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe f93a 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	d10e      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d107      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa7b 	bl	800292a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b40      	cmp	r3, #64	; 0x40
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f8fc 	bl	8002658 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b20      	cmp	r3, #32
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0220 	mvn.w	r2, #32
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fa46 	bl	8002918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_TIM_ConfigClockSource+0x1c>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0b4      	b.n	800261a <HAL_TIM_ConfigClockSource+0x186>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e8:	d03e      	beq.n	8002568 <HAL_TIM_ConfigClockSource+0xd4>
 80024ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ee:	f200 8087 	bhi.w	8002600 <HAL_TIM_ConfigClockSource+0x16c>
 80024f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024f6:	f000 8086 	beq.w	8002606 <HAL_TIM_ConfigClockSource+0x172>
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	d87f      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x16c>
 8002500:	2b70      	cmp	r3, #112	; 0x70
 8002502:	d01a      	beq.n	800253a <HAL_TIM_ConfigClockSource+0xa6>
 8002504:	2b70      	cmp	r3, #112	; 0x70
 8002506:	d87b      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x16c>
 8002508:	2b60      	cmp	r3, #96	; 0x60
 800250a:	d050      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x11a>
 800250c:	2b60      	cmp	r3, #96	; 0x60
 800250e:	d877      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x16c>
 8002510:	2b50      	cmp	r3, #80	; 0x50
 8002512:	d03c      	beq.n	800258e <HAL_TIM_ConfigClockSource+0xfa>
 8002514:	2b50      	cmp	r3, #80	; 0x50
 8002516:	d873      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x16c>
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d058      	beq.n	80025ce <HAL_TIM_ConfigClockSource+0x13a>
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d86f      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x16c>
 8002520:	2b30      	cmp	r3, #48	; 0x30
 8002522:	d064      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x15a>
 8002524:	2b30      	cmp	r3, #48	; 0x30
 8002526:	d86b      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x16c>
 8002528:	2b20      	cmp	r3, #32
 800252a:	d060      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x15a>
 800252c:	2b20      	cmp	r3, #32
 800252e:	d867      	bhi.n	8002600 <HAL_TIM_ConfigClockSource+0x16c>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d05c      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x15a>
 8002534:	2b10      	cmp	r3, #16
 8002536:	d05a      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x15a>
 8002538:	e062      	b.n	8002600 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6899      	ldr	r1, [r3, #8]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f000 f968 	bl	800281e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800255c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	609a      	str	r2, [r3, #8]
      break;
 8002566:	e04f      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6899      	ldr	r1, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f000 f951 	bl	800281e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800258a:	609a      	str	r2, [r3, #8]
      break;
 800258c:	e03c      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	461a      	mov	r2, r3
 800259c:	f000 f8c8 	bl	8002730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2150      	movs	r1, #80	; 0x50
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f91f 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 80025ac:	e02c      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	461a      	mov	r2, r3
 80025bc:	f000 f8e6 	bl	800278c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2160      	movs	r1, #96	; 0x60
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f90f 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 80025cc:	e01c      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	461a      	mov	r2, r3
 80025dc:	f000 f8a8 	bl	8002730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2140      	movs	r1, #64	; 0x40
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f8ff 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 80025ec:	e00c      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4610      	mov	r0, r2
 80025fa:	f000 f8f6 	bl	80027ea <TIM_ITRx_SetConfig>
      break;
 80025fe:	e003      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e000      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002606:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
	...

0800266c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a29      	ldr	r2, [pc, #164]	; (8002724 <TIM_Base_SetConfig+0xb8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00b      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268a:	d007      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a26      	ldr	r2, [pc, #152]	; (8002728 <TIM_Base_SetConfig+0xbc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <TIM_Base_SetConfig+0x30>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a25      	ldr	r2, [pc, #148]	; (800272c <TIM_Base_SetConfig+0xc0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d108      	bne.n	80026ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a1c      	ldr	r2, [pc, #112]	; (8002724 <TIM_Base_SetConfig+0xb8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d00b      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026bc:	d007      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a19      	ldr	r2, [pc, #100]	; (8002728 <TIM_Base_SetConfig+0xbc>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d003      	beq.n	80026ce <TIM_Base_SetConfig+0x62>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a18      	ldr	r2, [pc, #96]	; (800272c <TIM_Base_SetConfig+0xc0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d108      	bne.n	80026e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a07      	ldr	r2, [pc, #28]	; (8002724 <TIM_Base_SetConfig+0xb8>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d103      	bne.n	8002714 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	615a      	str	r2, [r3, #20]
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40000400 	.word	0x40000400
 800272c:	40000800 	.word	0x40000800

08002730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	f023 0201 	bic.w	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800275a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 030a 	bic.w	r3, r3, #10
 800276c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	621a      	str	r2, [r3, #32]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f023 0210 	bic.w	r2, r3, #16
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	031b      	lsls	r3, r3, #12
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	621a      	str	r2, [r3, #32]
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	f043 0307 	orr.w	r3, r3, #7
 800280c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	609a      	str	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800281e:	b480      	push	{r7}
 8002820:	b087      	sub	sp, #28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002838:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	021a      	lsls	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	431a      	orrs	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4313      	orrs	r3, r2
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	609a      	str	r2, [r3, #8]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002870:	2302      	movs	r3, #2
 8002872:	e046      	b.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a16      	ldr	r2, [pc, #88]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d009      	beq.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d10c      	bne.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400
 8002914:	40000800 	.word	0x40000800

08002918 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <xQueueGenericReset>:
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
 8002946:	2301      	movs	r3, #1
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <xQueueGenericReset+0x2e>
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueGenericReset+0x2c>
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d05d      	beq.n	8002a2c <xQueueGenericReset+0xf0>
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d059      	beq.n	8002a2c <xQueueGenericReset+0xf0>
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	2100      	movs	r1, #0
 8002982:	fba3 2302 	umull	r2, r3, r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d000      	beq.n	800298c <xQueueGenericReset+0x50>
 800298a:	2101      	movs	r1, #1
 800298c:	460b      	mov	r3, r1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d14c      	bne.n	8002a2c <xQueueGenericReset+0xf0>
 8002992:	f002 fdc5 	bl	8005520 <vPortEnterCritical>
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	6939      	ldr	r1, [r7, #16]
 80029a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	441a      	add	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2200      	movs	r2, #0
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6939      	ldr	r1, [r7, #16]
 80029c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	441a      	add	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	22ff      	movs	r2, #255	; 0xff
 80029d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	22ff      	movs	r2, #255	; 0xff
 80029de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d114      	bne.n	8002a12 <xQueueGenericReset+0xd6>
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01a      	beq.n	8002a26 <xQueueGenericReset+0xea>
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	3310      	adds	r3, #16
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 fc93 	bl	8004320 <xTaskRemoveFromEventList>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <xQueueGenericReset+0xea>
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <xQueueGenericReset+0x11c>)
 8002a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	e009      	b.n	8002a26 <xQueueGenericReset+0xea>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	3310      	adds	r3, #16
 8002a16:	4618      	mov	r0, r3
 8002a18:	f002 fc06 	bl	8005228 <vListInitialise>
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	3324      	adds	r3, #36	; 0x24
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fc01 	bl	8005228 <vListInitialise>
 8002a26:	f002 fdab 	bl	8005580 <vPortExitCritical>
 8002a2a:	e001      	b.n	8002a30 <xQueueGenericReset+0xf4>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10a      	bne.n	8002a4c <xQueueGenericReset+0x110>
 8002a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	bf00      	nop
 8002a4a:	e7fe      	b.n	8002a4a <xQueueGenericReset+0x10e>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	e000ed04 	.word	0xe000ed04

08002a5c <xQueueGenericCreate>:
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	71fb      	strb	r3, [r7, #7]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02e      	beq.n	8002ad2 <xQueueGenericCreate+0x76>
 8002a74:	2100      	movs	r1, #0
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d000      	beq.n	8002a84 <xQueueGenericCreate+0x28>
 8002a82:	2101      	movs	r1, #1
 8002a84:	460b      	mov	r3, r1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d123      	bne.n	8002ad2 <xQueueGenericCreate+0x76>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002a96:	d81c      	bhi.n	8002ad2 <xQueueGenericCreate+0x76>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	fb02 f303 	mul.w	r3, r2, r3
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	3350      	adds	r3, #80	; 0x50
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 fb9a 	bl	80051e0 <pvPortMalloc>
 8002aac:	61f8      	str	r0, [r7, #28]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01c      	beq.n	8002aee <xQueueGenericCreate+0x92>
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3350      	adds	r3, #80	; 0x50
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	79fa      	ldrb	r2, [r7, #7]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f814 	bl	8002af8 <prvInitialiseNewQueue>
 8002ad0:	e00d      	b.n	8002aee <xQueueGenericCreate+0x92>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericCreate+0x92>
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericCreate+0x90>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4618      	mov	r0, r3
 8002af2:	3720      	adds	r7, #32
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <prvInitialiseNewQueue>:
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	70fb      	strb	r3, [r7, #3]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <prvInitialiseNewQueue+0x1c>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e002      	b.n	8002b1a <prvInitialiseNewQueue+0x22>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
 8002b26:	2101      	movs	r1, #1
 8002b28:	69b8      	ldr	r0, [r7, #24]
 8002b2a:	f7ff ff07 	bl	800293c <xQueueGenericReset>
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <xQueueGenericSend>:
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08e      	sub	sp, #56	; 0x38
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <xQueueGenericSend+0x32>
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6e:	bf00      	nop
 8002b70:	e7fe      	b.n	8002b70 <xQueueGenericSend+0x30>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d103      	bne.n	8002b80 <xQueueGenericSend+0x40>
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <xQueueGenericSend+0x44>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <xQueueGenericSend+0x46>
 8002b84:	2300      	movs	r3, #0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <xQueueGenericSend+0x60>
 8002b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9c:	bf00      	nop
 8002b9e:	e7fe      	b.n	8002b9e <xQueueGenericSend+0x5e>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d103      	bne.n	8002bae <xQueueGenericSend+0x6e>
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <xQueueGenericSend+0x72>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <xQueueGenericSend+0x74>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <xQueueGenericSend+0x8e>
 8002bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	623b      	str	r3, [r7, #32]
 8002bca:	bf00      	nop
 8002bcc:	e7fe      	b.n	8002bcc <xQueueGenericSend+0x8c>
 8002bce:	f001 fe15 	bl	80047fc <xTaskGetSchedulerState>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d102      	bne.n	8002bde <xQueueGenericSend+0x9e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <xQueueGenericSend+0xa2>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <xQueueGenericSend+0xa4>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <xQueueGenericSend+0xbe>
 8002be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	bf00      	nop
 8002bfc:	e7fe      	b.n	8002bfc <xQueueGenericSend+0xbc>
 8002bfe:	f002 fc8f 	bl	8005520 <vPortEnterCritical>
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <xQueueGenericSend+0xd4>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d129      	bne.n	8002c68 <xQueueGenericSend+0x128>
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c1a:	f000 fbda 	bl	80033d2 <prvCopyDataToQueue>
 8002c1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <xQueueGenericSend+0x10a>
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	3324      	adds	r3, #36	; 0x24
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fb77 	bl	8004320 <xTaskRemoveFromEventList>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <xQueueGenericSend+0x120>
 8002c38:	4b3f      	ldr	r3, [pc, #252]	; (8002d38 <xQueueGenericSend+0x1f8>)
 8002c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	e00a      	b.n	8002c60 <xQueueGenericSend+0x120>
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <xQueueGenericSend+0x120>
 8002c50:	4b39      	ldr	r3, [pc, #228]	; (8002d38 <xQueueGenericSend+0x1f8>)
 8002c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f002 fc8e 	bl	8005580 <vPortExitCritical>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e063      	b.n	8002d30 <xQueueGenericSend+0x1f0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d103      	bne.n	8002c76 <xQueueGenericSend+0x136>
 8002c6e:	f002 fc87 	bl	8005580 <vPortExitCritical>
 8002c72:	2300      	movs	r3, #0
 8002c74:	e05c      	b.n	8002d30 <xQueueGenericSend+0x1f0>
 8002c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d106      	bne.n	8002c8a <xQueueGenericSend+0x14a>
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	4618      	mov	r0, r3
 8002c82:	f001 fc25 	bl	80044d0 <vTaskInternalSetTimeOutState>
 8002c86:	2301      	movs	r3, #1
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8a:	f002 fc79 	bl	8005580 <vPortExitCritical>
 8002c8e:	f000 ffb7 	bl	8003c00 <vTaskSuspendAll>
 8002c92:	f002 fc45 	bl	8005520 <vPortEnterCritical>
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c9c:	b25b      	sxtb	r3, r3
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d103      	bne.n	8002cac <xQueueGenericSend+0x16c>
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cb2:	b25b      	sxtb	r3, r3
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d103      	bne.n	8002cc2 <xQueueGenericSend+0x182>
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cc2:	f002 fc5d 	bl	8005580 <vPortExitCritical>
 8002cc6:	1d3a      	adds	r2, r7, #4
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 fc14 	bl	80044fc <xTaskCheckForTimeOut>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d124      	bne.n	8002d24 <xQueueGenericSend+0x1e4>
 8002cda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cdc:	f000 fc71 	bl	80035c2 <prvIsQueueFull>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d018      	beq.n	8002d18 <xQueueGenericSend+0x1d8>
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	3310      	adds	r3, #16
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 faac 	bl	800424c <vTaskPlaceOnEventList>
 8002cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf6:	f000 fbfc 	bl	80034f2 <prvUnlockQueue>
 8002cfa:	f000 ffc5 	bl	8003c88 <xTaskResumeAll>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f af7c 	bne.w	8002bfe <xQueueGenericSend+0xbe>
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <xQueueGenericSend+0x1f8>)
 8002d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	e772      	b.n	8002bfe <xQueueGenericSend+0xbe>
 8002d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d1a:	f000 fbea 	bl	80034f2 <prvUnlockQueue>
 8002d1e:	f000 ffb3 	bl	8003c88 <xTaskResumeAll>
 8002d22:	e76c      	b.n	8002bfe <xQueueGenericSend+0xbe>
 8002d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d26:	f000 fbe4 	bl	80034f2 <prvUnlockQueue>
 8002d2a:	f000 ffad 	bl	8003c88 <xTaskResumeAll>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	3738      	adds	r7, #56	; 0x38
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <xQueueGenericSendFromISR>:
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b092      	sub	sp, #72	; 0x48
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10a      	bne.n	8002d6a <xQueueGenericSendFromISR+0x2e>
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d66:	bf00      	nop
 8002d68:	e7fe      	b.n	8002d68 <xQueueGenericSendFromISR+0x2c>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d103      	bne.n	8002d78 <xQueueGenericSendFromISR+0x3c>
 8002d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <xQueueGenericSendFromISR+0x40>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <xQueueGenericSendFromISR+0x42>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <xQueueGenericSendFromISR+0x5c>
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d94:	bf00      	nop
 8002d96:	e7fe      	b.n	8002d96 <xQueueGenericSendFromISR+0x5a>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d103      	bne.n	8002da6 <xQueueGenericSendFromISR+0x6a>
 8002d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <xQueueGenericSendFromISR+0x6e>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <xQueueGenericSendFromISR+0x70>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <xQueueGenericSendFromISR+0x8a>
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	bf00      	nop
 8002dc4:	e7fe      	b.n	8002dc4 <xQueueGenericSendFromISR+0x88>
 8002dc6:	f002 fd4f 	bl	8005868 <vPortValidateInterruptPriority>
 8002dca:	f3ef 8211 	mrs	r2, BASEPRI
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	623a      	str	r2, [r7, #32]
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <xQueueGenericSendFromISR+0xbc>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d146      	bne.n	8002e86 <xQueueGenericSendFromISR+0x14a>
 8002df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	637b      	str	r3, [r7, #52]	; 0x34
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002e0e:	f000 fae0 	bl	80033d2 <prvCopyDataToQueue>
 8002e12:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1a:	d112      	bne.n	8002e42 <xQueueGenericSendFromISR+0x106>
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d02d      	beq.n	8002e80 <xQueueGenericSendFromISR+0x144>
 8002e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e26:	3324      	adds	r3, #36	; 0x24
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f001 fa79 	bl	8004320 <xTaskRemoveFromEventList>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d025      	beq.n	8002e80 <xQueueGenericSendFromISR+0x144>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d022      	beq.n	8002e80 <xQueueGenericSendFromISR+0x144>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	e01e      	b.n	8002e80 <xQueueGenericSendFromISR+0x144>
 8002e42:	f001 f82b 	bl	8003e9c <uxTaskGetNumberOfTasks>
 8002e46:	6338      	str	r0, [r7, #48]	; 0x30
 8002e48:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d916      	bls.n	8002e80 <xQueueGenericSendFromISR+0x144>
 8002e52:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002e56:	2b7f      	cmp	r3, #127	; 0x7f
 8002e58:	d10a      	bne.n	8002e70 <xQueueGenericSendFromISR+0x134>
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <xQueueGenericSendFromISR+0x132>
 8002e70:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002e74:	3301      	adds	r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	b25a      	sxtb	r2, r3
 8002e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e80:	2301      	movs	r3, #1
 8002e82:	647b      	str	r3, [r7, #68]	; 0x44
 8002e84:	e001      	b.n	8002e8a <xQueueGenericSendFromISR+0x14e>
 8002e86:	2300      	movs	r3, #0
 8002e88:	647b      	str	r3, [r7, #68]	; 0x44
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	bf00      	nop
 8002e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3748      	adds	r7, #72	; 0x48
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <xQueueGiveFromISR>:
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b090      	sub	sp, #64	; 0x40
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <xQueueGiveFromISR+0x2a>
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <xQueueGiveFromISR+0x28>
 8002eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <xQueueGiveFromISR+0x48>
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	bf00      	nop
 8002ee6:	e7fe      	b.n	8002ee6 <xQueueGiveFromISR+0x46>
 8002ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <xQueueGiveFromISR+0x58>
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <xQueueGiveFromISR+0x5c>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <xQueueGiveFromISR+0x5e>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <xQueueGiveFromISR+0x78>
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <xQueueGiveFromISR+0x76>
 8002f18:	f002 fca6 	bl	8005868 <vPortValidateInterruptPriority>
 8002f1c:	f3ef 8211 	mrs	r2, BASEPRI
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	61ba      	str	r2, [r7, #24]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	637b      	str	r3, [r7, #52]	; 0x34
 8002f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d242      	bcs.n	8002fce <xQueueGiveFromISR+0x12e>
 8002f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f58:	639a      	str	r2, [r3, #56]	; 0x38
 8002f5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d112      	bne.n	8002f8a <xQueueGiveFromISR+0xea>
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d02d      	beq.n	8002fc8 <xQueueGiveFromISR+0x128>
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	3324      	adds	r3, #36	; 0x24
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 f9d5 	bl	8004320 <xTaskRemoveFromEventList>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d025      	beq.n	8002fc8 <xQueueGiveFromISR+0x128>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d022      	beq.n	8002fc8 <xQueueGiveFromISR+0x128>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e01e      	b.n	8002fc8 <xQueueGiveFromISR+0x128>
 8002f8a:	f000 ff87 	bl	8003e9c <uxTaskGetNumberOfTasks>
 8002f8e:	62b8      	str	r0, [r7, #40]	; 0x28
 8002f90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d916      	bls.n	8002fc8 <xQueueGiveFromISR+0x128>
 8002f9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8002fa0:	d10a      	bne.n	8002fb8 <xQueueGiveFromISR+0x118>
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <xQueueGiveFromISR+0x116>
 8002fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	b25a      	sxtb	r2, r3
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc8:	2301      	movs	r3, #1
 8002fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fcc:	e001      	b.n	8002fd2 <xQueueGiveFromISR+0x132>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	bf00      	nop
 8002fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3740      	adds	r7, #64	; 0x40
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <xQueueReceive>:
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <xQueueReceive+0x30>
 8003002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	bf00      	nop
 8003016:	e7fe      	b.n	8003016 <xQueueReceive+0x2e>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <xQueueReceive+0x3e>
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <xQueueReceive+0x42>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <xQueueReceive+0x44>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <xQueueReceive+0x5e>
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	bf00      	nop
 8003044:	e7fe      	b.n	8003044 <xQueueReceive+0x5c>
 8003046:	f001 fbd9 	bl	80047fc <xTaskGetSchedulerState>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <xQueueReceive+0x6e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <xQueueReceive+0x72>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <xQueueReceive+0x74>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <xQueueReceive+0x8e>
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	bf00      	nop
 8003074:	e7fe      	b.n	8003074 <xQueueReceive+0x8c>
 8003076:	f002 fa53 	bl	8005520 <vPortEnterCritical>
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01f      	beq.n	80030c6 <xQueueReceive+0xde>
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308a:	f000 fa0c 	bl	80034a6 <prvCopyDataFromQueue>
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	639a      	str	r2, [r3, #56]	; 0x38
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00f      	beq.n	80030be <xQueueReceive+0xd6>
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	3310      	adds	r3, #16
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 f93c 	bl	8004320 <xTaskRemoveFromEventList>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d007      	beq.n	80030be <xQueueReceive+0xd6>
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <xQueueReceive+0x1bc>)
 80030b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f002 fa5f 	bl	8005580 <vPortExitCritical>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e069      	b.n	800319a <xQueueReceive+0x1b2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d103      	bne.n	80030d4 <xQueueReceive+0xec>
 80030cc:	f002 fa58 	bl	8005580 <vPortExitCritical>
 80030d0:	2300      	movs	r3, #0
 80030d2:	e062      	b.n	800319a <xQueueReceive+0x1b2>
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <xQueueReceive+0x100>
 80030da:	f107 0310 	add.w	r3, r7, #16
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 f9f6 	bl	80044d0 <vTaskInternalSetTimeOutState>
 80030e4:	2301      	movs	r3, #1
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e8:	f002 fa4a 	bl	8005580 <vPortExitCritical>
 80030ec:	f000 fd88 	bl	8003c00 <vTaskSuspendAll>
 80030f0:	f002 fa16 	bl	8005520 <vPortEnterCritical>
 80030f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d103      	bne.n	800310a <xQueueReceive+0x122>
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003110:	b25b      	sxtb	r3, r3
 8003112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003116:	d103      	bne.n	8003120 <xQueueReceive+0x138>
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003120:	f002 fa2e 	bl	8005580 <vPortExitCritical>
 8003124:	1d3a      	adds	r2, r7, #4
 8003126:	f107 0310 	add.w	r3, r7, #16
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f9e5 	bl	80044fc <xTaskCheckForTimeOut>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d123      	bne.n	8003180 <xQueueReceive+0x198>
 8003138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313a:	f000 fa2c 	bl	8003596 <prvIsQueueEmpty>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d017      	beq.n	8003174 <xQueueReceive+0x18c>
 8003144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003146:	3324      	adds	r3, #36	; 0x24
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f001 f87d 	bl	800424c <vTaskPlaceOnEventList>
 8003152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003154:	f000 f9cd 	bl	80034f2 <prvUnlockQueue>
 8003158:	f000 fd96 	bl	8003c88 <xTaskResumeAll>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d189      	bne.n	8003076 <xQueueReceive+0x8e>
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <xQueueReceive+0x1bc>)
 8003164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	e780      	b.n	8003076 <xQueueReceive+0x8e>
 8003174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003176:	f000 f9bc 	bl	80034f2 <prvUnlockQueue>
 800317a:	f000 fd85 	bl	8003c88 <xTaskResumeAll>
 800317e:	e77a      	b.n	8003076 <xQueueReceive+0x8e>
 8003180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003182:	f000 f9b6 	bl	80034f2 <prvUnlockQueue>
 8003186:	f000 fd7f 	bl	8003c88 <xTaskResumeAll>
 800318a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800318c:	f000 fa03 	bl	8003596 <prvIsQueueEmpty>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	f43f af6f 	beq.w	8003076 <xQueueReceive+0x8e>
 8003198:	2300      	movs	r3, #0
 800319a:	4618      	mov	r0, r3
 800319c:	3730      	adds	r7, #48	; 0x30
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <xQueueSemaphoreTake>:
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	; 0x30
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	2300      	movs	r3, #0
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ba:	2300      	movs	r3, #0
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <xQueueSemaphoreTake+0x32>
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	bf00      	nop
 80031d8:	e7fe      	b.n	80031d8 <xQueueSemaphoreTake+0x30>
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <xQueueSemaphoreTake+0x50>
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	bf00      	nop
 80031f6:	e7fe      	b.n	80031f6 <xQueueSemaphoreTake+0x4e>
 80031f8:	f001 fb00 	bl	80047fc <xTaskGetSchedulerState>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <xQueueSemaphoreTake+0x60>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <xQueueSemaphoreTake+0x64>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <xQueueSemaphoreTake+0x66>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <xQueueSemaphoreTake+0x80>
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <xQueueSemaphoreTake+0x7e>
 8003228:	f002 f97a 	bl	8005520 <vPortEnterCritical>
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	623b      	str	r3, [r7, #32]
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d024      	beq.n	8003282 <xQueueSemaphoreTake+0xda>
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	1e5a      	subs	r2, r3, #1
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	639a      	str	r2, [r3, #56]	; 0x38
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <xQueueSemaphoreTake+0xaa>
 8003248:	f001 fcc6 	bl	8004bd8 <pvTaskIncrementMutexHeldCount>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	609a      	str	r2, [r3, #8]
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00f      	beq.n	800327a <xQueueSemaphoreTake+0xd2>
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	3310      	adds	r3, #16
 800325e:	4618      	mov	r0, r3
 8003260:	f001 f85e 	bl	8004320 <xTaskRemoveFromEventList>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <xQueueSemaphoreTake+0xd2>
 800326a:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <xQueueSemaphoreTake+0x1f8>)
 800326c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f002 f981 	bl	8005580 <vPortExitCritical>
 800327e:	2301      	movs	r3, #1
 8003280:	e089      	b.n	8003396 <xQueueSemaphoreTake+0x1ee>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <xQueueSemaphoreTake+0xe8>
 8003288:	f002 f97a 	bl	8005580 <vPortExitCritical>
 800328c:	2300      	movs	r3, #0
 800328e:	e082      	b.n	8003396 <xQueueSemaphoreTake+0x1ee>
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <xQueueSemaphoreTake+0xfc>
 8003296:	f107 0308 	add.w	r3, r7, #8
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f918 	bl	80044d0 <vTaskInternalSetTimeOutState>
 80032a0:	2301      	movs	r3, #1
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a4:	f002 f96c 	bl	8005580 <vPortExitCritical>
 80032a8:	f000 fcaa 	bl	8003c00 <vTaskSuspendAll>
 80032ac:	f002 f938 	bl	8005520 <vPortEnterCritical>
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d103      	bne.n	80032c6 <xQueueSemaphoreTake+0x11e>
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d103      	bne.n	80032dc <xQueueSemaphoreTake+0x134>
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032dc:	f002 f950 	bl	8005580 <vPortExitCritical>
 80032e0:	463a      	mov	r2, r7
 80032e2:	f107 0308 	add.w	r3, r7, #8
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 f907 	bl	80044fc <xTaskCheckForTimeOut>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d132      	bne.n	800335a <xQueueSemaphoreTake+0x1b2>
 80032f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032f6:	f000 f94e 	bl	8003596 <prvIsQueueEmpty>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d026      	beq.n	800334e <xQueueSemaphoreTake+0x1a6>
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <xQueueSemaphoreTake+0x174>
 8003308:	f002 f90a 	bl	8005520 <vPortEnterCritical>
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f001 fa91 	bl	8004838 <xTaskPriorityInherit>
 8003316:	62b8      	str	r0, [r7, #40]	; 0x28
 8003318:	f002 f932 	bl	8005580 <vPortExitCritical>
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	3324      	adds	r3, #36	; 0x24
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 ff91 	bl	800424c <vTaskPlaceOnEventList>
 800332a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800332c:	f000 f8e1 	bl	80034f2 <prvUnlockQueue>
 8003330:	f000 fcaa 	bl	8003c88 <xTaskResumeAll>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	f47f af76 	bne.w	8003228 <xQueueSemaphoreTake+0x80>
 800333c:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <xQueueSemaphoreTake+0x1f8>)
 800333e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	e76c      	b.n	8003228 <xQueueSemaphoreTake+0x80>
 800334e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003350:	f000 f8cf 	bl	80034f2 <prvUnlockQueue>
 8003354:	f000 fc98 	bl	8003c88 <xTaskResumeAll>
 8003358:	e766      	b.n	8003228 <xQueueSemaphoreTake+0x80>
 800335a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800335c:	f000 f8c9 	bl	80034f2 <prvUnlockQueue>
 8003360:	f000 fc92 	bl	8003c88 <xTaskResumeAll>
 8003364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003366:	f000 f916 	bl	8003596 <prvIsQueueEmpty>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	f43f af5b 	beq.w	8003228 <xQueueSemaphoreTake+0x80>
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <xQueueSemaphoreTake+0x1ec>
 8003378:	f002 f8d2 	bl	8005520 <vPortEnterCritical>
 800337c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800337e:	f000 f811 	bl	80033a4 <prvGetDisinheritPriorityAfterTimeout>
 8003382:	61f8      	str	r0, [r7, #28]
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	69f9      	ldr	r1, [r7, #28]
 800338a:	4618      	mov	r0, r3
 800338c:	f001 fb7a 	bl	8004a84 <vTaskPriorityDisinheritAfterTimeout>
 8003390:	f002 f8f6 	bl	8005580 <vPortExitCritical>
 8003394:	2300      	movs	r3, #0
 8003396:	4618      	mov	r0, r3
 8003398:	3730      	adds	r7, #48	; 0x30
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000ed04 	.word	0xe000ed04

080033a4 <prvGetDisinheritPriorityAfterTimeout>:
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1c3 0305 	rsb	r3, r3, #5
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e001      	b.n	80033c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <prvCopyDataToQueue>:
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <prvCopyDataToQueue+0x3a>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d14d      	bne.n	8003494 <prvCopyDataToQueue+0xc2>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 faab 	bl	8004958 <xTaskPriorityDisinherit>
 8003402:	6178      	str	r0, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	e043      	b.n	8003494 <prvCopyDataToQueue+0xc2>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d119      	bne.n	8003446 <prvCopyDataToQueue+0x74>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6858      	ldr	r0, [r3, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	461a      	mov	r2, r3
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	f002 fa9b 	bl	8005958 <memcpy>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	441a      	add	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d32b      	bcc.n	8003494 <prvCopyDataToQueue+0xc2>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	e026      	b.n	8003494 <prvCopyDataToQueue+0xc2>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68d8      	ldr	r0, [r3, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	461a      	mov	r2, r3
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	f002 fa81 	bl	8005958 <memcpy>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	425b      	negs	r3, r3
 8003460:	441a      	add	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d207      	bcs.n	8003482 <prvCopyDataToQueue+0xb0>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	425b      	negs	r3, r3
 800347c:	441a      	add	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d105      	bne.n	8003494 <prvCopyDataToQueue+0xc2>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <prvCopyDataToQueue+0xc2>
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	3b01      	subs	r3, #1
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <prvCopyDataFromQueue>:
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d018      	beq.n	80034ea <prvCopyDataFromQueue+0x44>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d303      	bcc.n	80034da <prvCopyDataFromQueue+0x34>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68d9      	ldr	r1, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	461a      	mov	r2, r3
 80034e4:	6838      	ldr	r0, [r7, #0]
 80034e6:	f002 fa37 	bl	8005958 <memcpy>
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <prvUnlockQueue>:
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	f002 f811 	bl	8005520 <vPortEnterCritical>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	e011      	b.n	800352c <prvUnlockQueue+0x3a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <prvUnlockQueue+0x44>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	4618      	mov	r0, r3
 8003516:	f000 ff03 	bl	8004320 <xTaskRemoveFromEventList>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <prvUnlockQueue+0x32>
 8003520:	f001 f852 	bl	80045c8 <vTaskMissedYield>
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	3b01      	subs	r3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	73fb      	strb	r3, [r7, #15]
 800352c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003530:	2b00      	cmp	r3, #0
 8003532:	dce9      	bgt.n	8003508 <prvUnlockQueue+0x16>
 8003534:	e000      	b.n	8003538 <prvUnlockQueue+0x46>
 8003536:	bf00      	nop
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003540:	f002 f81e 	bl	8005580 <vPortExitCritical>
 8003544:	f001 ffec 	bl	8005520 <vPortEnterCritical>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800354e:	73bb      	strb	r3, [r7, #14]
 8003550:	e011      	b.n	8003576 <prvUnlockQueue+0x84>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d012      	beq.n	8003580 <prvUnlockQueue+0x8e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3310      	adds	r3, #16
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fede 	bl	8004320 <xTaskRemoveFromEventList>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <prvUnlockQueue+0x7c>
 800356a:	f001 f82d 	bl	80045c8 <vTaskMissedYield>
 800356e:	7bbb      	ldrb	r3, [r7, #14]
 8003570:	3b01      	subs	r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	73bb      	strb	r3, [r7, #14]
 8003576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800357a:	2b00      	cmp	r3, #0
 800357c:	dce9      	bgt.n	8003552 <prvUnlockQueue+0x60>
 800357e:	e000      	b.n	8003582 <prvUnlockQueue+0x90>
 8003580:	bf00      	nop
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	22ff      	movs	r2, #255	; 0xff
 8003586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800358a:	f001 fff9 	bl	8005580 <vPortExitCritical>
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <prvIsQueueEmpty>:
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	f001 ffbf 	bl	8005520 <vPortEnterCritical>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <prvIsQueueEmpty+0x1a>
 80035aa:	2301      	movs	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e001      	b.n	80035b4 <prvIsQueueEmpty+0x1e>
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	f001 ffe4 	bl	8005580 <vPortExitCritical>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <prvIsQueueFull>:
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	f001 ffa9 	bl	8005520 <vPortEnterCritical>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d102      	bne.n	80035e0 <prvIsQueueFull+0x1e>
 80035da:	2301      	movs	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	e001      	b.n	80035e4 <prvIsQueueFull+0x22>
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	f001 ffcc 	bl	8005580 <vPortExitCritical>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <vQueueAddToRegistry>:
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <vQueueAddToRegistry+0x2a>
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <vQueueAddToRegistry+0x28>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d024      	beq.n	800366e <vQueueAddToRegistry+0x7a>
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	e01e      	b.n	8003668 <vQueueAddToRegistry+0x74>
 800362a:	4a18      	ldr	r2, [pc, #96]	; (800368c <vQueueAddToRegistry+0x98>)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	d105      	bne.n	8003646 <vQueueAddToRegistry+0x52>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <vQueueAddToRegistry+0x98>)
 8003640:	4413      	add	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	e013      	b.n	800366e <vQueueAddToRegistry+0x7a>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <vQueueAddToRegistry+0x6e>
 800364c:	4a0f      	ldr	r2, [pc, #60]	; (800368c <vQueueAddToRegistry+0x98>)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <vQueueAddToRegistry+0x6e>
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4a0b      	ldr	r2, [pc, #44]	; (800368c <vQueueAddToRegistry+0x98>)
 800365e:	4413      	add	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3301      	adds	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b07      	cmp	r3, #7
 800366c:	d9dd      	bls.n	800362a <vQueueAddToRegistry+0x36>
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <vQueueAddToRegistry+0x8c>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	bf00      	nop
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	200002d4 	.word	0x200002d4

08003690 <vQueueWaitForMessageRestricted>:
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	f001 ff3e 	bl	8005520 <vPortEnterCritical>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036aa:	b25b      	sxtb	r3, r3
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d103      	bne.n	80036ba <vQueueWaitForMessageRestricted+0x2a>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036c0:	b25b      	sxtb	r3, r3
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d103      	bne.n	80036d0 <vQueueWaitForMessageRestricted+0x40>
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036d0:	f001 ff56 	bl	8005580 <vPortExitCritical>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <vQueueWaitForMessageRestricted+0x5a>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	3324      	adds	r3, #36	; 0x24
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fdd5 	bl	8004294 <vTaskPlaceOnEventListRestricted>
 80036ea:	6978      	ldr	r0, [r7, #20]
 80036ec:	f7ff ff01 	bl	80034f2 <prvUnlockQueue>
 80036f0:	bf00      	nop
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <xTaskCreate>:
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08c      	sub	sp, #48	; 0x30
 80036fc:	af04      	add	r7, sp, #16
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fd68 	bl	80051e0 <pvPortMalloc>
 8003710:	6178      	str	r0, [r7, #20]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d013      	beq.n	8003740 <xTaskCreate+0x48>
 8003718:	207c      	movs	r0, #124	; 0x7c
 800371a:	f001 fd61 	bl	80051e0 <pvPortMalloc>
 800371e:	61f8      	str	r0, [r7, #28]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d008      	beq.n	8003738 <xTaskCreate+0x40>
 8003726:	227c      	movs	r2, #124	; 0x7c
 8003728:	2100      	movs	r1, #0
 800372a:	69f8      	ldr	r0, [r7, #28]
 800372c:	f002 f922 	bl	8005974 <memset>
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
 8003736:	e005      	b.n	8003744 <xTaskCreate+0x4c>
 8003738:	6978      	ldr	r0, [r7, #20]
 800373a:	f001 fd63 	bl	8005204 <vPortFree>
 800373e:	e001      	b.n	8003744 <xTaskCreate+0x4c>
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d013      	beq.n	8003772 <xTaskCreate+0x7a>
 800374a:	2300      	movs	r3, #0
 800374c:	9303      	str	r3, [sp, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f80e 	bl	8003782 <prvInitialiseNewTask>
 8003766:	69f8      	ldr	r0, [r7, #28]
 8003768:	f000 f89a 	bl	80038a0 <prvAddNewTaskToReadyList>
 800376c:	2301      	movs	r3, #1
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	e002      	b.n	8003778 <xTaskCreate+0x80>
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	4618      	mov	r0, r3
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <prvInitialiseNewTask>:
 8003782:	b580      	push	{r7, lr}
 8003784:	b088      	sub	sp, #32
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	461a      	mov	r2, r3
 800379a:	21a5      	movs	r1, #165	; 0xa5
 800379c:	f002 f8ea 	bl	8005974 <memset>
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037aa:	3b01      	subs	r3, #1
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f023 0307 	bic.w	r3, r3, #7
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <prvInitialiseNewTask+0x58>
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <prvInitialiseNewTask+0x56>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01e      	beq.n	800381e <prvInitialiseNewTask+0x9c>
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e012      	b.n	800380c <prvInitialiseNewTask+0x8a>
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	7819      	ldrb	r1, [r3, #0]
 80037ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	4413      	add	r3, r2
 80037f4:	3334      	adds	r3, #52	; 0x34
 80037f6:	460a      	mov	r2, r1
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d006      	beq.n	8003814 <prvInitialiseNewTask+0x92>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3301      	adds	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b13      	cmp	r3, #19
 8003810:	d9e9      	bls.n	80037e6 <prvInitialiseNewTask+0x64>
 8003812:	e000      	b.n	8003816 <prvInitialiseNewTask+0x94>
 8003814:	bf00      	nop
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	2b04      	cmp	r3, #4
 8003822:	d90a      	bls.n	800383a <prvInitialiseNewTask+0xb8>
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <prvInitialiseNewTask+0xb6>
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	2b04      	cmp	r3, #4
 800383e:	d901      	bls.n	8003844 <prvInitialiseNewTask+0xc2>
 8003840:	2304      	movs	r3, #4
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800384e:	651a      	str	r2, [r3, #80]	; 0x50
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	3304      	adds	r3, #4
 8003854:	4618      	mov	r0, r3
 8003856:	f001 fd06 	bl	8005266 <vListInitialiseItem>
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	3318      	adds	r3, #24
 800385e:	4618      	mov	r0, r3
 8003860:	f001 fd01 	bl	8005266 <vListInitialiseItem>
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003868:	611a      	str	r2, [r3, #16]
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	f1c3 0205 	rsb	r2, r3, #5
 8003870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003872:	619a      	str	r2, [r3, #24]
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	68f9      	ldr	r1, [r7, #12]
 800387e:	69b8      	ldr	r0, [r7, #24]
 8003880:	f001 fd5e 	bl	8005340 <pxPortInitialiseStack>
 8003884:	4602      	mov	r2, r0
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <prvInitialiseNewTask+0x114>
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	bf00      	nop
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <prvAddNewTaskToReadyList>:
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	f001 fe3a 	bl	8005520 <vPortEnterCritical>
 80038ac:	4b41      	ldr	r3, [pc, #260]	; (80039b4 <prvAddNewTaskToReadyList+0x114>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <prvAddNewTaskToReadyList+0x114>)
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <prvAddNewTaskToReadyList+0x118>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <prvAddNewTaskToReadyList+0x32>
 80038be:	4a3e      	ldr	r2, [pc, #248]	; (80039b8 <prvAddNewTaskToReadyList+0x118>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <prvAddNewTaskToReadyList+0x114>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d110      	bne.n	80038ee <prvAddNewTaskToReadyList+0x4e>
 80038cc:	f000 fefe 	bl	80046cc <prvInitialiseTaskLists>
 80038d0:	e00d      	b.n	80038ee <prvAddNewTaskToReadyList+0x4e>
 80038d2:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <prvAddNewTaskToReadyList+0x11c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <prvAddNewTaskToReadyList+0x4e>
 80038da:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <prvAddNewTaskToReadyList+0x118>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d802      	bhi.n	80038ee <prvAddNewTaskToReadyList+0x4e>
 80038e8:	4a33      	ldr	r2, [pc, #204]	; (80039b8 <prvAddNewTaskToReadyList+0x118>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <prvAddNewTaskToReadyList+0x120>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a32      	ldr	r2, [pc, #200]	; (80039c0 <prvAddNewTaskToReadyList+0x120>)
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <prvAddNewTaskToReadyList+0x120>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	649a      	str	r2, [r3, #72]	; 0x48
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <prvAddNewTaskToReadyList+0x124>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d903      	bls.n	8003914 <prvAddNewTaskToReadyList+0x74>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <prvAddNewTaskToReadyList+0x124>)
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	492b      	ldr	r1, [pc, #172]	; (80039c8 <prvAddNewTaskToReadyList+0x128>)
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	3304      	adds	r3, #4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	3204      	adds	r2, #4
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	1d1a      	adds	r2, r3, #4
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <prvAddNewTaskToReadyList+0x128>)
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	615a      	str	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	4919      	ldr	r1, [pc, #100]	; (80039c8 <prvAddNewTaskToReadyList+0x128>)
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1c59      	adds	r1, r3, #1
 8003972:	4815      	ldr	r0, [pc, #84]	; (80039c8 <prvAddNewTaskToReadyList+0x128>)
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4403      	add	r3, r0
 800397e:	6019      	str	r1, [r3, #0]
 8003980:	f001 fdfe 	bl	8005580 <vPortExitCritical>
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <prvAddNewTaskToReadyList+0x11c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <prvAddNewTaskToReadyList+0x10a>
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <prvAddNewTaskToReadyList+0x118>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	429a      	cmp	r2, r3
 8003998:	d207      	bcs.n	80039aa <prvAddNewTaskToReadyList+0x10a>
 800399a:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <prvAddNewTaskToReadyList+0x12c>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000184 	.word	0x20000184
 80039b8:	200000ac 	.word	0x200000ac
 80039bc:	20000190 	.word	0x20000190
 80039c0:	200001a0 	.word	0x200001a0
 80039c4:	2000018c 	.word	0x2000018c
 80039c8:	200000b0 	.word	0x200000b0
 80039cc:	e000ed04 	.word	0xe000ed04

080039d0 <vTaskPrioritySet>:
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d90a      	bls.n	80039fa <vTaskPrioritySet+0x2a>
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <vTaskPrioritySet+0x28>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d901      	bls.n	8003a04 <vTaskPrioritySet+0x34>
 8003a00:	2304      	movs	r3, #4
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	f001 fd8c 	bl	8005520 <vPortEnterCritical>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <vTaskPrioritySet+0x44>
 8003a0e:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <vTaskPrioritySet+0x17c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e000      	b.n	8003a16 <vTaskPrioritySet+0x46>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	f000 808c 	beq.w	8003b40 <vTaskPrioritySet+0x170>
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d90d      	bls.n	8003a4c <vTaskPrioritySet+0x7c>
 8003a30:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <vTaskPrioritySet+0x17c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d00f      	beq.n	8003a5a <vTaskPrioritySet+0x8a>
 8003a3a:	4b44      	ldr	r3, [pc, #272]	; (8003b4c <vTaskPrioritySet+0x17c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d309      	bcc.n	8003a5a <vTaskPrioritySet+0x8a>
 8003a46:	2301      	movs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	e006      	b.n	8003a5a <vTaskPrioritySet+0x8a>
 8003a4c:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <vTaskPrioritySet+0x17c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d101      	bne.n	8003a5a <vTaskPrioritySet+0x8a>
 8003a56:	2301      	movs	r3, #1
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d102      	bne.n	8003a72 <vTaskPrioritySet+0xa2>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	651a      	str	r2, [r3, #80]	; 0x50
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db04      	blt.n	8003a8a <vTaskPrioritySet+0xba>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f1c3 0205 	rsb	r2, r3, #5
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	619a      	str	r2, [r3, #24]
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	6959      	ldr	r1, [r3, #20]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <vTaskPrioritySet+0x180>)
 8003a9a:	4413      	add	r3, r2
 8003a9c:	4299      	cmp	r1, r3
 8003a9e:	d144      	bne.n	8003b2a <vTaskPrioritySet+0x15a>
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fc22 	bl	80052ee <uxListRemove>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aae:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <vTaskPrioritySet+0x184>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d903      	bls.n	8003abe <vTaskPrioritySet+0xee>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	4a26      	ldr	r2, [pc, #152]	; (8003b54 <vTaskPrioritySet+0x184>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac2:	4923      	ldr	r1, [pc, #140]	; (8003b50 <vTaskPrioritySet+0x180>)
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3304      	adds	r3, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	3204      	adds	r2, #4
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <vTaskPrioritySet+0x180>)
 8003b02:	441a      	add	r2, r3
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	615a      	str	r2, [r3, #20]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	4910      	ldr	r1, [pc, #64]	; (8003b50 <vTaskPrioritySet+0x180>)
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1c59      	adds	r1, r3, #1
 8003b1c:	480c      	ldr	r0, [pc, #48]	; (8003b50 <vTaskPrioritySet+0x180>)
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4403      	add	r3, r0
 8003b28:	6019      	str	r1, [r3, #0]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <vTaskPrioritySet+0x170>
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <vTaskPrioritySet+0x188>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f001 fd1e 	bl	8005580 <vPortExitCritical>
 8003b44:	bf00      	nop
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200000ac 	.word	0x200000ac
 8003b50:	200000b0 	.word	0x200000b0
 8003b54:	2000018c 	.word	0x2000018c
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <vTaskStartScheduler>:
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <vTaskStartScheduler+0x88>)
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	491e      	ldr	r1, [pc, #120]	; (8003be8 <vTaskStartScheduler+0x8c>)
 8003b70:	481e      	ldr	r0, [pc, #120]	; (8003bec <vTaskStartScheduler+0x90>)
 8003b72:	f7ff fdc1 	bl	80036f8 <xTaskCreate>
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d102      	bne.n	8003b84 <vTaskStartScheduler+0x28>
 8003b7e:	f001 f8ad 	bl	8004cdc <xTimerCreateTimerTask>
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d116      	bne.n	8003bb8 <vTaskStartScheduler+0x5c>
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	bf00      	nop
 8003b9e:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <vTaskStartScheduler+0x94>)
 8003ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <vTaskStartScheduler+0x98>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <vTaskStartScheduler+0x9c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	f001 fc43 	bl	800543c <xPortStartScheduler>
 8003bb6:	e00e      	b.n	8003bd6 <vTaskStartScheduler+0x7a>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d10a      	bne.n	8003bd6 <vTaskStartScheduler+0x7a>
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <vTaskStartScheduler+0x78>
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <vTaskStartScheduler+0xa0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200001a8 	.word	0x200001a8
 8003be8:	08005b48 	.word	0x08005b48
 8003bec:	080045e1 	.word	0x080045e1
 8003bf0:	200001a4 	.word	0x200001a4
 8003bf4:	20000190 	.word	0x20000190
 8003bf8:	20000188 	.word	0x20000188
 8003bfc:	20000010 	.word	0x20000010

08003c00 <vTaskSuspendAll>:
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <vTaskSuspendAll+0x18>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	4a03      	ldr	r2, [pc, #12]	; (8003c18 <vTaskSuspendAll+0x18>)
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	200001ac 	.word	0x200001ac

08003c1c <prvGetExpectedIdleTime>:
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	2300      	movs	r3, #0
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <prvGetExpectedIdleTime+0x58>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <prvGetExpectedIdleTime+0x16>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <prvGetExpectedIdleTime+0x5c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <prvGetExpectedIdleTime+0x26>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	e012      	b.n	8003c68 <prvGetExpectedIdleTime+0x4c>
 8003c42:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <prvGetExpectedIdleTime+0x60>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d902      	bls.n	8003c50 <prvGetExpectedIdleTime+0x34>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	e00b      	b.n	8003c68 <prvGetExpectedIdleTime+0x4c>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <prvGetExpectedIdleTime+0x40>
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	e005      	b.n	8003c68 <prvGetExpectedIdleTime+0x4c>
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <prvGetExpectedIdleTime+0x64>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <prvGetExpectedIdleTime+0x68>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	607b      	str	r3, [r7, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	2000018c 	.word	0x2000018c
 8003c78:	200000ac 	.word	0x200000ac
 8003c7c:	200000b0 	.word	0x200000b0
 8003c80:	200001a4 	.word	0x200001a4
 8003c84:	20000188 	.word	0x20000188

08003c88 <xTaskResumeAll>:
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	4b71      	ldr	r3, [pc, #452]	; (8003e5c <xTaskResumeAll+0x1d4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <xTaskResumeAll+0x2c>
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <xTaskResumeAll+0x2a>
 8003cb4:	f001 fc34 	bl	8005520 <vPortEnterCritical>
 8003cb8:	4b68      	ldr	r3, [pc, #416]	; (8003e5c <xTaskResumeAll+0x1d4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	4a67      	ldr	r2, [pc, #412]	; (8003e5c <xTaskResumeAll+0x1d4>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <xTaskResumeAll+0x1d4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f040 80c1 	bne.w	8003e4e <xTaskResumeAll+0x1c6>
 8003ccc:	4b64      	ldr	r3, [pc, #400]	; (8003e60 <xTaskResumeAll+0x1d8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80bc 	beq.w	8003e4e <xTaskResumeAll+0x1c6>
 8003cd6:	e08b      	b.n	8003df0 <xTaskResumeAll+0x168>
 8003cd8:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <xTaskResumeAll+0x1dc>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	6a12      	ldr	r2, [r2, #32]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	69fa      	ldr	r2, [r7, #28]
 8003cf6:	69d2      	ldr	r2, [r2, #28]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3318      	adds	r3, #24
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d103      	bne.n	8003d0e <xTaskResumeAll+0x86>
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2200      	movs	r2, #0
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1e5a      	subs	r2, r3, #1
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	68d2      	ldr	r2, [r2, #12]
 8003d2c:	609a      	str	r2, [r3, #8]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	6892      	ldr	r2, [r2, #8]
 8003d36:	605a      	str	r2, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d103      	bne.n	8003d4c <xTaskResumeAll+0xc4>
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	615a      	str	r2, [r3, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	1e5a      	subs	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	4b41      	ldr	r3, [pc, #260]	; (8003e68 <xTaskResumeAll+0x1e0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d903      	bls.n	8003d70 <xTaskResumeAll+0xe8>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a3e      	ldr	r2, [pc, #248]	; (8003e68 <xTaskResumeAll+0x1e0>)
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	493d      	ldr	r1, [pc, #244]	; (8003e6c <xTaskResumeAll+0x1e4>)
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	3304      	adds	r3, #4
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	3204      	adds	r2, #4
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	1d1a      	adds	r2, r3, #4
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4a2e      	ldr	r2, [pc, #184]	; (8003e6c <xTaskResumeAll+0x1e4>)
 8003db4:	441a      	add	r2, r3
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	615a      	str	r2, [r3, #20]
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbe:	492b      	ldr	r1, [pc, #172]	; (8003e6c <xTaskResumeAll+0x1e4>)
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	1c59      	adds	r1, r3, #1
 8003dce:	4827      	ldr	r0, [pc, #156]	; (8003e6c <xTaskResumeAll+0x1e4>)
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4403      	add	r3, r0
 8003dda:	6019      	str	r1, [r3, #0]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de0:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <xTaskResumeAll+0x1e8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <xTaskResumeAll+0x168>
 8003dea:	4b22      	ldr	r3, [pc, #136]	; (8003e74 <xTaskResumeAll+0x1ec>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <xTaskResumeAll+0x1dc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f47f af6f 	bne.w	8003cd8 <xTaskResumeAll+0x50>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <xTaskResumeAll+0x17c>
 8003e00:	f000 fce2 	bl	80047c8 <prvResetNextTaskUnblockTime>
 8003e04:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <xTaskResumeAll+0x1f0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d010      	beq.n	8003e32 <xTaskResumeAll+0x1aa>
 8003e10:	f000 f8a8 	bl	8003f64 <xTaskIncrementTick>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <xTaskResumeAll+0x198>
 8003e1a:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <xTaskResumeAll+0x1ec>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f1      	bne.n	8003e10 <xTaskResumeAll+0x188>
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <xTaskResumeAll+0x1f0>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <xTaskResumeAll+0x1ec>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <xTaskResumeAll+0x1c6>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <xTaskResumeAll+0x1f4>)
 8003e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f001 fb97 	bl	8005580 <vPortExitCritical>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	4618      	mov	r0, r3
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	200001ac 	.word	0x200001ac
 8003e60:	20000184 	.word	0x20000184
 8003e64:	20000144 	.word	0x20000144
 8003e68:	2000018c 	.word	0x2000018c
 8003e6c:	200000b0 	.word	0x200000b0
 8003e70:	200000ac 	.word	0x200000ac
 8003e74:	20000198 	.word	0x20000198
 8003e78:	20000194 	.word	0x20000194
 8003e7c:	e000ed04 	.word	0xe000ed04

08003e80 <xTaskGetTickCount>:
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <xTaskGetTickCount+0x18>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	20000188 	.word	0x20000188

08003e9c <uxTaskGetNumberOfTasks>:
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	4b02      	ldr	r3, [pc, #8]	; (8003eac <uxTaskGetNumberOfTasks+0x10>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	20000184 	.word	0x20000184

08003eb0 <vTaskStepTick>:
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <vTaskStepTick+0xa4>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	441a      	add	r2, r3
 8003ec0:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <vTaskStepTick+0xa8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d90a      	bls.n	8003ede <vTaskStepTick+0x2e>
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	bf00      	nop
 8003edc:	e7fe      	b.n	8003edc <vTaskStepTick+0x2c>
 8003ede:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <vTaskStepTick+0xa4>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	441a      	add	r2, r3
 8003ee6:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <vTaskStepTick+0xa8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d128      	bne.n	8003f40 <vTaskStepTick+0x90>
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <vTaskStepTick+0xac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <vTaskStepTick+0x5c>
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <vTaskStepTick+0x5a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <vTaskStepTick+0x78>
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <vTaskStepTick+0x76>
 8003f28:	f001 fafa 	bl	8005520 <vPortEnterCritical>
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <vTaskStepTick+0xb0>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	4a0b      	ldr	r2, [pc, #44]	; (8003f60 <vTaskStepTick+0xb0>)
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	f001 fb23 	bl	8005580 <vPortExitCritical>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	607b      	str	r3, [r7, #4]
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <vTaskStepTick+0xa4>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4413      	add	r3, r2
 8003f48:	4a02      	ldr	r2, [pc, #8]	; (8003f54 <vTaskStepTick+0xa4>)
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000188 	.word	0x20000188
 8003f58:	200001a4 	.word	0x200001a4
 8003f5c:	200001ac 	.word	0x200001ac
 8003f60:	20000194 	.word	0x20000194

08003f64 <xTaskIncrementTick>:
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	4b7e      	ldr	r3, [pc, #504]	; (8004168 <xTaskIncrementTick+0x204>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 80ed 	bne.w	8004152 <xTaskIncrementTick+0x1ee>
 8003f78:	4b7c      	ldr	r3, [pc, #496]	; (800416c <xTaskIncrementTick+0x208>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	4a7a      	ldr	r2, [pc, #488]	; (800416c <xTaskIncrementTick+0x208>)
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d120      	bne.n	8003fce <xTaskIncrementTick+0x6a>
 8003f8c:	4b78      	ldr	r3, [pc, #480]	; (8004170 <xTaskIncrementTick+0x20c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <xTaskIncrementTick+0x48>
 8003f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	607b      	str	r3, [r7, #4]
 8003fa8:	bf00      	nop
 8003faa:	e7fe      	b.n	8003faa <xTaskIncrementTick+0x46>
 8003fac:	4b70      	ldr	r3, [pc, #448]	; (8004170 <xTaskIncrementTick+0x20c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	4b70      	ldr	r3, [pc, #448]	; (8004174 <xTaskIncrementTick+0x210>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6e      	ldr	r2, [pc, #440]	; (8004170 <xTaskIncrementTick+0x20c>)
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4a6e      	ldr	r2, [pc, #440]	; (8004174 <xTaskIncrementTick+0x210>)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <xTaskIncrementTick+0x214>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	4a6c      	ldr	r2, [pc, #432]	; (8004178 <xTaskIncrementTick+0x214>)
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	f000 fbfd 	bl	80047c8 <prvResetNextTaskUnblockTime>
 8003fce:	4b6b      	ldr	r3, [pc, #428]	; (800417c <xTaskIncrementTick+0x218>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a3a      	ldr	r2, [r7, #32]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	f0c0 80a7 	bcc.w	8004128 <xTaskIncrementTick+0x1c4>
 8003fda:	4b65      	ldr	r3, [pc, #404]	; (8004170 <xTaskIncrementTick+0x20c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d104      	bne.n	8003fee <xTaskIncrementTick+0x8a>
 8003fe4:	4b65      	ldr	r3, [pc, #404]	; (800417c <xTaskIncrementTick+0x218>)
 8003fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e09c      	b.n	8004128 <xTaskIncrementTick+0x1c4>
 8003fee:	4b60      	ldr	r3, [pc, #384]	; (8004170 <xTaskIncrementTick+0x20c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	6a3a      	ldr	r2, [r7, #32]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	429a      	cmp	r2, r3
 8004004:	d203      	bcs.n	800400e <xTaskIncrementTick+0xaa>
 8004006:	4a5d      	ldr	r2, [pc, #372]	; (800417c <xTaskIncrementTick+0x218>)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	e08c      	b.n	8004128 <xTaskIncrementTick+0x1c4>
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	68d2      	ldr	r2, [r2, #12]
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	6892      	ldr	r2, [r2, #8]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	3304      	adds	r3, #4
 8004030:	429a      	cmp	r2, r3
 8004032:	d103      	bne.n	800403c <xTaskIncrementTick+0xd8>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	605a      	str	r2, [r3, #4]
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2200      	movs	r2, #0
 8004040:	615a      	str	r2, [r3, #20]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	1e5a      	subs	r2, r3, #1
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01e      	beq.n	8004092 <xTaskIncrementTick+0x12e>
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	6a12      	ldr	r2, [r2, #32]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	69d2      	ldr	r2, [r2, #28]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	3318      	adds	r3, #24
 8004076:	429a      	cmp	r2, r3
 8004078:	d103      	bne.n	8004082 <xTaskIncrementTick+0x11e>
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	6a1a      	ldr	r2, [r3, #32]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2200      	movs	r2, #0
 8004086:	629a      	str	r2, [r3, #40]	; 0x28
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	1e5a      	subs	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004096:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <xTaskIncrementTick+0x21c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d903      	bls.n	80040a6 <xTaskIncrementTick+0x142>
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	4a37      	ldr	r2, [pc, #220]	; (8004180 <xTaskIncrementTick+0x21c>)
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040aa:	4936      	ldr	r1, [pc, #216]	; (8004184 <xTaskIncrementTick+0x220>)
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3304      	adds	r3, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	3204      	adds	r2, #4
 80040d2:	605a      	str	r2, [r3, #4]
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	1d1a      	adds	r2, r3, #4
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4a26      	ldr	r2, [pc, #152]	; (8004184 <xTaskIncrementTick+0x220>)
 80040ea:	441a      	add	r2, r3
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	615a      	str	r2, [r3, #20]
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4923      	ldr	r1, [pc, #140]	; (8004184 <xTaskIncrementTick+0x220>)
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	1c59      	adds	r1, r3, #1
 8004104:	481f      	ldr	r0, [pc, #124]	; (8004184 <xTaskIncrementTick+0x220>)
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4403      	add	r3, r0
 8004110:	6019      	str	r1, [r3, #0]
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004116:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <xTaskIncrementTick+0x224>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	429a      	cmp	r2, r3
 800411e:	f67f af5c 	bls.w	8003fda <xTaskIncrementTick+0x76>
 8004122:	2301      	movs	r3, #1
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	e758      	b.n	8003fda <xTaskIncrementTick+0x76>
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <xTaskIncrementTick+0x224>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412e:	4915      	ldr	r1, [pc, #84]	; (8004184 <xTaskIncrementTick+0x220>)
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d901      	bls.n	8004144 <xTaskIncrementTick+0x1e0>
 8004140:	2301      	movs	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
 8004144:	4b11      	ldr	r3, [pc, #68]	; (800418c <xTaskIncrementTick+0x228>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <xTaskIncrementTick+0x1f8>
 800414c:	2301      	movs	r3, #1
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	e004      	b.n	800415c <xTaskIncrementTick+0x1f8>
 8004152:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <xTaskIncrementTick+0x22c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3301      	adds	r3, #1
 8004158:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <xTaskIncrementTick+0x22c>)
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	4618      	mov	r0, r3
 8004160:	3728      	adds	r7, #40	; 0x28
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200001ac 	.word	0x200001ac
 800416c:	20000188 	.word	0x20000188
 8004170:	2000013c 	.word	0x2000013c
 8004174:	20000140 	.word	0x20000140
 8004178:	2000019c 	.word	0x2000019c
 800417c:	200001a4 	.word	0x200001a4
 8004180:	2000018c 	.word	0x2000018c
 8004184:	200000b0 	.word	0x200000b0
 8004188:	200000ac 	.word	0x200000ac
 800418c:	20000198 	.word	0x20000198
 8004190:	20000194 	.word	0x20000194

08004194 <vTaskSwitchContext>:
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	4b27      	ldr	r3, [pc, #156]	; (8004238 <vTaskSwitchContext+0xa4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <vTaskSwitchContext+0x16>
 80041a2:	4b26      	ldr	r3, [pc, #152]	; (800423c <vTaskSwitchContext+0xa8>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e041      	b.n	800422e <vTaskSwitchContext+0x9a>
 80041aa:	4b24      	ldr	r3, [pc, #144]	; (800423c <vTaskSwitchContext+0xa8>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	4b23      	ldr	r3, [pc, #140]	; (8004240 <vTaskSwitchContext+0xac>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e010      	b.n	80041da <vTaskSwitchContext+0x46>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <vTaskSwitchContext+0x40>
 80041be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <vTaskSwitchContext+0x3e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	491a      	ldr	r1, [pc, #104]	; (8004244 <vTaskSwitchContext+0xb0>)
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0e4      	beq.n	80041b8 <vTaskSwitchContext+0x24>
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4a12      	ldr	r2, [pc, #72]	; (8004244 <vTaskSwitchContext+0xb0>)
 80041fa:	4413      	add	r3, r2
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	3308      	adds	r3, #8
 8004210:	429a      	cmp	r2, r3
 8004212:	d104      	bne.n	800421e <vTaskSwitchContext+0x8a>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a08      	ldr	r2, [pc, #32]	; (8004248 <vTaskSwitchContext+0xb4>)
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4a05      	ldr	r2, [pc, #20]	; (8004240 <vTaskSwitchContext+0xac>)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr
 8004238:	200001ac 	.word	0x200001ac
 800423c:	20000198 	.word	0x20000198
 8004240:	2000018c 	.word	0x2000018c
 8004244:	200000b0 	.word	0x200000b0
 8004248:	200000ac 	.word	0x200000ac

0800424c <vTaskPlaceOnEventList>:
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <vTaskPlaceOnEventList+0x26>
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <vTaskPlaceOnEventList+0x24>
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <vTaskPlaceOnEventList+0x44>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3318      	adds	r3, #24
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 ffff 	bl	800527e <vListInsert>
 8004280:	2101      	movs	r1, #1
 8004282:	6838      	ldr	r0, [r7, #0]
 8004284:	f000 fcbc 	bl	8004c00 <prvAddCurrentTaskToDelayedList>
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	200000ac 	.word	0x200000ac

08004294 <vTaskPlaceOnEventListRestricted>:
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <vTaskPlaceOnEventListRestricted+0x28>
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <vTaskPlaceOnEventListRestricted+0x26>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <vTaskPlaceOnEventListRestricted+0x88>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	61da      	str	r2, [r3, #28]
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <vTaskPlaceOnEventListRestricted+0x88>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	6892      	ldr	r2, [r2, #8]
 80042d2:	621a      	str	r2, [r3, #32]
 80042d4:	4b11      	ldr	r3, [pc, #68]	; (800431c <vTaskPlaceOnEventListRestricted+0x88>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	3218      	adds	r2, #24
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <vTaskPlaceOnEventListRestricted+0x88>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f103 0218 	add.w	r2, r3, #24
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <vTaskPlaceOnEventListRestricted+0x88>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <vTaskPlaceOnEventListRestricted+0x76>
 8004304:	f04f 33ff 	mov.w	r3, #4294967295
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	68b8      	ldr	r0, [r7, #8]
 800430e:	f000 fc77 	bl	8004c00 <prvAddCurrentTaskToDelayedList>
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	200000ac 	.word	0x200000ac

08004320 <xTaskRemoveFromEventList>:
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <xTaskRemoveFromEventList+0x2c>
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	bf00      	nop
 800434a:	e7fe      	b.n	800434a <xTaskRemoveFromEventList+0x2a>
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	6a3a      	ldr	r2, [r7, #32]
 8004358:	6a12      	ldr	r2, [r2, #32]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	6a3a      	ldr	r2, [r7, #32]
 8004362:	69d2      	ldr	r2, [r2, #28]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	3318      	adds	r3, #24
 800436e:	429a      	cmp	r2, r3
 8004370:	d103      	bne.n	800437a <xTaskRemoveFromEventList+0x5a>
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	2200      	movs	r2, #0
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	4b4b      	ldr	r3, [pc, #300]	; (80044b8 <xTaskRemoveFromEventList+0x198>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d161      	bne.n	8004456 <xTaskRemoveFromEventList+0x136>
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	68d2      	ldr	r2, [r2, #12]
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	6892      	ldr	r2, [r2, #8]
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	3304      	adds	r3, #4
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d103      	bne.n	80043c0 <xTaskRemoveFromEventList+0xa0>
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	605a      	str	r2, [r3, #4]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2200      	movs	r2, #0
 80043c4:	615a      	str	r2, [r3, #20]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1e5a      	subs	r2, r3, #1
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	4b39      	ldr	r3, [pc, #228]	; (80044bc <xTaskRemoveFromEventList+0x19c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d903      	bls.n	80043e4 <xTaskRemoveFromEventList+0xc4>
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	4a36      	ldr	r2, [pc, #216]	; (80044bc <xTaskRemoveFromEventList+0x19c>)
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	4935      	ldr	r1, [pc, #212]	; (80044c0 <xTaskRemoveFromEventList+0x1a0>)
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	3304      	adds	r3, #4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	60da      	str	r2, [r3, #12]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	3204      	adds	r2, #4
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	1d1a      	adds	r2, r3, #4
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <xTaskRemoveFromEventList+0x1a0>)
 8004428:	441a      	add	r2, r3
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	615a      	str	r2, [r3, #20]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004432:	4923      	ldr	r1, [pc, #140]	; (80044c0 <xTaskRemoveFromEventList+0x1a0>)
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1c59      	adds	r1, r3, #1
 8004442:	481f      	ldr	r0, [pc, #124]	; (80044c0 <xTaskRemoveFromEventList+0x1a0>)
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4403      	add	r3, r0
 800444e:	6019      	str	r1, [r3, #0]
 8004450:	f000 f9ba 	bl	80047c8 <prvResetNextTaskUnblockTime>
 8004454:	e01b      	b.n	800448e <xTaskRemoveFromEventList+0x16e>
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <xTaskRemoveFromEventList+0x1a4>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	61da      	str	r2, [r3, #28]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	621a      	str	r2, [r3, #32]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	3218      	adds	r2, #24
 8004472:	605a      	str	r2, [r3, #4]
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f103 0218 	add.w	r2, r3, #24
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	609a      	str	r2, [r3, #8]
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	4a10      	ldr	r2, [pc, #64]	; (80044c4 <xTaskRemoveFromEventList+0x1a4>)
 8004482:	629a      	str	r2, [r3, #40]	; 0x28
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <xTaskRemoveFromEventList+0x1a4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3301      	adds	r3, #1
 800448a:	4a0e      	ldr	r2, [pc, #56]	; (80044c4 <xTaskRemoveFromEventList+0x1a4>)
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <xTaskRemoveFromEventList+0x1a8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	429a      	cmp	r2, r3
 800449a:	d905      	bls.n	80044a8 <xTaskRemoveFromEventList+0x188>
 800449c:	2301      	movs	r3, #1
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <xTaskRemoveFromEventList+0x1ac>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e001      	b.n	80044ac <xTaskRemoveFromEventList+0x18c>
 80044a8:	2300      	movs	r3, #0
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	4618      	mov	r0, r3
 80044b0:	3728      	adds	r7, #40	; 0x28
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200001ac 	.word	0x200001ac
 80044bc:	2000018c 	.word	0x2000018c
 80044c0:	200000b0 	.word	0x200000b0
 80044c4:	20000144 	.word	0x20000144
 80044c8:	200000ac 	.word	0x200000ac
 80044cc:	20000198 	.word	0x20000198

080044d0 <vTaskInternalSetTimeOutState>:
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <vTaskInternalSetTimeOutState+0x24>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <vTaskInternalSetTimeOutState+0x28>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	605a      	str	r2, [r3, #4]
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	2000019c 	.word	0x2000019c
 80044f8:	20000188 	.word	0x20000188

080044fc <xTaskCheckForTimeOut>:
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10a      	bne.n	8004522 <xTaskCheckForTimeOut+0x26>
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	bf00      	nop
 8004520:	e7fe      	b.n	8004520 <xTaskCheckForTimeOut+0x24>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <xTaskCheckForTimeOut+0x42>
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <xTaskCheckForTimeOut+0x40>
 800453e:	f000 ffef 	bl	8005520 <vPortEnterCritical>
 8004542:	4b1f      	ldr	r3, [pc, #124]	; (80045c0 <xTaskCheckForTimeOut+0xc4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	61bb      	str	r3, [r7, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455a:	d102      	bne.n	8004562 <xTaskCheckForTimeOut+0x66>
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	e026      	b.n	80045b0 <xTaskCheckForTimeOut+0xb4>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <xTaskCheckForTimeOut+0xc8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d00a      	beq.n	8004584 <xTaskCheckForTimeOut+0x88>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	429a      	cmp	r2, r3
 8004576:	d305      	bcc.n	8004584 <xTaskCheckForTimeOut+0x88>
 8004578:	2301      	movs	r3, #1
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e015      	b.n	80045b0 <xTaskCheckForTimeOut+0xb4>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	429a      	cmp	r2, r3
 800458c:	d20b      	bcs.n	80045a6 <xTaskCheckForTimeOut+0xaa>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	1ad2      	subs	r2, r2, r3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ff98 	bl	80044d0 <vTaskInternalSetTimeOutState>
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e004      	b.n	80045b0 <xTaskCheckForTimeOut+0xb4>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	2301      	movs	r3, #1
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	f000 ffe6 	bl	8005580 <vPortExitCritical>
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	4618      	mov	r0, r3
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000188 	.word	0x20000188
 80045c4:	2000019c 	.word	0x2000019c

080045c8 <vTaskMissedYield>:
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <vTaskMissedYield+0x14>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	bf00      	nop
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	20000198 	.word	0x20000198

080045e0 <prvIdleTask>:
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	f000 f8b0 	bl	800474c <prvCheckTasksWaitingTermination>
 80045ec:	4b18      	ldr	r3, [pc, #96]	; (8004650 <prvIdleTask+0x70>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d907      	bls.n	8004604 <prvIdleTask+0x24>
 80045f4:	4b17      	ldr	r3, [pc, #92]	; (8004654 <prvIdleTask+0x74>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f7ff fb0a 	bl	8003c1c <prvGetExpectedIdleTime>
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d9eb      	bls.n	80045e8 <prvIdleTask+0x8>
 8004610:	f7ff faf6 	bl	8003c00 <vTaskSuspendAll>
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <prvIdleTask+0x78>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b10      	ldr	r3, [pc, #64]	; (800465c <prvIdleTask+0x7c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d20a      	bcs.n	8004636 <prvIdleTask+0x56>
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <prvIdleTask+0x54>
 8004636:	f7ff faf1 	bl	8003c1c <prvGetExpectedIdleTime>
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d902      	bls.n	8004648 <prvIdleTask+0x68>
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f001 f80a 	bl	800565c <vPortSuppressTicksAndSleep>
 8004648:	f7ff fb1e 	bl	8003c88 <xTaskResumeAll>
 800464c:	e7cc      	b.n	80045e8 <prvIdleTask+0x8>
 800464e:	bf00      	nop
 8004650:	200000b0 	.word	0x200000b0
 8004654:	e000ed04 	.word	0xe000ed04
 8004658:	200001a4 	.word	0x200001a4
 800465c:	20000188 	.word	0x20000188

08004660 <eTaskConfirmSleepModeStatus>:
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	2301      	movs	r3, #1
 8004668:	603b      	str	r3, [r7, #0]
 800466a:	2301      	movs	r3, #1
 800466c:	71fb      	strb	r3, [r7, #7]
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <eTaskConfirmSleepModeStatus+0x58>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <eTaskConfirmSleepModeStatus+0x1c>
 8004676:	2300      	movs	r3, #0
 8004678:	71fb      	strb	r3, [r7, #7]
 800467a:	e017      	b.n	80046ac <eTaskConfirmSleepModeStatus+0x4c>
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <eTaskConfirmSleepModeStatus+0x5c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <eTaskConfirmSleepModeStatus+0x2a>
 8004684:	2300      	movs	r3, #0
 8004686:	71fb      	strb	r3, [r7, #7]
 8004688:	e010      	b.n	80046ac <eTaskConfirmSleepModeStatus+0x4c>
 800468a:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <eTaskConfirmSleepModeStatus+0x60>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <eTaskConfirmSleepModeStatus+0x38>
 8004692:	2300      	movs	r3, #0
 8004694:	71fb      	strb	r3, [r7, #7]
 8004696:	e009      	b.n	80046ac <eTaskConfirmSleepModeStatus+0x4c>
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <eTaskConfirmSleepModeStatus+0x64>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <eTaskConfirmSleepModeStatus+0x68>)
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	1acb      	subs	r3, r1, r3
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d101      	bne.n	80046ac <eTaskConfirmSleepModeStatus+0x4c>
 80046a8:	2302      	movs	r3, #2
 80046aa:	71fb      	strb	r3, [r7, #7]
 80046ac:	79fb      	ldrb	r3, [r7, #7]
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bc80      	pop	{r7}
 80046b6:	4770      	bx	lr
 80046b8:	20000144 	.word	0x20000144
 80046bc:	20000198 	.word	0x20000198
 80046c0:	20000194 	.word	0x20000194
 80046c4:	20000170 	.word	0x20000170
 80046c8:	20000184 	.word	0x20000184

080046cc <prvInitialiseTaskLists>:
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	e00c      	b.n	80046f2 <prvInitialiseTaskLists+0x26>
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4a12      	ldr	r2, [pc, #72]	; (800472c <prvInitialiseTaskLists+0x60>)
 80046e4:	4413      	add	r3, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fd9e 	bl	8005228 <vListInitialise>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3301      	adds	r3, #1
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d9ef      	bls.n	80046d8 <prvInitialiseTaskLists+0xc>
 80046f8:	480d      	ldr	r0, [pc, #52]	; (8004730 <prvInitialiseTaskLists+0x64>)
 80046fa:	f000 fd95 	bl	8005228 <vListInitialise>
 80046fe:	480d      	ldr	r0, [pc, #52]	; (8004734 <prvInitialiseTaskLists+0x68>)
 8004700:	f000 fd92 	bl	8005228 <vListInitialise>
 8004704:	480c      	ldr	r0, [pc, #48]	; (8004738 <prvInitialiseTaskLists+0x6c>)
 8004706:	f000 fd8f 	bl	8005228 <vListInitialise>
 800470a:	480c      	ldr	r0, [pc, #48]	; (800473c <prvInitialiseTaskLists+0x70>)
 800470c:	f000 fd8c 	bl	8005228 <vListInitialise>
 8004710:	480b      	ldr	r0, [pc, #44]	; (8004740 <prvInitialiseTaskLists+0x74>)
 8004712:	f000 fd89 	bl	8005228 <vListInitialise>
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <prvInitialiseTaskLists+0x78>)
 8004718:	4a05      	ldr	r2, [pc, #20]	; (8004730 <prvInitialiseTaskLists+0x64>)
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <prvInitialiseTaskLists+0x7c>)
 800471e:	4a05      	ldr	r2, [pc, #20]	; (8004734 <prvInitialiseTaskLists+0x68>)
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200000b0 	.word	0x200000b0
 8004730:	20000114 	.word	0x20000114
 8004734:	20000128 	.word	0x20000128
 8004738:	20000144 	.word	0x20000144
 800473c:	20000158 	.word	0x20000158
 8004740:	20000170 	.word	0x20000170
 8004744:	2000013c 	.word	0x2000013c
 8004748:	20000140 	.word	0x20000140

0800474c <prvCheckTasksWaitingTermination>:
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	e019      	b.n	8004788 <prvCheckTasksWaitingTermination+0x3c>
 8004754:	f000 fee4 	bl	8005520 <vPortEnterCritical>
 8004758:	4b10      	ldr	r3, [pc, #64]	; (800479c <prvCheckTasksWaitingTermination+0x50>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fdc2 	bl	80052ee <uxListRemove>
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <prvCheckTasksWaitingTermination+0x54>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3b01      	subs	r3, #1
 8004770:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <prvCheckTasksWaitingTermination+0x54>)
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <prvCheckTasksWaitingTermination+0x58>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3b01      	subs	r3, #1
 800477a:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <prvCheckTasksWaitingTermination+0x58>)
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	f000 feff 	bl	8005580 <vPortExitCritical>
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f810 	bl	80047a8 <prvDeleteTCB>
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <prvCheckTasksWaitingTermination+0x58>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e1      	bne.n	8004754 <prvCheckTasksWaitingTermination+0x8>
 8004790:	bf00      	nop
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000158 	.word	0x20000158
 80047a0:	20000184 	.word	0x20000184
 80047a4:	2000016c 	.word	0x2000016c

080047a8 <prvDeleteTCB>:
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fd25 	bl	8005204 <vPortFree>
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fd22 	bl	8005204 <vPortFree>
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <prvResetNextTaskUnblockTime>:
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <prvResetNextTaskUnblockTime+0x2c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <prvResetNextTaskUnblockTime+0x18>
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <prvResetNextTaskUnblockTime+0x30>)
 80047d8:	f04f 32ff 	mov.w	r2, #4294967295
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e005      	b.n	80047ec <prvResetNextTaskUnblockTime+0x24>
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <prvResetNextTaskUnblockTime+0x2c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a03      	ldr	r2, [pc, #12]	; (80047f8 <prvResetNextTaskUnblockTime+0x30>)
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	2000013c 	.word	0x2000013c
 80047f8:	200001a4 	.word	0x200001a4

080047fc <xTaskGetSchedulerState>:
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <xTaskGetSchedulerState+0x34>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <xTaskGetSchedulerState+0x14>
 800480a:	2301      	movs	r3, #1
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	e008      	b.n	8004822 <xTaskGetSchedulerState+0x26>
 8004810:	4b08      	ldr	r3, [pc, #32]	; (8004834 <xTaskGetSchedulerState+0x38>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d102      	bne.n	800481e <xTaskGetSchedulerState+0x22>
 8004818:	2302      	movs	r3, #2
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	e001      	b.n	8004822 <xTaskGetSchedulerState+0x26>
 800481e:	2300      	movs	r3, #0
 8004820:	607b      	str	r3, [r7, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000190 	.word	0x20000190
 8004834:	200001ac 	.word	0x200001ac

08004838 <xTaskPriorityInherit>:
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d079      	beq.n	8004942 <xTaskPriorityInherit+0x10a>
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004852:	4b3e      	ldr	r3, [pc, #248]	; (800494c <xTaskPriorityInherit+0x114>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	429a      	cmp	r2, r3
 800485a:	d269      	bcs.n	8004930 <xTaskPriorityInherit+0xf8>
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	db06      	blt.n	8004872 <xTaskPriorityInherit+0x3a>
 8004864:	4b39      	ldr	r3, [pc, #228]	; (800494c <xTaskPriorityInherit+0x114>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	f1c3 0205 	rsb	r2, r3, #5
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	619a      	str	r2, [r3, #24]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6959      	ldr	r1, [r3, #20]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4a33      	ldr	r2, [pc, #204]	; (8004950 <xTaskPriorityInherit+0x118>)
 8004884:	4413      	add	r3, r2
 8004886:	4299      	cmp	r1, r3
 8004888:	d14a      	bne.n	8004920 <xTaskPriorityInherit+0xe8>
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	3304      	adds	r3, #4
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fd2d 	bl	80052ee <uxListRemove>
 8004894:	4b2d      	ldr	r3, [pc, #180]	; (800494c <xTaskPriorityInherit+0x114>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a2:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <xTaskPriorityInherit+0x11c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d903      	bls.n	80048b2 <xTaskPriorityInherit+0x7a>
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	4a29      	ldr	r2, [pc, #164]	; (8004954 <xTaskPriorityInherit+0x11c>)
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b6:	4926      	ldr	r1, [pc, #152]	; (8004950 <xTaskPriorityInherit+0x118>)
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	3304      	adds	r3, #4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	609a      	str	r2, [r3, #8]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	3204      	adds	r2, #4
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1d1a      	adds	r2, r3, #4
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a16      	ldr	r2, [pc, #88]	; (8004950 <xTaskPriorityInherit+0x118>)
 80048f6:	441a      	add	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	615a      	str	r2, [r3, #20]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004900:	4913      	ldr	r1, [pc, #76]	; (8004950 <xTaskPriorityInherit+0x118>)
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	1c59      	adds	r1, r3, #1
 8004910:	480f      	ldr	r0, [pc, #60]	; (8004950 <xTaskPriorityInherit+0x118>)
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4403      	add	r3, r0
 800491c:	6019      	str	r1, [r3, #0]
 800491e:	e004      	b.n	800492a <xTaskPriorityInherit+0xf2>
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <xTaskPriorityInherit+0x114>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	62da      	str	r2, [r3, #44]	; 0x2c
 800492a:	2301      	movs	r3, #1
 800492c:	617b      	str	r3, [r7, #20]
 800492e:	e008      	b.n	8004942 <xTaskPriorityInherit+0x10a>
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004934:	4b05      	ldr	r3, [pc, #20]	; (800494c <xTaskPriorityInherit+0x114>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	429a      	cmp	r2, r3
 800493c:	d201      	bcs.n	8004942 <xTaskPriorityInherit+0x10a>
 800493e:	2301      	movs	r3, #1
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	200000ac 	.word	0x200000ac
 8004950:	200000b0 	.word	0x200000b0
 8004954:	2000018c 	.word	0x2000018c

08004958 <xTaskPriorityDisinherit>:
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d07e      	beq.n	8004a6c <xTaskPriorityDisinherit+0x114>
 800496e:	4b42      	ldr	r3, [pc, #264]	; (8004a78 <xTaskPriorityDisinherit+0x120>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	429a      	cmp	r2, r3
 8004976:	d00a      	beq.n	800498e <xTaskPriorityDisinherit+0x36>
 8004978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	bf00      	nop
 800498c:	e7fe      	b.n	800498c <xTaskPriorityDisinherit+0x34>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <xTaskPriorityDisinherit+0x54>
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <xTaskPriorityDisinherit+0x52>
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	1e5a      	subs	r2, r3, #1
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	429a      	cmp	r2, r3
 80049c0:	d054      	beq.n	8004a6c <xTaskPriorityDisinherit+0x114>
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d150      	bne.n	8004a6c <xTaskPriorityDisinherit+0x114>
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	3304      	adds	r3, #4
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fc8d 	bl	80052ee <uxListRemove>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	f1c3 0205 	rsb	r2, r3, #5
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	619a      	str	r2, [r3, #24]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	4b23      	ldr	r3, [pc, #140]	; (8004a7c <xTaskPriorityDisinherit+0x124>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d903      	bls.n	80049fc <xTaskPriorityDisinherit+0xa4>
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	4a20      	ldr	r2, [pc, #128]	; (8004a7c <xTaskPriorityDisinherit+0x124>)
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a00:	491f      	ldr	r1, [pc, #124]	; (8004a80 <xTaskPriorityDisinherit+0x128>)
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	60da      	str	r2, [r3, #12]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	3204      	adds	r2, #4
 8004a28:	605a      	str	r2, [r3, #4]
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	1d1a      	adds	r2, r3, #4
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	609a      	str	r2, [r3, #8]
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4a10      	ldr	r2, [pc, #64]	; (8004a80 <xTaskPriorityDisinherit+0x128>)
 8004a40:	441a      	add	r2, r3
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	615a      	str	r2, [r3, #20]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4a:	490d      	ldr	r1, [pc, #52]	; (8004a80 <xTaskPriorityDisinherit+0x128>)
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	1c59      	adds	r1, r3, #1
 8004a5a:	4809      	ldr	r0, [pc, #36]	; (8004a80 <xTaskPriorityDisinherit+0x128>)
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4403      	add	r3, r0
 8004a66:	6019      	str	r1, [r3, #0]
 8004a68:	2301      	movs	r3, #1
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200000ac 	.word	0x200000ac
 8004a7c:	2000018c 	.word	0x2000018c
 8004a80:	200000b0 	.word	0x200000b0

08004a84 <vTaskPriorityDisinheritAfterTimeout>:
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	2301      	movs	r3, #1
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8093 	beq.w	8004bc4 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <vTaskPriorityDisinheritAfterTimeout+0x38>
 8004aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	bf00      	nop
 8004aba:	e7fe      	b.n	8004aba <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d902      	bls.n	8004acc <vTaskPriorityDisinheritAfterTimeout+0x48>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	e002      	b.n	8004ad2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d073      	beq.n	8004bc4 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d16e      	bne.n	8004bc4 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004ae6:	4b39      	ldr	r3, [pc, #228]	; (8004bcc <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a3a      	ldr	r2, [r7, #32]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d10a      	bne.n	8004b06 <vTaskPriorityDisinheritAfterTimeout+0x82>
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b10:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	db04      	blt.n	8004b24 <vTaskPriorityDisinheritAfterTimeout+0xa0>
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	f1c3 0205 	rsb	r2, r3, #5
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	619a      	str	r2, [r3, #24]
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	6959      	ldr	r1, [r3, #20]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004b34:	4413      	add	r3, r2
 8004b36:	4299      	cmp	r1, r3
 8004b38:	d144      	bne.n	8004bc4 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fbd5 	bl	80052ee <uxListRemove>
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <vTaskPriorityDisinheritAfterTimeout+0xd4>
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a1f      	ldr	r2, [pc, #124]	; (8004bd4 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	491c      	ldr	r1, [pc, #112]	; (8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	3304      	adds	r3, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	60da      	str	r2, [r3, #12]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	6a3a      	ldr	r2, [r7, #32]
 8004b82:	3204      	adds	r2, #4
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	1d1a      	adds	r2, r3, #4
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4a0d      	ldr	r2, [pc, #52]	; (8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004b9c:	441a      	add	r2, r3
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	615a      	str	r2, [r3, #20]
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba6:	490a      	ldr	r1, [pc, #40]	; (8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	1c59      	adds	r1, r3, #1
 8004bb6:	4806      	ldr	r0, [pc, #24]	; (8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4403      	add	r3, r0
 8004bc2:	6019      	str	r1, [r3, #0]
 8004bc4:	bf00      	nop
 8004bc6:	3728      	adds	r7, #40	; 0x28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	200000ac 	.word	0x200000ac
 8004bd0:	200000b0 	.word	0x200000b0
 8004bd4:	2000018c 	.word	0x2000018c

08004bd8 <pvTaskIncrementMutexHeldCount>:
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <pvTaskIncrementMutexHeldCount+0x16>
 8004be4:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bea:	3201      	adds	r2, #1
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54
 8004bee:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <pvTaskIncrementMutexHeldCount+0x24>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	200000ac 	.word	0x200000ac

08004c00 <prvAddCurrentTaskToDelayedList>:
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
 8004c0a:	4b2e      	ldr	r3, [pc, #184]	; (8004cc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fb69 	bl	80052ee <uxListRemove>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d124      	bne.n	8004c6e <prvAddCurrentTaskToDelayedList+0x6e>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d021      	beq.n	8004c6e <prvAddCurrentTaskToDelayedList+0x6e>
 8004c2a:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	6892      	ldr	r2, [r2, #8]
 8004c40:	60da      	str	r2, [r3, #12]
 8004c42:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	3204      	adds	r2, #4
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c5e:	615a      	str	r2, [r3, #20]
 8004c60:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a19      	ldr	r2, [pc, #100]	; (8004ccc <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	bf00      	nop
 8004c6c:	e026      	b.n	8004cbc <prvAddCurrentTaskToDelayedList+0xbc>
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d209      	bcs.n	8004c9a <prvAddCurrentTaskToDelayedList+0x9a>
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4619      	mov	r1, r3
 8004c92:	4610      	mov	r0, r2
 8004c94:	f000 faf3 	bl	800527e <vListInsert>
 8004c98:	e010      	b.n	8004cbc <prvAddCurrentTaskToDelayedList+0xbc>
 8004c9a:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	; (8004cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f000 fae9 	bl	800527e <vListInsert>
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d202      	bcs.n	8004cbc <prvAddCurrentTaskToDelayedList+0xbc>
 8004cb6:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	bf00      	nop
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000188 	.word	0x20000188
 8004cc8:	200000ac 	.word	0x200000ac
 8004ccc:	20000170 	.word	0x20000170
 8004cd0:	20000140 	.word	0x20000140
 8004cd4:	2000013c 	.word	0x2000013c
 8004cd8:	200001a4 	.word	0x200001a4

08004cdc <xTimerCreateTimerTask>:
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	f000 fa45 	bl	8005174 <prvCheckForValidListAndQueue>
 8004cea:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <xTimerCreateTimerTask+0x54>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <xTimerCreateTimerTask+0x2c>
 8004cf2:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <xTimerCreateTimerTask+0x58>)
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	490e      	ldr	r1, [pc, #56]	; (8004d38 <xTimerCreateTimerTask+0x5c>)
 8004d00:	480e      	ldr	r0, [pc, #56]	; (8004d3c <xTimerCreateTimerTask+0x60>)
 8004d02:	f7fe fcf9 	bl	80036f8 <xTaskCreate>
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <xTimerCreateTimerTask+0x48>
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	bf00      	nop
 8004d22:	e7fe      	b.n	8004d22 <xTimerCreateTimerTask+0x46>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	200001e0 	.word	0x200001e0
 8004d34:	200001e4 	.word	0x200001e4
 8004d38:	08005b50 	.word	0x08005b50
 8004d3c:	08004de5 	.word	0x08004de5

08004d40 <prvReloadTimer>:
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	e008      	b.n	8004d60 <prvReloadTimer+0x20>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	4798      	blx	r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	18d1      	adds	r1, r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f8db 	bl	8004f28 <prvInsertTimerInActiveList>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1ea      	bne.n	8004d4e <prvReloadTimer+0xe>
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <prvProcessExpiredTimer>:
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <prvProcessExpiredTimer+0x5c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 faa6 	bl	80052ee <uxListRemove>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <prvProcessExpiredTimer+0x38>
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff ffc3 	bl	8004d40 <prvReloadTimer>
 8004dba:	e008      	b.n	8004dce <prvProcessExpiredTimer+0x4a>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc2:	f023 0301 	bic.w	r3, r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	4798      	blx	r3
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	200001d8 	.word	0x200001d8

08004de4 <prvTimerTask>:
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	f107 0308 	add.w	r3, r7, #8
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 f857 	bl	8004ea4 <prvGetNextExpireTime>
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f803 	bl	8004e08 <prvProcessTimerOrBlockTask>
 8004e02:	f000 f8d3 	bl	8004fac <prvProcessReceivedCommands>
 8004e06:	e7f1      	b.n	8004dec <prvTimerTask+0x8>

08004e08 <prvProcessTimerOrBlockTask>:
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
 8004e12:	f7fe fef5 	bl	8003c00 <vTaskSuspendAll>
 8004e16:	f107 0308 	add.w	r3, r7, #8
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 f864 	bl	8004ee8 <prvSampleTimeNow>
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d130      	bne.n	8004e8a <prvProcessTimerOrBlockTask+0x82>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <prvProcessTimerOrBlockTask+0x3c>
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d806      	bhi.n	8004e44 <prvProcessTimerOrBlockTask+0x3c>
 8004e36:	f7fe ff27 	bl	8003c88 <xTaskResumeAll>
 8004e3a:	68f9      	ldr	r1, [r7, #12]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ffa1 	bl	8004d84 <prvProcessExpiredTimer>
 8004e42:	e024      	b.n	8004e8e <prvProcessTimerOrBlockTask+0x86>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <prvProcessTimerOrBlockTask+0x54>
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <prvProcessTimerOrBlockTask+0x90>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <prvProcessTimerOrBlockTask+0x50>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <prvProcessTimerOrBlockTask+0x52>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <prvProcessTimerOrBlockTask+0x94>)
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f7fe fc11 	bl	8003690 <vQueueWaitForMessageRestricted>
 8004e6e:	f7fe ff0b 	bl	8003c88 <xTaskResumeAll>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <prvProcessTimerOrBlockTask+0x86>
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <prvProcessTimerOrBlockTask+0x98>)
 8004e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	e001      	b.n	8004e8e <prvProcessTimerOrBlockTask+0x86>
 8004e8a:	f7fe fefd 	bl	8003c88 <xTaskResumeAll>
 8004e8e:	bf00      	nop
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	200001dc 	.word	0x200001dc
 8004e9c:	200001e0 	.word	0x200001e0
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <prvGetNextExpireTime>:
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <prvGetNextExpireTime+0x40>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <prvGetNextExpireTime+0x16>
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	e000      	b.n	8004ebc <prvGetNextExpireTime+0x18>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d105      	bne.n	8004ed4 <prvGetNextExpireTime+0x30>
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <prvGetNextExpireTime+0x40>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	e001      	b.n	8004ed8 <prvGetNextExpireTime+0x34>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr
 8004ee4:	200001d8 	.word	0x200001d8

08004ee8 <prvSampleTimeNow>:
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	f7fe ffc6 	bl	8003e80 <xTaskGetTickCount>
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <prvSampleTimeNow+0x3c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d205      	bcs.n	8004f0c <prvSampleTimeNow+0x24>
 8004f00:	f000 f912 	bl	8005128 <prvSwitchTimerLists>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <prvSampleTimeNow+0x2a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <prvSampleTimeNow+0x3c>)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200001e8 	.word	0x200001e8

08004f28 <prvInsertTimerInActiveList>:
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	605a      	str	r2, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	611a      	str	r2, [r3, #16]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d812      	bhi.n	8004f74 <prvInsertTimerInActiveList+0x4c>
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <prvInsertTimerInActiveList+0x3a>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e01b      	b.n	8004f9a <prvInsertTimerInActiveList+0x72>
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <prvInsertTimerInActiveList+0x7c>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f000 f986 	bl	800527e <vListInsert>
 8004f72:	e012      	b.n	8004f9a <prvInsertTimerInActiveList+0x72>
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d206      	bcs.n	8004f8a <prvInsertTimerInActiveList+0x62>
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <prvInsertTimerInActiveList+0x62>
 8004f84:	2301      	movs	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e007      	b.n	8004f9a <prvInsertTimerInActiveList+0x72>
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <prvInsertTimerInActiveList+0x80>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f000 f972 	bl	800527e <vListInsert>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	200001dc 	.word	0x200001dc
 8004fa8:	200001d8 	.word	0x200001d8

08004fac <prvProcessReceivedCommands>:
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	e0a6      	b.n	8005102 <prvProcessReceivedCommands+0x156>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f2c0 80a2 	blt.w	8005100 <prvProcessReceivedCommands+0x154>
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <prvProcessReceivedCommands+0x26>
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 f98e 	bl	80052ee <uxListRemove>
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff87 	bl	8004ee8 <prvSampleTimeNow>
 8004fda:	61b8      	str	r0, [r7, #24]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	f200 808e 	bhi.w	8005102 <prvProcessReceivedCommands+0x156>
 8004fe6:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <prvProcessReceivedCommands+0x40>)
 8004fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005079 	.word	0x08005079
 8004ff8:	0800508d 	.word	0x0800508d
 8004ffc:	080050d7 	.word	0x080050d7
 8005000:	08005011 	.word	0x08005011
 8005004:	08005011 	.word	0x08005011
 8005008:	08005079 	.word	0x08005079
 800500c:	0800508d 	.word	0x0800508d
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	18d1      	adds	r1, r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	69f8      	ldr	r0, [r7, #28]
 8005030:	f7ff ff7a 	bl	8004f28 <prvInsertTimerInActiveList>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d063      	beq.n	8005102 <prvProcessReceivedCommands+0x156>
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d009      	beq.n	800505c <prvProcessReceivedCommands+0xb0>
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	4413      	add	r3, r2
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4619      	mov	r1, r3
 8005054:	69f8      	ldr	r0, [r7, #28]
 8005056:	f7ff fe73 	bl	8004d40 <prvReloadTimer>
 800505a:	e008      	b.n	800506e <prvProcessReceivedCommands+0xc2>
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	b2da      	uxtb	r2, r3
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	69f8      	ldr	r0, [r7, #28]
 8005074:	4798      	blx	r3
 8005076:	e044      	b.n	8005102 <prvProcessReceivedCommands+0x156>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800508a:	e03a      	b.n	8005102 <prvProcessReceivedCommands+0x156>
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	b2da      	uxtb	r2, r3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	619a      	str	r2, [r3, #24]
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <prvProcessReceivedCommands+0x116>
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <prvProcessReceivedCommands+0x114>
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	18d1      	adds	r1, r2, r3
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	69f8      	ldr	r0, [r7, #28]
 80050d0:	f7ff ff2a 	bl	8004f28 <prvInsertTimerInActiveList>
 80050d4:	e015      	b.n	8005102 <prvProcessReceivedCommands+0x156>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d103      	bne.n	80050ec <prvProcessReceivedCommands+0x140>
 80050e4:	69f8      	ldr	r0, [r7, #28]
 80050e6:	f000 f88d 	bl	8005204 <vPortFree>
 80050ea:	e00a      	b.n	8005102 <prvProcessReceivedCommands+0x156>
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80050fe:	e000      	b.n	8005102 <prvProcessReceivedCommands+0x156>
 8005100:	bf00      	nop
 8005102:	4b08      	ldr	r3, [pc, #32]	; (8005124 <prvProcessReceivedCommands+0x178>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f107 0108 	add.w	r1, r7, #8
 800510a:	2200      	movs	r2, #0
 800510c:	4618      	mov	r0, r3
 800510e:	f7fd ff6b 	bl	8002fe8 <xQueueReceive>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f af4d 	bne.w	8004fb4 <prvProcessReceivedCommands+0x8>
 800511a:	bf00      	nop
 800511c:	bf00      	nop
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	200001e0 	.word	0x200001e0

08005128 <prvSwitchTimerLists>:
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	e009      	b.n	8005144 <prvSwitchTimerLists+0x1c>
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <prvSwitchTimerLists+0x44>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	f04f 31ff 	mov.w	r1, #4294967295
 800513e:	6838      	ldr	r0, [r7, #0]
 8005140:	f7ff fe20 	bl	8004d84 <prvProcessExpiredTimer>
 8005144:	4b09      	ldr	r3, [pc, #36]	; (800516c <prvSwitchTimerLists+0x44>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <prvSwitchTimerLists+0x8>
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <prvSwitchTimerLists+0x44>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	607b      	str	r3, [r7, #4]
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <prvSwitchTimerLists+0x48>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a04      	ldr	r2, [pc, #16]	; (800516c <prvSwitchTimerLists+0x44>)
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	4a04      	ldr	r2, [pc, #16]	; (8005170 <prvSwitchTimerLists+0x48>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200001d8 	.word	0x200001d8
 8005170:	200001dc 	.word	0x200001dc

08005174 <prvCheckForValidListAndQueue>:
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
 8005178:	f000 f9d2 	bl	8005520 <vPortEnterCritical>
 800517c:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <prvCheckForValidListAndQueue+0x54>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11d      	bne.n	80051c0 <prvCheckForValidListAndQueue+0x4c>
 8005184:	4811      	ldr	r0, [pc, #68]	; (80051cc <prvCheckForValidListAndQueue+0x58>)
 8005186:	f000 f84f 	bl	8005228 <vListInitialise>
 800518a:	4811      	ldr	r0, [pc, #68]	; (80051d0 <prvCheckForValidListAndQueue+0x5c>)
 800518c:	f000 f84c 	bl	8005228 <vListInitialise>
 8005190:	4b10      	ldr	r3, [pc, #64]	; (80051d4 <prvCheckForValidListAndQueue+0x60>)
 8005192:	4a0e      	ldr	r2, [pc, #56]	; (80051cc <prvCheckForValidListAndQueue+0x58>)
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <prvCheckForValidListAndQueue+0x64>)
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <prvCheckForValidListAndQueue+0x5c>)
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	2200      	movs	r2, #0
 800519e:	210c      	movs	r1, #12
 80051a0:	200a      	movs	r0, #10
 80051a2:	f7fd fc5b 	bl	8002a5c <xQueueGenericCreate>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <prvCheckForValidListAndQueue+0x54>)
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <prvCheckForValidListAndQueue+0x54>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <prvCheckForValidListAndQueue+0x4c>
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <prvCheckForValidListAndQueue+0x54>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4908      	ldr	r1, [pc, #32]	; (80051dc <prvCheckForValidListAndQueue+0x68>)
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fa1a 	bl	80035f4 <vQueueAddToRegistry>
 80051c0:	f000 f9de 	bl	8005580 <vPortExitCritical>
 80051c4:	bf00      	nop
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	200001e0 	.word	0x200001e0
 80051cc:	200001b0 	.word	0x200001b0
 80051d0:	200001c4 	.word	0x200001c4
 80051d4:	200001d8 	.word	0x200001d8
 80051d8:	200001dc 	.word	0x200001dc
 80051dc:	08005b58 	.word	0x08005b58

080051e0 <pvPortMalloc>:
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	f7fe fd0a 	bl	8003c00 <vTaskSuspendAll>
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fba3 	bl	8005938 <malloc>
 80051f2:	4603      	mov	r3, r0
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	f7fe fd47 	bl	8003c88 <xTaskResumeAll>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <vPortFree>:
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d006      	beq.n	8005220 <vPortFree+0x1c>
 8005212:	f7fe fcf5 	bl	8003c00 <vTaskSuspendAll>
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fb96 	bl	8005948 <free>
 800521c:	f7fe fd34 	bl	8003c88 <xTaskResumeAll>
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <vListInitialise>:
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f103 0208 	add.w	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	605a      	str	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	609a      	str	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f103 0208 	add.w	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	60da      	str	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f103 0208 	add.w	r2, r3, #8
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	611a      	str	r2, [r3, #16]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <vListInitialiseItem>:
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	611a      	str	r2, [r3, #16]
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr

0800527e <vListInsert>:
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d103      	bne.n	800529e <vListInsert+0x20>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e00c      	b.n	80052b8 <vListInsert+0x3a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3308      	adds	r3, #8
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e002      	b.n	80052ac <vListInsert+0x2e>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d2f6      	bcs.n	80052a6 <vListInsert+0x28>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	609a      	str	r2, [r3, #8]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <uxListRemove>:
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6892      	ldr	r2, [r2, #8]
 8005304:	609a      	str	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6852      	ldr	r2, [r2, #4]
 800530e:	605a      	str	r2, [r3, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d103      	bne.n	8005322 <uxListRemove+0x34>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	611a      	str	r2, [r3, #16]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr

08005340 <pxPortInitialiseStack>:
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3b04      	subs	r3, #4
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3b04      	subs	r3, #4
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f023 0201 	bic.w	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b04      	subs	r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <pxPortInitialiseStack+0x54>)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3b14      	subs	r3, #20
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3b20      	subs	r3, #32
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	08005399 	.word	0x08005399

08005398 <prvTaskExitError>:
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	2300      	movs	r3, #0
 80053a0:	607b      	str	r3, [r7, #4]
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <prvTaskExitError+0x54>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053aa:	d00a      	beq.n	80053c2 <prvTaskExitError+0x2a>
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	bf00      	nop
 80053c0:	e7fe      	b.n	80053c0 <prvTaskExitError+0x28>
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	60bb      	str	r3, [r7, #8]
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0fc      	beq.n	80053d8 <prvTaskExitError+0x40>
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000014 	.word	0x20000014

080053f0 <SVC_Handler>:
 80053f0:	4b07      	ldr	r3, [pc, #28]	; (8005410 <pxCurrentTCBConst2>)
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	6808      	ldr	r0, [r1, #0]
 80053f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053fa:	f380 8809 	msr	PSP, r0
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8811 	msr	BASEPRI, r0
 800540a:	f04e 0e0d 	orr.w	lr, lr, #13
 800540e:	4770      	bx	lr

08005410 <pxCurrentTCBConst2>:
 8005410:	200000ac 	.word	0x200000ac
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <prvPortStartFirstTask>:
 8005418:	4806      	ldr	r0, [pc, #24]	; (8005434 <prvPortStartFirstTask+0x1c>)
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	6800      	ldr	r0, [r0, #0]
 800541e:	f380 8808 	msr	MSP, r0
 8005422:	b662      	cpsie	i
 8005424:	b661      	cpsie	f
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	df00      	svc	0
 8005430:	bf00      	nop
 8005432:	0000      	.short	0x0000
 8005434:	e000ed08 	.word	0xe000ed08
 8005438:	bf00      	nop
 800543a:	bf00      	nop

0800543c <xPortStartScheduler>:
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	4b32      	ldr	r3, [pc, #200]	; (800550c <xPortStartScheduler+0xd0>)
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	22ff      	movs	r2, #255	; 0xff
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	70fb      	strb	r3, [r7, #3]
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4b2a      	ldr	r3, [pc, #168]	; (8005510 <xPortStartScheduler+0xd4>)
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <xPortStartScheduler+0xd8>)
 800546c:	2207      	movs	r2, #7
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e009      	b.n	8005486 <xPortStartScheduler+0x4a>
 8005472:	4b28      	ldr	r3, [pc, #160]	; (8005514 <xPortStartScheduler+0xd8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3b01      	subs	r3, #1
 8005478:	4a26      	ldr	r2, [pc, #152]	; (8005514 <xPortStartScheduler+0xd8>)
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	b2db      	uxtb	r3, r3
 8005484:	70fb      	strb	r3, [r7, #3]
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548e:	2b80      	cmp	r3, #128	; 0x80
 8005490:	d0ef      	beq.n	8005472 <xPortStartScheduler+0x36>
 8005492:	4b20      	ldr	r3, [pc, #128]	; (8005514 <xPortStartScheduler+0xd8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f1c3 0307 	rsb	r3, r3, #7
 800549a:	2b04      	cmp	r3, #4
 800549c:	d00a      	beq.n	80054b4 <xPortStartScheduler+0x78>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60bb      	str	r3, [r7, #8]
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <xPortStartScheduler+0x76>
 80054b4:	4b17      	ldr	r3, [pc, #92]	; (8005514 <xPortStartScheduler+0xd8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <xPortStartScheduler+0xd8>)
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <xPortStartScheduler+0xd8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054c6:	4a13      	ldr	r2, [pc, #76]	; (8005514 <xPortStartScheduler+0xd8>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	4b11      	ldr	r3, [pc, #68]	; (8005518 <xPortStartScheduler+0xdc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a10      	ldr	r2, [pc, #64]	; (8005518 <xPortStartScheduler+0xdc>)
 80054d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <xPortStartScheduler+0xdc>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a0d      	ldr	r2, [pc, #52]	; (8005518 <xPortStartScheduler+0xdc>)
 80054e4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	f000 f981 	bl	80057f0 <vPortSetupTimerInterrupt>
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <xPortStartScheduler+0xe0>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	f7ff ff90 	bl	8005418 <prvPortStartFirstTask>
 80054f8:	f7fe fe4c 	bl	8004194 <vTaskSwitchContext>
 80054fc:	f7ff ff4c 	bl	8005398 <prvTaskExitError>
 8005500:	2300      	movs	r3, #0
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	e000e400 	.word	0xe000e400
 8005510:	200001f8 	.word	0x200001f8
 8005514:	200001fc 	.word	0x200001fc
 8005518:	e000ed20 	.word	0xe000ed20
 800551c:	20000014 	.word	0x20000014

08005520 <vPortEnterCritical>:
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	bf00      	nop
 800553a:	4b0f      	ldr	r3, [pc, #60]	; (8005578 <vPortEnterCritical+0x58>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	4a0d      	ldr	r2, [pc, #52]	; (8005578 <vPortEnterCritical+0x58>)
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <vPortEnterCritical+0x58>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10f      	bne.n	800556c <vPortEnterCritical+0x4c>
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <vPortEnterCritical+0x5c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <vPortEnterCritical+0x4c>
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	bf00      	nop
 800556a:	e7fe      	b.n	800556a <vPortEnterCritical+0x4a>
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000014 	.word	0x20000014
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <vPortExitCritical>:
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	4b11      	ldr	r3, [pc, #68]	; (80055cc <vPortExitCritical+0x4c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <vPortExitCritical+0x24>
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <vPortExitCritical+0x22>
 80055a4:	4b09      	ldr	r3, [pc, #36]	; (80055cc <vPortExitCritical+0x4c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	4a08      	ldr	r2, [pc, #32]	; (80055cc <vPortExitCritical+0x4c>)
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <vPortExitCritical+0x4c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <vPortExitCritical+0x42>
 80055b6:	2300      	movs	r3, #0
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	20000014 	.word	0x20000014

080055d0 <PendSV_Handler>:
 80055d0:	f3ef 8009 	mrs	r0, PSP
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <pxCurrentTCBConst>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055e0:	6010      	str	r0, [r2, #0]
 80055e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80055e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055ea:	f380 8811 	msr	BASEPRI, r0
 80055ee:	f7fe fdd1 	bl	8004194 <vTaskSwitchContext>
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f380 8811 	msr	BASEPRI, r0
 80055fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055fe:	6819      	ldr	r1, [r3, #0]
 8005600:	6808      	ldr	r0, [r1, #0]
 8005602:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005606:	f380 8809 	msr	PSP, r0
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	4770      	bx	lr

08005610 <pxCurrentTCBConst>:
 8005610:	200000ac 	.word	0x200000ac
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <SysTick_Handler>:
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
 8005630:	bf00      	nop
 8005632:	f7fe fc97 	bl	8003f64 <xTaskIncrementTick>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <SysTick_Handler+0x2c>
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <SysTick_Handler+0x40>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	bf00      	nop
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <vPortSuppressTicksAndSleep>:
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	4b5b      	ldr	r3, [pc, #364]	; (80057d4 <vPortSuppressTicksAndSleep+0x178>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	d902      	bls.n	8005674 <vPortSuppressTicksAndSleep+0x18>
 800566e:	4b59      	ldr	r3, [pc, #356]	; (80057d4 <vPortSuppressTicksAndSleep+0x178>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	607b      	str	r3, [r7, #4]
 8005674:	b672      	cpsid	i
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f7fe ffef 	bl	8004660 <eTaskConfirmSleepModeStatus>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <vPortSuppressTicksAndSleep+0x30>
 8005688:	b662      	cpsie	i
 800568a:	e09e      	b.n	80057ca <vPortSuppressTicksAndSleep+0x16e>
 800568c:	4b52      	ldr	r3, [pc, #328]	; (80057d8 <vPortSuppressTicksAndSleep+0x17c>)
 800568e:	2206      	movs	r2, #6
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	4b52      	ldr	r3, [pc, #328]	; (80057dc <vPortSuppressTicksAndSleep+0x180>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <vPortSuppressTicksAndSleep+0x48>
 800569e:	4b50      	ldr	r3, [pc, #320]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	4a4d      	ldr	r2, [pc, #308]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	fb02 f303 	mul.w	r3, r2, r3
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	4b4b      	ldr	r3, [pc, #300]	; (80057e4 <vPortSuppressTicksAndSleep+0x188>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d008      	beq.n	80056d4 <vPortSuppressTicksAndSleep+0x78>
 80056c2:	4b48      	ldr	r3, [pc, #288]	; (80057e4 <vPortSuppressTicksAndSleep+0x188>)
 80056c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	4b45      	ldr	r3, [pc, #276]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	4b44      	ldr	r3, [pc, #272]	; (80057e8 <vPortSuppressTicksAndSleep+0x18c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d904      	bls.n	80056e8 <vPortSuppressTicksAndSleep+0x8c>
 80056de:	4b42      	ldr	r3, [pc, #264]	; (80057e8 <vPortSuppressTicksAndSleep+0x18c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	4a40      	ldr	r2, [pc, #256]	; (80057ec <vPortSuppressTicksAndSleep+0x190>)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	4b3b      	ldr	r3, [pc, #236]	; (80057dc <vPortSuppressTicksAndSleep+0x180>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	4b38      	ldr	r3, [pc, #224]	; (80057d8 <vPortSuppressTicksAndSleep+0x17c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a37      	ldr	r2, [pc, #220]	; (80057d8 <vPortSuppressTicksAndSleep+0x17c>)
 80056fa:	f043 0301 	orr.w	r3, r3, #1
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <vPortSuppressTicksAndSleep+0xb8>
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	bf30      	wfi
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	b662      	cpsie	i
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	b672      	cpsid	i
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <vPortSuppressTicksAndSleep+0x17c>)
 800572a:	2206      	movs	r2, #6
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	4b2a      	ldr	r3, [pc, #168]	; (80057d8 <vPortSuppressTicksAndSleep+0x17c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01d      	beq.n	8005776 <vPortSuppressTicksAndSleep+0x11a>
 800573a:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <vPortSuppressTicksAndSleep+0x180>)
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	1acb      	subs	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	3b01      	subs	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <vPortSuppressTicksAndSleep+0x18c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	429a      	cmp	r2, r3
 8005754:	d904      	bls.n	8005760 <vPortSuppressTicksAndSleep+0x104>
 8005756:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	429a      	cmp	r2, r3
 800575e:	d903      	bls.n	8005768 <vPortSuppressTicksAndSleep+0x10c>
 8005760:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3b01      	subs	r3, #1
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	4a20      	ldr	r2, [pc, #128]	; (80057ec <vPortSuppressTicksAndSleep+0x190>)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3b01      	subs	r3, #1
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	e01a      	b.n	80057ac <vPortSuppressTicksAndSleep+0x150>
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <vPortSuppressTicksAndSleep+0x180>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	fb02 f203 	mul.w	r2, r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	60bb      	str	r3, [r7, #8]
 800578c:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	3301      	adds	r3, #1
 800579c:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	fb02 f203 	mul.w	r2, r2, r3
 80057a4:	4911      	ldr	r1, [pc, #68]	; (80057ec <vPortSuppressTicksAndSleep+0x190>)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	600b      	str	r3, [r1, #0]
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <vPortSuppressTicksAndSleep+0x180>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <vPortSuppressTicksAndSleep+0x17c>)
 80057b4:	2207      	movs	r2, #7
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <vPortSuppressTicksAndSleep+0x184>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a0b      	ldr	r2, [pc, #44]	; (80057ec <vPortSuppressTicksAndSleep+0x190>)
 80057be:	3b01      	subs	r3, #1
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	69b8      	ldr	r0, [r7, #24]
 80057c4:	f7fe fb74 	bl	8003eb0 <vTaskStepTick>
 80057c8:	b662      	cpsie	i
 80057ca:	bf00      	nop
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	200001f0 	.word	0x200001f0
 80057d8:	e000e010 	.word	0xe000e010
 80057dc:	e000e018 	.word	0xe000e018
 80057e0:	200001ec 	.word	0x200001ec
 80057e4:	e000ed04 	.word	0xe000ed04
 80057e8:	200001f4 	.word	0x200001f4
 80057ec:	e000e014 	.word	0xe000e014

080057f0 <vPortSetupTimerInterrupt>:
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	4b14      	ldr	r3, [pc, #80]	; (8005848 <vPortSetupTimerInterrupt+0x58>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a14      	ldr	r2, [pc, #80]	; (800584c <vPortSetupTimerInterrupt+0x5c>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	099b      	lsrs	r3, r3, #6
 8005800:	4a13      	ldr	r2, [pc, #76]	; (8005850 <vPortSetupTimerInterrupt+0x60>)
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	4b12      	ldr	r3, [pc, #72]	; (8005850 <vPortSetupTimerInterrupt+0x60>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800580c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005810:	4a10      	ldr	r2, [pc, #64]	; (8005854 <vPortSetupTimerInterrupt+0x64>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	4b10      	ldr	r3, [pc, #64]	; (8005858 <vPortSetupTimerInterrupt+0x68>)
 8005816:	225e      	movs	r2, #94	; 0x5e
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	4b10      	ldr	r3, [pc, #64]	; (800585c <vPortSetupTimerInterrupt+0x6c>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <vPortSetupTimerInterrupt+0x70>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <vPortSetupTimerInterrupt+0x58>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a08      	ldr	r2, [pc, #32]	; (800584c <vPortSetupTimerInterrupt+0x5c>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	099b      	lsrs	r3, r3, #6
 8005832:	4a0c      	ldr	r2, [pc, #48]	; (8005864 <vPortSetupTimerInterrupt+0x74>)
 8005834:	3b01      	subs	r3, #1
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	4b08      	ldr	r3, [pc, #32]	; (800585c <vPortSetupTimerInterrupt+0x6c>)
 800583a:	2207      	movs	r2, #7
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	bf00      	nop
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	20000004 	.word	0x20000004
 800584c:	10624dd3 	.word	0x10624dd3
 8005850:	200001ec 	.word	0x200001ec
 8005854:	200001f0 	.word	0x200001f0
 8005858:	200001f4 	.word	0x200001f4
 800585c:	e000e010 	.word	0xe000e010
 8005860:	e000e018 	.word	0xe000e018
 8005864:	e000e014 	.word	0xe000e014

08005868 <vPortValidateInterruptPriority>:
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	f3ef 8305 	mrs	r3, IPSR
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b0f      	cmp	r3, #15
 8005878:	d914      	bls.n	80058a4 <vPortValidateInterruptPriority+0x3c>
 800587a:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <vPortValidateInterruptPriority+0x6c>)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	72fb      	strb	r3, [r7, #11]
 8005884:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <vPortValidateInterruptPriority+0x70>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	7afa      	ldrb	r2, [r7, #11]
 800588a:	429a      	cmp	r2, r3
 800588c:	d20a      	bcs.n	80058a4 <vPortValidateInterruptPriority+0x3c>
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <vPortValidateInterruptPriority+0x3a>
 80058a4:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <vPortValidateInterruptPriority+0x74>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058ac:	4b0c      	ldr	r3, [pc, #48]	; (80058e0 <vPortValidateInterruptPriority+0x78>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d90a      	bls.n	80058ca <vPortValidateInterruptPriority+0x62>
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	603b      	str	r3, [r7, #0]
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <vPortValidateInterruptPriority+0x60>
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	e000e3f0 	.word	0xe000e3f0
 80058d8:	200001f8 	.word	0x200001f8
 80058dc:	e000ed0c 	.word	0xe000ed0c
 80058e0:	200001fc 	.word	0x200001fc

080058e4 <__errno>:
 80058e4:	4b01      	ldr	r3, [pc, #4]	; (80058ec <__errno+0x8>)
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	20000018 	.word	0x20000018

080058f0 <__libc_init_array>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	2600      	movs	r6, #0
 80058f4:	4d0c      	ldr	r5, [pc, #48]	; (8005928 <__libc_init_array+0x38>)
 80058f6:	4c0d      	ldr	r4, [pc, #52]	; (800592c <__libc_init_array+0x3c>)
 80058f8:	1b64      	subs	r4, r4, r5
 80058fa:	10a4      	asrs	r4, r4, #2
 80058fc:	42a6      	cmp	r6, r4
 80058fe:	d109      	bne.n	8005914 <__libc_init_array+0x24>
 8005900:	f000 f904 	bl	8005b0c <_init>
 8005904:	2600      	movs	r6, #0
 8005906:	4d0a      	ldr	r5, [pc, #40]	; (8005930 <__libc_init_array+0x40>)
 8005908:	4c0a      	ldr	r4, [pc, #40]	; (8005934 <__libc_init_array+0x44>)
 800590a:	1b64      	subs	r4, r4, r5
 800590c:	10a4      	asrs	r4, r4, #2
 800590e:	42a6      	cmp	r6, r4
 8005910:	d105      	bne.n	800591e <__libc_init_array+0x2e>
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	f855 3b04 	ldr.w	r3, [r5], #4
 8005918:	4798      	blx	r3
 800591a:	3601      	adds	r6, #1
 800591c:	e7ee      	b.n	80058fc <__libc_init_array+0xc>
 800591e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005922:	4798      	blx	r3
 8005924:	3601      	adds	r6, #1
 8005926:	e7f2      	b.n	800590e <__libc_init_array+0x1e>
 8005928:	08005b8c 	.word	0x08005b8c
 800592c:	08005b8c 	.word	0x08005b8c
 8005930:	08005b8c 	.word	0x08005b8c
 8005934:	08005b90 	.word	0x08005b90

08005938 <malloc>:
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <malloc+0xc>)
 800593a:	4601      	mov	r1, r0
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	f000 b86d 	b.w	8005a1c <_malloc_r>
 8005942:	bf00      	nop
 8005944:	20000018 	.word	0x20000018

08005948 <free>:
 8005948:	4b02      	ldr	r3, [pc, #8]	; (8005954 <free+0xc>)
 800594a:	4601      	mov	r1, r0
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	f000 b819 	b.w	8005984 <_free_r>
 8005952:	bf00      	nop
 8005954:	20000018 	.word	0x20000018

08005958 <memcpy>:
 8005958:	440a      	add	r2, r1
 800595a:	4291      	cmp	r1, r2
 800595c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005960:	d100      	bne.n	8005964 <memcpy+0xc>
 8005962:	4770      	bx	lr
 8005964:	b510      	push	{r4, lr}
 8005966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800596a:	4291      	cmp	r1, r2
 800596c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005970:	d1f9      	bne.n	8005966 <memcpy+0xe>
 8005972:	bd10      	pop	{r4, pc}

08005974 <memset>:
 8005974:	4603      	mov	r3, r0
 8005976:	4402      	add	r2, r0
 8005978:	4293      	cmp	r3, r2
 800597a:	d100      	bne.n	800597e <memset+0xa>
 800597c:	4770      	bx	lr
 800597e:	f803 1b01 	strb.w	r1, [r3], #1
 8005982:	e7f9      	b.n	8005978 <memset+0x4>

08005984 <_free_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4605      	mov	r5, r0
 8005988:	2900      	cmp	r1, #0
 800598a:	d043      	beq.n	8005a14 <_free_r+0x90>
 800598c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005990:	1f0c      	subs	r4, r1, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	bfb8      	it	lt
 8005996:	18e4      	addlt	r4, r4, r3
 8005998:	f000 f8aa 	bl	8005af0 <__malloc_lock>
 800599c:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <_free_r+0x94>)
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	4610      	mov	r0, r2
 80059a2:	b933      	cbnz	r3, 80059b2 <_free_r+0x2e>
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	6014      	str	r4, [r2, #0]
 80059a8:	4628      	mov	r0, r5
 80059aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059ae:	f000 b8a5 	b.w	8005afc <__malloc_unlock>
 80059b2:	42a3      	cmp	r3, r4
 80059b4:	d90a      	bls.n	80059cc <_free_r+0x48>
 80059b6:	6821      	ldr	r1, [r4, #0]
 80059b8:	1862      	adds	r2, r4, r1
 80059ba:	4293      	cmp	r3, r2
 80059bc:	bf01      	itttt	eq
 80059be:	681a      	ldreq	r2, [r3, #0]
 80059c0:	685b      	ldreq	r3, [r3, #4]
 80059c2:	1852      	addeq	r2, r2, r1
 80059c4:	6022      	streq	r2, [r4, #0]
 80059c6:	6063      	str	r3, [r4, #4]
 80059c8:	6004      	str	r4, [r0, #0]
 80059ca:	e7ed      	b.n	80059a8 <_free_r+0x24>
 80059cc:	461a      	mov	r2, r3
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	b10b      	cbz	r3, 80059d6 <_free_r+0x52>
 80059d2:	42a3      	cmp	r3, r4
 80059d4:	d9fa      	bls.n	80059cc <_free_r+0x48>
 80059d6:	6811      	ldr	r1, [r2, #0]
 80059d8:	1850      	adds	r0, r2, r1
 80059da:	42a0      	cmp	r0, r4
 80059dc:	d10b      	bne.n	80059f6 <_free_r+0x72>
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	4401      	add	r1, r0
 80059e2:	1850      	adds	r0, r2, r1
 80059e4:	4283      	cmp	r3, r0
 80059e6:	6011      	str	r1, [r2, #0]
 80059e8:	d1de      	bne.n	80059a8 <_free_r+0x24>
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4401      	add	r1, r0
 80059f0:	6011      	str	r1, [r2, #0]
 80059f2:	6053      	str	r3, [r2, #4]
 80059f4:	e7d8      	b.n	80059a8 <_free_r+0x24>
 80059f6:	d902      	bls.n	80059fe <_free_r+0x7a>
 80059f8:	230c      	movs	r3, #12
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	e7d4      	b.n	80059a8 <_free_r+0x24>
 80059fe:	6820      	ldr	r0, [r4, #0]
 8005a00:	1821      	adds	r1, r4, r0
 8005a02:	428b      	cmp	r3, r1
 8005a04:	bf01      	itttt	eq
 8005a06:	6819      	ldreq	r1, [r3, #0]
 8005a08:	685b      	ldreq	r3, [r3, #4]
 8005a0a:	1809      	addeq	r1, r1, r0
 8005a0c:	6021      	streq	r1, [r4, #0]
 8005a0e:	6063      	str	r3, [r4, #4]
 8005a10:	6054      	str	r4, [r2, #4]
 8005a12:	e7c9      	b.n	80059a8 <_free_r+0x24>
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	bf00      	nop
 8005a18:	20000200 	.word	0x20000200

08005a1c <_malloc_r>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	1ccd      	adds	r5, r1, #3
 8005a20:	f025 0503 	bic.w	r5, r5, #3
 8005a24:	3508      	adds	r5, #8
 8005a26:	2d0c      	cmp	r5, #12
 8005a28:	bf38      	it	cc
 8005a2a:	250c      	movcc	r5, #12
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	4606      	mov	r6, r0
 8005a30:	db01      	blt.n	8005a36 <_malloc_r+0x1a>
 8005a32:	42a9      	cmp	r1, r5
 8005a34:	d903      	bls.n	8005a3e <_malloc_r+0x22>
 8005a36:	230c      	movs	r3, #12
 8005a38:	6033      	str	r3, [r6, #0]
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a3e:	f000 f857 	bl	8005af0 <__malloc_lock>
 8005a42:	4921      	ldr	r1, [pc, #132]	; (8005ac8 <_malloc_r+0xac>)
 8005a44:	680a      	ldr	r2, [r1, #0]
 8005a46:	4614      	mov	r4, r2
 8005a48:	b99c      	cbnz	r4, 8005a72 <_malloc_r+0x56>
 8005a4a:	4f20      	ldr	r7, [pc, #128]	; (8005acc <_malloc_r+0xb0>)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	b923      	cbnz	r3, 8005a5a <_malloc_r+0x3e>
 8005a50:	4621      	mov	r1, r4
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 f83c 	bl	8005ad0 <_sbrk_r>
 8005a58:	6038      	str	r0, [r7, #0]
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f000 f837 	bl	8005ad0 <_sbrk_r>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d123      	bne.n	8005aae <_malloc_r+0x92>
 8005a66:	230c      	movs	r3, #12
 8005a68:	4630      	mov	r0, r6
 8005a6a:	6033      	str	r3, [r6, #0]
 8005a6c:	f000 f846 	bl	8005afc <__malloc_unlock>
 8005a70:	e7e3      	b.n	8005a3a <_malloc_r+0x1e>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	1b5b      	subs	r3, r3, r5
 8005a76:	d417      	bmi.n	8005aa8 <_malloc_r+0x8c>
 8005a78:	2b0b      	cmp	r3, #11
 8005a7a:	d903      	bls.n	8005a84 <_malloc_r+0x68>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	441c      	add	r4, r3
 8005a80:	6025      	str	r5, [r4, #0]
 8005a82:	e004      	b.n	8005a8e <_malloc_r+0x72>
 8005a84:	6863      	ldr	r3, [r4, #4]
 8005a86:	42a2      	cmp	r2, r4
 8005a88:	bf0c      	ite	eq
 8005a8a:	600b      	streq	r3, [r1, #0]
 8005a8c:	6053      	strne	r3, [r2, #4]
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f000 f834 	bl	8005afc <__malloc_unlock>
 8005a94:	f104 000b 	add.w	r0, r4, #11
 8005a98:	1d23      	adds	r3, r4, #4
 8005a9a:	f020 0007 	bic.w	r0, r0, #7
 8005a9e:	1ac2      	subs	r2, r0, r3
 8005aa0:	d0cc      	beq.n	8005a3c <_malloc_r+0x20>
 8005aa2:	1a1b      	subs	r3, r3, r0
 8005aa4:	50a3      	str	r3, [r4, r2]
 8005aa6:	e7c9      	b.n	8005a3c <_malloc_r+0x20>
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	6864      	ldr	r4, [r4, #4]
 8005aac:	e7cc      	b.n	8005a48 <_malloc_r+0x2c>
 8005aae:	1cc4      	adds	r4, r0, #3
 8005ab0:	f024 0403 	bic.w	r4, r4, #3
 8005ab4:	42a0      	cmp	r0, r4
 8005ab6:	d0e3      	beq.n	8005a80 <_malloc_r+0x64>
 8005ab8:	1a21      	subs	r1, r4, r0
 8005aba:	4630      	mov	r0, r6
 8005abc:	f000 f808 	bl	8005ad0 <_sbrk_r>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d1dd      	bne.n	8005a80 <_malloc_r+0x64>
 8005ac4:	e7cf      	b.n	8005a66 <_malloc_r+0x4a>
 8005ac6:	bf00      	nop
 8005ac8:	20000200 	.word	0x20000200
 8005acc:	20000204 	.word	0x20000204

08005ad0 <_sbrk_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4d05      	ldr	r5, [pc, #20]	; (8005aec <_sbrk_r+0x1c>)
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	4608      	mov	r0, r1
 8005ada:	602b      	str	r3, [r5, #0]
 8005adc:	f7fa fef8 	bl	80008d0 <_sbrk>
 8005ae0:	1c43      	adds	r3, r0, #1
 8005ae2:	d102      	bne.n	8005aea <_sbrk_r+0x1a>
 8005ae4:	682b      	ldr	r3, [r5, #0]
 8005ae6:	b103      	cbz	r3, 8005aea <_sbrk_r+0x1a>
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	bd38      	pop	{r3, r4, r5, pc}
 8005aec:	20000314 	.word	0x20000314

08005af0 <__malloc_lock>:
 8005af0:	4801      	ldr	r0, [pc, #4]	; (8005af8 <__malloc_lock+0x8>)
 8005af2:	f000 b809 	b.w	8005b08 <__retarget_lock_acquire_recursive>
 8005af6:	bf00      	nop
 8005af8:	2000031c 	.word	0x2000031c

08005afc <__malloc_unlock>:
 8005afc:	4801      	ldr	r0, [pc, #4]	; (8005b04 <__malloc_unlock+0x8>)
 8005afe:	f000 b804 	b.w	8005b0a <__retarget_lock_release_recursive>
 8005b02:	bf00      	nop
 8005b04:	2000031c 	.word	0x2000031c

08005b08 <__retarget_lock_acquire_recursive>:
 8005b08:	4770      	bx	lr

08005b0a <__retarget_lock_release_recursive>:
 8005b0a:	4770      	bx	lr

08005b0c <_init>:
 8005b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0e:	bf00      	nop
 8005b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b12:	bc08      	pop	{r3}
 8005b14:	469e      	mov	lr, r3
 8005b16:	4770      	bx	lr

08005b18 <_fini>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	bf00      	nop
 8005b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1e:	bc08      	pop	{r3}
 8005b20:	469e      	mov	lr, r3
 8005b22:	4770      	bx	lr
