
interrup-RTOS-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800561c  0800561c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800561c  0800561c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800561c  0800561c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000078  0800569c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  0800569c  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b18  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7a  00000000  00000000  00033bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00036a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f00  00000000  00000000  00037a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d76  00000000  00000000  00038990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ccd  00000000  00000000  00052706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095bc7  00000000  00000000  000643d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9f9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044fc  00000000  00000000  000f9ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800559c 	.word	0x0800559c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800559c 	.word	0x0800559c

08000150 <Adc>:
TaskHandle_t xTarea_Config_Handle = NULL, xTarea_ADC_Handle=NULL;

int tarea = 0;
#define THRESHOLD_VALUE 2048

static void Adc(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
		/*
		 * La función HAL-ADC-Start-IT() es responsable de permitir la interrupción y inicio de la conversión de ADC de los canales regulares.
		 * Toma en un solo parámetro que es el puntero de la estructura ADC-HandleTypeDef que contiene los parámetros de configuración para el
		 * ADC especificado. En nuestro caso es "&hadc1.
		 */
		HAL_ADC_Start_IT(&hadc1);
 8000158:	4801      	ldr	r0, [pc, #4]	; (8000160 <Adc+0x10>)
 800015a:	f000 fc67 	bl	8000a2c <HAL_ADC_Start_IT>
 800015e:	e7fb      	b.n	8000158 <Adc+0x8>
 8000160:	20000204 	.word	0x20000204

08000164 <Led>:
		// This delay marks the conversion rate
		//vTaskDelay(100/portTICK_PERIOD_MS);
	}
}

static void Led(void *pvParameters){
 8000164:	b580      	push	{r7, lr}
 8000166:	b084      	sub	sp, #16
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	uint16_t received_value;
	while (1){
		// Reads the value from the queue
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 800016c:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <Led+0x40>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	f107 010e 	add.w	r1, r7, #14
 8000174:	f04f 32ff 	mov.w	r2, #4294967295
 8000178:	4618      	mov	r0, r3
 800017a:	f002 fc79 	bl	8002a70 <xQueueReceive>
		if ( received_value > THRESHOLD_VALUE ) {
 800017e:	89fb      	ldrh	r3, [r7, #14]
 8000180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000184:	d906      	bls.n	8000194 <Led+0x30>
			// If the value coming from the queue is greater than the threshold, turn on the led
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000186:	2200      	movs	r2, #0
 8000188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018c:	4806      	ldr	r0, [pc, #24]	; (80001a8 <Led+0x44>)
 800018e:	f001 f9d7 	bl	8001540 <HAL_GPIO_WritePin>
 8000192:	e7eb      	b.n	800016c <Led+0x8>
		}
		else {
			// Else turn it off
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019a:	4803      	ldr	r0, [pc, #12]	; (80001a8 <Led+0x44>)
 800019c:	f001 f9d0 	bl	8001540 <HAL_GPIO_WritePin>
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 80001a0:	e7e4      	b.n	800016c <Led+0x8>
 80001a2:	bf00      	nop
 80001a4:	20000234 	.word	0x20000234
 80001a8:	40011000 	.word	0x40011000

080001ac <Config>:
		}
	}
}

static void Config(void *pvParameters){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b084      	sub	sp, #16
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	//unsigned portBASE_TYPE uxPriority;
	//uxPriority = uxTaskPriorityGet( NULL );
	uint16_t received_value;

	while (1){
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 80001b4:	4b1b      	ldr	r3, [pc, #108]	; (8000224 <Config+0x78>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	f04f 31ff 	mov.w	r1, #4294967295
 80001bc:	4618      	mov	r0, r3
 80001be:	f002 fd37 	bl	8002c30 <xQueueSemaphoreTake>
		vTaskPrioritySet( xTarea_ADC_Handle, 3);
 80001c2:	4b19      	ldr	r3, [pc, #100]	; (8000228 <Config+0x7c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2103      	movs	r1, #3
 80001c8:	4618      	mov	r0, r3
 80001ca:	f003 f945 	bl	8003458 <vTaskPrioritySet>
		HAL_ADC_Start_IT(&hadc1);
 80001ce:	4817      	ldr	r0, [pc, #92]	; (800022c <Config+0x80>)
 80001d0:	f000 fc2c 	bl	8000a2c <HAL_ADC_Start_IT>
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 80001d4:	4b16      	ldr	r3, [pc, #88]	; (8000230 <Config+0x84>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f107 010e 	add.w	r1, r7, #14
 80001dc:	f04f 32ff 	mov.w	r2, #4294967295
 80001e0:	4618      	mov	r0, r3
 80001e2:	f002 fc45 	bl	8002a70 <xQueueReceive>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ec:	4811      	ldr	r0, [pc, #68]	; (8000234 <Config+0x88>)
 80001ee:	f001 f9a7 	bl	8001540 <HAL_GPIO_WritePin>
		//HAL_Delay(1000);
		while(received_value<2300){
 80001f2:	e00b      	b.n	800020c <Config+0x60>
			HAL_ADC_Start_IT(&hadc1);
 80001f4:	480d      	ldr	r0, [pc, #52]	; (800022c <Config+0x80>)
 80001f6:	f000 fc19 	bl	8000a2c <HAL_ADC_Start_IT>
			xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 80001fa:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <Config+0x84>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f107 010e 	add.w	r1, r7, #14
 8000202:	f04f 32ff 	mov.w	r2, #4294967295
 8000206:	4618      	mov	r0, r3
 8000208:	f002 fc32 	bl	8002a70 <xQueueReceive>
		while(received_value<2300){
 800020c:	89fb      	ldrh	r3, [r7, #14]
 800020e:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8000212:	4293      	cmp	r3, r2
 8000214:	d9ee      	bls.n	80001f4 <Config+0x48>
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021c:	4805      	ldr	r0, [pc, #20]	; (8000234 <Config+0x88>)
 800021e:	f001 f98f 	bl	8001540 <HAL_GPIO_WritePin>
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000222:	e7c7      	b.n	80001b4 <Config+0x8>
 8000224:	20000238 	.word	0x20000238
 8000228:	20000098 	.word	0x20000098
 800022c:	20000204 	.word	0x20000204
 8000230:	20000234 	.word	0x20000234
 8000234:	40011000 	.word	0x40011000

08000238 <HAL_ADC_ConvCpltCallback>:
		//HAL_Delay(80);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	static portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	static uint16_t adc_value = 0;

	// Obtains the conversion result
	adc_value = HAL_ADC_GetValue(hadc);
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 fca9 	bl	8000b98 <HAL_ADC_GetValue>
 8000246:	4603      	mov	r3, r0
 8000248:	b29a      	uxth	r2, r3
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <HAL_ADC_ConvCpltCallback+0x5c>)
 800024c:	801a      	strh	r2, [r3, #0]

	// Sends the value to the queue
	xQueueOverwriteFromISR(adc_queue, &adc_value, &xHigherPriorityTaskWoken); //en la cinfig de interrup: ADC1 y ADC2 global poner una prioridad de 5, sino queda trabado ahí.
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <HAL_ADC_ConvCpltCallback+0x60>)
 8000250:	6818      	ldr	r0, [r3, #0]
 8000252:	2302      	movs	r3, #2
 8000254:	4a11      	ldr	r2, [pc, #68]	; (800029c <HAL_ADC_ConvCpltCallback+0x64>)
 8000256:	490f      	ldr	r1, [pc, #60]	; (8000294 <HAL_ADC_ConvCpltCallback+0x5c>)
 8000258:	f002 fab4 	bl	80027c4 <xQueueGenericSendFromISR>
	if(adc_value<2300)
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <HAL_ADC_ConvCpltCallback+0x5c>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	f640 02fb 	movw	r2, #2299	; 0x8fb
 8000264:	4293      	cmp	r3, r2
 8000266:	d805      	bhi.n	8000274 <HAL_ADC_ConvCpltCallback+0x3c>
		xSemaphoreGiveFromISR(my_semph1, &xHigherPriorityTaskWoken);
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <HAL_ADC_ConvCpltCallback+0x68>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	490b      	ldr	r1, [pc, #44]	; (800029c <HAL_ADC_ConvCpltCallback+0x64>)
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fb5a 	bl	8002928 <xQueueGiveFromISR>
	//xQueueOverwriteFromISR(adc_queue, &adc_value, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <HAL_ADC_ConvCpltCallback+0x64>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d007      	beq.n	800028c <HAL_ADC_ConvCpltCallback+0x54>
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <HAL_ADC_ConvCpltCallback+0x6c>)
 800027e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	f3bf 8f4f 	dsb	sy
 8000288:	f3bf 8f6f 	isb	sy

	//dos botones: max: 1981
	//boton up: 2750
	//boton min: 2574
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000009c 	.word	0x2000009c
 8000298:	20000234 	.word	0x20000234
 800029c:	200000a0 	.word	0x200000a0
 80002a0:	20000238 	.word	0x20000238
 80002a4:	e000ed04 	.word	0xe000ed04

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ae:	f000 fab3 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b2:	f000 f85b 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b6:	f000 f8f3 	bl	80004a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002ba:	f000 f8b3 	bl	8000424 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  adc_queue = xQueueCreate(1,sizeof(uint16_t));
 80002be:	2200      	movs	r2, #0
 80002c0:	2102      	movs	r1, #2
 80002c2:	2001      	movs	r0, #1
 80002c4:	f002 f90e 	bl	80024e4 <xQueueGenericCreate>
 80002c8:	4603      	mov	r3, r0
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <main+0x9c>)
 80002cc:	6013      	str	r3, [r2, #0]
  vSemaphoreCreateBinary(my_semph1);
 80002ce:	2203      	movs	r2, #3
 80002d0:	2100      	movs	r1, #0
 80002d2:	2001      	movs	r0, #1
 80002d4:	f002 f906 	bl	80024e4 <xQueueGenericCreate>
 80002d8:	4603      	mov	r3, r0
 80002da:	4a1b      	ldr	r2, [pc, #108]	; (8000348 <main+0xa0>)
 80002dc:	6013      	str	r3, [r2, #0]
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <main+0xa0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d006      	beq.n	80002f4 <main+0x4c>
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <main+0xa0>)
 80002e8:	6818      	ldr	r0, [r3, #0]
 80002ea:	2300      	movs	r3, #0
 80002ec:	2200      	movs	r2, #0
 80002ee:	2100      	movs	r1, #0
 80002f0:	f002 f96a 	bl	80025c8 <xQueueGenericSend>
  xSemaphoreTake(my_semph1, portMAX_DELAY);
 80002f4:	4b14      	ldr	r3, [pc, #80]	; (8000348 <main+0xa0>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f04f 31ff 	mov.w	r1, #4294967295
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fc97 	bl	8002c30 <xQueueSemaphoreTake>
  xTaskCreate(Adc, "ADC task", configMINIMAL_STACK_SIZE, NULL, 2, &xTarea_ADC_Handle);
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <main+0xa4>)
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2302      	movs	r3, #2
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2300      	movs	r3, #0
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	4910      	ldr	r1, [pc, #64]	; (8000350 <main+0xa8>)
 8000310:	4810      	ldr	r0, [pc, #64]	; (8000354 <main+0xac>)
 8000312:	f002 ff35 	bl	8003180 <xTaskCreate>
  xTaskCreate(Led, "Led task", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000316:	2300      	movs	r3, #0
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	2302      	movs	r3, #2
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	2300      	movs	r3, #0
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	490d      	ldr	r1, [pc, #52]	; (8000358 <main+0xb0>)
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <main+0xb4>)
 8000326:	f002 ff2b 	bl	8003180 <xTaskCreate>
  xTaskCreate(Config, "Config task", configMINIMAL_STACK_SIZE, NULL, 3, &xTarea_Config_Handle);
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <main+0xb8>)
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2303      	movs	r3, #3
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2300      	movs	r3, #0
 8000334:	2280      	movs	r2, #128	; 0x80
 8000336:	490b      	ldr	r1, [pc, #44]	; (8000364 <main+0xbc>)
 8000338:	480b      	ldr	r0, [pc, #44]	; (8000368 <main+0xc0>)
 800033a:	f002 ff21 	bl	8003180 <xTaskCreate>

  vTaskStartScheduler();
 800033e:	f003 f951 	bl	80035e4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000342:	e7fe      	b.n	8000342 <main+0x9a>
 8000344:	20000234 	.word	0x20000234
 8000348:	20000238 	.word	0x20000238
 800034c:	20000098 	.word	0x20000098
 8000350:	080055b4 	.word	0x080055b4
 8000354:	08000151 	.word	0x08000151
 8000358:	080055c0 	.word	0x080055c0
 800035c:	08000165 	.word	0x08000165
 8000360:	20000094 	.word	0x20000094
 8000364:	080055cc 	.word	0x080055cc
 8000368:	080001ad 	.word	0x080001ad

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b094      	sub	sp, #80	; 0x50
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f005 f842 	bl	8005404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800039c:	2301      	movs	r3, #1
 800039e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003aa:	2301      	movs	r3, #1
 80003ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ae:	2302      	movs	r3, #2
 80003b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 f8d4 	bl	8001570 <HAL_RCC_OscConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003ce:	f000 f8c5 	bl	800055c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d2:	230f      	movs	r3, #15
 80003d4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d6:	2302      	movs	r3, #2
 80003d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003e2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2102      	movs	r1, #2
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 fb3e 	bl	8001a70 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003fa:	f000 f8af 	bl	800055c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003fe:	2302      	movs	r3, #2
 8000400:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000406:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fcda 	bl	8001dc4 <HAL_RCCEx_PeriphCLKConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000416:	f000 f8a1 	bl	800055c <Error_Handler>
  }
}
 800041a:	bf00      	nop
 800041c:	3750      	adds	r7, #80	; 0x50
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_ADC1_Init+0x74>)
 8000436:	4a19      	ldr	r2, [pc, #100]	; (800049c <MX_ADC1_Init+0x78>)
 8000438:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800043a:	4b17      	ldr	r3, [pc, #92]	; (8000498 <MX_ADC1_Init+0x74>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_ADC1_Init+0x74>)
 8000442:	2200      	movs	r2, #0
 8000444:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_ADC1_Init+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_ADC1_Init+0x74>)
 800044e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000452:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_ADC1_Init+0x74>)
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_ADC1_Init+0x74>)
 800045c:	2201      	movs	r2, #1
 800045e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000460:	480d      	ldr	r0, [pc, #52]	; (8000498 <MX_ADC1_Init+0x74>)
 8000462:	f000 fa0b 	bl	800087c <HAL_ADC_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800046c:	f000 f876 	bl	800055c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000470:	2305      	movs	r3, #5
 8000472:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000474:	2301      	movs	r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <MX_ADC1_Init+0x74>)
 8000482:	f000 fc5d 	bl	8000d40 <HAL_ADC_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800048c:	f000 f866 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000204 	.word	0x20000204
 800049c:	40012400 	.word	0x40012400

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <MX_GPIO_Init+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1d      	ldr	r2, [pc, #116]	; (8000530 <MX_GPIO_Init+0x90>)
 80004ba:	f043 0310 	orr.w	r3, r3, #16
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <MX_GPIO_Init+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0310 	and.w	r3, r3, #16
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <MX_GPIO_Init+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a17      	ldr	r2, [pc, #92]	; (8000530 <MX_GPIO_Init+0x90>)
 80004d2:	f043 0320 	orr.w	r3, r3, #32
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <MX_GPIO_Init+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0320 	and.w	r3, r3, #32
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <MX_GPIO_Init+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <MX_GPIO_Init+0x90>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_GPIO_Init+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <MX_GPIO_Init+0x94>)
 8000504:	f001 f81c 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	2301      	movs	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	2302      	movs	r3, #2
 8000518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800051a:	f107 0310 	add.w	r3, r7, #16
 800051e:	4619      	mov	r1, r3
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_GPIO_Init+0x94>)
 8000522:	f000 fe89 	bl	8001238 <HAL_GPIO_Init>

}
 8000526:	bf00      	nop
 8000528:	3720      	adds	r7, #32
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	40011000 	.word	0x40011000

08000538 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d101      	bne.n	800054e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800054a:	f000 f97b 	bl	8000844 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40012c00 	.word	0x40012c00

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000564:	e7fe      	b.n	8000564 <Error_Handler+0x8>
	...

08000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_MspInit+0x5c>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <HAL_MspInit+0x5c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_MspInit+0x5c>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x5c>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_MspInit+0x5c>)
 800058c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x5c>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_MspInit+0x60>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <HAL_MspInit+0x60>)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010000 	.word	0x40010000

080005cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <HAL_ADC_MspInit+0x7c>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d129      	bne.n	8000640 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_ADC_MspInit+0x80>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a16      	ldr	r2, [pc, #88]	; (800064c <HAL_ADC_MspInit+0x80>)
 80005f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_ADC_MspInit+0x80>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_ADC_MspInit+0x80>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a10      	ldr	r2, [pc, #64]	; (800064c <HAL_ADC_MspInit+0x80>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_ADC_MspInit+0x80>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_BTN_INT_Pin;
 800061c:	2320      	movs	r3, #32
 800061e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	2303      	movs	r3, #3
 8000622:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <HAL_ADC_MspInit+0x84>)
 800062c:	f000 fe04 	bl	8001238 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2105      	movs	r1, #5
 8000634:	2012      	movs	r0, #18
 8000636:	f000 fdd4 	bl	80011e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800063a:	2012      	movs	r0, #18
 800063c:	f000 fded 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40012400 	.word	0x40012400
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800

08000654 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08c      	sub	sp, #48	; 0x30
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000664:	2200      	movs	r2, #0
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	2019      	movs	r0, #25
 800066a:	f000 fdba 	bl	80011e2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800066e:	2019      	movs	r0, #25
 8000670:	f000 fdd3 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <HAL_InitTick+0x9c>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <HAL_InitTick+0x9c>)
 800067a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <HAL_InitTick+0x9c>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800068c:	f107 0210 	add.w	r2, r7, #16
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fb46 	bl	8001d28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800069c:	f001 fb30 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 80006a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <HAL_InitTick+0xa0>)
 80006a6:	fba2 2303 	umull	r2, r3, r2, r3
 80006aa:	0c9b      	lsrs	r3, r3, #18
 80006ac:	3b01      	subs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <HAL_InitTick+0xa4>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <HAL_InitTick+0xa8>)
 80006b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_InitTick+0xa4>)
 80006b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_InitTick+0xa4>)
 80006c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_InitTick+0xa4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <HAL_InitTick+0xa4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <HAL_InitTick+0xa4>)
 80006d2:	f001 fc2d 	bl	8001f30 <HAL_TIM_Base_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d104      	bne.n	80006e6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <HAL_InitTick+0xa4>)
 80006de:	f001 fc7f 	bl	8001fe0 <HAL_TIM_Base_Start_IT>
 80006e2:	4603      	mov	r3, r0
 80006e4:	e000      	b.n	80006e8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3730      	adds	r7, #48	; 0x30
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	431bde83 	.word	0x431bde83
 80006f8:	2000023c 	.word	0x2000023c
 80006fc:	40012c00 	.word	0x40012c00

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
	...

0800072c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <ADC1_2_IRQHandler+0x10>)
 8000732:	f000 fa3d 	bl	8000bb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000204 	.word	0x20000204

08000740 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <TIM1_UP_IRQHandler+0x10>)
 8000746:	f001 fc9d 	bl	8002084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000023c 	.word	0x2000023c

08000754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800075c:	4a14      	ldr	r2, [pc, #80]	; (80007b0 <_sbrk+0x5c>)
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <_sbrk+0x60>)
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <_sbrk+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d102      	bne.n	8000776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <_sbrk+0x64>)
 8000772:	4a12      	ldr	r2, [pc, #72]	; (80007bc <_sbrk+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	693a      	ldr	r2, [r7, #16]
 8000780:	429a      	cmp	r2, r3
 8000782:	d207      	bcs.n	8000794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000784:	f004 fdf6 	bl	8005374 <__errno>
 8000788:	4603      	mov	r3, r0
 800078a:	220c      	movs	r2, #12
 800078c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	e009      	b.n	80007a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <_sbrk+0x64>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <_sbrk+0x64>)
 80007a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20005000 	.word	0x20005000
 80007b4:	00000400 	.word	0x00000400
 80007b8:	200000a4 	.word	0x200000a4
 80007bc:	200002d8 	.word	0x200002d8

080007c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007cc:	f7ff fff8 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007d2:	490c      	ldr	r1, [pc, #48]	; (8000804 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007e8:	4c09      	ldr	r4, [pc, #36]	; (8000810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f004 fdc3 	bl	8005380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fa:	f7ff fd55 	bl	80002a8 <main>
  bx lr
 80007fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000808:	08005624 	.word	0x08005624
  ldr r2, =_sbss
 800080c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000810:	200002d8 	.word	0x200002d8

08000814 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <CAN1_RX1_IRQHandler>
	...

08000818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_Init+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <HAL_Init+0x28>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 fccf 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff ff10 	bl	8000654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f7ff fe98 	bl	8000568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40022000 	.word	0x40022000

08000844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x1c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_IncTick+0x20>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	4a03      	ldr	r2, [pc, #12]	; (8000864 <HAL_IncTick+0x20>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	20000008 	.word	0x20000008
 8000864:	20000284 	.word	0x20000284

08000868 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return uwTick;
 800086c:	4b02      	ldr	r3, [pc, #8]	; (8000878 <HAL_GetTick+0x10>)
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	20000284 	.word	0x20000284

0800087c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000884:	2300      	movs	r3, #0
 8000886:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000888:	2300      	movs	r3, #0
 800088a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d101      	bne.n	800089e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e0be      	b.n	8000a1c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d109      	bne.n	80008c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2200      	movs	r2, #0
 80008b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fe86 	bl	80005cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f000 fb8f 	bl	8000fe4 <ADC_ConversionStop_Disable>
 80008c6:	4603      	mov	r3, r0
 80008c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ce:	f003 0310 	and.w	r3, r3, #16
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f040 8099 	bne.w	8000a0a <HAL_ADC_Init+0x18e>
 80008d8:	7dfb      	ldrb	r3, [r7, #23]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f040 8095 	bne.w	8000a0a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008e8:	f023 0302 	bic.w	r3, r3, #2
 80008ec:	f043 0202 	orr.w	r2, r3, #2
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008fc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7b1b      	ldrb	r3, [r3, #12]
 8000902:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000904:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	4313      	orrs	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000914:	d003      	beq.n	800091e <HAL_ADC_Init+0xa2>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d102      	bne.n	8000924 <HAL_ADC_Init+0xa8>
 800091e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000922:	e000      	b.n	8000926 <HAL_ADC_Init+0xaa>
 8000924:	2300      	movs	r3, #0
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7d1b      	ldrb	r3, [r3, #20]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d119      	bne.n	8000968 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7b1b      	ldrb	r3, [r3, #12]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d109      	bne.n	8000950 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	3b01      	subs	r3, #1
 8000942:	035a      	lsls	r2, r3, #13
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	4313      	orrs	r3, r2
 8000948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	e00b      	b.n	8000968 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000954:	f043 0220 	orr.w	r2, r3, #32
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000960:	f043 0201 	orr.w	r2, r3, #1
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	430a      	orrs	r2, r1
 800097a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <HAL_ADC_Init+0x1a8>)
 8000984:	4013      	ands	r3, r2
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	430b      	orrs	r3, r1
 800098e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000998:	d003      	beq.n	80009a2 <HAL_ADC_Init+0x126>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d104      	bne.n	80009ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	051b      	lsls	r3, r3, #20
 80009aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	430a      	orrs	r2, r1
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_ADC_Init+0x1ac>)
 80009c8:	4013      	ands	r3, r2
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d10b      	bne.n	80009e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009da:	f023 0303 	bic.w	r3, r3, #3
 80009de:	f043 0201 	orr.w	r2, r3, #1
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009e6:	e018      	b.n	8000a1a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ec:	f023 0312 	bic.w	r3, r3, #18
 80009f0:	f043 0210 	orr.w	r2, r3, #16
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fc:	f043 0201 	orr.w	r2, r3, #1
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a08:	e007      	b.n	8000a1a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0e:	f043 0210 	orr.w	r2, r3, #16
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	ffe1f7fd 	.word	0xffe1f7fd
 8000a28:	ff1f0efe 	.word	0xff1f0efe

08000a2c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d101      	bne.n	8000a46 <HAL_ADC_Start_IT+0x1a>
 8000a42:	2302      	movs	r3, #2
 8000a44:	e0a0      	b.n	8000b88 <HAL_ADC_Start_IT+0x15c>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 fa6e 	bl	8000f30 <ADC_Enable>
 8000a54:	4603      	mov	r3, r0
 8000a56:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f040 808f 	bne.w	8000b7e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a68:	f023 0301 	bic.w	r3, r3, #1
 8000a6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a45      	ldr	r2, [pc, #276]	; (8000b90 <HAL_ADC_Start_IT+0x164>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d105      	bne.n	8000a8a <HAL_ADC_Start_IT+0x5e>
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <HAL_ADC_Start_IT+0x168>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d115      	bne.n	8000ab6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d026      	beq.n	8000af2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ab4:	e01d      	b.n	8000af2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a33      	ldr	r2, [pc, #204]	; (8000b94 <HAL_ADC_Start_IT+0x168>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d004      	beq.n	8000ad6 <HAL_ADC_Start_IT+0xaa>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a2f      	ldr	r2, [pc, #188]	; (8000b90 <HAL_ADC_Start_IT+0x164>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d10d      	bne.n	8000af2 <HAL_ADC_Start_IT+0xc6>
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <HAL_ADC_Start_IT+0x168>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d007      	beq.n	8000af2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b02:	f023 0206 	bic.w	r2, r3, #6
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b0a:	e002      	b.n	8000b12 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f06f 0202 	mvn.w	r2, #2
 8000b22:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f042 0220 	orr.w	r2, r2, #32
 8000b32:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b42:	d113      	bne.n	8000b6c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b48:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <HAL_ADC_Start_IT+0x164>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d105      	bne.n	8000b5a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_ADC_Start_IT+0x168>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d108      	bne.n	8000b6c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	e00c      	b.n	8000b86 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	e003      	b.n	8000b86 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40012800 	.word	0x40012800
 8000b94:	40012400 	.word	0x40012400

08000b98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d03e      	beq.n	8000c50 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d039      	beq.n	8000c50 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d105      	bne.n	8000bf4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bfe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c02:	d11d      	bne.n	8000c40 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d119      	bne.n	8000c40 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f022 0220 	bic.w	r2, r2, #32
 8000c1a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d105      	bne.n	8000c40 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c38:	f043 0201 	orr.w	r2, r3, #1
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff faf9 	bl	8000238 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f06f 0212 	mvn.w	r2, #18
 8000c4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d04d      	beq.n	8000cf6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d048      	beq.n	8000cf6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d105      	bne.n	8000c7c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000c86:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000c8a:	d012      	beq.n	8000cb2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d125      	bne.n	8000ce6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ca4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ca8:	d11d      	bne.n	8000ce6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d119      	bne.n	8000ce6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cc0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d105      	bne.n	8000ce6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cde:	f043 0201 	orr.w	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f9bd 	bl	8001066 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f06f 020c 	mvn.w	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d012      	beq.n	8000d26 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00d      	beq.n	8000d26 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f809 	bl	8000d2e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f06f 0201 	mvn.w	r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x20>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e0dc      	b.n	8000f1a <HAL_ADC_ConfigChannel+0x1da>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	d81c      	bhi.n	8000daa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	3b05      	subs	r3, #5
 8000d82:	221f      	movs	r2, #31
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4019      	ands	r1, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	3b05      	subs	r3, #5
 8000d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
 8000da8:	e03c      	b.n	8000e24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b0c      	cmp	r3, #12
 8000db0:	d81c      	bhi.n	8000dec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3b23      	subs	r3, #35	; 0x23
 8000dc4:	221f      	movs	r2, #31
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4019      	ands	r1, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	3b23      	subs	r3, #35	; 0x23
 8000dde:	fa00 f203 	lsl.w	r2, r0, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dea:	e01b      	b.n	8000e24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3b41      	subs	r3, #65	; 0x41
 8000dfe:	221f      	movs	r2, #31
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4019      	ands	r1, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	3b41      	subs	r3, #65	; 0x41
 8000e18:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b09      	cmp	r3, #9
 8000e2a:	d91c      	bls.n	8000e66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68d9      	ldr	r1, [r3, #12]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3b1e      	subs	r3, #30
 8000e3e:	2207      	movs	r2, #7
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	4019      	ands	r1, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	6898      	ldr	r0, [r3, #8]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	3b1e      	subs	r3, #30
 8000e58:	fa00 f203 	lsl.w	r2, r0, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	e019      	b.n	8000e9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6919      	ldr	r1, [r3, #16]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	2207      	movs	r2, #7
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4019      	ands	r1, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6898      	ldr	r0, [r3, #8]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	430a      	orrs	r2, r1
 8000e98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	d003      	beq.n	8000eaa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ea6:	2b11      	cmp	r3, #17
 8000ea8:	d132      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <HAL_ADC_ConfigChannel+0x1e4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d125      	bne.n	8000f00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d126      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ed0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b10      	cmp	r3, #16
 8000ed8:	d11a      	bne.n	8000f10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_ADC_ConfigChannel+0x1e8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <HAL_ADC_ConfigChannel+0x1ec>)
 8000ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee4:	0c9a      	lsrs	r2, r3, #18
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ef0:	e002      	b.n	8000ef8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f9      	bne.n	8000ef2 <HAL_ADC_ConfigChannel+0x1b2>
 8000efe:	e007      	b.n	8000f10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f043 0220 	orr.w	r2, r3, #32
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40012400 	.word	0x40012400
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	431bde83 	.word	0x431bde83

08000f30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d040      	beq.n	8000fd0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0201 	orr.w	r2, r2, #1
 8000f5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <ADC_Enable+0xac>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <ADC_Enable+0xb0>)
 8000f64:	fba2 2303 	umull	r2, r3, r2, r3
 8000f68:	0c9b      	lsrs	r3, r3, #18
 8000f6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f6c:	e002      	b.n	8000f74 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f7a:	f7ff fc75 	bl	8000868 <HAL_GetTick>
 8000f7e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f80:	e01f      	b.n	8000fc2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f82:	f7ff fc71 	bl	8000868 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d918      	bls.n	8000fc2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d011      	beq.n	8000fc2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa2:	f043 0210 	orr.w	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fae:	f043 0201 	orr.w	r2, r3, #1
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e007      	b.n	8000fd2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d1d8      	bne.n	8000f82 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	431bde83 	.word	0x431bde83

08000fe4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d12e      	bne.n	800105c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0201 	bic.w	r2, r2, #1
 800100c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800100e:	f7ff fc2b 	bl	8000868 <HAL_GetTick>
 8001012:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001014:	e01b      	b.n	800104e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001016:	f7ff fc27 	bl	8000868 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d914      	bls.n	800104e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b01      	cmp	r3, #1
 8001030:	d10d      	bne.n	800104e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	f043 0210 	orr.w	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	f043 0201 	orr.w	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e007      	b.n	800105e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b01      	cmp	r3, #1
 800105a:	d0dc      	beq.n	8001016 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4906      	ldr	r1, [pc, #24]	; (8001110 <__NVIC_EnableIRQ+0x34>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	; (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff4f 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff64 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ffb2 	bl	8001168 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff81 	bl	8001114 <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff57 	bl	80010dc <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b08b      	sub	sp, #44	; 0x2c
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e169      	b.n	8001520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800124c:	2201      	movs	r2, #1
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 8158 	bne.w	800151a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4a9a      	ldr	r2, [pc, #616]	; (80014d8 <HAL_GPIO_Init+0x2a0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d05e      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001274:	4a98      	ldr	r2, [pc, #608]	; (80014d8 <HAL_GPIO_Init+0x2a0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d875      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800127a:	4a98      	ldr	r2, [pc, #608]	; (80014dc <HAL_GPIO_Init+0x2a4>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d058      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001280:	4a96      	ldr	r2, [pc, #600]	; (80014dc <HAL_GPIO_Init+0x2a4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d86f      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001286:	4a96      	ldr	r2, [pc, #600]	; (80014e0 <HAL_GPIO_Init+0x2a8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d052      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 800128c:	4a94      	ldr	r2, [pc, #592]	; (80014e0 <HAL_GPIO_Init+0x2a8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d869      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 8001292:	4a94      	ldr	r2, [pc, #592]	; (80014e4 <HAL_GPIO_Init+0x2ac>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d04c      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 8001298:	4a92      	ldr	r2, [pc, #584]	; (80014e4 <HAL_GPIO_Init+0x2ac>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d863      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 800129e:	4a92      	ldr	r2, [pc, #584]	; (80014e8 <HAL_GPIO_Init+0x2b0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d046      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
 80012a4:	4a90      	ldr	r2, [pc, #576]	; (80014e8 <HAL_GPIO_Init+0x2b0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d85d      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012aa:	2b12      	cmp	r3, #18
 80012ac:	d82a      	bhi.n	8001304 <HAL_GPIO_Init+0xcc>
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d859      	bhi.n	8001366 <HAL_GPIO_Init+0x12e>
 80012b2:	a201      	add	r2, pc, #4	; (adr r2, 80012b8 <HAL_GPIO_Init+0x80>)
 80012b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b8:	08001333 	.word	0x08001333
 80012bc:	0800130d 	.word	0x0800130d
 80012c0:	0800131f 	.word	0x0800131f
 80012c4:	08001361 	.word	0x08001361
 80012c8:	08001367 	.word	0x08001367
 80012cc:	08001367 	.word	0x08001367
 80012d0:	08001367 	.word	0x08001367
 80012d4:	08001367 	.word	0x08001367
 80012d8:	08001367 	.word	0x08001367
 80012dc:	08001367 	.word	0x08001367
 80012e0:	08001367 	.word	0x08001367
 80012e4:	08001367 	.word	0x08001367
 80012e8:	08001367 	.word	0x08001367
 80012ec:	08001367 	.word	0x08001367
 80012f0:	08001367 	.word	0x08001367
 80012f4:	08001367 	.word	0x08001367
 80012f8:	08001367 	.word	0x08001367
 80012fc:	08001315 	.word	0x08001315
 8001300:	08001329 	.word	0x08001329
 8001304:	4a79      	ldr	r2, [pc, #484]	; (80014ec <HAL_GPIO_Init+0x2b4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800130a:	e02c      	b.n	8001366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	623b      	str	r3, [r7, #32]
          break;
 8001312:	e029      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	3304      	adds	r3, #4
 800131a:	623b      	str	r3, [r7, #32]
          break;
 800131c:	e024      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	3308      	adds	r3, #8
 8001324:	623b      	str	r3, [r7, #32]
          break;
 8001326:	e01f      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	330c      	adds	r3, #12
 800132e:	623b      	str	r3, [r7, #32]
          break;
 8001330:	e01a      	b.n	8001368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d102      	bne.n	8001340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800133a:	2304      	movs	r3, #4
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e013      	b.n	8001368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d105      	bne.n	8001354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001348:	2308      	movs	r3, #8
 800134a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	611a      	str	r2, [r3, #16]
          break;
 8001352:	e009      	b.n	8001368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	615a      	str	r2, [r3, #20]
          break;
 800135e:	e003      	b.n	8001368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
          break;
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x130>
          break;
 8001366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2bff      	cmp	r3, #255	; 0xff
 800136c:	d801      	bhi.n	8001372 <HAL_GPIO_Init+0x13a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	e001      	b.n	8001376 <HAL_GPIO_Init+0x13e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3304      	adds	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2bff      	cmp	r3, #255	; 0xff
 800137c:	d802      	bhi.n	8001384 <HAL_GPIO_Init+0x14c>
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	e002      	b.n	800138a <HAL_GPIO_Init+0x152>
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	3b08      	subs	r3, #8
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	210f      	movs	r1, #15
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	6a39      	ldr	r1, [r7, #32]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	431a      	orrs	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80b1 	beq.w	800151a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b8:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d0:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <HAL_GPIO_Init+0x2bc>)
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4013      	ands	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a40      	ldr	r2, [pc, #256]	; (80014f8 <HAL_GPIO_Init+0x2c0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d013      	beq.n	8001424 <HAL_GPIO_Init+0x1ec>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a3f      	ldr	r2, [pc, #252]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d00d      	beq.n	8001420 <HAL_GPIO_Init+0x1e8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a3e      	ldr	r2, [pc, #248]	; (8001500 <HAL_GPIO_Init+0x2c8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d007      	beq.n	800141c <HAL_GPIO_Init+0x1e4>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <HAL_GPIO_Init+0x2cc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_GPIO_Init+0x1e0>
 8001414:	2303      	movs	r3, #3
 8001416:	e006      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 8001418:	2304      	movs	r3, #4
 800141a:	e004      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 800141c:	2302      	movs	r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_GPIO_Init+0x1ee>
 8001424:	2300      	movs	r3, #0
 8001426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001428:	f002 0203 	and.w	r2, r2, #3
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	4093      	lsls	r3, r2
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001436:	492f      	ldr	r1, [pc, #188]	; (80014f4 <HAL_GPIO_Init+0x2bc>)
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	492c      	ldr	r1, [pc, #176]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800145e:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	4928      	ldr	r1, [pc, #160]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 800147a:	68da      	ldr	r2, [r3, #12]
 800147c:	4922      	ldr	r1, [pc, #136]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	43db      	mvns	r3, r3
 800148e:	491e      	ldr	r1, [pc, #120]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 8001490:	4013      	ands	r3, r2
 8001492:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4918      	ldr	r1, [pc, #96]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4914      	ldr	r1, [pc, #80]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d021      	beq.n	800150c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	490e      	ldr	r1, [pc, #56]	; (8001508 <HAL_GPIO_Init+0x2d0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
 80014d4:	e021      	b.n	800151a <HAL_GPIO_Init+0x2e2>
 80014d6:	bf00      	nop
 80014d8:	10320000 	.word	0x10320000
 80014dc:	10310000 	.word	0x10310000
 80014e0:	10220000 	.word	0x10220000
 80014e4:	10210000 	.word	0x10210000
 80014e8:	10120000 	.word	0x10120000
 80014ec:	10110000 	.word	0x10110000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	40010800 	.word	0x40010800
 80014fc:	40010c00 	.word	0x40010c00
 8001500:	40011000 	.word	0x40011000
 8001504:	40011400 	.word	0x40011400
 8001508:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_GPIO_Init+0x304>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	43db      	mvns	r3, r3
 8001514:	4909      	ldr	r1, [pc, #36]	; (800153c <HAL_GPIO_Init+0x304>)
 8001516:	4013      	ands	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	3301      	adds	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	fa22 f303 	lsr.w	r3, r2, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	f47f ae8e 	bne.w	800124c <HAL_GPIO_Init+0x14>
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	372c      	adds	r7, #44	; 0x2c
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	40010400 	.word	0x40010400

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800155c:	e003      	b.n	8001566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	041a      	lsls	r2, r3, #16
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	611a      	str	r2, [r3, #16]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e26c      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 8087 	beq.w	800169e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001590:	4b92      	ldr	r3, [pc, #584]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b04      	cmp	r3, #4
 800159a:	d00c      	beq.n	80015b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800159c:	4b8f      	ldr	r3, [pc, #572]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d112      	bne.n	80015ce <HAL_RCC_OscConfig+0x5e>
 80015a8:	4b8c      	ldr	r3, [pc, #560]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b4:	d10b      	bne.n	80015ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b6:	4b89      	ldr	r3, [pc, #548]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d06c      	beq.n	800169c <HAL_RCC_OscConfig+0x12c>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d168      	bne.n	800169c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e246      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x76>
 80015d8:	4b80      	ldr	r3, [pc, #512]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a7f      	ldr	r2, [pc, #508]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e02e      	b.n	8001644 <HAL_RCC_OscConfig+0xd4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x98>
 80015ee:	4b7b      	ldr	r3, [pc, #492]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7a      	ldr	r2, [pc, #488]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b78      	ldr	r3, [pc, #480]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a77      	ldr	r2, [pc, #476]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001600:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e01d      	b.n	8001644 <HAL_RCC_OscConfig+0xd4>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0xbc>
 8001612:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a71      	ldr	r2, [pc, #452]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b6f      	ldr	r3, [pc, #444]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a6e      	ldr	r2, [pc, #440]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0xd4>
 800162c:	4b6b      	ldr	r3, [pc, #428]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a6a      	ldr	r2, [pc, #424]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b68      	ldr	r3, [pc, #416]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a67      	ldr	r2, [pc, #412]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001642:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff f90c 	bl	8000868 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001654:	f7ff f908 	bl	8000868 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e1fa      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b5d      	ldr	r3, [pc, #372]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0xe4>
 8001672:	e014      	b.n	800169e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff f8f8 	bl	8000868 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7ff f8f4 	bl	8000868 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b64      	cmp	r3, #100	; 0x64
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e1e6      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x10c>
 800169a:	e000      	b.n	800169e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d063      	beq.n	8001772 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016aa:	4b4c      	ldr	r3, [pc, #304]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016b6:	4b49      	ldr	r3, [pc, #292]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d11c      	bne.n	80016fc <HAL_RCC_OscConfig+0x18c>
 80016c2:	4b46      	ldr	r3, [pc, #280]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d116      	bne.n	80016fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ce:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d005      	beq.n	80016e6 <HAL_RCC_OscConfig+0x176>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e1ba      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e6:	4b3d      	ldr	r3, [pc, #244]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4939      	ldr	r1, [pc, #228]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fa:	e03a      	b.n	8001772 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001704:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff f8ad 	bl	8000868 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff f8a9 	bl	8000868 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e19b      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001724:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4927      	ldr	r1, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
 8001744:	e015      	b.n	8001772 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <HAL_RCC_OscConfig+0x270>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff f88c 	bl	8000868 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001754:	f7ff f888 	bl	8000868 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e17a      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d03a      	beq.n	80017f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d019      	beq.n	80017ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <HAL_RCC_OscConfig+0x274>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff f86c 	bl	8000868 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff f868 	bl	8000868 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e15a      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_RCC_OscConfig+0x26c>)
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f000 fae8 	bl	8001d88 <RCC_Delay>
 80017b8:	e01c      	b.n	80017f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_RCC_OscConfig+0x274>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff f852 	bl	8000868 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c6:	e00f      	b.n	80017e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff f84e 	bl	8000868 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d908      	bls.n	80017e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e140      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000
 80017e0:	42420000 	.word	0x42420000
 80017e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e8:	4b9e      	ldr	r3, [pc, #632]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e9      	bne.n	80017c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a6 	beq.w	800194e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001806:	4b97      	ldr	r3, [pc, #604]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10d      	bne.n	800182e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b94      	ldr	r3, [pc, #592]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a93      	ldr	r2, [pc, #588]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b91      	ldr	r3, [pc, #580]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182a:	2301      	movs	r3, #1
 800182c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	4b8e      	ldr	r3, [pc, #568]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d118      	bne.n	800186c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183a:	4b8b      	ldr	r3, [pc, #556]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a8a      	ldr	r2, [pc, #552]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001846:	f7ff f80f 	bl	8000868 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184e:	f7ff f80b 	bl	8000868 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b64      	cmp	r3, #100	; 0x64
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e0fd      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	4b81      	ldr	r3, [pc, #516]	; (8001a68 <HAL_RCC_OscConfig+0x4f8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x312>
 8001874:	4b7b      	ldr	r3, [pc, #492]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4a7a      	ldr	r2, [pc, #488]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6213      	str	r3, [r2, #32]
 8001880:	e02d      	b.n	80018de <HAL_RCC_OscConfig+0x36e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x334>
 800188a:	4b76      	ldr	r3, [pc, #472]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a75      	ldr	r2, [pc, #468]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6213      	str	r3, [r2, #32]
 8001896:	4b73      	ldr	r3, [pc, #460]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a72      	ldr	r2, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	e01c      	b.n	80018de <HAL_RCC_OscConfig+0x36e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d10c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x356>
 80018ac:	4b6d      	ldr	r3, [pc, #436]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	4a6c      	ldr	r2, [pc, #432]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	6213      	str	r3, [r2, #32]
 80018b8:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a69      	ldr	r2, [pc, #420]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	e00b      	b.n	80018de <HAL_RCC_OscConfig+0x36e>
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4a66      	ldr	r2, [pc, #408]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6213      	str	r3, [r2, #32]
 80018d2:	4b64      	ldr	r3, [pc, #400]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a63      	ldr	r2, [pc, #396]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d015      	beq.n	8001912 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7fe ffbf 	bl	8000868 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7fe ffbb 	bl	8000868 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0ab      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001904:	4b57      	ldr	r3, [pc, #348]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0ee      	beq.n	80018ee <HAL_RCC_OscConfig+0x37e>
 8001910:	e014      	b.n	800193c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001912:	f7fe ffa9 	bl	8000868 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	e00a      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191a:	f7fe ffa5 	bl	8000868 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f241 3288 	movw	r2, #5000	; 0x1388
 8001928:	4293      	cmp	r3, r2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e095      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1ee      	bne.n	800191a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d105      	bne.n	800194e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001942:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a47      	ldr	r2, [pc, #284]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8081 	beq.w	8001a5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001958:	4b42      	ldr	r3, [pc, #264]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	2b08      	cmp	r3, #8
 8001962:	d061      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d146      	bne.n	80019fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196c:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <HAL_RCC_OscConfig+0x4fc>)
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7fe ff79 	bl	8000868 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197a:	f7fe ff75 	bl	8000868 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e067      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	4b35      	ldr	r3, [pc, #212]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a0:	d108      	bne.n	80019b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	492d      	ldr	r1, [pc, #180]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a19      	ldr	r1, [r3, #32]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	430b      	orrs	r3, r1
 80019c6:	4927      	ldr	r1, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <HAL_RCC_OscConfig+0x4fc>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7fe ff49 	bl	8000868 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019da:	f7fe ff45 	bl	8000868 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e037      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x46a>
 80019f8:	e02f      	b.n	8001a5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_RCC_OscConfig+0x4fc>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7fe ff32 	bl	8000868 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7fe ff2e 	bl	8000868 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e020      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x498>
 8001a26:	e018      	b.n	8001a5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e013      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	42420060 	.word	0x42420060

08001a70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0d0      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4965      	ldr	r1, [pc, #404]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ad6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	494d      	ldr	r1, [pc, #308]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d040      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d115      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e07f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d109      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e073      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3e:	4b3d      	ldr	r3, [pc, #244]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06b      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b4e:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f023 0203 	bic.w	r2, r3, #3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	4936      	ldr	r1, [pc, #216]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b60:	f7fe fe82 	bl	8000868 <HAL_GetTick>
 8001b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b68:	f7fe fe7e 	bl	8000868 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e053      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 020c 	and.w	r2, r3, #12
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d1eb      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d210      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 0207 	bic.w	r2, r3, #7
 8001ba6:	4922      	ldr	r1, [pc, #136]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e032      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4916      	ldr	r1, [pc, #88]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bfe:	f000 f821 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	490a      	ldr	r1, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001c10:	5ccb      	ldrb	r3, [r1, r3]
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1cc>)
 8001c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1d0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fd18 	bl	8000654 <HAL_InitTick>

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	080055f0 	.word	0x080055f0
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b087      	sub	sp, #28
 8001c48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d002      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x30>
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x36>
 8001c72:	e027      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001c76:	613b      	str	r3, [r7, #16]
      break;
 8001c78:	e027      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	0c9b      	lsrs	r3, r3, #18
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c84:	5cd3      	ldrb	r3, [r2, r3]
 8001c86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d010      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	0c5b      	lsrs	r3, r3, #17
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ca6:	fb02 f203 	mul.w	r2, r2, r3
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e004      	b.n	8001cbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	613b      	str	r3, [r7, #16]
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc6:	613b      	str	r3, [r7, #16]
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	693b      	ldr	r3, [r7, #16]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	007a1200 	.word	0x007a1200
 8001ce0:	08005608 	.word	0x08005608
 8001ce4:	08005618 	.word	0x08005618
 8001ce8:	003d0900 	.word	0x003d0900

08001cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b02      	ldr	r3, [pc, #8]	; (8001cfc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d04:	f7ff fff2 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	0adb      	lsrs	r3, r3, #11
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4903      	ldr	r1, [pc, #12]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40021000 	.word	0x40021000
 8001d24:	08005600 	.word	0x08005600

08001d28 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	220f      	movs	r2, #15
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_RCC_GetClockConfig+0x58>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_RCC_GetClockConfig+0x58>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_GetClockConfig+0x58>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_RCC_GetClockConfig+0x58>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	08db      	lsrs	r3, r3, #3
 8001d62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_GetClockConfig+0x5c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0207 	and.w	r2, r3, #7
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40022000 	.word	0x40022000

08001d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <RCC_Delay+0x34>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <RCC_Delay+0x38>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a5b      	lsrs	r3, r3, #9
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001da4:	bf00      	nop
  }
  while (Delay --);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f9      	bne.n	8001da4 <RCC_Delay+0x1c>
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	10624dd3 	.word	0x10624dd3

08001dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d07d      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de4:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	4a4b      	ldr	r2, [pc, #300]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	61d3      	str	r3, [r2, #28]
 8001dfc:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d118      	bne.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e18:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a42      	ldr	r2, [pc, #264]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7fe fd20 	bl	8000868 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	e008      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7fe fd1c 	bl	8000868 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e06d      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d02e      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d027      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e68:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e78:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e7e:	4a29      	ldr	r2, [pc, #164]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d014      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8e:	f7fe fceb 	bl	8000868 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7fe fce7 	bl	8000868 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e036      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ee      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4917      	ldr	r1, [pc, #92]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	490b      	ldr	r1, [pc, #44]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d008      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4904      	ldr	r1, [pc, #16]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	42420440 	.word	0x42420440

08001f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e041      	b.n	8001fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f839 	bl	8001fce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4610      	mov	r0, r2
 8001f70:	f000 f9b4 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d001      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e03a      	b.n	800206e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a18      	ldr	r2, [pc, #96]	; (8002078 <HAL_TIM_Base_Start_IT+0x98>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00e      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x58>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002022:	d009      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x58>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a14      	ldr	r2, [pc, #80]	; (800207c <HAL_TIM_Base_Start_IT+0x9c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d004      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x58>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a13      	ldr	r2, [pc, #76]	; (8002080 <HAL_TIM_Base_Start_IT+0xa0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d111      	bne.n	800205c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b06      	cmp	r3, #6
 8002048:	d010      	beq.n	800206c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205a:	e007      	b.n	800206c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0201 	orr.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40000400 	.word	0x40000400
 8002080:	40000800 	.word	0x40000800

08002084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0202 	mvn.w	r2, #2
 80020b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8ed 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8e0 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8ef 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0204 	mvn.w	r2, #4
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8c3 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8b6 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f8c5 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b08      	cmp	r3, #8
 8002140:	d122      	bne.n	8002188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b08      	cmp	r3, #8
 800214e:	d11b      	bne.n	8002188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0208 	mvn.w	r2, #8
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2204      	movs	r2, #4
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f899 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f88c 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f89b 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b10      	cmp	r3, #16
 8002194:	d122      	bne.n	80021dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d11b      	bne.n	80021dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0210 	mvn.w	r2, #16
 80021ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2208      	movs	r2, #8
 80021b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f86f 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 80021c8:	e005      	b.n	80021d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f862 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f871 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10e      	bne.n	8002208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d107      	bne.n	8002208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0201 	mvn.w	r2, #1
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe f998 	bl	8000538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	2b80      	cmp	r3, #128	; 0x80
 8002214:	d10e      	bne.n	8002234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d107      	bne.n	8002234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8bf 	bl	80023b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f835 	bl	80022ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b20      	cmp	r3, #32
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b20      	cmp	r3, #32
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0220 	mvn.w	r2, #32
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f88a 	bl	80023a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a29      	ldr	r2, [pc, #164]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00b      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fa:	d007      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a26      	ldr	r2, [pc, #152]	; (8002398 <TIM_Base_SetConfig+0xbc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <TIM_Base_SetConfig+0xc0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00b      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d007      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <TIM_Base_SetConfig+0xbc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <TIM_Base_SetConfig+0xc0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d108      	bne.n	8002350 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d103      	bne.n	8002384 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800

080023a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <xQueueGenericReset>:
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <xQueueGenericReset+0x2e>
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xQueueGenericReset+0x2c>
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d05d      	beq.n	80024b4 <xQueueGenericReset+0xf0>
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d059      	beq.n	80024b4 <xQueueGenericReset+0xf0>
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	2100      	movs	r1, #0
 800240a:	fba3 2302 	umull	r2, r3, r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d000      	beq.n	8002414 <xQueueGenericReset+0x50>
 8002412:	2101      	movs	r1, #1
 8002414:	460b      	mov	r3, r1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d14c      	bne.n	80024b4 <xQueueGenericReset+0xf0>
 800241a:	f002 fdc9 	bl	8004fb0 <vPortEnterCritical>
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	441a      	add	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2200      	movs	r2, #0
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	3b01      	subs	r3, #1
 800244c:	6939      	ldr	r1, [r7, #16]
 800244e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	441a      	add	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	22ff      	movs	r2, #255	; 0xff
 800245e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	22ff      	movs	r2, #255	; 0xff
 8002466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d114      	bne.n	800249a <xQueueGenericReset+0xd6>
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01a      	beq.n	80024ae <xQueueGenericReset+0xea>
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	3310      	adds	r3, #16
 800247c:	4618      	mov	r0, r3
 800247e:	f001 fc93 	bl	8003da8 <xTaskRemoveFromEventList>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d012      	beq.n	80024ae <xQueueGenericReset+0xea>
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <xQueueGenericReset+0x11c>)
 800248a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	e009      	b.n	80024ae <xQueueGenericReset+0xea>
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3310      	adds	r3, #16
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fc06 	bl	8004cb0 <vListInitialise>
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	3324      	adds	r3, #36	; 0x24
 80024a8:	4618      	mov	r0, r3
 80024aa:	f002 fc01 	bl	8004cb0 <vListInitialise>
 80024ae:	f002 fdaf 	bl	8005010 <vPortExitCritical>
 80024b2:	e001      	b.n	80024b8 <xQueueGenericReset+0xf4>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10a      	bne.n	80024d4 <xQueueGenericReset+0x110>
 80024be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	bf00      	nop
 80024d2:	e7fe      	b.n	80024d2 <xQueueGenericReset+0x10e>
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000ed04 	.word	0xe000ed04

080024e4 <xQueueGenericCreate>:
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	71fb      	strb	r3, [r7, #7]
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d02e      	beq.n	800255a <xQueueGenericCreate+0x76>
 80024fc:	2100      	movs	r1, #0
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	fba3 2302 	umull	r2, r3, r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d000      	beq.n	800250c <xQueueGenericCreate+0x28>
 800250a:	2101      	movs	r1, #1
 800250c:	460b      	mov	r3, r1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d123      	bne.n	800255a <xQueueGenericCreate+0x76>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800251e:	d81c      	bhi.n	800255a <xQueueGenericCreate+0x76>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	3350      	adds	r3, #80	; 0x50
 800252e:	4618      	mov	r0, r3
 8002530:	f002 fb9a 	bl	8004c68 <pvPortMalloc>
 8002534:	61f8      	str	r0, [r7, #28]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01c      	beq.n	8002576 <xQueueGenericCreate+0x92>
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3350      	adds	r3, #80	; 0x50
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f814 	bl	8002580 <prvInitialiseNewQueue>
 8002558:	e00d      	b.n	8002576 <xQueueGenericCreate+0x92>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <xQueueGenericCreate+0x92>
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	bf00      	nop
 8002574:	e7fe      	b.n	8002574 <xQueueGenericCreate+0x90>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <prvInitialiseNewQueue>:
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	70fb      	strb	r3, [r7, #3]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <prvInitialiseNewQueue+0x1c>
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e002      	b.n	80025a2 <prvInitialiseNewQueue+0x22>
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
 80025ae:	2101      	movs	r1, #1
 80025b0:	69b8      	ldr	r0, [r7, #24]
 80025b2:	f7ff ff07 	bl	80023c4 <xQueueGenericReset>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <xQueueGenericSend>:
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <xQueueGenericSend+0x32>
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025f6:	bf00      	nop
 80025f8:	e7fe      	b.n	80025f8 <xQueueGenericSend+0x30>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <xQueueGenericSend+0x40>
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <xQueueGenericSend+0x44>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <xQueueGenericSend+0x46>
 800260c:	2300      	movs	r3, #0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <xQueueGenericSend+0x60>
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	bf00      	nop
 8002626:	e7fe      	b.n	8002626 <xQueueGenericSend+0x5e>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d103      	bne.n	8002636 <xQueueGenericSend+0x6e>
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <xQueueGenericSend+0x72>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueGenericSend+0x74>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueGenericSend+0x8e>
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueGenericSend+0x8c>
 8002656:	f001 fe15 	bl	8004284 <xTaskGetSchedulerState>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <xQueueGenericSend+0x9e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <xQueueGenericSend+0xa2>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <xQueueGenericSend+0xa4>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <xQueueGenericSend+0xbe>
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueGenericSend+0xbc>
 8002686:	f002 fc93 	bl	8004fb0 <vPortEnterCritical>
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <xQueueGenericSend+0xd4>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d129      	bne.n	80026f0 <xQueueGenericSend+0x128>
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a2:	f000 fbda 	bl	8002e5a <prvCopyDataToQueue>
 80026a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <xQueueGenericSend+0x10a>
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f001 fb77 	bl	8003da8 <xTaskRemoveFromEventList>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <xQueueGenericSend+0x120>
 80026c0:	4b3f      	ldr	r3, [pc, #252]	; (80027c0 <xQueueGenericSend+0x1f8>)
 80026c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	e00a      	b.n	80026e8 <xQueueGenericSend+0x120>
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <xQueueGenericSend+0x120>
 80026d8:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <xQueueGenericSend+0x1f8>)
 80026da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f002 fc92 	bl	8005010 <vPortExitCritical>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e063      	b.n	80027b8 <xQueueGenericSend+0x1f0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <xQueueGenericSend+0x136>
 80026f6:	f002 fc8b 	bl	8005010 <vPortExitCritical>
 80026fa:	2300      	movs	r3, #0
 80026fc:	e05c      	b.n	80027b8 <xQueueGenericSend+0x1f0>
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <xQueueGenericSend+0x14a>
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4618      	mov	r0, r3
 800270a:	f001 fc25 	bl	8003f58 <vTaskInternalSetTimeOutState>
 800270e:	2301      	movs	r3, #1
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
 8002712:	f002 fc7d 	bl	8005010 <vPortExitCritical>
 8002716:	f000 ffb7 	bl	8003688 <vTaskSuspendAll>
 800271a:	f002 fc49 	bl	8004fb0 <vPortEnterCritical>
 800271e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002724:	b25b      	sxtb	r3, r3
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272a:	d103      	bne.n	8002734 <xQueueGenericSend+0x16c>
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800273a:	b25b      	sxtb	r3, r3
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d103      	bne.n	800274a <xQueueGenericSend+0x182>
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800274a:	f002 fc61 	bl	8005010 <vPortExitCritical>
 800274e:	1d3a      	adds	r2, r7, #4
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f001 fc14 	bl	8003f84 <xTaskCheckForTimeOut>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d124      	bne.n	80027ac <xQueueGenericSend+0x1e4>
 8002762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002764:	f000 fc71 	bl	800304a <prvIsQueueFull>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d018      	beq.n	80027a0 <xQueueGenericSend+0x1d8>
 800276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002770:	3310      	adds	r3, #16
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f001 faac 	bl	8003cd4 <vTaskPlaceOnEventList>
 800277c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800277e:	f000 fbfc 	bl	8002f7a <prvUnlockQueue>
 8002782:	f000 ffc5 	bl	8003710 <xTaskResumeAll>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	f47f af7c 	bne.w	8002686 <xQueueGenericSend+0xbe>
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <xQueueGenericSend+0x1f8>)
 8002790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	e772      	b.n	8002686 <xQueueGenericSend+0xbe>
 80027a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027a2:	f000 fbea 	bl	8002f7a <prvUnlockQueue>
 80027a6:	f000 ffb3 	bl	8003710 <xTaskResumeAll>
 80027aa:	e76c      	b.n	8002686 <xQueueGenericSend+0xbe>
 80027ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027ae:	f000 fbe4 	bl	8002f7a <prvUnlockQueue>
 80027b2:	f000 ffad 	bl	8003710 <xTaskResumeAll>
 80027b6:	2300      	movs	r3, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	3738      	adds	r7, #56	; 0x38
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	e000ed04 	.word	0xe000ed04

080027c4 <xQueueGenericSendFromISR>:
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b092      	sub	sp, #72	; 0x48
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	643b      	str	r3, [r7, #64]	; 0x40
 80027d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xQueueGenericSendFromISR+0x2e>
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xQueueGenericSendFromISR+0x2c>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <xQueueGenericSendFromISR+0x3c>
 80027f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <xQueueGenericSendFromISR+0x40>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <xQueueGenericSendFromISR+0x42>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <xQueueGenericSendFromISR+0x5c>
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
 800281c:	bf00      	nop
 800281e:	e7fe      	b.n	800281e <xQueueGenericSendFromISR+0x5a>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d103      	bne.n	800282e <xQueueGenericSendFromISR+0x6a>
 8002826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <xQueueGenericSendFromISR+0x6e>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <xQueueGenericSendFromISR+0x70>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <xQueueGenericSendFromISR+0x8a>
 8002838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283c:	f383 8811 	msr	BASEPRI, r3
 8002840:	f3bf 8f6f 	isb	sy
 8002844:	f3bf 8f4f 	dsb	sy
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	bf00      	nop
 800284c:	e7fe      	b.n	800284c <xQueueGenericSendFromISR+0x88>
 800284e:	f002 fd53 	bl	80052f8 <vPortValidateInterruptPriority>
 8002852:	f3ef 8211 	mrs	r2, BASEPRI
 8002856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285a:	f383 8811 	msr	BASEPRI, r3
 800285e:	f3bf 8f6f 	isb	sy
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	623a      	str	r2, [r7, #32]
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <xQueueGenericSendFromISR+0xbc>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d146      	bne.n	800290e <xQueueGenericSendFromISR+0x14a>
 8002880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002882:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002886:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800288a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002896:	f000 fae0 	bl	8002e5a <prvCopyDataToQueue>
 800289a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d112      	bne.n	80028ca <xQueueGenericSendFromISR+0x106>
 80028a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02d      	beq.n	8002908 <xQueueGenericSendFromISR+0x144>
 80028ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ae:	3324      	adds	r3, #36	; 0x24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 fa79 	bl	8003da8 <xTaskRemoveFromEventList>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d025      	beq.n	8002908 <xQueueGenericSendFromISR+0x144>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d022      	beq.n	8002908 <xQueueGenericSendFromISR+0x144>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e01e      	b.n	8002908 <xQueueGenericSendFromISR+0x144>
 80028ca:	f001 f82b 	bl	8003924 <uxTaskGetNumberOfTasks>
 80028ce:	6338      	str	r0, [r7, #48]	; 0x30
 80028d0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80028d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d916      	bls.n	8002908 <xQueueGenericSendFromISR+0x144>
 80028da:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80028de:	2b7f      	cmp	r3, #127	; 0x7f
 80028e0:	d10a      	bne.n	80028f8 <xQueueGenericSendFromISR+0x134>
 80028e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	bf00      	nop
 80028f6:	e7fe      	b.n	80028f6 <xQueueGenericSendFromISR+0x132>
 80028f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80028fc:	3301      	adds	r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	b25a      	sxtb	r2, r3
 8002902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002908:	2301      	movs	r3, #1
 800290a:	647b      	str	r3, [r7, #68]	; 0x44
 800290c:	e001      	b.n	8002912 <xQueueGenericSendFromISR+0x14e>
 800290e:	2300      	movs	r3, #0
 8002910:	647b      	str	r3, [r7, #68]	; 0x44
 8002912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	bf00      	nop
 800291e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002920:	4618      	mov	r0, r3
 8002922:	3748      	adds	r7, #72	; 0x48
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <xQueueGiveFromISR>:
 8002928:	b580      	push	{r7, lr}
 800292a:	b090      	sub	sp, #64	; 0x40
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xQueueGiveFromISR+0x2a>
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xQueueGiveFromISR+0x28>
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <xQueueGiveFromISR+0x48>
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	bf00      	nop
 800296e:	e7fe      	b.n	800296e <xQueueGiveFromISR+0x46>
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d103      	bne.n	8002980 <xQueueGiveFromISR+0x58>
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <xQueueGiveFromISR+0x5c>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <xQueueGiveFromISR+0x5e>
 8002984:	2300      	movs	r3, #0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <xQueueGiveFromISR+0x78>
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	bf00      	nop
 800299e:	e7fe      	b.n	800299e <xQueueGiveFromISR+0x76>
 80029a0:	f002 fcaa 	bl	80052f8 <vPortValidateInterruptPriority>
 80029a4:	f3ef 8211 	mrs	r2, BASEPRI
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	61ba      	str	r2, [r7, #24]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c4:	633b      	str	r3, [r7, #48]	; 0x30
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d242      	bcs.n	8002a56 <xQueueGiveFromISR+0x12e>
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
 80029e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80029e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ea:	d112      	bne.n	8002a12 <xQueueGiveFromISR+0xea>
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02d      	beq.n	8002a50 <xQueueGiveFromISR+0x128>
 80029f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f6:	3324      	adds	r3, #36	; 0x24
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 f9d5 	bl	8003da8 <xTaskRemoveFromEventList>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d025      	beq.n	8002a50 <xQueueGiveFromISR+0x128>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d022      	beq.n	8002a50 <xQueueGiveFromISR+0x128>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e01e      	b.n	8002a50 <xQueueGiveFromISR+0x128>
 8002a12:	f000 ff87 	bl	8003924 <uxTaskGetNumberOfTasks>
 8002a16:	62b8      	str	r0, [r7, #40]	; 0x28
 8002a18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d916      	bls.n	8002a50 <xQueueGiveFromISR+0x128>
 8002a22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002a26:	2b7f      	cmp	r3, #127	; 0x7f
 8002a28:	d10a      	bne.n	8002a40 <xQueueGiveFromISR+0x118>
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	bf00      	nop
 8002a3e:	e7fe      	b.n	8002a3e <xQueueGiveFromISR+0x116>
 8002a40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002a44:	3301      	adds	r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	b25a      	sxtb	r2, r3
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a50:	2301      	movs	r3, #1
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a54:	e001      	b.n	8002a5a <xQueueGiveFromISR+0x132>
 8002a56:	2300      	movs	r3, #0
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	bf00      	nop
 8002a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3740      	adds	r7, #64	; 0x40
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <xQueueReceive>:
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <xQueueReceive+0x30>
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	623b      	str	r3, [r7, #32]
 8002a9c:	bf00      	nop
 8002a9e:	e7fe      	b.n	8002a9e <xQueueReceive+0x2e>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <xQueueReceive+0x3e>
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <xQueueReceive+0x42>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <xQueueReceive+0x44>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <xQueueReceive+0x5e>
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <xQueueReceive+0x5c>
 8002ace:	f001 fbd9 	bl	8004284 <xTaskGetSchedulerState>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d102      	bne.n	8002ade <xQueueReceive+0x6e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <xQueueReceive+0x72>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <xQueueReceive+0x74>
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <xQueueReceive+0x8e>
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	bf00      	nop
 8002afc:	e7fe      	b.n	8002afc <xQueueReceive+0x8c>
 8002afe:	f002 fa57 	bl	8004fb0 <vPortEnterCritical>
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01f      	beq.n	8002b4e <xQueueReceive+0xde>
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b12:	f000 fa0c 	bl	8002f2e <prvCopyDataFromQueue>
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	1e5a      	subs	r2, r3, #1
 8002b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00f      	beq.n	8002b46 <xQueueReceive+0xd6>
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	3310      	adds	r3, #16
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 f93c 	bl	8003da8 <xTaskRemoveFromEventList>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <xQueueReceive+0xd6>
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <xQueueReceive+0x1bc>)
 8002b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f002 fa63 	bl	8005010 <vPortExitCritical>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e069      	b.n	8002c22 <xQueueReceive+0x1b2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d103      	bne.n	8002b5c <xQueueReceive+0xec>
 8002b54:	f002 fa5c 	bl	8005010 <vPortExitCritical>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e062      	b.n	8002c22 <xQueueReceive+0x1b2>
 8002b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <xQueueReceive+0x100>
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 f9f6 	bl	8003f58 <vTaskInternalSetTimeOutState>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b70:	f002 fa4e 	bl	8005010 <vPortExitCritical>
 8002b74:	f000 fd88 	bl	8003688 <vTaskSuspendAll>
 8002b78:	f002 fa1a 	bl	8004fb0 <vPortEnterCritical>
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d103      	bne.n	8002b92 <xQueueReceive+0x122>
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d103      	bne.n	8002ba8 <xQueueReceive+0x138>
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ba8:	f002 fa32 	bl	8005010 <vPortExitCritical>
 8002bac:	1d3a      	adds	r2, r7, #4
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 f9e5 	bl	8003f84 <xTaskCheckForTimeOut>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d123      	bne.n	8002c08 <xQueueReceive+0x198>
 8002bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bc2:	f000 fa2c 	bl	800301e <prvIsQueueEmpty>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d017      	beq.n	8002bfc <xQueueReceive+0x18c>
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	3324      	adds	r3, #36	; 0x24
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 f87d 	bl	8003cd4 <vTaskPlaceOnEventList>
 8002bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bdc:	f000 f9cd 	bl	8002f7a <prvUnlockQueue>
 8002be0:	f000 fd96 	bl	8003710 <xTaskResumeAll>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d189      	bne.n	8002afe <xQueueReceive+0x8e>
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <xQueueReceive+0x1bc>)
 8002bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	e780      	b.n	8002afe <xQueueReceive+0x8e>
 8002bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bfe:	f000 f9bc 	bl	8002f7a <prvUnlockQueue>
 8002c02:	f000 fd85 	bl	8003710 <xTaskResumeAll>
 8002c06:	e77a      	b.n	8002afe <xQueueReceive+0x8e>
 8002c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0a:	f000 f9b6 	bl	8002f7a <prvUnlockQueue>
 8002c0e:	f000 fd7f 	bl	8003710 <xTaskResumeAll>
 8002c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c14:	f000 fa03 	bl	800301e <prvIsQueueEmpty>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f43f af6f 	beq.w	8002afe <xQueueReceive+0x8e>
 8002c20:	2300      	movs	r3, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	3730      	adds	r7, #48	; 0x30
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	e000ed04 	.word	0xe000ed04

08002c30 <xQueueSemaphoreTake>:
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	; 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	2300      	movs	r3, #0
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <xQueueSemaphoreTake+0x32>
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	bf00      	nop
 8002c60:	e7fe      	b.n	8002c60 <xQueueSemaphoreTake+0x30>
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <xQueueSemaphoreTake+0x50>
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <xQueueSemaphoreTake+0x4e>
 8002c80:	f001 fb00 	bl	8004284 <xTaskGetSchedulerState>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <xQueueSemaphoreTake+0x60>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <xQueueSemaphoreTake+0x64>
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <xQueueSemaphoreTake+0x66>
 8002c94:	2300      	movs	r3, #0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <xQueueSemaphoreTake+0x80>
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	bf00      	nop
 8002cae:	e7fe      	b.n	8002cae <xQueueSemaphoreTake+0x7e>
 8002cb0:	f002 f97e 	bl	8004fb0 <vPortEnterCritical>
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d024      	beq.n	8002d0a <xQueueSemaphoreTake+0xda>
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	1e5a      	subs	r2, r3, #1
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <xQueueSemaphoreTake+0xaa>
 8002cd0:	f001 fcc6 	bl	8004660 <pvTaskIncrementMutexHeldCount>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00f      	beq.n	8002d02 <xQueueSemaphoreTake+0xd2>
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	3310      	adds	r3, #16
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 f85e 	bl	8003da8 <xTaskRemoveFromEventList>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d007      	beq.n	8002d02 <xQueueSemaphoreTake+0xd2>
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <xQueueSemaphoreTake+0x1f8>)
 8002cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f002 f985 	bl	8005010 <vPortExitCritical>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e089      	b.n	8002e1e <xQueueSemaphoreTake+0x1ee>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d103      	bne.n	8002d18 <xQueueSemaphoreTake+0xe8>
 8002d10:	f002 f97e 	bl	8005010 <vPortExitCritical>
 8002d14:	2300      	movs	r3, #0
 8002d16:	e082      	b.n	8002e1e <xQueueSemaphoreTake+0x1ee>
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <xQueueSemaphoreTake+0xfc>
 8002d1e:	f107 0308 	add.w	r3, r7, #8
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 f918 	bl	8003f58 <vTaskInternalSetTimeOutState>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2c:	f002 f970 	bl	8005010 <vPortExitCritical>
 8002d30:	f000 fcaa 	bl	8003688 <vTaskSuspendAll>
 8002d34:	f002 f93c 	bl	8004fb0 <vPortEnterCritical>
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d103      	bne.n	8002d4e <xQueueSemaphoreTake+0x11e>
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d103      	bne.n	8002d64 <xQueueSemaphoreTake+0x134>
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d64:	f002 f954 	bl	8005010 <vPortExitCritical>
 8002d68:	463a      	mov	r2, r7
 8002d6a:	f107 0308 	add.w	r3, r7, #8
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 f907 	bl	8003f84 <xTaskCheckForTimeOut>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d132      	bne.n	8002de2 <xQueueSemaphoreTake+0x1b2>
 8002d7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d7e:	f000 f94e 	bl	800301e <prvIsQueueEmpty>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d026      	beq.n	8002dd6 <xQueueSemaphoreTake+0x1a6>
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <xQueueSemaphoreTake+0x174>
 8002d90:	f002 f90e 	bl	8004fb0 <vPortEnterCritical>
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 fa91 	bl	80042c0 <xTaskPriorityInherit>
 8002d9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8002da0:	f002 f936 	bl	8005010 <vPortExitCritical>
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	3324      	adds	r3, #36	; 0x24
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 ff91 	bl	8003cd4 <vTaskPlaceOnEventList>
 8002db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002db4:	f000 f8e1 	bl	8002f7a <prvUnlockQueue>
 8002db8:	f000 fcaa 	bl	8003710 <xTaskResumeAll>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f47f af76 	bne.w	8002cb0 <xQueueSemaphoreTake+0x80>
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <xQueueSemaphoreTake+0x1f8>)
 8002dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	e76c      	b.n	8002cb0 <xQueueSemaphoreTake+0x80>
 8002dd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dd8:	f000 f8cf 	bl	8002f7a <prvUnlockQueue>
 8002ddc:	f000 fc98 	bl	8003710 <xTaskResumeAll>
 8002de0:	e766      	b.n	8002cb0 <xQueueSemaphoreTake+0x80>
 8002de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002de4:	f000 f8c9 	bl	8002f7a <prvUnlockQueue>
 8002de8:	f000 fc92 	bl	8003710 <xTaskResumeAll>
 8002dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dee:	f000 f916 	bl	800301e <prvIsQueueEmpty>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f43f af5b 	beq.w	8002cb0 <xQueueSemaphoreTake+0x80>
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <xQueueSemaphoreTake+0x1ec>
 8002e00:	f002 f8d6 	bl	8004fb0 <vPortEnterCritical>
 8002e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e06:	f000 f811 	bl	8002e2c <prvGetDisinheritPriorityAfterTimeout>
 8002e0a:	61f8      	str	r0, [r7, #28]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	69f9      	ldr	r1, [r7, #28]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 fb7a 	bl	800450c <vTaskPriorityDisinheritAfterTimeout>
 8002e18:	f002 f8fa 	bl	8005010 <vPortExitCritical>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3730      	adds	r7, #48	; 0x30
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000ed04 	.word	0xe000ed04

08002e2c <prvGetDisinheritPriorityAfterTimeout>:
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1c3 0305 	rsb	r3, r3, #5
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e001      	b.n	8002e4e <prvGetDisinheritPriorityAfterTimeout+0x22>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <prvCopyDataToQueue>:
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <prvCopyDataToQueue+0x3a>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d14d      	bne.n	8002f1c <prvCopyDataToQueue+0xc2>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f001 faab 	bl	80043e0 <xTaskPriorityDisinherit>
 8002e8a:	6178      	str	r0, [r7, #20]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	e043      	b.n	8002f1c <prvCopyDataToQueue+0xc2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d119      	bne.n	8002ece <prvCopyDataToQueue+0x74>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6858      	ldr	r0, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	f002 fa9f 	bl	80053e8 <memcpy>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d32b      	bcc.n	8002f1c <prvCopyDataToQueue+0xc2>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	e026      	b.n	8002f1c <prvCopyDataToQueue+0xc2>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	68d8      	ldr	r0, [r3, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	f002 fa85 	bl	80053e8 <memcpy>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	425b      	negs	r3, r3
 8002ee8:	441a      	add	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d207      	bcs.n	8002f0a <prvCopyDataToQueue+0xb0>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	425b      	negs	r3, r3
 8002f04:	441a      	add	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d105      	bne.n	8002f1c <prvCopyDataToQueue+0xc2>
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <prvCopyDataToQueue+0xc2>
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <prvCopyDataFromQueue>:
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d018      	beq.n	8002f72 <prvCopyDataFromQueue+0x44>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	441a      	add	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d303      	bcc.n	8002f62 <prvCopyDataFromQueue+0x34>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68d9      	ldr	r1, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	6838      	ldr	r0, [r7, #0]
 8002f6e:	f002 fa3b 	bl	80053e8 <memcpy>
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <prvUnlockQueue>:
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	f002 f815 	bl	8004fb0 <vPortEnterCritical>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	e011      	b.n	8002fb4 <prvUnlockQueue+0x3a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d012      	beq.n	8002fbe <prvUnlockQueue+0x44>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3324      	adds	r3, #36	; 0x24
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 ff03 	bl	8003da8 <xTaskRemoveFromEventList>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <prvUnlockQueue+0x32>
 8002fa8:	f001 f852 	bl	8004050 <vTaskMissedYield>
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	dce9      	bgt.n	8002f90 <prvUnlockQueue+0x16>
 8002fbc:	e000      	b.n	8002fc0 <prvUnlockQueue+0x46>
 8002fbe:	bf00      	nop
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	22ff      	movs	r2, #255	; 0xff
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc8:	f002 f822 	bl	8005010 <vPortExitCritical>
 8002fcc:	f001 fff0 	bl	8004fb0 <vPortEnterCritical>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd6:	73bb      	strb	r3, [r7, #14]
 8002fd8:	e011      	b.n	8002ffe <prvUnlockQueue+0x84>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d012      	beq.n	8003008 <prvUnlockQueue+0x8e>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3310      	adds	r3, #16
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fede 	bl	8003da8 <xTaskRemoveFromEventList>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <prvUnlockQueue+0x7c>
 8002ff2:	f001 f82d 	bl	8004050 <vTaskMissedYield>
 8002ff6:	7bbb      	ldrb	r3, [r7, #14]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	73bb      	strb	r3, [r7, #14]
 8002ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003002:	2b00      	cmp	r3, #0
 8003004:	dce9      	bgt.n	8002fda <prvUnlockQueue+0x60>
 8003006:	e000      	b.n	800300a <prvUnlockQueue+0x90>
 8003008:	bf00      	nop
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003012:	f001 fffd 	bl	8005010 <vPortExitCritical>
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <prvIsQueueEmpty>:
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	f001 ffc3 	bl	8004fb0 <vPortEnterCritical>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <prvIsQueueEmpty+0x1a>
 8003032:	2301      	movs	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e001      	b.n	800303c <prvIsQueueEmpty+0x1e>
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	f001 ffe8 	bl	8005010 <vPortExitCritical>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <prvIsQueueFull>:
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	f001 ffad 	bl	8004fb0 <vPortEnterCritical>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	429a      	cmp	r2, r3
 8003060:	d102      	bne.n	8003068 <prvIsQueueFull+0x1e>
 8003062:	2301      	movs	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	e001      	b.n	800306c <prvIsQueueFull+0x22>
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	f001 ffd0 	bl	8005010 <vPortExitCritical>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <vQueueAddToRegistry>:
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <vQueueAddToRegistry+0x2a>
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <vQueueAddToRegistry+0x28>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d024      	beq.n	80030f6 <vQueueAddToRegistry+0x7a>
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e01e      	b.n	80030f0 <vQueueAddToRegistry+0x74>
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <vQueueAddToRegistry+0x98>)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d105      	bne.n	80030ce <vQueueAddToRegistry+0x52>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <vQueueAddToRegistry+0x98>)
 80030c8:	4413      	add	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e013      	b.n	80030f6 <vQueueAddToRegistry+0x7a>
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10a      	bne.n	80030ea <vQueueAddToRegistry+0x6e>
 80030d4:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <vQueueAddToRegistry+0x98>)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <vQueueAddToRegistry+0x6e>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <vQueueAddToRegistry+0x98>)
 80030e6:	4413      	add	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3301      	adds	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b07      	cmp	r3, #7
 80030f4:	d9dd      	bls.n	80030b2 <vQueueAddToRegistry+0x36>
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <vQueueAddToRegistry+0x8c>
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	20000288 	.word	0x20000288

08003118 <vQueueWaitForMessageRestricted>:
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	f001 ff42 	bl	8004fb0 <vPortEnterCritical>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003132:	b25b      	sxtb	r3, r3
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d103      	bne.n	8003142 <vQueueWaitForMessageRestricted+0x2a>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003148:	b25b      	sxtb	r3, r3
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d103      	bne.n	8003158 <vQueueWaitForMessageRestricted+0x40>
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003158:	f001 ff5a 	bl	8005010 <vPortExitCritical>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <vQueueWaitForMessageRestricted+0x5a>
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	3324      	adds	r3, #36	; 0x24
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	4618      	mov	r0, r3
 800316e:	f000 fdd5 	bl	8003d1c <vTaskPlaceOnEventListRestricted>
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f7ff ff01 	bl	8002f7a <prvUnlockQueue>
 8003178:	bf00      	nop
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <xTaskCreate>:
 8003180:	b580      	push	{r7, lr}
 8003182:	b08c      	sub	sp, #48	; 0x30
 8003184:	af04      	add	r7, sp, #16
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4618      	mov	r0, r3
 8003194:	f001 fd68 	bl	8004c68 <pvPortMalloc>
 8003198:	6178      	str	r0, [r7, #20]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <xTaskCreate+0x48>
 80031a0:	207c      	movs	r0, #124	; 0x7c
 80031a2:	f001 fd61 	bl	8004c68 <pvPortMalloc>
 80031a6:	61f8      	str	r0, [r7, #28]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <xTaskCreate+0x40>
 80031ae:	227c      	movs	r2, #124	; 0x7c
 80031b0:	2100      	movs	r1, #0
 80031b2:	69f8      	ldr	r0, [r7, #28]
 80031b4:	f002 f926 	bl	8005404 <memset>
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
 80031be:	e005      	b.n	80031cc <xTaskCreate+0x4c>
 80031c0:	6978      	ldr	r0, [r7, #20]
 80031c2:	f001 fd63 	bl	8004c8c <vPortFree>
 80031c6:	e001      	b.n	80031cc <xTaskCreate+0x4c>
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d013      	beq.n	80031fa <xTaskCreate+0x7a>
 80031d2:	2300      	movs	r3, #0
 80031d4:	9303      	str	r3, [sp, #12]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	9302      	str	r3, [sp, #8]
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f80e 	bl	800320a <prvInitialiseNewTask>
 80031ee:	69f8      	ldr	r0, [r7, #28]
 80031f0:	f000 f89a 	bl	8003328 <prvAddNewTaskToReadyList>
 80031f4:	2301      	movs	r3, #1
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	e002      	b.n	8003200 <xTaskCreate+0x80>
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <prvInitialiseNewTask>:
 800320a:	b580      	push	{r7, lr}
 800320c:	b088      	sub	sp, #32
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	461a      	mov	r2, r3
 8003222:	21a5      	movs	r1, #165	; 0xa5
 8003224:	f002 f8ee 	bl	8005404 <memset>
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003232:	3b01      	subs	r3, #1
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	f023 0307 	bic.w	r3, r3, #7
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <prvInitialiseNewTask+0x58>
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <prvInitialiseNewTask+0x56>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d01e      	beq.n	80032a6 <prvInitialiseNewTask+0x9c>
 8003268:	2300      	movs	r3, #0
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	e012      	b.n	8003294 <prvInitialiseNewTask+0x8a>
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	4413      	add	r3, r2
 8003274:	7819      	ldrb	r1, [r3, #0]
 8003276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	3334      	adds	r3, #52	; 0x34
 800327e:	460a      	mov	r2, r1
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <prvInitialiseNewTask+0x92>
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3301      	adds	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b13      	cmp	r3, #19
 8003298:	d9e9      	bls.n	800326e <prvInitialiseNewTask+0x64>
 800329a:	e000      	b.n	800329e <prvInitialiseNewTask+0x94>
 800329c:	bf00      	nop
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d90a      	bls.n	80032c2 <prvInitialiseNewTask+0xb8>
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	bf00      	nop
 80032c0:	e7fe      	b.n	80032c0 <prvInitialiseNewTask+0xb6>
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d901      	bls.n	80032cc <prvInitialiseNewTask+0xc2>
 80032c8:	2304      	movs	r3, #4
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d6:	651a      	str	r2, [r3, #80]	; 0x50
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	3304      	adds	r3, #4
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 fd06 	bl	8004cee <vListInitialiseItem>
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	3318      	adds	r3, #24
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 fd01 	bl	8004cee <vListInitialiseItem>
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f0:	611a      	str	r2, [r3, #16]
 80032f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f4:	f1c3 0205 	rsb	r2, r3, #5
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	619a      	str	r2, [r3, #24]
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003300:	625a      	str	r2, [r3, #36]	; 0x24
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	68f9      	ldr	r1, [r7, #12]
 8003306:	69b8      	ldr	r0, [r7, #24]
 8003308:	f001 fd5e 	bl	8004dc8 <pxPortInitialiseStack>
 800330c:	4602      	mov	r2, r0
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <prvInitialiseNewTask+0x114>
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	bf00      	nop
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <prvAddNewTaskToReadyList>:
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	f001 fe3e 	bl	8004fb0 <vPortEnterCritical>
 8003334:	4b41      	ldr	r3, [pc, #260]	; (800343c <prvAddNewTaskToReadyList+0x114>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	4a40      	ldr	r2, [pc, #256]	; (800343c <prvAddNewTaskToReadyList+0x114>)
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b40      	ldr	r3, [pc, #256]	; (8003440 <prvAddNewTaskToReadyList+0x118>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d109      	bne.n	800335a <prvAddNewTaskToReadyList+0x32>
 8003346:	4a3e      	ldr	r2, [pc, #248]	; (8003440 <prvAddNewTaskToReadyList+0x118>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b3b      	ldr	r3, [pc, #236]	; (800343c <prvAddNewTaskToReadyList+0x114>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d110      	bne.n	8003376 <prvAddNewTaskToReadyList+0x4e>
 8003354:	f000 fefe 	bl	8004154 <prvInitialiseTaskLists>
 8003358:	e00d      	b.n	8003376 <prvAddNewTaskToReadyList+0x4e>
 800335a:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <prvAddNewTaskToReadyList+0x11c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <prvAddNewTaskToReadyList+0x4e>
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <prvAddNewTaskToReadyList+0x118>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	429a      	cmp	r2, r3
 800336e:	d802      	bhi.n	8003376 <prvAddNewTaskToReadyList+0x4e>
 8003370:	4a33      	ldr	r2, [pc, #204]	; (8003440 <prvAddNewTaskToReadyList+0x118>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b34      	ldr	r3, [pc, #208]	; (8003448 <prvAddNewTaskToReadyList+0x120>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3301      	adds	r3, #1
 800337c:	4a32      	ldr	r2, [pc, #200]	; (8003448 <prvAddNewTaskToReadyList+0x120>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b31      	ldr	r3, [pc, #196]	; (8003448 <prvAddNewTaskToReadyList+0x120>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	649a      	str	r2, [r3, #72]	; 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338c:	4b2f      	ldr	r3, [pc, #188]	; (800344c <prvAddNewTaskToReadyList+0x124>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d903      	bls.n	800339c <prvAddNewTaskToReadyList+0x74>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	4a2c      	ldr	r2, [pc, #176]	; (800344c <prvAddNewTaskToReadyList+0x124>)
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	492b      	ldr	r1, [pc, #172]	; (8003450 <prvAddNewTaskToReadyList+0x128>)
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3304      	adds	r3, #4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	3204      	adds	r2, #4
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1d1a      	adds	r2, r3, #4
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	609a      	str	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <prvAddNewTaskToReadyList+0x128>)
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	615a      	str	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ea:	4919      	ldr	r1, [pc, #100]	; (8003450 <prvAddNewTaskToReadyList+0x128>)
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	4815      	ldr	r0, [pc, #84]	; (8003450 <prvAddNewTaskToReadyList+0x128>)
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4403      	add	r3, r0
 8003406:	6019      	str	r1, [r3, #0]
 8003408:	f001 fe02 	bl	8005010 <vPortExitCritical>
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <prvAddNewTaskToReadyList+0x11c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00e      	beq.n	8003432 <prvAddNewTaskToReadyList+0x10a>
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <prvAddNewTaskToReadyList+0x118>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	429a      	cmp	r2, r3
 8003420:	d207      	bcs.n	8003432 <prvAddNewTaskToReadyList+0x10a>
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <prvAddNewTaskToReadyList+0x12c>)
 8003424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000180 	.word	0x20000180
 8003440:	200000a8 	.word	0x200000a8
 8003444:	2000018c 	.word	0x2000018c
 8003448:	2000019c 	.word	0x2000019c
 800344c:	20000188 	.word	0x20000188
 8003450:	200000ac 	.word	0x200000ac
 8003454:	e000ed04 	.word	0xe000ed04

08003458 <vTaskPrioritySet>:
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d90a      	bls.n	8003482 <vTaskPrioritySet+0x2a>
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <vTaskPrioritySet+0x28>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d901      	bls.n	800348c <vTaskPrioritySet+0x34>
 8003488:	2304      	movs	r3, #4
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	f001 fd90 	bl	8004fb0 <vPortEnterCritical>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <vTaskPrioritySet+0x44>
 8003496:	4b4f      	ldr	r3, [pc, #316]	; (80035d4 <vTaskPrioritySet+0x17c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	e000      	b.n	800349e <vTaskPrioritySet+0x46>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	f000 808c 	beq.w	80035c8 <vTaskPrioritySet+0x170>
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d90d      	bls.n	80034d4 <vTaskPrioritySet+0x7c>
 80034b8:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <vTaskPrioritySet+0x17c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d00f      	beq.n	80034e2 <vTaskPrioritySet+0x8a>
 80034c2:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <vTaskPrioritySet+0x17c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d309      	bcc.n	80034e2 <vTaskPrioritySet+0x8a>
 80034ce:	2301      	movs	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
 80034d2:	e006      	b.n	80034e2 <vTaskPrioritySet+0x8a>
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <vTaskPrioritySet+0x17c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d101      	bne.n	80034e2 <vTaskPrioritySet+0x8a>
 80034de:	2301      	movs	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d102      	bne.n	80034fa <vTaskPrioritySet+0xa2>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	db04      	blt.n	8003512 <vTaskPrioritySet+0xba>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	f1c3 0205 	rsb	r2, r3, #5
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	619a      	str	r2, [r3, #24]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	6959      	ldr	r1, [r3, #20]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <vTaskPrioritySet+0x180>)
 8003522:	4413      	add	r3, r2
 8003524:	4299      	cmp	r1, r3
 8003526:	d144      	bne.n	80035b2 <vTaskPrioritySet+0x15a>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	3304      	adds	r3, #4
 800352c:	4618      	mov	r0, r3
 800352e:	f001 fc22 	bl	8004d76 <uxListRemove>
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003536:	4b29      	ldr	r3, [pc, #164]	; (80035dc <vTaskPrioritySet+0x184>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d903      	bls.n	8003546 <vTaskPrioritySet+0xee>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	4a26      	ldr	r2, [pc, #152]	; (80035dc <vTaskPrioritySet+0x184>)
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354a:	4923      	ldr	r1, [pc, #140]	; (80035d8 <vTaskPrioritySet+0x180>)
 800354c:	4613      	mov	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3304      	adds	r3, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	3204      	adds	r2, #4
 8003572:	605a      	str	r2, [r3, #4]
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	1d1a      	adds	r2, r3, #4
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <vTaskPrioritySet+0x180>)
 800358a:	441a      	add	r2, r3
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	615a      	str	r2, [r3, #20]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003594:	4910      	ldr	r1, [pc, #64]	; (80035d8 <vTaskPrioritySet+0x180>)
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	480c      	ldr	r0, [pc, #48]	; (80035d8 <vTaskPrioritySet+0x180>)
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4403      	add	r3, r0
 80035b0:	6019      	str	r1, [r3, #0]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <vTaskPrioritySet+0x170>
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <vTaskPrioritySet+0x188>)
 80035ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f001 fd22 	bl	8005010 <vPortExitCritical>
 80035cc:	bf00      	nop
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200000a8 	.word	0x200000a8
 80035d8:	200000ac 	.word	0x200000ac
 80035dc:	20000188 	.word	0x20000188
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <vTaskStartScheduler>:
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <vTaskStartScheduler+0x88>)
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	2300      	movs	r3, #0
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2300      	movs	r3, #0
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	491e      	ldr	r1, [pc, #120]	; (8003670 <vTaskStartScheduler+0x8c>)
 80035f8:	481e      	ldr	r0, [pc, #120]	; (8003674 <vTaskStartScheduler+0x90>)
 80035fa:	f7ff fdc1 	bl	8003180 <xTaskCreate>
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d102      	bne.n	800360c <vTaskStartScheduler+0x28>
 8003606:	f001 f8ad 	bl	8004764 <xTimerCreateTimerTask>
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d116      	bne.n	8003640 <vTaskStartScheduler+0x5c>
 8003612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	bf00      	nop
 8003626:	4b14      	ldr	r3, [pc, #80]	; (8003678 <vTaskStartScheduler+0x94>)
 8003628:	f04f 32ff 	mov.w	r2, #4294967295
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	4b13      	ldr	r3, [pc, #76]	; (800367c <vTaskStartScheduler+0x98>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <vTaskStartScheduler+0x9c>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f001 fc47 	bl	8004ecc <xPortStartScheduler>
 800363e:	e00e      	b.n	800365e <vTaskStartScheduler+0x7a>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d10a      	bne.n	800365e <vTaskStartScheduler+0x7a>
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <vTaskStartScheduler+0x78>
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <vTaskStartScheduler+0xa0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200001a4 	.word	0x200001a4
 8003670:	080055d8 	.word	0x080055d8
 8003674:	08004069 	.word	0x08004069
 8003678:	200001a0 	.word	0x200001a0
 800367c:	2000018c 	.word	0x2000018c
 8003680:	20000184 	.word	0x20000184
 8003684:	2000000c 	.word	0x2000000c

08003688 <vTaskSuspendAll>:
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <vTaskSuspendAll+0x18>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3301      	adds	r3, #1
 8003692:	4a03      	ldr	r2, [pc, #12]	; (80036a0 <vTaskSuspendAll+0x18>)
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	200001a8 	.word	0x200001a8

080036a4 <prvGetExpectedIdleTime>:
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	2300      	movs	r3, #0
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <prvGetExpectedIdleTime+0x58>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <prvGetExpectedIdleTime+0x16>
 80036b6:	2301      	movs	r3, #1
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <prvGetExpectedIdleTime+0x5c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <prvGetExpectedIdleTime+0x26>
 80036c4:	2300      	movs	r3, #0
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	e012      	b.n	80036f0 <prvGetExpectedIdleTime+0x4c>
 80036ca:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <prvGetExpectedIdleTime+0x60>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d902      	bls.n	80036d8 <prvGetExpectedIdleTime+0x34>
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	e00b      	b.n	80036f0 <prvGetExpectedIdleTime+0x4c>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <prvGetExpectedIdleTime+0x40>
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	e005      	b.n	80036f0 <prvGetExpectedIdleTime+0x4c>
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <prvGetExpectedIdleTime+0x64>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <prvGetExpectedIdleTime+0x68>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	607b      	str	r3, [r7, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	20000188 	.word	0x20000188
 8003700:	200000a8 	.word	0x200000a8
 8003704:	200000ac 	.word	0x200000ac
 8003708:	200001a0 	.word	0x200001a0
 800370c:	20000184 	.word	0x20000184

08003710 <xTaskResumeAll>:
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	4b71      	ldr	r3, [pc, #452]	; (80038e4 <xTaskResumeAll+0x1d4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10a      	bne.n	800373c <xTaskResumeAll+0x2c>
 8003726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	bf00      	nop
 800373a:	e7fe      	b.n	800373a <xTaskResumeAll+0x2a>
 800373c:	f001 fc38 	bl	8004fb0 <vPortEnterCritical>
 8003740:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <xTaskResumeAll+0x1d4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3b01      	subs	r3, #1
 8003746:	4a67      	ldr	r2, [pc, #412]	; (80038e4 <xTaskResumeAll+0x1d4>)
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <xTaskResumeAll+0x1d4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 80c1 	bne.w	80038d6 <xTaskResumeAll+0x1c6>
 8003754:	4b64      	ldr	r3, [pc, #400]	; (80038e8 <xTaskResumeAll+0x1d8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80bc 	beq.w	80038d6 <xTaskResumeAll+0x1c6>
 800375e:	e08b      	b.n	8003878 <xTaskResumeAll+0x168>
 8003760:	4b62      	ldr	r3, [pc, #392]	; (80038ec <xTaskResumeAll+0x1dc>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	6a12      	ldr	r2, [r2, #32]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	69d2      	ldr	r2, [r2, #28]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3318      	adds	r3, #24
 800378a:	429a      	cmp	r2, r3
 800378c:	d103      	bne.n	8003796 <xTaskResumeAll+0x86>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	2200      	movs	r2, #0
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1e5a      	subs	r2, r3, #1
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	68d2      	ldr	r2, [r2, #12]
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	6892      	ldr	r2, [r2, #8]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	3304      	adds	r3, #4
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d103      	bne.n	80037d4 <xTaskResumeAll+0xc4>
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	605a      	str	r2, [r3, #4]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2200      	movs	r2, #0
 80037d8:	615a      	str	r2, [r3, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	1e5a      	subs	r2, r3, #1
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e8:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <xTaskResumeAll+0x1e0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d903      	bls.n	80037f8 <xTaskResumeAll+0xe8>
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	4a3e      	ldr	r2, [pc, #248]	; (80038f0 <xTaskResumeAll+0x1e0>)
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	493d      	ldr	r1, [pc, #244]	; (80038f4 <xTaskResumeAll+0x1e4>)
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3304      	adds	r3, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	3204      	adds	r2, #4
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	1d1a      	adds	r2, r3, #4
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	609a      	str	r2, [r3, #8]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4a2e      	ldr	r2, [pc, #184]	; (80038f4 <xTaskResumeAll+0x1e4>)
 800383c:	441a      	add	r2, r3
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	615a      	str	r2, [r3, #20]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	492b      	ldr	r1, [pc, #172]	; (80038f4 <xTaskResumeAll+0x1e4>)
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	1c59      	adds	r1, r3, #1
 8003856:	4827      	ldr	r0, [pc, #156]	; (80038f4 <xTaskResumeAll+0x1e4>)
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4403      	add	r3, r0
 8003862:	6019      	str	r1, [r3, #0]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4b23      	ldr	r3, [pc, #140]	; (80038f8 <xTaskResumeAll+0x1e8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	429a      	cmp	r2, r3
 8003870:	d302      	bcc.n	8003878 <xTaskResumeAll+0x168>
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <xTaskResumeAll+0x1ec>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <xTaskResumeAll+0x1dc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f47f af6f 	bne.w	8003760 <xTaskResumeAll+0x50>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <xTaskResumeAll+0x17c>
 8003888:	f000 fce2 	bl	8004250 <prvResetNextTaskUnblockTime>
 800388c:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <xTaskResumeAll+0x1f0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <xTaskResumeAll+0x1aa>
 8003898:	f000 f8a8 	bl	80039ec <xTaskIncrementTick>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <xTaskResumeAll+0x198>
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <xTaskResumeAll+0x1ec>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f1      	bne.n	8003898 <xTaskResumeAll+0x188>
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <xTaskResumeAll+0x1f0>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <xTaskResumeAll+0x1ec>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <xTaskResumeAll+0x1c6>
 80038c2:	2301      	movs	r3, #1
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <xTaskResumeAll+0x1f4>)
 80038c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f001 fb9b 	bl	8005010 <vPortExitCritical>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	200001a8 	.word	0x200001a8
 80038e8:	20000180 	.word	0x20000180
 80038ec:	20000140 	.word	0x20000140
 80038f0:	20000188 	.word	0x20000188
 80038f4:	200000ac 	.word	0x200000ac
 80038f8:	200000a8 	.word	0x200000a8
 80038fc:	20000194 	.word	0x20000194
 8003900:	20000190 	.word	0x20000190
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <xTaskGetTickCount>:
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <xTaskGetTickCount+0x18>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	607b      	str	r3, [r7, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	20000184 	.word	0x20000184

08003924 <uxTaskGetNumberOfTasks>:
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <uxTaskGetNumberOfTasks+0x10>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	20000180 	.word	0x20000180

08003938 <vTaskStepTick>:
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <vTaskStepTick+0xa4>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	441a      	add	r2, r3
 8003948:	4b25      	ldr	r3, [pc, #148]	; (80039e0 <vTaskStepTick+0xa8>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d90a      	bls.n	8003966 <vTaskStepTick+0x2e>
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <vTaskStepTick+0x2c>
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <vTaskStepTick+0xa4>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	441a      	add	r2, r3
 800396e:	4b1c      	ldr	r3, [pc, #112]	; (80039e0 <vTaskStepTick+0xa8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d128      	bne.n	80039c8 <vTaskStepTick+0x90>
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <vTaskStepTick+0xac>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <vTaskStepTick+0x5c>
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <vTaskStepTick+0x5a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10a      	bne.n	80039b0 <vTaskStepTick+0x78>
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	bf00      	nop
 80039ae:	e7fe      	b.n	80039ae <vTaskStepTick+0x76>
 80039b0:	f001 fafe 	bl	8004fb0 <vPortEnterCritical>
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <vTaskStepTick+0xb0>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <vTaskStepTick+0xb0>)
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	f001 fb27 	bl	8005010 <vPortExitCritical>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <vTaskStepTick+0xa4>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	4a02      	ldr	r2, [pc, #8]	; (80039dc <vTaskStepTick+0xa4>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	bf00      	nop
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000184 	.word	0x20000184
 80039e0:	200001a0 	.word	0x200001a0
 80039e4:	200001a8 	.word	0x200001a8
 80039e8:	20000190 	.word	0x20000190

080039ec <xTaskIncrementTick>:
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
 80039f6:	4b7e      	ldr	r3, [pc, #504]	; (8003bf0 <xTaskIncrementTick+0x204>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 80ed 	bne.w	8003bda <xTaskIncrementTick+0x1ee>
 8003a00:	4b7c      	ldr	r3, [pc, #496]	; (8003bf4 <xTaskIncrementTick+0x208>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	4a7a      	ldr	r2, [pc, #488]	; (8003bf4 <xTaskIncrementTick+0x208>)
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d120      	bne.n	8003a56 <xTaskIncrementTick+0x6a>
 8003a14:	4b78      	ldr	r3, [pc, #480]	; (8003bf8 <xTaskIncrementTick+0x20c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <xTaskIncrementTick+0x48>
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <xTaskIncrementTick+0x46>
 8003a34:	4b70      	ldr	r3, [pc, #448]	; (8003bf8 <xTaskIncrementTick+0x20c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	4b70      	ldr	r3, [pc, #448]	; (8003bfc <xTaskIncrementTick+0x210>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6e      	ldr	r2, [pc, #440]	; (8003bf8 <xTaskIncrementTick+0x20c>)
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4a6e      	ldr	r2, [pc, #440]	; (8003bfc <xTaskIncrementTick+0x210>)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4b6d      	ldr	r3, [pc, #436]	; (8003c00 <xTaskIncrementTick+0x214>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a6c      	ldr	r2, [pc, #432]	; (8003c00 <xTaskIncrementTick+0x214>)
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	f000 fbfd 	bl	8004250 <prvResetNextTaskUnblockTime>
 8003a56:	4b6b      	ldr	r3, [pc, #428]	; (8003c04 <xTaskIncrementTick+0x218>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a3a      	ldr	r2, [r7, #32]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	f0c0 80a7 	bcc.w	8003bb0 <xTaskIncrementTick+0x1c4>
 8003a62:	4b65      	ldr	r3, [pc, #404]	; (8003bf8 <xTaskIncrementTick+0x20c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <xTaskIncrementTick+0x8a>
 8003a6c:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <xTaskIncrementTick+0x218>)
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e09c      	b.n	8003bb0 <xTaskIncrementTick+0x1c4>
 8003a76:	4b60      	ldr	r3, [pc, #384]	; (8003bf8 <xTaskIncrementTick+0x20c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	6a3a      	ldr	r2, [r7, #32]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d203      	bcs.n	8003a96 <xTaskIncrementTick+0xaa>
 8003a8e:	4a5d      	ldr	r2, [pc, #372]	; (8003c04 <xTaskIncrementTick+0x218>)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e08c      	b.n	8003bb0 <xTaskIncrementTick+0x1c4>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	68d2      	ldr	r2, [r2, #12]
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	6892      	ldr	r2, [r2, #8]
 8003aae:	605a      	str	r2, [r3, #4]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d103      	bne.n	8003ac4 <xTaskIncrementTick+0xd8>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	615a      	str	r2, [r3, #20]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1e5a      	subs	r2, r3, #1
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01e      	beq.n	8003b1a <xTaskIncrementTick+0x12e>
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	6a12      	ldr	r2, [r2, #32]
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	69d2      	ldr	r2, [r2, #28]
 8003af4:	605a      	str	r2, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	3318      	adds	r3, #24
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d103      	bne.n	8003b0a <xTaskIncrementTick+0x11e>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	6a1a      	ldr	r2, [r3, #32]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	1e5a      	subs	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <xTaskIncrementTick+0x21c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d903      	bls.n	8003b2e <xTaskIncrementTick+0x142>
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	4a37      	ldr	r2, [pc, #220]	; (8003c08 <xTaskIncrementTick+0x21c>)
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b32:	4936      	ldr	r1, [pc, #216]	; (8003c0c <xTaskIncrementTick+0x220>)
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3304      	adds	r3, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	609a      	str	r2, [r3, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	60da      	str	r2, [r3, #12]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	3204      	adds	r2, #4
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	1d1a      	adds	r2, r3, #4
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <xTaskIncrementTick+0x220>)
 8003b72:	441a      	add	r2, r3
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	615a      	str	r2, [r3, #20]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	4923      	ldr	r1, [pc, #140]	; (8003c0c <xTaskIncrementTick+0x220>)
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	1c59      	adds	r1, r3, #1
 8003b8c:	481f      	ldr	r0, [pc, #124]	; (8003c0c <xTaskIncrementTick+0x220>)
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4403      	add	r3, r0
 8003b98:	6019      	str	r1, [r3, #0]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <xTaskIncrementTick+0x224>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	f67f af5c 	bls.w	8003a62 <xTaskIncrementTick+0x76>
 8003baa:	2301      	movs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	e758      	b.n	8003a62 <xTaskIncrementTick+0x76>
 8003bb0:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <xTaskIncrementTick+0x224>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb6:	4915      	ldr	r1, [pc, #84]	; (8003c0c <xTaskIncrementTick+0x220>)
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d901      	bls.n	8003bcc <xTaskIncrementTick+0x1e0>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
 8003bcc:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <xTaskIncrementTick+0x228>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <xTaskIncrementTick+0x1f8>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd8:	e004      	b.n	8003be4 <xTaskIncrementTick+0x1f8>
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <xTaskIncrementTick+0x22c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <xTaskIncrementTick+0x22c>)
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	4618      	mov	r0, r3
 8003be8:	3728      	adds	r7, #40	; 0x28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	200001a8 	.word	0x200001a8
 8003bf4:	20000184 	.word	0x20000184
 8003bf8:	20000138 	.word	0x20000138
 8003bfc:	2000013c 	.word	0x2000013c
 8003c00:	20000198 	.word	0x20000198
 8003c04:	200001a0 	.word	0x200001a0
 8003c08:	20000188 	.word	0x20000188
 8003c0c:	200000ac 	.word	0x200000ac
 8003c10:	200000a8 	.word	0x200000a8
 8003c14:	20000194 	.word	0x20000194
 8003c18:	20000190 	.word	0x20000190

08003c1c <vTaskSwitchContext>:
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4b27      	ldr	r3, [pc, #156]	; (8003cc0 <vTaskSwitchContext+0xa4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <vTaskSwitchContext+0x16>
 8003c2a:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <vTaskSwitchContext+0xa8>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	e041      	b.n	8003cb6 <vTaskSwitchContext+0x9a>
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <vTaskSwitchContext+0xa8>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <vTaskSwitchContext+0xac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e010      	b.n	8003c62 <vTaskSwitchContext+0x46>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <vTaskSwitchContext+0x40>
 8003c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	bf00      	nop
 8003c5a:	e7fe      	b.n	8003c5a <vTaskSwitchContext+0x3e>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	491a      	ldr	r1, [pc, #104]	; (8003ccc <vTaskSwitchContext+0xb0>)
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0e4      	beq.n	8003c40 <vTaskSwitchContext+0x24>
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <vTaskSwitchContext+0xb0>)
 8003c82:	4413      	add	r3, r2
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	3308      	adds	r3, #8
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d104      	bne.n	8003ca6 <vTaskSwitchContext+0x8a>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <vTaskSwitchContext+0xb4>)
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <vTaskSwitchContext+0xac>)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	200001a8 	.word	0x200001a8
 8003cc4:	20000194 	.word	0x20000194
 8003cc8:	20000188 	.word	0x20000188
 8003ccc:	200000ac 	.word	0x200000ac
 8003cd0:	200000a8 	.word	0x200000a8

08003cd4 <vTaskPlaceOnEventList>:
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <vTaskPlaceOnEventList+0x26>
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <vTaskPlaceOnEventList+0x24>
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <vTaskPlaceOnEventList+0x44>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3318      	adds	r3, #24
 8003d00:	4619      	mov	r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 ffff 	bl	8004d06 <vListInsert>
 8003d08:	2101      	movs	r1, #1
 8003d0a:	6838      	ldr	r0, [r7, #0]
 8003d0c:	f000 fcbc 	bl	8004688 <prvAddCurrentTaskToDelayedList>
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	200000a8 	.word	0x200000a8

08003d1c <vTaskPlaceOnEventListRestricted>:
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <vTaskPlaceOnEventListRestricted+0x28>
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <vTaskPlaceOnEventListRestricted+0x26>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	61da      	str	r2, [r3, #28]
 8003d52:	4b14      	ldr	r3, [pc, #80]	; (8003da4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	6892      	ldr	r2, [r2, #8]
 8003d5a:	621a      	str	r2, [r3, #32]
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	3218      	adds	r2, #24
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f103 0218 	add.w	r2, r3, #24
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <vTaskPlaceOnEventListRestricted+0x76>
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	68b8      	ldr	r0, [r7, #8]
 8003d96:	f000 fc77 	bl	8004688 <prvAddCurrentTaskToDelayedList>
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	200000a8 	.word	0x200000a8

08003da8 <xTaskRemoveFromEventList>:
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <xTaskRemoveFromEventList+0x2c>
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xTaskRemoveFromEventList+0x2a>
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	6a3a      	ldr	r2, [r7, #32]
 8003de0:	6a12      	ldr	r2, [r2, #32]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	6a3a      	ldr	r2, [r7, #32]
 8003dea:	69d2      	ldr	r2, [r2, #28]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	3318      	adds	r3, #24
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d103      	bne.n	8003e02 <xTaskRemoveFromEventList+0x5a>
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	6a1a      	ldr	r2, [r3, #32]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	2200      	movs	r2, #0
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	1e5a      	subs	r2, r3, #1
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <xTaskRemoveFromEventList+0x198>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d161      	bne.n	8003ede <xTaskRemoveFromEventList+0x136>
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	68d2      	ldr	r2, [r2, #12]
 8003e28:	609a      	str	r2, [r3, #8]
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	6a3a      	ldr	r2, [r7, #32]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d103      	bne.n	8003e48 <xTaskRemoveFromEventList+0xa0>
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	615a      	str	r2, [r3, #20]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	1e5a      	subs	r2, r3, #1
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	4b39      	ldr	r3, [pc, #228]	; (8003f44 <xTaskRemoveFromEventList+0x19c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d903      	bls.n	8003e6c <xTaskRemoveFromEventList+0xc4>
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	4a36      	ldr	r2, [pc, #216]	; (8003f44 <xTaskRemoveFromEventList+0x19c>)
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	4935      	ldr	r1, [pc, #212]	; (8003f48 <xTaskRemoveFromEventList+0x1a0>)
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	60da      	str	r2, [r3, #12]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	3204      	adds	r2, #4
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	1d1a      	adds	r2, r3, #4
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <xTaskRemoveFromEventList+0x1a0>)
 8003eb0:	441a      	add	r2, r3
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	615a      	str	r2, [r3, #20]
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eba:	4923      	ldr	r1, [pc, #140]	; (8003f48 <xTaskRemoveFromEventList+0x1a0>)
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	1c59      	adds	r1, r3, #1
 8003eca:	481f      	ldr	r0, [pc, #124]	; (8003f48 <xTaskRemoveFromEventList+0x1a0>)
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4403      	add	r3, r0
 8003ed6:	6019      	str	r1, [r3, #0]
 8003ed8:	f000 f9ba 	bl	8004250 <prvResetNextTaskUnblockTime>
 8003edc:	e01b      	b.n	8003f16 <xTaskRemoveFromEventList+0x16e>
 8003ede:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <xTaskRemoveFromEventList+0x1a4>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	61da      	str	r2, [r3, #28]
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	621a      	str	r2, [r3, #32]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	3218      	adds	r2, #24
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	f103 0218 	add.w	r2, r3, #24
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	609a      	str	r2, [r3, #8]
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	4a10      	ldr	r2, [pc, #64]	; (8003f4c <xTaskRemoveFromEventList+0x1a4>)
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <xTaskRemoveFromEventList+0x1a4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <xTaskRemoveFromEventList+0x1a4>)
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <xTaskRemoveFromEventList+0x1a8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d905      	bls.n	8003f30 <xTaskRemoveFromEventList+0x188>
 8003f24:	2301      	movs	r3, #1
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
 8003f28:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <xTaskRemoveFromEventList+0x1ac>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e001      	b.n	8003f34 <xTaskRemoveFromEventList+0x18c>
 8003f30:	2300      	movs	r3, #0
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	4618      	mov	r0, r3
 8003f38:	3728      	adds	r7, #40	; 0x28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200001a8 	.word	0x200001a8
 8003f44:	20000188 	.word	0x20000188
 8003f48:	200000ac 	.word	0x200000ac
 8003f4c:	20000140 	.word	0x20000140
 8003f50:	200000a8 	.word	0x200000a8
 8003f54:	20000194 	.word	0x20000194

08003f58 <vTaskInternalSetTimeOutState>:
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <vTaskInternalSetTimeOutState+0x24>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <vTaskInternalSetTimeOutState+0x28>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000198 	.word	0x20000198
 8003f80:	20000184 	.word	0x20000184

08003f84 <xTaskCheckForTimeOut>:
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <xTaskCheckForTimeOut+0x26>
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xTaskCheckForTimeOut+0x24>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xTaskCheckForTimeOut+0x42>
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xTaskCheckForTimeOut+0x40>
 8003fc6:	f000 fff3 	bl	8004fb0 <vPortEnterCritical>
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <xTaskCheckForTimeOut+0xc4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	61bb      	str	r3, [r7, #24]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe2:	d102      	bne.n	8003fea <xTaskCheckForTimeOut+0x66>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	e026      	b.n	8004038 <xTaskCheckForTimeOut+0xb4>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b17      	ldr	r3, [pc, #92]	; (800404c <xTaskCheckForTimeOut+0xc8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d00a      	beq.n	800400c <xTaskCheckForTimeOut+0x88>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d305      	bcc.n	800400c <xTaskCheckForTimeOut+0x88>
 8004000:	2301      	movs	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e015      	b.n	8004038 <xTaskCheckForTimeOut+0xb4>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	429a      	cmp	r2, r3
 8004014:	d20b      	bcs.n	800402e <xTaskCheckForTimeOut+0xaa>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1ad2      	subs	r2, r2, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ff98 	bl	8003f58 <vTaskInternalSetTimeOutState>
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	e004      	b.n	8004038 <xTaskCheckForTimeOut+0xb4>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	2301      	movs	r3, #1
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	f000 ffea 	bl	8005010 <vPortExitCritical>
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000184 	.word	0x20000184
 800404c:	20000198 	.word	0x20000198

08004050 <vTaskMissedYield>:
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <vTaskMissedYield+0x14>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	bf00      	nop
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000194 	.word	0x20000194

08004068 <prvIdleTask>:
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	f000 f8b0 	bl	80041d4 <prvCheckTasksWaitingTermination>
 8004074:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <prvIdleTask+0x70>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d907      	bls.n	800408c <prvIdleTask+0x24>
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <prvIdleTask+0x74>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f7ff fb0a 	bl	80036a4 <prvGetExpectedIdleTime>
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d9eb      	bls.n	8004070 <prvIdleTask+0x8>
 8004098:	f7ff faf6 	bl	8003688 <vTaskSuspendAll>
 800409c:	4b10      	ldr	r3, [pc, #64]	; (80040e0 <prvIdleTask+0x78>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <prvIdleTask+0x7c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d20a      	bcs.n	80040be <prvIdleTask+0x56>
 80040a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ac:	f383 8811 	msr	BASEPRI, r3
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	f3bf 8f4f 	dsb	sy
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	bf00      	nop
 80040bc:	e7fe      	b.n	80040bc <prvIdleTask+0x54>
 80040be:	f7ff faf1 	bl	80036a4 <prvGetExpectedIdleTime>
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d902      	bls.n	80040d0 <prvIdleTask+0x68>
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f001 f80e 	bl	80050ec <vPortSuppressTicksAndSleep>
 80040d0:	f7ff fb1e 	bl	8003710 <xTaskResumeAll>
 80040d4:	e7cc      	b.n	8004070 <prvIdleTask+0x8>
 80040d6:	bf00      	nop
 80040d8:	200000ac 	.word	0x200000ac
 80040dc:	e000ed04 	.word	0xe000ed04
 80040e0:	200001a0 	.word	0x200001a0
 80040e4:	20000184 	.word	0x20000184

080040e8 <eTaskConfirmSleepModeStatus>:
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	2301      	movs	r3, #1
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	2301      	movs	r3, #1
 80040f4:	71fb      	strb	r3, [r7, #7]
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <eTaskConfirmSleepModeStatus+0x58>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <eTaskConfirmSleepModeStatus+0x1c>
 80040fe:	2300      	movs	r3, #0
 8004100:	71fb      	strb	r3, [r7, #7]
 8004102:	e017      	b.n	8004134 <eTaskConfirmSleepModeStatus+0x4c>
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <eTaskConfirmSleepModeStatus+0x5c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <eTaskConfirmSleepModeStatus+0x2a>
 800410c:	2300      	movs	r3, #0
 800410e:	71fb      	strb	r3, [r7, #7]
 8004110:	e010      	b.n	8004134 <eTaskConfirmSleepModeStatus+0x4c>
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <eTaskConfirmSleepModeStatus+0x60>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <eTaskConfirmSleepModeStatus+0x38>
 800411a:	2300      	movs	r3, #0
 800411c:	71fb      	strb	r3, [r7, #7]
 800411e:	e009      	b.n	8004134 <eTaskConfirmSleepModeStatus+0x4c>
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <eTaskConfirmSleepModeStatus+0x64>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <eTaskConfirmSleepModeStatus+0x68>)
 8004126:	6819      	ldr	r1, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	1acb      	subs	r3, r1, r3
 800412c:	429a      	cmp	r2, r3
 800412e:	d101      	bne.n	8004134 <eTaskConfirmSleepModeStatus+0x4c>
 8004130:	2302      	movs	r3, #2
 8004132:	71fb      	strb	r3, [r7, #7]
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	20000140 	.word	0x20000140
 8004144:	20000194 	.word	0x20000194
 8004148:	20000190 	.word	0x20000190
 800414c:	2000016c 	.word	0x2000016c
 8004150:	20000180 	.word	0x20000180

08004154 <prvInitialiseTaskLists>:
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	e00c      	b.n	800417a <prvInitialiseTaskLists+0x26>
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <prvInitialiseTaskLists+0x60>)
 800416c:	4413      	add	r3, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fd9e 	bl	8004cb0 <vListInitialise>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3301      	adds	r3, #1
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d9ef      	bls.n	8004160 <prvInitialiseTaskLists+0xc>
 8004180:	480d      	ldr	r0, [pc, #52]	; (80041b8 <prvInitialiseTaskLists+0x64>)
 8004182:	f000 fd95 	bl	8004cb0 <vListInitialise>
 8004186:	480d      	ldr	r0, [pc, #52]	; (80041bc <prvInitialiseTaskLists+0x68>)
 8004188:	f000 fd92 	bl	8004cb0 <vListInitialise>
 800418c:	480c      	ldr	r0, [pc, #48]	; (80041c0 <prvInitialiseTaskLists+0x6c>)
 800418e:	f000 fd8f 	bl	8004cb0 <vListInitialise>
 8004192:	480c      	ldr	r0, [pc, #48]	; (80041c4 <prvInitialiseTaskLists+0x70>)
 8004194:	f000 fd8c 	bl	8004cb0 <vListInitialise>
 8004198:	480b      	ldr	r0, [pc, #44]	; (80041c8 <prvInitialiseTaskLists+0x74>)
 800419a:	f000 fd89 	bl	8004cb0 <vListInitialise>
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <prvInitialiseTaskLists+0x78>)
 80041a0:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <prvInitialiseTaskLists+0x64>)
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <prvInitialiseTaskLists+0x7c>)
 80041a6:	4a05      	ldr	r2, [pc, #20]	; (80041bc <prvInitialiseTaskLists+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	200000ac 	.word	0x200000ac
 80041b8:	20000110 	.word	0x20000110
 80041bc:	20000124 	.word	0x20000124
 80041c0:	20000140 	.word	0x20000140
 80041c4:	20000154 	.word	0x20000154
 80041c8:	2000016c 	.word	0x2000016c
 80041cc:	20000138 	.word	0x20000138
 80041d0:	2000013c 	.word	0x2000013c

080041d4 <prvCheckTasksWaitingTermination>:
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	e019      	b.n	8004210 <prvCheckTasksWaitingTermination+0x3c>
 80041dc:	f000 fee8 	bl	8004fb0 <vPortEnterCritical>
 80041e0:	4b10      	ldr	r3, [pc, #64]	; (8004224 <prvCheckTasksWaitingTermination+0x50>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fdc2 	bl	8004d76 <uxListRemove>
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <prvCheckTasksWaitingTermination+0x54>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	4a0b      	ldr	r2, [pc, #44]	; (8004228 <prvCheckTasksWaitingTermination+0x54>)
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <prvCheckTasksWaitingTermination+0x58>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3b01      	subs	r3, #1
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <prvCheckTasksWaitingTermination+0x58>)
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	f000 ff03 	bl	8005010 <vPortExitCritical>
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f810 	bl	8004230 <prvDeleteTCB>
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <prvCheckTasksWaitingTermination+0x58>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e1      	bne.n	80041dc <prvCheckTasksWaitingTermination+0x8>
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000154 	.word	0x20000154
 8004228:	20000180 	.word	0x20000180
 800422c:	20000168 	.word	0x20000168

08004230 <prvDeleteTCB>:
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fd25 	bl	8004c8c <vPortFree>
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fd22 	bl	8004c8c <vPortFree>
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvResetNextTaskUnblockTime>:
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
 8004254:	4b09      	ldr	r3, [pc, #36]	; (800427c <prvResetNextTaskUnblockTime+0x2c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <prvResetNextTaskUnblockTime+0x18>
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <prvResetNextTaskUnblockTime+0x30>)
 8004260:	f04f 32ff 	mov.w	r2, #4294967295
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e005      	b.n	8004274 <prvResetNextTaskUnblockTime+0x24>
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <prvResetNextTaskUnblockTime+0x2c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a03      	ldr	r2, [pc, #12]	; (8004280 <prvResetNextTaskUnblockTime+0x30>)
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	20000138 	.word	0x20000138
 8004280:	200001a0 	.word	0x200001a0

08004284 <xTaskGetSchedulerState>:
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <xTaskGetSchedulerState+0x34>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <xTaskGetSchedulerState+0x14>
 8004292:	2301      	movs	r3, #1
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	e008      	b.n	80042aa <xTaskGetSchedulerState+0x26>
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <xTaskGetSchedulerState+0x38>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <xTaskGetSchedulerState+0x22>
 80042a0:	2302      	movs	r3, #2
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	e001      	b.n	80042aa <xTaskGetSchedulerState+0x26>
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	2000018c 	.word	0x2000018c
 80042bc:	200001a8 	.word	0x200001a8

080042c0 <xTaskPriorityInherit>:
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d079      	beq.n	80043ca <xTaskPriorityInherit+0x10a>
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <xTaskPriorityInherit+0x114>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d269      	bcs.n	80043b8 <xTaskPriorityInherit+0xf8>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db06      	blt.n	80042fa <xTaskPriorityInherit+0x3a>
 80042ec:	4b39      	ldr	r3, [pc, #228]	; (80043d4 <xTaskPriorityInherit+0x114>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f1c3 0205 	rsb	r2, r3, #5
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	619a      	str	r2, [r3, #24]
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6959      	ldr	r1, [r3, #20]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a33      	ldr	r2, [pc, #204]	; (80043d8 <xTaskPriorityInherit+0x118>)
 800430c:	4413      	add	r3, r2
 800430e:	4299      	cmp	r1, r3
 8004310:	d14a      	bne.n	80043a8 <xTaskPriorityInherit+0xe8>
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f000 fd2d 	bl	8004d76 <uxListRemove>
 800431c:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <xTaskPriorityInherit+0x114>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	62da      	str	r2, [r3, #44]	; 0x2c
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <xTaskPriorityInherit+0x11c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d903      	bls.n	800433a <xTaskPriorityInherit+0x7a>
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	4a29      	ldr	r2, [pc, #164]	; (80043dc <xTaskPriorityInherit+0x11c>)
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	4926      	ldr	r1, [pc, #152]	; (80043d8 <xTaskPriorityInherit+0x118>)
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	3304      	adds	r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	609a      	str	r2, [r3, #8]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	3204      	adds	r2, #4
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1d1a      	adds	r2, r3, #4
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <xTaskPriorityInherit+0x118>)
 800437e:	441a      	add	r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	615a      	str	r2, [r3, #20]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	4913      	ldr	r1, [pc, #76]	; (80043d8 <xTaskPriorityInherit+0x118>)
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	480f      	ldr	r0, [pc, #60]	; (80043d8 <xTaskPriorityInherit+0x118>)
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4403      	add	r3, r0
 80043a4:	6019      	str	r1, [r3, #0]
 80043a6:	e004      	b.n	80043b2 <xTaskPriorityInherit+0xf2>
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <xTaskPriorityInherit+0x114>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80043b2:	2301      	movs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e008      	b.n	80043ca <xTaskPriorityInherit+0x10a>
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <xTaskPriorityInherit+0x114>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d201      	bcs.n	80043ca <xTaskPriorityInherit+0x10a>
 80043c6:	2301      	movs	r3, #1
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	200000a8 	.word	0x200000a8
 80043d8:	200000ac 	.word	0x200000ac
 80043dc:	20000188 	.word	0x20000188

080043e0 <xTaskPriorityDisinherit>:
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	2300      	movs	r3, #0
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d07e      	beq.n	80044f4 <xTaskPriorityDisinherit+0x114>
 80043f6:	4b42      	ldr	r3, [pc, #264]	; (8004500 <xTaskPriorityDisinherit+0x120>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d00a      	beq.n	8004416 <xTaskPriorityDisinherit+0x36>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xTaskPriorityDisinherit+0x34>
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <xTaskPriorityDisinherit+0x54>
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	bf00      	nop
 8004432:	e7fe      	b.n	8004432 <xTaskPriorityDisinherit+0x52>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	655a      	str	r2, [r3, #84]	; 0x54
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004446:	429a      	cmp	r2, r3
 8004448:	d054      	beq.n	80044f4 <xTaskPriorityDisinherit+0x114>
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	2b00      	cmp	r3, #0
 8004450:	d150      	bne.n	80044f4 <xTaskPriorityDisinherit+0x114>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	3304      	adds	r3, #4
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fc8d 	bl	8004d76 <uxListRemove>
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	f1c3 0205 	rsb	r2, r3, #5
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	619a      	str	r2, [r3, #24]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	4b23      	ldr	r3, [pc, #140]	; (8004504 <xTaskPriorityDisinherit+0x124>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d903      	bls.n	8004484 <xTaskPriorityDisinherit+0xa4>
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	4a20      	ldr	r2, [pc, #128]	; (8004504 <xTaskPriorityDisinherit+0x124>)
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	491f      	ldr	r1, [pc, #124]	; (8004508 <xTaskPriorityDisinherit+0x128>)
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	3304      	adds	r3, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	3204      	adds	r2, #4
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	1d1a      	adds	r2, r3, #4
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4a10      	ldr	r2, [pc, #64]	; (8004508 <xTaskPriorityDisinherit+0x128>)
 80044c8:	441a      	add	r2, r3
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	615a      	str	r2, [r3, #20]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d2:	490d      	ldr	r1, [pc, #52]	; (8004508 <xTaskPriorityDisinherit+0x128>)
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	1c59      	adds	r1, r3, #1
 80044e2:	4809      	ldr	r0, [pc, #36]	; (8004508 <xTaskPriorityDisinherit+0x128>)
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4403      	add	r3, r0
 80044ee:	6019      	str	r1, [r3, #0]
 80044f0:	2301      	movs	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200000a8 	.word	0x200000a8
 8004504:	20000188 	.word	0x20000188
 8004508:	200000ac 	.word	0x200000ac

0800450c <vTaskPriorityDisinheritAfterTimeout>:
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	623b      	str	r3, [r7, #32]
 800451a:	2301      	movs	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8093 	beq.w	800464c <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10a      	bne.n	8004544 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	bf00      	nop
 8004542:	e7fe      	b.n	8004542 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d902      	bls.n	8004554 <vTaskPriorityDisinheritAfterTimeout+0x48>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
 8004552:	e002      	b.n	800455a <vTaskPriorityDisinheritAfterTimeout+0x4e>
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	429a      	cmp	r2, r3
 8004562:	d073      	beq.n	800464c <vTaskPriorityDisinheritAfterTimeout+0x140>
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	429a      	cmp	r2, r3
 800456c:	d16e      	bne.n	800464c <vTaskPriorityDisinheritAfterTimeout+0x140>
 800456e:	4b39      	ldr	r3, [pc, #228]	; (8004654 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a3a      	ldr	r2, [r7, #32]
 8004574:	429a      	cmp	r2, r3
 8004576:	d10a      	bne.n	800458e <vTaskPriorityDisinheritAfterTimeout+0x82>
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <vTaskPriorityDisinheritAfterTimeout+0x80>
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	db04      	blt.n	80045ac <vTaskPriorityDisinheritAfterTimeout+0xa0>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	f1c3 0205 	rsb	r2, r3, #5
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	619a      	str	r2, [r3, #24]
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	6959      	ldr	r1, [r3, #20]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4a27      	ldr	r2, [pc, #156]	; (8004658 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 80045bc:	4413      	add	r3, r2
 80045be:	4299      	cmp	r1, r3
 80045c0:	d144      	bne.n	800464c <vTaskPriorityDisinheritAfterTimeout+0x140>
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fbd5 	bl	8004d76 <uxListRemove>
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	4b22      	ldr	r3, [pc, #136]	; (800465c <vTaskPriorityDisinheritAfterTimeout+0x150>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d903      	bls.n	80045e0 <vTaskPriorityDisinheritAfterTimeout+0xd4>
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	4a1f      	ldr	r2, [pc, #124]	; (800465c <vTaskPriorityDisinheritAfterTimeout+0x150>)
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	491c      	ldr	r1, [pc, #112]	; (8004658 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	3304      	adds	r3, #4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	3204      	adds	r2, #4
 800460c:	605a      	str	r2, [r3, #4]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	1d1a      	adds	r2, r3, #4
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	609a      	str	r2, [r3, #8]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4a0d      	ldr	r2, [pc, #52]	; (8004658 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004624:	441a      	add	r2, r3
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	615a      	str	r2, [r3, #20]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	490a      	ldr	r1, [pc, #40]	; (8004658 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	4806      	ldr	r0, [pc, #24]	; (8004658 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4403      	add	r3, r0
 800464a:	6019      	str	r1, [r3, #0]
 800464c:	bf00      	nop
 800464e:	3728      	adds	r7, #40	; 0x28
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	200000a8 	.word	0x200000a8
 8004658:	200000ac 	.word	0x200000ac
 800465c:	20000188 	.word	0x20000188

08004660 <pvTaskIncrementMutexHeldCount>:
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
 8004664:	4b07      	ldr	r3, [pc, #28]	; (8004684 <pvTaskIncrementMutexHeldCount+0x24>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <pvTaskIncrementMutexHeldCount+0x16>
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <pvTaskIncrementMutexHeldCount+0x24>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004672:	3201      	adds	r2, #1
 8004674:	655a      	str	r2, [r3, #84]	; 0x54
 8004676:	4b03      	ldr	r3, [pc, #12]	; (8004684 <pvTaskIncrementMutexHeldCount+0x24>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	200000a8 	.word	0x200000a8

08004688 <prvAddCurrentTaskToDelayedList>:
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	4b2e      	ldr	r3, [pc, #184]	; (800474c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	4b2d      	ldr	r3, [pc, #180]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fb69 	bl	8004d76 <uxListRemove>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d124      	bne.n	80046f6 <prvAddCurrentTaskToDelayedList+0x6e>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d021      	beq.n	80046f6 <prvAddCurrentTaskToDelayedList+0x6e>
 80046b2:	4b28      	ldr	r3, [pc, #160]	; (8004754 <prvAddCurrentTaskToDelayedList+0xcc>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	4b23      	ldr	r3, [pc, #140]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	6892      	ldr	r2, [r2, #8]
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	4b21      	ldr	r3, [pc, #132]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	3204      	adds	r2, #4
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	1d1a      	adds	r2, r3, #4
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <prvAddCurrentTaskToDelayedList+0xcc>)
 80046e6:	615a      	str	r2, [r3, #20]
 80046e8:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <prvAddCurrentTaskToDelayedList+0xcc>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	4a19      	ldr	r2, [pc, #100]	; (8004754 <prvAddCurrentTaskToDelayedList+0xcc>)
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	bf00      	nop
 80046f4:	e026      	b.n	8004744 <prvAddCurrentTaskToDelayedList+0xbc>
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4413      	add	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	429a      	cmp	r2, r3
 800470c:	d209      	bcs.n	8004722 <prvAddCurrentTaskToDelayedList+0x9a>
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3304      	adds	r3, #4
 8004718:	4619      	mov	r1, r3
 800471a:	4610      	mov	r0, r2
 800471c:	f000 faf3 	bl	8004d06 <vListInsert>
 8004720:	e010      	b.n	8004744 <prvAddCurrentTaskToDelayedList+0xbc>
 8004722:	4b0e      	ldr	r3, [pc, #56]	; (800475c <prvAddCurrentTaskToDelayedList+0xd4>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3304      	adds	r3, #4
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f000 fae9 	bl	8004d06 <vListInsert>
 8004734:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	429a      	cmp	r2, r3
 800473c:	d202      	bcs.n	8004744 <prvAddCurrentTaskToDelayedList+0xbc>
 800473e:	4a08      	ldr	r2, [pc, #32]	; (8004760 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	bf00      	nop
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000184 	.word	0x20000184
 8004750:	200000a8 	.word	0x200000a8
 8004754:	2000016c 	.word	0x2000016c
 8004758:	2000013c 	.word	0x2000013c
 800475c:	20000138 	.word	0x20000138
 8004760:	200001a0 	.word	0x200001a0

08004764 <xTimerCreateTimerTask>:
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af02      	add	r7, sp, #8
 800476a:	2300      	movs	r3, #0
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	f000 fa45 	bl	8004bfc <prvCheckForValidListAndQueue>
 8004772:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <xTimerCreateTimerTask+0x54>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <xTimerCreateTimerTask+0x2c>
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <xTimerCreateTimerTask+0x58>)
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	2303      	movs	r3, #3
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	2280      	movs	r2, #128	; 0x80
 8004786:	490e      	ldr	r1, [pc, #56]	; (80047c0 <xTimerCreateTimerTask+0x5c>)
 8004788:	480e      	ldr	r0, [pc, #56]	; (80047c4 <xTimerCreateTimerTask+0x60>)
 800478a:	f7fe fcf9 	bl	8003180 <xTaskCreate>
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <xTimerCreateTimerTask+0x48>
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <xTimerCreateTimerTask+0x46>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	200001dc 	.word	0x200001dc
 80047bc:	200001e0 	.word	0x200001e0
 80047c0:	080055e0 	.word	0x080055e0
 80047c4:	0800486d 	.word	0x0800486d

080047c8 <prvReloadTimer>:
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	e008      	b.n	80047e8 <prvReloadTimer+0x20>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	4413      	add	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	4798      	blx	r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	18d1      	adds	r1, r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f8db 	bl	80049b0 <prvInsertTimerInActiveList>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ea      	bne.n	80047d6 <prvReloadTimer+0xe>
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <prvProcessExpiredTimer>:
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <prvProcessExpiredTimer+0x5c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3304      	adds	r3, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f000 faa6 	bl	8004d76 <uxListRemove>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <prvProcessExpiredTimer+0x38>
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff ffc3 	bl	80047c8 <prvReloadTimer>
 8004842:	e008      	b.n	8004856 <prvProcessExpiredTimer+0x4a>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	b2da      	uxtb	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	4798      	blx	r3
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200001d4 	.word	0x200001d4

0800486c <prvTimerTask>:
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	f107 0308 	add.w	r3, r7, #8
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f857 	bl	800492c <prvGetNextExpireTime>
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4619      	mov	r1, r3
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f803 	bl	8004890 <prvProcessTimerOrBlockTask>
 800488a:	f000 f8d3 	bl	8004a34 <prvProcessReceivedCommands>
 800488e:	e7f1      	b.n	8004874 <prvTimerTask+0x8>

08004890 <prvProcessTimerOrBlockTask>:
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	f7fe fef5 	bl	8003688 <vTaskSuspendAll>
 800489e:	f107 0308 	add.w	r3, r7, #8
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f864 	bl	8004970 <prvSampleTimeNow>
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d130      	bne.n	8004912 <prvProcessTimerOrBlockTask+0x82>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <prvProcessTimerOrBlockTask+0x3c>
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d806      	bhi.n	80048cc <prvProcessTimerOrBlockTask+0x3c>
 80048be:	f7fe ff27 	bl	8003710 <xTaskResumeAll>
 80048c2:	68f9      	ldr	r1, [r7, #12]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ffa1 	bl	800480c <prvProcessExpiredTimer>
 80048ca:	e024      	b.n	8004916 <prvProcessTimerOrBlockTask+0x86>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <prvProcessTimerOrBlockTask+0x54>
 80048d2:	4b13      	ldr	r3, [pc, #76]	; (8004920 <prvProcessTimerOrBlockTask+0x90>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <prvProcessTimerOrBlockTask+0x50>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <prvProcessTimerOrBlockTask+0x52>
 80048e0:	2300      	movs	r3, #0
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <prvProcessTimerOrBlockTask+0x94>)
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	4619      	mov	r1, r3
 80048f2:	f7fe fc11 	bl	8003118 <vQueueWaitForMessageRestricted>
 80048f6:	f7fe ff0b 	bl	8003710 <xTaskResumeAll>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <prvProcessTimerOrBlockTask+0x86>
 8004900:	4b09      	ldr	r3, [pc, #36]	; (8004928 <prvProcessTimerOrBlockTask+0x98>)
 8004902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	e001      	b.n	8004916 <prvProcessTimerOrBlockTask+0x86>
 8004912:	f7fe fefd 	bl	8003710 <xTaskResumeAll>
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	200001d8 	.word	0x200001d8
 8004924:	200001dc 	.word	0x200001dc
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <prvGetNextExpireTime>:
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	4b0d      	ldr	r3, [pc, #52]	; (800496c <prvGetNextExpireTime+0x40>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <prvGetNextExpireTime+0x16>
 800493e:	2201      	movs	r2, #1
 8004940:	e000      	b.n	8004944 <prvGetNextExpireTime+0x18>
 8004942:	2200      	movs	r2, #0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d105      	bne.n	800495c <prvGetNextExpireTime+0x30>
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <prvGetNextExpireTime+0x40>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]
 800495a:	e001      	b.n	8004960 <prvGetNextExpireTime+0x34>
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	200001d4 	.word	0x200001d4

08004970 <prvSampleTimeNow>:
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	f7fe ffc6 	bl	8003908 <xTaskGetTickCount>
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <prvSampleTimeNow+0x3c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	429a      	cmp	r2, r3
 8004986:	d205      	bcs.n	8004994 <prvSampleTimeNow+0x24>
 8004988:	f000 f912 	bl	8004bb0 <prvSwitchTimerLists>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	e002      	b.n	800499a <prvSampleTimeNow+0x2a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	4a04      	ldr	r2, [pc, #16]	; (80049ac <prvSampleTimeNow+0x3c>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200001e4 	.word	0x200001e4

080049b0 <prvInsertTimerInActiveList>:
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	605a      	str	r2, [r3, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	611a      	str	r2, [r3, #16]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d812      	bhi.n	80049fc <prvInsertTimerInActiveList+0x4c>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	1ad2      	subs	r2, r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d302      	bcc.n	80049ea <prvInsertTimerInActiveList+0x3a>
 80049e4:	2301      	movs	r3, #1
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e01b      	b.n	8004a22 <prvInsertTimerInActiveList+0x72>
 80049ea:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <prvInsertTimerInActiveList+0x7c>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f000 f986 	bl	8004d06 <vListInsert>
 80049fa:	e012      	b.n	8004a22 <prvInsertTimerInActiveList+0x72>
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d206      	bcs.n	8004a12 <prvInsertTimerInActiveList+0x62>
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d302      	bcc.n	8004a12 <prvInsertTimerInActiveList+0x62>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	e007      	b.n	8004a22 <prvInsertTimerInActiveList+0x72>
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <prvInsertTimerInActiveList+0x80>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f000 f972 	bl	8004d06 <vListInsert>
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	200001d8 	.word	0x200001d8
 8004a30:	200001d4 	.word	0x200001d4

08004a34 <prvProcessReceivedCommands>:
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	e0a6      	b.n	8004b8a <prvProcessReceivedCommands+0x156>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f2c0 80a2 	blt.w	8004b88 <prvProcessReceivedCommands+0x154>
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	61fb      	str	r3, [r7, #28]
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <prvProcessReceivedCommands+0x26>
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 f98e 	bl	8004d76 <uxListRemove>
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff ff87 	bl	8004970 <prvSampleTimeNow>
 8004a62:	61b8      	str	r0, [r7, #24]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	f200 808e 	bhi.w	8004b8a <prvProcessReceivedCommands+0x156>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <prvProcessReceivedCommands+0x40>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004a99 	.word	0x08004a99
 8004a7c:	08004b01 	.word	0x08004b01
 8004a80:	08004b15 	.word	0x08004b15
 8004a84:	08004b5f 	.word	0x08004b5f
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004a99 	.word	0x08004a99
 8004a90:	08004b01 	.word	0x08004b01
 8004a94:	08004b15 	.word	0x08004b15
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	18d1      	adds	r1, r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	69f8      	ldr	r0, [r7, #28]
 8004ab8:	f7ff ff7a 	bl	80049b0 <prvInsertTimerInActiveList>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d063      	beq.n	8004b8a <prvProcessReceivedCommands+0x156>
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <prvProcessReceivedCommands+0xb0>
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4619      	mov	r1, r3
 8004adc:	69f8      	ldr	r0, [r7, #28]
 8004ade:	f7ff fe73 	bl	80047c8 <prvReloadTimer>
 8004ae2:	e008      	b.n	8004af6 <prvProcessReceivedCommands+0xc2>
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	69f8      	ldr	r0, [r7, #28]
 8004afc:	4798      	blx	r3
 8004afe:	e044      	b.n	8004b8a <prvProcessReceivedCommands+0x156>
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004b12:	e03a      	b.n	8004b8a <prvProcessReceivedCommands+0x156>
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	619a      	str	r2, [r3, #24]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <prvProcessReceivedCommands+0x116>
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <prvProcessReceivedCommands+0x114>
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	18d1      	adds	r1, r2, r3
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	69f8      	ldr	r0, [r7, #28]
 8004b58:	f7ff ff2a 	bl	80049b0 <prvInsertTimerInActiveList>
 8004b5c:	e015      	b.n	8004b8a <prvProcessReceivedCommands+0x156>
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d103      	bne.n	8004b74 <prvProcessReceivedCommands+0x140>
 8004b6c:	69f8      	ldr	r0, [r7, #28]
 8004b6e:	f000 f88d 	bl	8004c8c <vPortFree>
 8004b72:	e00a      	b.n	8004b8a <prvProcessReceivedCommands+0x156>
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b7a:	f023 0301 	bic.w	r3, r3, #1
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004b86:	e000      	b.n	8004b8a <prvProcessReceivedCommands+0x156>
 8004b88:	bf00      	nop
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <prvProcessReceivedCommands+0x178>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f107 0108 	add.w	r1, r7, #8
 8004b92:	2200      	movs	r2, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fd ff6b 	bl	8002a70 <xQueueReceive>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f47f af4d 	bne.w	8004a3c <prvProcessReceivedCommands+0x8>
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	200001dc 	.word	0x200001dc

08004bb0 <prvSwitchTimerLists>:
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	e009      	b.n	8004bcc <prvSwitchTimerLists+0x1c>
 8004bb8:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <prvSwitchTimerLists+0x44>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8004bc6:	6838      	ldr	r0, [r7, #0]
 8004bc8:	f7ff fe20 	bl	800480c <prvProcessExpiredTimer>
 8004bcc:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <prvSwitchTimerLists+0x44>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <prvSwitchTimerLists+0x8>
 8004bd6:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <prvSwitchTimerLists+0x44>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <prvSwitchTimerLists+0x48>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a04      	ldr	r2, [pc, #16]	; (8004bf4 <prvSwitchTimerLists+0x44>)
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <prvSwitchTimerLists+0x48>)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	200001d4 	.word	0x200001d4
 8004bf8:	200001d8 	.word	0x200001d8

08004bfc <prvCheckForValidListAndQueue>:
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	f000 f9d6 	bl	8004fb0 <vPortEnterCritical>
 8004c04:	4b12      	ldr	r3, [pc, #72]	; (8004c50 <prvCheckForValidListAndQueue+0x54>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d11d      	bne.n	8004c48 <prvCheckForValidListAndQueue+0x4c>
 8004c0c:	4811      	ldr	r0, [pc, #68]	; (8004c54 <prvCheckForValidListAndQueue+0x58>)
 8004c0e:	f000 f84f 	bl	8004cb0 <vListInitialise>
 8004c12:	4811      	ldr	r0, [pc, #68]	; (8004c58 <prvCheckForValidListAndQueue+0x5c>)
 8004c14:	f000 f84c 	bl	8004cb0 <vListInitialise>
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <prvCheckForValidListAndQueue+0x60>)
 8004c1a:	4a0e      	ldr	r2, [pc, #56]	; (8004c54 <prvCheckForValidListAndQueue+0x58>)
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <prvCheckForValidListAndQueue+0x64>)
 8004c20:	4a0d      	ldr	r2, [pc, #52]	; (8004c58 <prvCheckForValidListAndQueue+0x5c>)
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	210c      	movs	r1, #12
 8004c28:	200a      	movs	r0, #10
 8004c2a:	f7fd fc5b 	bl	80024e4 <xQueueGenericCreate>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <prvCheckForValidListAndQueue+0x54>)
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <prvCheckForValidListAndQueue+0x54>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <prvCheckForValidListAndQueue+0x4c>
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <prvCheckForValidListAndQueue+0x54>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4908      	ldr	r1, [pc, #32]	; (8004c64 <prvCheckForValidListAndQueue+0x68>)
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fa1a 	bl	800307c <vQueueAddToRegistry>
 8004c48:	f000 f9e2 	bl	8005010 <vPortExitCritical>
 8004c4c:	bf00      	nop
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	200001dc 	.word	0x200001dc
 8004c54:	200001ac 	.word	0x200001ac
 8004c58:	200001c0 	.word	0x200001c0
 8004c5c:	200001d4 	.word	0x200001d4
 8004c60:	200001d8 	.word	0x200001d8
 8004c64:	080055e8 	.word	0x080055e8

08004c68 <pvPortMalloc>:
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	f7fe fd0a 	bl	8003688 <vTaskSuspendAll>
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fba7 	bl	80053c8 <malloc>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	f7fe fd47 	bl	8003710 <xTaskResumeAll>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <vPortFree>:
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <vPortFree+0x1c>
 8004c9a:	f7fe fcf5 	bl	8003688 <vTaskSuspendAll>
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb9a 	bl	80053d8 <free>
 8004ca4:	f7fe fd34 	bl	8003710 <xTaskResumeAll>
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <vListInitialise>:
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f103 0208 	add.w	r2, r3, #8
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc8:	609a      	str	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f103 0208 	add.w	r2, r3, #8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	60da      	str	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f103 0208 	add.w	r2, r3, #8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	611a      	str	r2, [r3, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr

08004cee <vListInitialiseItem>:
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	611a      	str	r2, [r3, #16]
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr

08004d06 <vListInsert>:
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1c:	d103      	bne.n	8004d26 <vListInsert+0x20>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e00c      	b.n	8004d40 <vListInsert+0x3a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3308      	adds	r3, #8
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	e002      	b.n	8004d34 <vListInsert+0x2e>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d2f6      	bcs.n	8004d2e <vListInsert+0x28>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	609a      	str	r2, [r3, #8]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <uxListRemove>:
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6892      	ldr	r2, [r2, #8]
 8004d8c:	609a      	str	r2, [r3, #8]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6852      	ldr	r2, [r2, #4]
 8004d96:	605a      	str	r2, [r3, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d103      	bne.n	8004daa <uxListRemove+0x34>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	611a      	str	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	1e5a      	subs	r2, r3, #1
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <pxPortInitialiseStack>:
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3b04      	subs	r3, #4
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b04      	subs	r3, #4
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3b04      	subs	r3, #4
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <pxPortInitialiseStack+0x54>)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3b14      	subs	r3, #20
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3b20      	subs	r3, #32
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	08004e21 	.word	0x08004e21

08004e20 <prvTaskExitError>:
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	2300      	movs	r3, #0
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <prvTaskExitError+0x54>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d00a      	beq.n	8004e4a <prvTaskExitError+0x2a>
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <prvTaskExitError+0x28>
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0fc      	beq.n	8004e60 <prvTaskExitError+0x40>
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000010 	.word	0x20000010
	...

08004e80 <SVC_Handler>:
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <pxCurrentTCBConst2>)
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	6808      	ldr	r0, [r1, #0]
 8004e86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e8a:	f380 8809 	msr	PSP, r0
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f380 8811 	msr	BASEPRI, r0
 8004e9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e9e:	4770      	bx	lr

08004ea0 <pxCurrentTCBConst2>:
 8004ea0:	200000a8 	.word	0x200000a8
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <prvPortStartFirstTask>:
 8004ea8:	4806      	ldr	r0, [pc, #24]	; (8004ec4 <prvPortStartFirstTask+0x1c>)
 8004eaa:	6800      	ldr	r0, [r0, #0]
 8004eac:	6800      	ldr	r0, [r0, #0]
 8004eae:	f380 8808 	msr	MSP, r0
 8004eb2:	b662      	cpsie	i
 8004eb4:	b661      	cpsie	f
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	df00      	svc	0
 8004ec0:	bf00      	nop
 8004ec2:	0000      	.short	0x0000
 8004ec4:	e000ed08 	.word	0xe000ed08
 8004ec8:	bf00      	nop
 8004eca:	bf00      	nop

08004ecc <xPortStartScheduler>:
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4b32      	ldr	r3, [pc, #200]	; (8004f9c <xPortStartScheduler+0xd0>)
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	22ff      	movs	r2, #255	; 0xff
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	70fb      	strb	r3, [r7, #3]
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	4b2a      	ldr	r3, [pc, #168]	; (8004fa0 <xPortStartScheduler+0xd4>)
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <xPortStartScheduler+0xd8>)
 8004efc:	2207      	movs	r2, #7
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e009      	b.n	8004f16 <xPortStartScheduler+0x4a>
 8004f02:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <xPortStartScheduler+0xd8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	4a26      	ldr	r2, [pc, #152]	; (8004fa4 <xPortStartScheduler+0xd8>)
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	70fb      	strb	r3, [r7, #3]
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d0ef      	beq.n	8004f02 <xPortStartScheduler+0x36>
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <xPortStartScheduler+0xd8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1c3 0307 	rsb	r3, r3, #7
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d00a      	beq.n	8004f44 <xPortStartScheduler+0x78>
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <xPortStartScheduler+0x76>
 8004f44:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <xPortStartScheduler+0xd8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	021b      	lsls	r3, r3, #8
 8004f4a:	4a16      	ldr	r2, [pc, #88]	; (8004fa4 <xPortStartScheduler+0xd8>)
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <xPortStartScheduler+0xd8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f56:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <xPortStartScheduler+0xd8>)
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <xPortStartScheduler+0xdc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a10      	ldr	r2, [pc, #64]	; (8004fa8 <xPortStartScheduler+0xdc>)
 8004f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <xPortStartScheduler+0xdc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <xPortStartScheduler+0xdc>)
 8004f74:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	f000 f981 	bl	8005280 <vPortSetupTimerInterrupt>
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <xPortStartScheduler+0xe0>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f7ff ff90 	bl	8004ea8 <prvPortStartFirstTask>
 8004f88:	f7fe fe48 	bl	8003c1c <vTaskSwitchContext>
 8004f8c:	f7ff ff48 	bl	8004e20 <prvTaskExitError>
 8004f90:	2300      	movs	r3, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	e000e400 	.word	0xe000e400
 8004fa0:	200001f4 	.word	0x200001f4
 8004fa4:	200001f8 	.word	0x200001f8
 8004fa8:	e000ed20 	.word	0xe000ed20
 8004fac:	20000010 	.word	0x20000010

08004fb0 <vPortEnterCritical>:
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	bf00      	nop
 8004fca:	4b0f      	ldr	r3, [pc, #60]	; (8005008 <vPortEnterCritical+0x58>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	4a0d      	ldr	r2, [pc, #52]	; (8005008 <vPortEnterCritical+0x58>)
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <vPortEnterCritical+0x58>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d10f      	bne.n	8004ffc <vPortEnterCritical+0x4c>
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <vPortEnterCritical+0x5c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <vPortEnterCritical+0x4c>
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <vPortEnterCritical+0x4a>
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000010 	.word	0x20000010
 800500c:	e000ed04 	.word	0xe000ed04

08005010 <vPortExitCritical>:
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <vPortExitCritical+0x4c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <vPortExitCritical+0x24>
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	607b      	str	r3, [r7, #4]
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <vPortExitCritical+0x22>
 8005034:	4b09      	ldr	r3, [pc, #36]	; (800505c <vPortExitCritical+0x4c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3b01      	subs	r3, #1
 800503a:	4a08      	ldr	r2, [pc, #32]	; (800505c <vPortExitCritical+0x4c>)
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <vPortExitCritical+0x4c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d105      	bne.n	8005052 <vPortExitCritical+0x42>
 8005046:	2300      	movs	r3, #0
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	bf00      	nop
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr
 800505c:	20000010 	.word	0x20000010

08005060 <PendSV_Handler>:
 8005060:	f3ef 8009 	mrs	r0, PSP
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <pxCurrentTCBConst>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005070:	6010      	str	r0, [r2, #0]
 8005072:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005076:	f04f 0050 	mov.w	r0, #80	; 0x50
 800507a:	f380 8811 	msr	BASEPRI, r0
 800507e:	f7fe fdcd 	bl	8003c1c <vTaskSwitchContext>
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f380 8811 	msr	BASEPRI, r0
 800508a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800508e:	6819      	ldr	r1, [r3, #0]
 8005090:	6808      	ldr	r0, [r1, #0]
 8005092:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005096:	f380 8809 	msr	PSP, r0
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	4770      	bx	lr

080050a0 <pxCurrentTCBConst>:
 80050a0:	200000a8 	.word	0x200000a8
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <SysTick_Handler>:
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	bf00      	nop
 80050c2:	f7fe fc93 	bl	80039ec <xTaskIncrementTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <SysTick_Handler+0x2c>
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <SysTick_Handler+0x40>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortSuppressTicksAndSleep>:
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	4b5b      	ldr	r3, [pc, #364]	; (8005264 <vPortSuppressTicksAndSleep+0x178>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d902      	bls.n	8005104 <vPortSuppressTicksAndSleep+0x18>
 80050fe:	4b59      	ldr	r3, [pc, #356]	; (8005264 <vPortSuppressTicksAndSleep+0x178>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	b672      	cpsid	i
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f7fe ffeb 	bl	80040e8 <eTaskConfirmSleepModeStatus>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <vPortSuppressTicksAndSleep+0x30>
 8005118:	b662      	cpsie	i
 800511a:	e09e      	b.n	800525a <vPortSuppressTicksAndSleep+0x16e>
 800511c:	4b52      	ldr	r3, [pc, #328]	; (8005268 <vPortSuppressTicksAndSleep+0x17c>)
 800511e:	2206      	movs	r2, #6
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	4b52      	ldr	r3, [pc, #328]	; (800526c <vPortSuppressTicksAndSleep+0x180>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d102      	bne.n	8005134 <vPortSuppressTicksAndSleep+0x48>
 800512e:	4b50      	ldr	r3, [pc, #320]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3b01      	subs	r3, #1
 8005138:	4a4d      	ldr	r2, [pc, #308]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 800513a:	6812      	ldr	r2, [r2, #0]
 800513c:	fb02 f303 	mul.w	r3, r2, r3
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	4b4b      	ldr	r3, [pc, #300]	; (8005274 <vPortSuppressTicksAndSleep+0x188>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <vPortSuppressTicksAndSleep+0x78>
 8005152:	4b48      	ldr	r3, [pc, #288]	; (8005274 <vPortSuppressTicksAndSleep+0x188>)
 8005154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	4b45      	ldr	r3, [pc, #276]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	4b44      	ldr	r3, [pc, #272]	; (8005278 <vPortSuppressTicksAndSleep+0x18c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	429a      	cmp	r2, r3
 800516c:	d904      	bls.n	8005178 <vPortSuppressTicksAndSleep+0x8c>
 800516e:	4b42      	ldr	r3, [pc, #264]	; (8005278 <vPortSuppressTicksAndSleep+0x18c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	4a40      	ldr	r2, [pc, #256]	; (800527c <vPortSuppressTicksAndSleep+0x190>)
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4b3b      	ldr	r3, [pc, #236]	; (800526c <vPortSuppressTicksAndSleep+0x180>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	4b38      	ldr	r3, [pc, #224]	; (8005268 <vPortSuppressTicksAndSleep+0x17c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a37      	ldr	r2, [pc, #220]	; (8005268 <vPortSuppressTicksAndSleep+0x17c>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <vPortSuppressTicksAndSleep+0xb8>
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	bf30      	wfi
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	b662      	cpsie	i
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	b672      	cpsid	i
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	4b2b      	ldr	r3, [pc, #172]	; (8005268 <vPortSuppressTicksAndSleep+0x17c>)
 80051ba:	2206      	movs	r2, #6
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	4b2a      	ldr	r3, [pc, #168]	; (8005268 <vPortSuppressTicksAndSleep+0x17c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01d      	beq.n	8005206 <vPortSuppressTicksAndSleep+0x11a>
 80051ca:	4b29      	ldr	r3, [pc, #164]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b27      	ldr	r3, [pc, #156]	; (800526c <vPortSuppressTicksAndSleep+0x180>)
 80051d0:	6819      	ldr	r1, [r3, #0]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	1acb      	subs	r3, r1, r3
 80051d6:	4413      	add	r3, r2
 80051d8:	3b01      	subs	r3, #1
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	4b26      	ldr	r3, [pc, #152]	; (8005278 <vPortSuppressTicksAndSleep+0x18c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d904      	bls.n	80051f0 <vPortSuppressTicksAndSleep+0x104>
 80051e6:	4b22      	ldr	r3, [pc, #136]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d903      	bls.n	80051f8 <vPortSuppressTicksAndSleep+0x10c>
 80051f0:	4b1f      	ldr	r3, [pc, #124]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	4a20      	ldr	r2, [pc, #128]	; (800527c <vPortSuppressTicksAndSleep+0x190>)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3b01      	subs	r3, #1
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	e01a      	b.n	800523c <vPortSuppressTicksAndSleep+0x150>
 8005206:	4b19      	ldr	r3, [pc, #100]	; (800526c <vPortSuppressTicksAndSleep+0x180>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	4b18      	ldr	r3, [pc, #96]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	fb02 f203 	mul.w	r2, r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	4b14      	ldr	r3, [pc, #80]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	fbb2 f3f3 	udiv	r3, r2, r3
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	3301      	adds	r3, #1
 800522c:	4a10      	ldr	r2, [pc, #64]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	fb02 f203 	mul.w	r2, r2, r3
 8005234:	4911      	ldr	r1, [pc, #68]	; (800527c <vPortSuppressTicksAndSleep+0x190>)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	600b      	str	r3, [r1, #0]
 800523c:	4b0b      	ldr	r3, [pc, #44]	; (800526c <vPortSuppressTicksAndSleep+0x180>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <vPortSuppressTicksAndSleep+0x17c>)
 8005244:	2207      	movs	r2, #7
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	4b09      	ldr	r3, [pc, #36]	; (8005270 <vPortSuppressTicksAndSleep+0x184>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0b      	ldr	r2, [pc, #44]	; (800527c <vPortSuppressTicksAndSleep+0x190>)
 800524e:	3b01      	subs	r3, #1
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	69b8      	ldr	r0, [r7, #24]
 8005254:	f7fe fb70 	bl	8003938 <vTaskStepTick>
 8005258:	b662      	cpsie	i
 800525a:	bf00      	nop
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200001ec 	.word	0x200001ec
 8005268:	e000e010 	.word	0xe000e010
 800526c:	e000e018 	.word	0xe000e018
 8005270:	200001e8 	.word	0x200001e8
 8005274:	e000ed04 	.word	0xe000ed04
 8005278:	200001f0 	.word	0x200001f0
 800527c:	e000e014 	.word	0xe000e014

08005280 <vPortSetupTimerInterrupt>:
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <vPortSetupTimerInterrupt+0x58>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a14      	ldr	r2, [pc, #80]	; (80052dc <vPortSetupTimerInterrupt+0x5c>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	099b      	lsrs	r3, r3, #6
 8005290:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <vPortSetupTimerInterrupt+0x60>)
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	4b12      	ldr	r3, [pc, #72]	; (80052e0 <vPortSetupTimerInterrupt+0x60>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <vPortSetupTimerInterrupt+0x64>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <vPortSetupTimerInterrupt+0x68>)
 80052a6:	225e      	movs	r2, #94	; 0x5e
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <vPortSetupTimerInterrupt+0x6c>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <vPortSetupTimerInterrupt+0x70>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <vPortSetupTimerInterrupt+0x58>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a08      	ldr	r2, [pc, #32]	; (80052dc <vPortSetupTimerInterrupt+0x5c>)
 80052bc:	fba2 2303 	umull	r2, r3, r2, r3
 80052c0:	099b      	lsrs	r3, r3, #6
 80052c2:	4a0c      	ldr	r2, [pc, #48]	; (80052f4 <vPortSetupTimerInterrupt+0x74>)
 80052c4:	3b01      	subs	r3, #1
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <vPortSetupTimerInterrupt+0x6c>)
 80052ca:	2207      	movs	r2, #7
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	bf00      	nop
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20000000 	.word	0x20000000
 80052dc:	10624dd3 	.word	0x10624dd3
 80052e0:	200001e8 	.word	0x200001e8
 80052e4:	200001ec 	.word	0x200001ec
 80052e8:	200001f0 	.word	0x200001f0
 80052ec:	e000e010 	.word	0xe000e010
 80052f0:	e000e018 	.word	0xe000e018
 80052f4:	e000e014 	.word	0xe000e014

080052f8 <vPortValidateInterruptPriority>:
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	f3ef 8305 	mrs	r3, IPSR
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d914      	bls.n	8005334 <vPortValidateInterruptPriority+0x3c>
 800530a:	4a16      	ldr	r2, [pc, #88]	; (8005364 <vPortValidateInterruptPriority+0x6c>)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	72fb      	strb	r3, [r7, #11]
 8005314:	4b14      	ldr	r3, [pc, #80]	; (8005368 <vPortValidateInterruptPriority+0x70>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	7afa      	ldrb	r2, [r7, #11]
 800531a:	429a      	cmp	r2, r3
 800531c:	d20a      	bcs.n	8005334 <vPortValidateInterruptPriority+0x3c>
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	607b      	str	r3, [r7, #4]
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <vPortValidateInterruptPriority+0x3a>
 8005334:	4b0d      	ldr	r3, [pc, #52]	; (800536c <vPortValidateInterruptPriority+0x74>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <vPortValidateInterruptPriority+0x78>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d90a      	bls.n	800535a <vPortValidateInterruptPriority+0x62>
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	603b      	str	r3, [r7, #0]
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <vPortValidateInterruptPriority+0x60>
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	e000e3f0 	.word	0xe000e3f0
 8005368:	200001f4 	.word	0x200001f4
 800536c:	e000ed0c 	.word	0xe000ed0c
 8005370:	200001f8 	.word	0x200001f8

08005374 <__errno>:
 8005374:	4b01      	ldr	r3, [pc, #4]	; (800537c <__errno+0x8>)
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20000014 	.word	0x20000014

08005380 <__libc_init_array>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	2600      	movs	r6, #0
 8005384:	4d0c      	ldr	r5, [pc, #48]	; (80053b8 <__libc_init_array+0x38>)
 8005386:	4c0d      	ldr	r4, [pc, #52]	; (80053bc <__libc_init_array+0x3c>)
 8005388:	1b64      	subs	r4, r4, r5
 800538a:	10a4      	asrs	r4, r4, #2
 800538c:	42a6      	cmp	r6, r4
 800538e:	d109      	bne.n	80053a4 <__libc_init_array+0x24>
 8005390:	f000 f904 	bl	800559c <_init>
 8005394:	2600      	movs	r6, #0
 8005396:	4d0a      	ldr	r5, [pc, #40]	; (80053c0 <__libc_init_array+0x40>)
 8005398:	4c0a      	ldr	r4, [pc, #40]	; (80053c4 <__libc_init_array+0x44>)
 800539a:	1b64      	subs	r4, r4, r5
 800539c:	10a4      	asrs	r4, r4, #2
 800539e:	42a6      	cmp	r6, r4
 80053a0:	d105      	bne.n	80053ae <__libc_init_array+0x2e>
 80053a2:	bd70      	pop	{r4, r5, r6, pc}
 80053a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a8:	4798      	blx	r3
 80053aa:	3601      	adds	r6, #1
 80053ac:	e7ee      	b.n	800538c <__libc_init_array+0xc>
 80053ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b2:	4798      	blx	r3
 80053b4:	3601      	adds	r6, #1
 80053b6:	e7f2      	b.n	800539e <__libc_init_array+0x1e>
 80053b8:	0800561c 	.word	0x0800561c
 80053bc:	0800561c 	.word	0x0800561c
 80053c0:	0800561c 	.word	0x0800561c
 80053c4:	08005620 	.word	0x08005620

080053c8 <malloc>:
 80053c8:	4b02      	ldr	r3, [pc, #8]	; (80053d4 <malloc+0xc>)
 80053ca:	4601      	mov	r1, r0
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	f000 b86d 	b.w	80054ac <_malloc_r>
 80053d2:	bf00      	nop
 80053d4:	20000014 	.word	0x20000014

080053d8 <free>:
 80053d8:	4b02      	ldr	r3, [pc, #8]	; (80053e4 <free+0xc>)
 80053da:	4601      	mov	r1, r0
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	f000 b819 	b.w	8005414 <_free_r>
 80053e2:	bf00      	nop
 80053e4:	20000014 	.word	0x20000014

080053e8 <memcpy>:
 80053e8:	440a      	add	r2, r1
 80053ea:	4291      	cmp	r1, r2
 80053ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80053f0:	d100      	bne.n	80053f4 <memcpy+0xc>
 80053f2:	4770      	bx	lr
 80053f4:	b510      	push	{r4, lr}
 80053f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053fa:	4291      	cmp	r1, r2
 80053fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005400:	d1f9      	bne.n	80053f6 <memcpy+0xe>
 8005402:	bd10      	pop	{r4, pc}

08005404 <memset>:
 8005404:	4603      	mov	r3, r0
 8005406:	4402      	add	r2, r0
 8005408:	4293      	cmp	r3, r2
 800540a:	d100      	bne.n	800540e <memset+0xa>
 800540c:	4770      	bx	lr
 800540e:	f803 1b01 	strb.w	r1, [r3], #1
 8005412:	e7f9      	b.n	8005408 <memset+0x4>

08005414 <_free_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4605      	mov	r5, r0
 8005418:	2900      	cmp	r1, #0
 800541a:	d043      	beq.n	80054a4 <_free_r+0x90>
 800541c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005420:	1f0c      	subs	r4, r1, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	bfb8      	it	lt
 8005426:	18e4      	addlt	r4, r4, r3
 8005428:	f000 f8aa 	bl	8005580 <__malloc_lock>
 800542c:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <_free_r+0x94>)
 800542e:	6813      	ldr	r3, [r2, #0]
 8005430:	4610      	mov	r0, r2
 8005432:	b933      	cbnz	r3, 8005442 <_free_r+0x2e>
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	6014      	str	r4, [r2, #0]
 8005438:	4628      	mov	r0, r5
 800543a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800543e:	f000 b8a5 	b.w	800558c <__malloc_unlock>
 8005442:	42a3      	cmp	r3, r4
 8005444:	d90a      	bls.n	800545c <_free_r+0x48>
 8005446:	6821      	ldr	r1, [r4, #0]
 8005448:	1862      	adds	r2, r4, r1
 800544a:	4293      	cmp	r3, r2
 800544c:	bf01      	itttt	eq
 800544e:	681a      	ldreq	r2, [r3, #0]
 8005450:	685b      	ldreq	r3, [r3, #4]
 8005452:	1852      	addeq	r2, r2, r1
 8005454:	6022      	streq	r2, [r4, #0]
 8005456:	6063      	str	r3, [r4, #4]
 8005458:	6004      	str	r4, [r0, #0]
 800545a:	e7ed      	b.n	8005438 <_free_r+0x24>
 800545c:	461a      	mov	r2, r3
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	b10b      	cbz	r3, 8005466 <_free_r+0x52>
 8005462:	42a3      	cmp	r3, r4
 8005464:	d9fa      	bls.n	800545c <_free_r+0x48>
 8005466:	6811      	ldr	r1, [r2, #0]
 8005468:	1850      	adds	r0, r2, r1
 800546a:	42a0      	cmp	r0, r4
 800546c:	d10b      	bne.n	8005486 <_free_r+0x72>
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	4401      	add	r1, r0
 8005472:	1850      	adds	r0, r2, r1
 8005474:	4283      	cmp	r3, r0
 8005476:	6011      	str	r1, [r2, #0]
 8005478:	d1de      	bne.n	8005438 <_free_r+0x24>
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4401      	add	r1, r0
 8005480:	6011      	str	r1, [r2, #0]
 8005482:	6053      	str	r3, [r2, #4]
 8005484:	e7d8      	b.n	8005438 <_free_r+0x24>
 8005486:	d902      	bls.n	800548e <_free_r+0x7a>
 8005488:	230c      	movs	r3, #12
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	e7d4      	b.n	8005438 <_free_r+0x24>
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	1821      	adds	r1, r4, r0
 8005492:	428b      	cmp	r3, r1
 8005494:	bf01      	itttt	eq
 8005496:	6819      	ldreq	r1, [r3, #0]
 8005498:	685b      	ldreq	r3, [r3, #4]
 800549a:	1809      	addeq	r1, r1, r0
 800549c:	6021      	streq	r1, [r4, #0]
 800549e:	6063      	str	r3, [r4, #4]
 80054a0:	6054      	str	r4, [r2, #4]
 80054a2:	e7c9      	b.n	8005438 <_free_r+0x24>
 80054a4:	bd38      	pop	{r3, r4, r5, pc}
 80054a6:	bf00      	nop
 80054a8:	200001fc 	.word	0x200001fc

080054ac <_malloc_r>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	1ccd      	adds	r5, r1, #3
 80054b0:	f025 0503 	bic.w	r5, r5, #3
 80054b4:	3508      	adds	r5, #8
 80054b6:	2d0c      	cmp	r5, #12
 80054b8:	bf38      	it	cc
 80054ba:	250c      	movcc	r5, #12
 80054bc:	2d00      	cmp	r5, #0
 80054be:	4606      	mov	r6, r0
 80054c0:	db01      	blt.n	80054c6 <_malloc_r+0x1a>
 80054c2:	42a9      	cmp	r1, r5
 80054c4:	d903      	bls.n	80054ce <_malloc_r+0x22>
 80054c6:	230c      	movs	r3, #12
 80054c8:	6033      	str	r3, [r6, #0]
 80054ca:	2000      	movs	r0, #0
 80054cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ce:	f000 f857 	bl	8005580 <__malloc_lock>
 80054d2:	4921      	ldr	r1, [pc, #132]	; (8005558 <_malloc_r+0xac>)
 80054d4:	680a      	ldr	r2, [r1, #0]
 80054d6:	4614      	mov	r4, r2
 80054d8:	b99c      	cbnz	r4, 8005502 <_malloc_r+0x56>
 80054da:	4f20      	ldr	r7, [pc, #128]	; (800555c <_malloc_r+0xb0>)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	b923      	cbnz	r3, 80054ea <_malloc_r+0x3e>
 80054e0:	4621      	mov	r1, r4
 80054e2:	4630      	mov	r0, r6
 80054e4:	f000 f83c 	bl	8005560 <_sbrk_r>
 80054e8:	6038      	str	r0, [r7, #0]
 80054ea:	4629      	mov	r1, r5
 80054ec:	4630      	mov	r0, r6
 80054ee:	f000 f837 	bl	8005560 <_sbrk_r>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	d123      	bne.n	800553e <_malloc_r+0x92>
 80054f6:	230c      	movs	r3, #12
 80054f8:	4630      	mov	r0, r6
 80054fa:	6033      	str	r3, [r6, #0]
 80054fc:	f000 f846 	bl	800558c <__malloc_unlock>
 8005500:	e7e3      	b.n	80054ca <_malloc_r+0x1e>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	1b5b      	subs	r3, r3, r5
 8005506:	d417      	bmi.n	8005538 <_malloc_r+0x8c>
 8005508:	2b0b      	cmp	r3, #11
 800550a:	d903      	bls.n	8005514 <_malloc_r+0x68>
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	441c      	add	r4, r3
 8005510:	6025      	str	r5, [r4, #0]
 8005512:	e004      	b.n	800551e <_malloc_r+0x72>
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	42a2      	cmp	r2, r4
 8005518:	bf0c      	ite	eq
 800551a:	600b      	streq	r3, [r1, #0]
 800551c:	6053      	strne	r3, [r2, #4]
 800551e:	4630      	mov	r0, r6
 8005520:	f000 f834 	bl	800558c <__malloc_unlock>
 8005524:	f104 000b 	add.w	r0, r4, #11
 8005528:	1d23      	adds	r3, r4, #4
 800552a:	f020 0007 	bic.w	r0, r0, #7
 800552e:	1ac2      	subs	r2, r0, r3
 8005530:	d0cc      	beq.n	80054cc <_malloc_r+0x20>
 8005532:	1a1b      	subs	r3, r3, r0
 8005534:	50a3      	str	r3, [r4, r2]
 8005536:	e7c9      	b.n	80054cc <_malloc_r+0x20>
 8005538:	4622      	mov	r2, r4
 800553a:	6864      	ldr	r4, [r4, #4]
 800553c:	e7cc      	b.n	80054d8 <_malloc_r+0x2c>
 800553e:	1cc4      	adds	r4, r0, #3
 8005540:	f024 0403 	bic.w	r4, r4, #3
 8005544:	42a0      	cmp	r0, r4
 8005546:	d0e3      	beq.n	8005510 <_malloc_r+0x64>
 8005548:	1a21      	subs	r1, r4, r0
 800554a:	4630      	mov	r0, r6
 800554c:	f000 f808 	bl	8005560 <_sbrk_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d1dd      	bne.n	8005510 <_malloc_r+0x64>
 8005554:	e7cf      	b.n	80054f6 <_malloc_r+0x4a>
 8005556:	bf00      	nop
 8005558:	200001fc 	.word	0x200001fc
 800555c:	20000200 	.word	0x20000200

08005560 <_sbrk_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	2300      	movs	r3, #0
 8005564:	4d05      	ldr	r5, [pc, #20]	; (800557c <_sbrk_r+0x1c>)
 8005566:	4604      	mov	r4, r0
 8005568:	4608      	mov	r0, r1
 800556a:	602b      	str	r3, [r5, #0]
 800556c:	f7fb f8f2 	bl	8000754 <_sbrk>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_sbrk_r+0x1a>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_sbrk_r+0x1a>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	200002c8 	.word	0x200002c8

08005580 <__malloc_lock>:
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <__malloc_lock+0x8>)
 8005582:	f000 b809 	b.w	8005598 <__retarget_lock_acquire_recursive>
 8005586:	bf00      	nop
 8005588:	200002d0 	.word	0x200002d0

0800558c <__malloc_unlock>:
 800558c:	4801      	ldr	r0, [pc, #4]	; (8005594 <__malloc_unlock+0x8>)
 800558e:	f000 b804 	b.w	800559a <__retarget_lock_release_recursive>
 8005592:	bf00      	nop
 8005594:	200002d0 	.word	0x200002d0

08005598 <__retarget_lock_acquire_recursive>:
 8005598:	4770      	bx	lr

0800559a <__retarget_lock_release_recursive>:
 800559a:	4770      	bx	lr

0800559c <_init>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr

080055a8 <_fini>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	bf00      	nop
 80055ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ae:	bc08      	pop	{r3}
 80055b0:	469e      	mov	lr, r3
 80055b2:	4770      	bx	lr
