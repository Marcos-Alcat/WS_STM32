
interrup-RTOS-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a44  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bbc  08005bbc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005bbc  08005bbc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bbc  08005bbc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000078  08005c3c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005c3c  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fbf  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea9  00000000  00000000  00034060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00036f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00037f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d76  00000000  00000000  00038e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d72  00000000  00000000  00052c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095bf0  00000000  00000000  00064980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa570  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004570  00000000  00000000  000fa5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b3c 	.word	0x08005b3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005b3c 	.word	0x08005b3c

08000150 <Adc>:
//var globales para usar live expretion//


#define THRESHOLD_VALUE 2048

static void Adc(void *pvParameters){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
		/*
		 * La función HAL-ADC-Start-IT() es responsable de permitir la interrupción y inicio de la conversión de ADC de los canales regulares.
		 * Toma en un solo parámetro que es el puntero de la estructura ADC-HandleTypeDef que contiene los parámetros de configuración para el
		 * ADC especificado. En nuestro caso es "&hadc1.
		 */
		HAL_ADC_Start_IT(&hadc1);
 8000158:	4801      	ldr	r0, [pc, #4]	; (8000160 <Adc+0x10>)
 800015a:	f000 fd03 	bl	8000b64 <HAL_ADC_Start_IT>
 800015e:	e7fb      	b.n	8000158 <Adc+0x8>
 8000160:	20000204 	.word	0x20000204

08000164 <Led>:
		// This delay marks the conversion rate
		//vTaskDelay(100/portTICK_PERIOD_MS);
	}
}

static void Led(void *pvParameters){
 8000164:	b580      	push	{r7, lr}
 8000166:	b084      	sub	sp, #16
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	uint16_t received_value;
	while (1){
		// Reads the value from the queue
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 800016c:	4b04      	ldr	r3, [pc, #16]	; (8000180 <Led+0x1c>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	f107 010e 	add.w	r1, r7, #14
 8000174:	f04f 32ff 	mov.w	r2, #4294967295
 8000178:	4618      	mov	r0, r3
 800017a:	f002 ff13 	bl	8002fa4 <xQueueReceive>
 800017e:	e7f5      	b.n	800016c <Led+0x8>
 8000180:	20000234 	.word	0x20000234

08000184 <Config>:
			//HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
		}
	}
}

static void Config(void *pvParameters){
 8000184:	b580      	push	{r7, lr}
 8000186:	b086      	sub	sp, #24
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	//unsigned portBASE_TYPE uxPriority;
	//uxPriority = uxTaskPriorityGet( NULL );
	uint16_t received_value;
	uint32_t futuro = 0, ahora = 0;
 800018c:	2300      	movs	r3, #0
 800018e:	617b      	str	r3, [r7, #20]
 8000190:	2300      	movs	r3, #0
 8000192:	613b      	str	r3, [r7, #16]

	while (1){
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000194:	4b35      	ldr	r3, [pc, #212]	; (800026c <Config+0xe8>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f04f 31ff 	mov.w	r1, #4294967295
 800019c:	4618      	mov	r0, r3
 800019e:	f002 ffe1 	bl	8003164 <xQueueSemaphoreTake>
		vTaskPrioritySet( xTarea_ADC_Handle, 3);
 80001a2:	4b33      	ldr	r3, [pc, #204]	; (8000270 <Config+0xec>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2103      	movs	r1, #3
 80001a8:	4618      	mov	r0, r3
 80001aa:	f003 fc23 	bl	80039f4 <vTaskPrioritySet>
		//HAL_ADC_Start_IT(&hadc1);
		xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 80001ae:	4b31      	ldr	r3, [pc, #196]	; (8000274 <Config+0xf0>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f107 010e 	add.w	r1, r7, #14
 80001b6:	f04f 32ff 	mov.w	r2, #4294967295
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 fef2 	bl	8002fa4 <xQueueReceive>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); //Enciende el PIN.
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	482c      	ldr	r0, [pc, #176]	; (8000278 <Config+0xf4>)
 80001c8:	f001 fa56 	bl	8001678 <HAL_GPIO_WritePin>
		while(received_value<2300){
 80001cc:	e00b      	b.n	80001e6 <Config+0x62>
			HAL_ADC_Start_IT(&hadc1);
 80001ce:	482b      	ldr	r0, [pc, #172]	; (800027c <Config+0xf8>)
 80001d0:	f000 fcc8 	bl	8000b64 <HAL_ADC_Start_IT>
			xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 80001d4:	4b27      	ldr	r3, [pc, #156]	; (8000274 <Config+0xf0>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f107 010e 	add.w	r1, r7, #14
 80001dc:	f04f 32ff 	mov.w	r2, #4294967295
 80001e0:	4618      	mov	r0, r3
 80001e2:	f002 fedf 	bl	8002fa4 <xQueueReceive>
		while(received_value<2300){
 80001e6:	89fb      	ldrh	r3, [r7, #14]
 80001e8:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80001ec:	4293      	cmp	r3, r2
 80001ee:	d9ee      	bls.n	80001ce <Config+0x4a>
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apaga el PIN.
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	4820      	ldr	r0, [pc, #128]	; (8000278 <Config+0xf4>)
 80001f8:	f001 fa3e 	bl	8001678 <HAL_GPIO_WritePin>

		vTaskDelay(1000/portTICK_PERIOD_MS);
 80001fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000200:	f003 fbc4 	bl	800398c <vTaskDelay>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); //Enciende el PIN.
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020a:	481b      	ldr	r0, [pc, #108]	; (8000278 <Config+0xf4>)
 800020c:	f001 fa34 	bl	8001678 <HAL_GPIO_WritePin>
		ahora = HAL_GetTick();          //toma valor del Tick para ciclo inicial.
 8000210:	f000 fbc6 	bl	80009a0 <HAL_GetTick>
 8000214:	6138      	str	r0, [r7, #16]
	    futuro = ahora + 2000;          //valor del Tick mas un segundo.
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800021c:	617b      	str	r3, [r7, #20]
	    while(ahora - futuro){          //si son iguales sale del ciclo while.
 800021e:	e019      	b.n	8000254 <Config+0xd0>
	       ahora = HAL_GetTick();      //actualiza valor del tick.
 8000220:	f000 fbbe 	bl	80009a0 <HAL_GetTick>
 8000224:	6138      	str	r0, [r7, #16]
	       HAL_ADC_Start_IT(&hadc1);
 8000226:	4815      	ldr	r0, [pc, #84]	; (800027c <Config+0xf8>)
 8000228:	f000 fc9c 	bl	8000b64 <HAL_ADC_Start_IT>
	       xQueueReceive(adc_queue,&received_value,portMAX_DELAY);
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <Config+0xf0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f107 010e 	add.w	r1, r7, #14
 8000234:	f04f 32ff 	mov.w	r2, #4294967295
 8000238:	4618      	mov	r0, r3
 800023a:	f002 feb3 	bl	8002fa4 <xQueueReceive>
		   if (received_value < 2800){       //en caso de añadir tiempo(contrlado desde LIVE EXPRETION)
 800023e:	89fb      	ldrh	r3, [r7, #14]
 8000240:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000244:	d206      	bcs.n	8000254 <Config+0xd0>
			   ahora = HAL_GetTick();  //actualiza valor del tick.
 8000246:	f000 fbab 	bl	80009a0 <HAL_GetTick>
 800024a:	6138      	str	r0, [r7, #16]
			   futuro = ahora + 2000;  //valor del Tick mas un segundo.
 800024c:	693b      	ldr	r3, [r7, #16]
 800024e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000252:	617b      	str	r3, [r7, #20]
	    while(ahora - futuro){          //si son iguales sale del ciclo while.
 8000254:	693a      	ldr	r2, [r7, #16]
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	429a      	cmp	r2, r3
 800025a:	d1e1      	bne.n	8000220 <Config+0x9c>
		   }
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apaga el PIN.
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <Config+0xf4>)
 8000264:	f001 fa08 	bl	8001678 <HAL_GPIO_WritePin>
		xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000268:	e794      	b.n	8000194 <Config+0x10>
 800026a:	bf00      	nop
 800026c:	20000238 	.word	0x20000238
 8000270:	20000098 	.word	0x20000098
 8000274:	20000234 	.word	0x20000234
 8000278:	40011000 	.word	0x40011000
 800027c:	20000204 	.word	0x20000204

08000280 <HAL_ADC_ConvCpltCallback>:
		//HAL_Delay(80);
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	static portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	static uint16_t adc_value = 0;

	// Obtains the conversion result
	adc_value = HAL_ADC_GetValue(hadc);
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f000 fd21 	bl	8000cd0 <HAL_ADC_GetValue>
 800028e:	4603      	mov	r3, r0
 8000290:	b29a      	uxth	r2, r3
 8000292:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HAL_ADC_ConvCpltCallback+0x5c>)
 8000294:	801a      	strh	r2, [r3, #0]

	// Sends the value to the queue
	xQueueOverwriteFromISR(adc_queue, &adc_value, &xHigherPriorityTaskWoken); //en la cinfig de interrup: ADC1 y ADC2 global poner una prioridad de 5, sino queda trabado ahí.
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <HAL_ADC_ConvCpltCallback+0x60>)
 8000298:	6818      	ldr	r0, [r3, #0]
 800029a:	2302      	movs	r3, #2
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <HAL_ADC_ConvCpltCallback+0x64>)
 800029e:	490f      	ldr	r1, [pc, #60]	; (80002dc <HAL_ADC_ConvCpltCallback+0x5c>)
 80002a0:	f002 fd2a 	bl	8002cf8 <xQueueGenericSendFromISR>
	if(adc_value<2300)
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <HAL_ADC_ConvCpltCallback+0x5c>)
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d805      	bhi.n	80002bc <HAL_ADC_ConvCpltCallback+0x3c>
		xSemaphoreGiveFromISR(my_semph1, &xHigherPriorityTaskWoken);
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	490b      	ldr	r1, [pc, #44]	; (80002e4 <HAL_ADC_ConvCpltCallback+0x64>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fdd0 	bl	8002e5c <xQueueGiveFromISR>
	//xQueueOverwriteFromISR(adc_queue, &adc_value, &xHigherPriorityTaskWoken);
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <HAL_ADC_ConvCpltCallback+0x64>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d007      	beq.n	80002d4 <HAL_ADC_ConvCpltCallback+0x54>
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <HAL_ADC_ConvCpltCallback+0x6c>)
 80002c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	f3bf 8f4f 	dsb	sy
 80002d0:	f3bf 8f6f 	isb	sy

	//dos botones: max: 1981
	//boton up: 2750
	//boton min: 2574
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000009c 	.word	0x2000009c
 80002e0:	20000234 	.word	0x20000234
 80002e4:	200000a0 	.word	0x200000a0
 80002e8:	20000238 	.word	0x20000238
 80002ec:	e000ed04 	.word	0xe000ed04

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f6:	f000 fb2b 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fa:	f000 f86b 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fe:	f000 f94f 	bl	80005a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000302:	f000 f8c3 	bl	800048c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000306:	f000 f8ff 	bl	8000508 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800030a:	2201      	movs	r2, #1
 800030c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000310:	4824      	ldr	r0, [pc, #144]	; (80003a4 <main+0xb4>)
 8000312:	f001 f9b1 	bl	8001678 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim2);
 8000316:	4824      	ldr	r0, [pc, #144]	; (80003a8 <main+0xb8>)
 8000318:	f001 fef6 	bl	8002108 <HAL_TIM_Base_Start>
  adc_queue = xQueueCreate(1,sizeof(uint16_t));
 800031c:	2200      	movs	r2, #0
 800031e:	2102      	movs	r1, #2
 8000320:	2001      	movs	r0, #1
 8000322:	f002 fb79 	bl	8002a18 <xQueueGenericCreate>
 8000326:	4603      	mov	r3, r0
 8000328:	4a20      	ldr	r2, [pc, #128]	; (80003ac <main+0xbc>)
 800032a:	6013      	str	r3, [r2, #0]
  vSemaphoreCreateBinary(my_semph1);
 800032c:	2203      	movs	r2, #3
 800032e:	2100      	movs	r1, #0
 8000330:	2001      	movs	r0, #1
 8000332:	f002 fb71 	bl	8002a18 <xQueueGenericCreate>
 8000336:	4603      	mov	r3, r0
 8000338:	4a1d      	ldr	r2, [pc, #116]	; (80003b0 <main+0xc0>)
 800033a:	6013      	str	r3, [r2, #0]
 800033c:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <main+0xc0>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d006      	beq.n	8000352 <main+0x62>
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <main+0xc0>)
 8000346:	6818      	ldr	r0, [r3, #0]
 8000348:	2300      	movs	r3, #0
 800034a:	2200      	movs	r2, #0
 800034c:	2100      	movs	r1, #0
 800034e:	f002 fbd5 	bl	8002afc <xQueueGenericSend>
  xSemaphoreTake(my_semph1, portMAX_DELAY);
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <main+0xc0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f04f 31ff 	mov.w	r1, #4294967295
 800035a:	4618      	mov	r0, r3
 800035c:	f002 ff02 	bl	8003164 <xQueueSemaphoreTake>
  xTaskCreate(Adc, "ADC task", configMINIMAL_STACK_SIZE, NULL, 2, &xTarea_ADC_Handle);
 8000360:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <main+0xc4>)
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	2302      	movs	r3, #2
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2300      	movs	r3, #0
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	4912      	ldr	r1, [pc, #72]	; (80003b8 <main+0xc8>)
 800036e:	4813      	ldr	r0, [pc, #76]	; (80003bc <main+0xcc>)
 8000370:	f003 f9a0 	bl	80036b4 <xTaskCreate>
  xTaskCreate(Led, "Led task", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000374:	2300      	movs	r3, #0
 8000376:	9301      	str	r3, [sp, #4]
 8000378:	2302      	movs	r3, #2
 800037a:	9300      	str	r3, [sp, #0]
 800037c:	2300      	movs	r3, #0
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	490f      	ldr	r1, [pc, #60]	; (80003c0 <main+0xd0>)
 8000382:	4810      	ldr	r0, [pc, #64]	; (80003c4 <main+0xd4>)
 8000384:	f003 f996 	bl	80036b4 <xTaskCreate>
  xTaskCreate(Config, "Config task", 200, NULL, 3, &xTarea_Config_Handle);
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <main+0xd8>)
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2303      	movs	r3, #3
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2300      	movs	r3, #0
 8000392:	22c8      	movs	r2, #200	; 0xc8
 8000394:	490d      	ldr	r1, [pc, #52]	; (80003cc <main+0xdc>)
 8000396:	480e      	ldr	r0, [pc, #56]	; (80003d0 <main+0xe0>)
 8000398:	f003 f98c 	bl	80036b4 <xTaskCreate>

  vTaskStartScheduler();
 800039c:	f003 fbf0 	bl	8003b80 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80003a0:	e7fe      	b.n	80003a0 <main+0xb0>
 80003a2:	bf00      	nop
 80003a4:	40011000 	.word	0x40011000
 80003a8:	2000023c 	.word	0x2000023c
 80003ac:	20000234 	.word	0x20000234
 80003b0:	20000238 	.word	0x20000238
 80003b4:	20000098 	.word	0x20000098
 80003b8:	08005b54 	.word	0x08005b54
 80003bc:	08000151 	.word	0x08000151
 80003c0:	08005b60 	.word	0x08005b60
 80003c4:	08000165 	.word	0x08000165
 80003c8:	20000094 	.word	0x20000094
 80003cc:	08005b6c 	.word	0x08005b6c
 80003d0:	08000185 	.word	0x08000185

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b094      	sub	sp, #80	; 0x50
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003de:	2228      	movs	r2, #40	; 0x28
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f005 fade 	bl	80059a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	f107 0314 	add.w	r3, r7, #20
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000404:	2301      	movs	r3, #1
 8000406:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000412:	2301      	movs	r3, #1
 8000414:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000416:	2302      	movs	r3, #2
 8000418:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800041e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000420:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000424:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042a:	4618      	mov	r0, r3
 800042c:	f001 f93c 	bl	80016a8 <HAL_RCC_OscConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000436:	f000 f911 	bl	800065c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	230f      	movs	r3, #15
 800043c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	2302      	movs	r3, #2
 8000440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2102      	movs	r1, #2
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fba6 	bl	8001ba8 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000462:	f000 f8fb 	bl	800065c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000466:	2302      	movs	r3, #2
 8000468:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800046a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800046e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fd42 	bl	8001efc <HAL_RCCEx_PeriphCLKConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800047e:	f000 f8ed 	bl	800065c <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3750      	adds	r7, #80	; 0x50
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800049c:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_ADC1_Init+0x74>)
 800049e:	4a19      	ldr	r2, [pc, #100]	; (8000504 <MX_ADC1_Init+0x78>)
 80004a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <MX_ADC1_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_ADC1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ae:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_ADC1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_ADC1_Init+0x74>)
 80004b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80004ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_ADC1_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_ADC1_Init+0x74>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004c8:	480d      	ldr	r0, [pc, #52]	; (8000500 <MX_ADC1_Init+0x74>)
 80004ca:	f000 fa73 	bl	80009b4 <HAL_ADC_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004d4:	f000 f8c2 	bl	800065c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004d8:	2305      	movs	r3, #5
 80004da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004dc:	2301      	movs	r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	4619      	mov	r1, r3
 80004e8:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_ADC1_Init+0x74>)
 80004ea:	f000 fcc5 	bl	8000e78 <HAL_ADC_ConfigChannel>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004f4:	f000 f8b2 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000204 	.word	0x20000204
 8000504:	40012400 	.word	0x40012400

08000508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051c:	463b      	mov	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000524:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_TIM2_Init+0x94>)
 8000526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800052a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_TIM2_Init+0x94>)
 800052e:	2247      	movs	r2, #71	; 0x47
 8000530:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <MX_TIM2_Init+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_TIM2_Init+0x94>)
 800053a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800053e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <MX_TIM2_Init+0x94>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_TIM2_Init+0x94>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800054c:	4813      	ldr	r0, [pc, #76]	; (800059c <MX_TIM2_Init+0x94>)
 800054e:	f001 fd8b 	bl	8002068 <HAL_TIM_Base_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000558:	f000 f880 	bl	800065c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	4619      	mov	r1, r3
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <MX_TIM2_Init+0x94>)
 800056a:	f001 ff71 	bl	8002450 <HAL_TIM_ConfigClockSource>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000574:	f000 f872 	bl	800065c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000580:	463b      	mov	r3, r7
 8000582:	4619      	mov	r1, r3
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_TIM2_Init+0x94>)
 8000586:	f002 f947 	bl	8002818 <HAL_TIMEx_MasterConfigSynchronization>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000590:	f000 f864 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000023c 	.word	0x2000023c

080005a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_GPIO_Init+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <MX_GPIO_Init+0x90>)
 80005ba:	f043 0310 	orr.w	r3, r3, #16
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_GPIO_Init+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0310 	and.w	r3, r3, #16
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_GPIO_Init+0x90>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <MX_GPIO_Init+0x90>)
 80005d2:	f043 0320 	orr.w	r3, r3, #32
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_GPIO_Init+0x90>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0320 	and.w	r3, r3, #32
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_GPIO_Init+0x90>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <MX_GPIO_Init+0x90>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_GPIO_Init+0x90>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	480c      	ldr	r0, [pc, #48]	; (8000634 <MX_GPIO_Init+0x94>)
 8000604:	f001 f838 	bl	8001678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2302      	movs	r3, #2
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_GPIO_Init+0x94>)
 8000622:	f000 fea5 	bl	8001370 <HAL_GPIO_Init>

}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	40011000 	.word	0x40011000

08000638 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d101      	bne.n	800064e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800064a:	f000 f997 	bl	800097c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40012c00 	.word	0x40012c00

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <HAL_MspInit+0x5c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_MspInit+0x5c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <HAL_MspInit+0x5c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <HAL_MspInit+0x5c>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_MspInit+0x5c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_MspInit+0x60>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_MspInit+0x60>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <HAL_ADC_MspInit+0x7c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d129      	bne.n	8000740 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <HAL_ADC_MspInit+0x80>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a16      	ldr	r2, [pc, #88]	; (800074c <HAL_ADC_MspInit+0x80>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_ADC_MspInit+0x80>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <HAL_ADC_MspInit+0x80>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <HAL_ADC_MspInit+0x80>)
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_ADC_MspInit+0x80>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0304 	and.w	r3, r3, #4
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_BTN_INT_Pin;
 800071c:	2320      	movs	r3, #32
 800071e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000720:	2303      	movs	r3, #3
 8000722:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <HAL_ADC_MspInit+0x84>)
 800072c:	f000 fe20 	bl	8001370 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2105      	movs	r1, #5
 8000734:	2012      	movs	r0, #18
 8000736:	f000 fdf0 	bl	800131a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800073a:	2012      	movs	r0, #18
 800073c:	f000 fe09 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40012400 	.word	0x40012400
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800

08000754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000764:	d10b      	bne.n	800077e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_TIM_Base_MspInit+0x34>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a07      	ldr	r2, [pc, #28]	; (8000788 <HAL_TIM_Base_MspInit+0x34>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_TIM_Base_MspInit+0x34>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800079c:	2200      	movs	r2, #0
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	2019      	movs	r0, #25
 80007a2:	f000 fdba 	bl	800131a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007a6:	2019      	movs	r0, #25
 80007a8:	f000 fdd3 	bl	8001352 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <HAL_InitTick+0x9c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <HAL_InitTick+0x9c>)
 80007b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <HAL_InitTick+0x9c>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c4:	f107 0210 	add.w	r2, r7, #16
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fb46 	bl	8001e60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007d4:	f001 fb30 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 80007d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007dc:	4a13      	ldr	r2, [pc, #76]	; (800082c <HAL_InitTick+0xa0>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0c9b      	lsrs	r3, r3, #18
 80007e4:	3b01      	subs	r3, #1
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_InitTick+0xa4>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <HAL_InitTick+0xa8>)
 80007ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_InitTick+0xa4>)
 80007f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_InitTick+0xa4>)
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_InitTick+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <HAL_InitTick+0xa4>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <HAL_InitTick+0xa4>)
 800080a:	f001 fc2d 	bl	8002068 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d104      	bne.n	800081e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <HAL_InitTick+0xa4>)
 8000816:	f001 fcc1 	bl	800219c <HAL_TIM_Base_Start_IT>
 800081a:	4603      	mov	r3, r0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3730      	adds	r7, #48	; 0x30
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	431bde83 	.word	0x431bde83
 8000830:	20000284 	.word	0x20000284
 8000834:	40012c00 	.word	0x40012c00

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
	...

08000864 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <ADC1_2_IRQHandler+0x10>)
 800086a:	f000 fa3d 	bl	8000ce8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000204 	.word	0x20000204

08000878 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <TIM1_UP_IRQHandler+0x10>)
 800087e:	f001 fcdf 	bl	8002240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000284 	.word	0x20000284

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f005 f82a 	bl	8005914 <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20005000 	.word	0x20005000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	200000a4 	.word	0x200000a4
 80008f4:	20000320 	.word	0x20000320

080008f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000904:	f7ff fff8 	bl	80008f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800090a:	490c      	ldr	r1, [pc, #48]	; (800093c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <LoopFillZerobss+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a09      	ldr	r2, [pc, #36]	; (8000944 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000920:	4c09      	ldr	r4, [pc, #36]	; (8000948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092e:	f004 fff7 	bl	8005920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000932:	f7ff fcdd 	bl	80002f0 <main>
  bx lr
 8000936:	4770      	bx	lr
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000940:	08005bc4 	.word	0x08005bc4
  ldr r2, =_sbss
 8000944:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000948:	20000320 	.word	0x20000320

0800094c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <CAN1_RX1_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_Init+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <HAL_Init+0x28>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 fccf 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff ff10 	bl	800078c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fe7c 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x1c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x20>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a03      	ldr	r2, [pc, #12]	; (800099c <HAL_IncTick+0x20>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000008 	.word	0x20000008
 800099c:	200002cc 	.word	0x200002cc

080009a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <HAL_GetTick+0x10>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	200002cc 	.word	0x200002cc

080009b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e0be      	b.n	8000b54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fe6a 	bl	80006cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f000 fb8f 	bl	800111c <ADC_ConversionStop_Disable>
 80009fe:	4603      	mov	r3, r0
 8000a00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	f003 0310 	and.w	r3, r3, #16
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f040 8099 	bne.w	8000b42 <HAL_ADC_Init+0x18e>
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f040 8095 	bne.w	8000b42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a20:	f023 0302 	bic.w	r3, r3, #2
 8000a24:	f043 0202 	orr.w	r2, r3, #2
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7b1b      	ldrb	r3, [r3, #12]
 8000a3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a4c:	d003      	beq.n	8000a56 <HAL_ADC_Init+0xa2>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d102      	bne.n	8000a5c <HAL_ADC_Init+0xa8>
 8000a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5a:	e000      	b.n	8000a5e <HAL_ADC_Init+0xaa>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7d1b      	ldrb	r3, [r3, #20]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d119      	bne.n	8000aa0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7b1b      	ldrb	r3, [r3, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d109      	bne.n	8000a88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	035a      	lsls	r2, r3, #13
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	e00b      	b.n	8000aa0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8c:	f043 0220 	orr.w	r2, r3, #32
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	f043 0201 	orr.w	r2, r3, #1
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_Init+0x1a8>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	6812      	ldr	r2, [r2, #0]
 8000ac2:	68b9      	ldr	r1, [r7, #8]
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ad0:	d003      	beq.n	8000ada <HAL_ADC_Init+0x126>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d104      	bne.n	8000ae4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	691b      	ldr	r3, [r3, #16]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	051b      	lsls	r3, r3, #20
 8000ae2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	430a      	orrs	r2, r1
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_ADC_Init+0x1ac>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d10b      	bne.n	8000b20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	f023 0303 	bic.w	r3, r3, #3
 8000b16:	f043 0201 	orr.w	r2, r3, #1
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b1e:	e018      	b.n	8000b52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	f023 0312 	bic.w	r3, r3, #18
 8000b28:	f043 0210 	orr.w	r2, r3, #16
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b34:	f043 0201 	orr.w	r2, r3, #1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b40:	e007      	b.n	8000b52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	f043 0210 	orr.w	r2, r3, #16
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b60:	ff1f0efe 	.word	0xff1f0efe

08000b64 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d101      	bne.n	8000b7e <HAL_ADC_Start_IT+0x1a>
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	e0a0      	b.n	8000cc0 <HAL_ADC_Start_IT+0x15c>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fa6e 	bl	8001068 <ADC_Enable>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 808f 	bne.w	8000cb6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ba0:	f023 0301 	bic.w	r3, r3, #1
 8000ba4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a45      	ldr	r2, [pc, #276]	; (8000cc8 <HAL_ADC_Start_IT+0x164>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d105      	bne.n	8000bc2 <HAL_ADC_Start_IT+0x5e>
 8000bb6:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <HAL_ADC_Start_IT+0x168>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d115      	bne.n	8000bee <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d026      	beq.n	8000c2a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000be4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bec:	e01d      	b.n	8000c2a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a33      	ldr	r2, [pc, #204]	; (8000ccc <HAL_ADC_Start_IT+0x168>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d004      	beq.n	8000c0e <HAL_ADC_Start_IT+0xaa>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <HAL_ADC_Start_IT+0x164>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d10d      	bne.n	8000c2a <HAL_ADC_Start_IT+0xc6>
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <HAL_ADC_Start_IT+0x168>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3a:	f023 0206 	bic.w	r2, r3, #6
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c42:	e002      	b.n	8000c4a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f06f 0202 	mvn.w	r2, #2
 8000c5a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f042 0220 	orr.w	r2, r2, #32
 8000c6a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c7a:	d113      	bne.n	8000ca4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c80:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_ADC_Start_IT+0x164>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d105      	bne.n	8000c92 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_ADC_Start_IT+0x168>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d108      	bne.n	8000ca4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	e00c      	b.n	8000cbe <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	e003      	b.n	8000cbe <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40012800 	.word	0x40012800
 8000ccc:	40012400 	.word	0x40012400

08000cd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	f003 0320 	and.w	r3, r3, #32
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d03e      	beq.n	8000d88 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d039      	beq.n	8000d88 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d105      	bne.n	8000d2c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d3a:	d11d      	bne.n	8000d78 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d119      	bne.n	8000d78 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0220 	bic.w	r2, r2, #32
 8000d52:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d105      	bne.n	8000d78 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	f043 0201 	orr.w	r2, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fa81 	bl	8000280 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f06f 0212 	mvn.w	r2, #18
 8000d86:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d04d      	beq.n	8000e2e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d048      	beq.n	8000e2e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d105      	bne.n	8000db4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000dbe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000dc2:	d012      	beq.n	8000dea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d125      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ddc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000de0:	d11d      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d119      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d105      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f043 0201 	orr.w	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 f9bd 	bl	800119e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f06f 020c 	mvn.w	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d012      	beq.n	8000e5e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00d      	beq.n	8000e5e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f809 	bl	8000e66 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f06f 0201 	mvn.w	r2, #1
 8000e5c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d101      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x20>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e0dc      	b.n	8001052 <HAL_ADC_ConfigChannel+0x1da>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b06      	cmp	r3, #6
 8000ea6:	d81c      	bhi.n	8000ee2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3b05      	subs	r3, #5
 8000eba:	221f      	movs	r2, #31
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	4019      	ands	r1, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3b05      	subs	r3, #5
 8000ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee0:	e03c      	b.n	8000f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b0c      	cmp	r3, #12
 8000ee8:	d81c      	bhi.n	8000f24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	3b23      	subs	r3, #35	; 0x23
 8000efc:	221f      	movs	r2, #31
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4019      	ands	r1, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	3b23      	subs	r3, #35	; 0x23
 8000f16:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	631a      	str	r2, [r3, #48]	; 0x30
 8000f22:	e01b      	b.n	8000f5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	3b41      	subs	r3, #65	; 0x41
 8000f36:	221f      	movs	r2, #31
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b41      	subs	r3, #65	; 0x41
 8000f50:	fa00 f203 	lsl.w	r2, r0, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b09      	cmp	r3, #9
 8000f62:	d91c      	bls.n	8000f9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68d9      	ldr	r1, [r3, #12]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	3b1e      	subs	r3, #30
 8000f76:	2207      	movs	r2, #7
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4019      	ands	r1, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6898      	ldr	r0, [r3, #8]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3b1e      	subs	r3, #30
 8000f90:	fa00 f203 	lsl.w	r2, r0, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	e019      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6919      	ldr	r1, [r3, #16]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	2207      	movs	r2, #7
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	4019      	ands	r1, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	6898      	ldr	r0, [r3, #8]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d003      	beq.n	8000fe2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fde:	2b11      	cmp	r3, #17
 8000fe0:	d132      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_ADC_ConfigChannel+0x1e4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d125      	bne.n	8001038 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d126      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001008:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b10      	cmp	r3, #16
 8001010:	d11a      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <HAL_ADC_ConfigChannel+0x1e8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <HAL_ADC_ConfigChannel+0x1ec>)
 8001018:	fba2 2303 	umull	r2, r3, r2, r3
 800101c:	0c9a      	lsrs	r2, r3, #18
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001028:	e002      	b.n	8001030 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3b01      	subs	r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f9      	bne.n	800102a <HAL_ADC_ConfigChannel+0x1b2>
 8001036:	e007      	b.n	8001048 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	f043 0220 	orr.w	r2, r3, #32
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40012400 	.word	0x40012400
 8001060:	20000000 	.word	0x20000000
 8001064:	431bde83 	.word	0x431bde83

08001068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b01      	cmp	r3, #1
 8001084:	d040      	beq.n	8001108 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0201 	orr.w	r2, r2, #1
 8001094:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <ADC_Enable+0xac>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <ADC_Enable+0xb0>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	0c9b      	lsrs	r3, r3, #18
 80010a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010a4:	e002      	b.n	80010ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010b2:	f7ff fc75 	bl	80009a0 <HAL_GetTick>
 80010b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010b8:	e01f      	b.n	80010fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010ba:	f7ff fc71 	bl	80009a0 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d918      	bls.n	80010fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d011      	beq.n	80010fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	f043 0210 	orr.w	r2, r3, #16
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	f043 0201 	orr.w	r2, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e007      	b.n	800110a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d1d8      	bne.n	80010ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000000 	.word	0x20000000
 8001118:	431bde83 	.word	0x431bde83

0800111c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b01      	cmp	r3, #1
 8001134:	d12e      	bne.n	8001194 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001146:	f7ff fc2b 	bl	80009a0 <HAL_GetTick>
 800114a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800114c:	e01b      	b.n	8001186 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800114e:	f7ff fc27 	bl	80009a0 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d914      	bls.n	8001186 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10d      	bne.n	8001186 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	f043 0210 	orr.w	r2, r3, #16
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	f043 0201 	orr.w	r2, r3, #1
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e007      	b.n	8001196 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b01      	cmp	r3, #1
 8001192:	d0dc      	beq.n	800114e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4906      	ldr	r1, [pc, #24]	; (8001248 <__NVIC_EnableIRQ+0x34>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff4f 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff64 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ffb2 	bl	80012a0 <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff81 	bl	800124c <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff57 	bl	8001214 <__NVIC_EnableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	e169      	b.n	8001658 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001384:	2201      	movs	r2, #1
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 8158 	bne.w	8001652 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a9a      	ldr	r2, [pc, #616]	; (8001610 <HAL_GPIO_Init+0x2a0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d05e      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013ac:	4a98      	ldr	r2, [pc, #608]	; (8001610 <HAL_GPIO_Init+0x2a0>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d875      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013b2:	4a98      	ldr	r2, [pc, #608]	; (8001614 <HAL_GPIO_Init+0x2a4>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d058      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013b8:	4a96      	ldr	r2, [pc, #600]	; (8001614 <HAL_GPIO_Init+0x2a4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d86f      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013be:	4a96      	ldr	r2, [pc, #600]	; (8001618 <HAL_GPIO_Init+0x2a8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d052      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013c4:	4a94      	ldr	r2, [pc, #592]	; (8001618 <HAL_GPIO_Init+0x2a8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d869      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013ca:	4a94      	ldr	r2, [pc, #592]	; (800161c <HAL_GPIO_Init+0x2ac>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d04c      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013d0:	4a92      	ldr	r2, [pc, #584]	; (800161c <HAL_GPIO_Init+0x2ac>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d863      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013d6:	4a92      	ldr	r2, [pc, #584]	; (8001620 <HAL_GPIO_Init+0x2b0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d046      	beq.n	800146a <HAL_GPIO_Init+0xfa>
 80013dc:	4a90      	ldr	r2, [pc, #576]	; (8001620 <HAL_GPIO_Init+0x2b0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d85d      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d82a      	bhi.n	800143c <HAL_GPIO_Init+0xcc>
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d859      	bhi.n	800149e <HAL_GPIO_Init+0x12e>
 80013ea:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <HAL_GPIO_Init+0x80>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	0800146b 	.word	0x0800146b
 80013f4:	08001445 	.word	0x08001445
 80013f8:	08001457 	.word	0x08001457
 80013fc:	08001499 	.word	0x08001499
 8001400:	0800149f 	.word	0x0800149f
 8001404:	0800149f 	.word	0x0800149f
 8001408:	0800149f 	.word	0x0800149f
 800140c:	0800149f 	.word	0x0800149f
 8001410:	0800149f 	.word	0x0800149f
 8001414:	0800149f 	.word	0x0800149f
 8001418:	0800149f 	.word	0x0800149f
 800141c:	0800149f 	.word	0x0800149f
 8001420:	0800149f 	.word	0x0800149f
 8001424:	0800149f 	.word	0x0800149f
 8001428:	0800149f 	.word	0x0800149f
 800142c:	0800149f 	.word	0x0800149f
 8001430:	0800149f 	.word	0x0800149f
 8001434:	0800144d 	.word	0x0800144d
 8001438:	08001461 	.word	0x08001461
 800143c:	4a79      	ldr	r2, [pc, #484]	; (8001624 <HAL_GPIO_Init+0x2b4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001442:	e02c      	b.n	800149e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e029      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	3304      	adds	r3, #4
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e024      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	3308      	adds	r3, #8
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e01f      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	330c      	adds	r3, #12
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e01a      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001472:	2304      	movs	r3, #4
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e013      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	611a      	str	r2, [r3, #16]
          break;
 800148a:	e009      	b.n	80014a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148c:	2308      	movs	r3, #8
 800148e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	615a      	str	r2, [r3, #20]
          break;
 8001496:	e003      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x130>
          break;
 800149e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2bff      	cmp	r3, #255	; 0xff
 80014a4:	d801      	bhi.n	80014aa <HAL_GPIO_Init+0x13a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	e001      	b.n	80014ae <HAL_GPIO_Init+0x13e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3304      	adds	r3, #4
 80014ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d802      	bhi.n	80014bc <HAL_GPIO_Init+0x14c>
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	e002      	b.n	80014c2 <HAL_GPIO_Init+0x152>
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	3b08      	subs	r3, #8
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	210f      	movs	r1, #15
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	fa01 f303 	lsl.w	r3, r1, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	401a      	ands	r2, r3
 80014d4:	6a39      	ldr	r1, [r7, #32]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	431a      	orrs	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f000 80b1 	beq.w	8001652 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014f0:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <HAL_GPIO_Init+0x2b8>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001508:	4a48      	ldr	r2, [pc, #288]	; (800162c <HAL_GPIO_Init+0x2bc>)
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001514:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	220f      	movs	r2, #15
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4013      	ands	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a40      	ldr	r2, [pc, #256]	; (8001630 <HAL_GPIO_Init+0x2c0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d013      	beq.n	800155c <HAL_GPIO_Init+0x1ec>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a3f      	ldr	r2, [pc, #252]	; (8001634 <HAL_GPIO_Init+0x2c4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d00d      	beq.n	8001558 <HAL_GPIO_Init+0x1e8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a3e      	ldr	r2, [pc, #248]	; (8001638 <HAL_GPIO_Init+0x2c8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d007      	beq.n	8001554 <HAL_GPIO_Init+0x1e4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a3d      	ldr	r2, [pc, #244]	; (800163c <HAL_GPIO_Init+0x2cc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_GPIO_Init+0x1e0>
 800154c:	2303      	movs	r3, #3
 800154e:	e006      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001550:	2304      	movs	r3, #4
 8001552:	e004      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001554:	2302      	movs	r3, #2
 8001556:	e002      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <HAL_GPIO_Init+0x1ee>
 800155c:	2300      	movs	r3, #0
 800155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001560:	f002 0203 	and.w	r2, r2, #3
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	4093      	lsls	r3, r2
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156e:	492f      	ldr	r1, [pc, #188]	; (800162c <HAL_GPIO_Init+0x2bc>)
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	492c      	ldr	r1, [pc, #176]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	4928      	ldr	r1, [pc, #160]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	4922      	ldr	r1, [pc, #136]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60cb      	str	r3, [r1, #12]
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	491e      	ldr	r1, [pc, #120]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4918      	ldr	r1, [pc, #96]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4914      	ldr	r1, [pc, #80]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d021      	beq.n	8001644 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	490e      	ldr	r1, [pc, #56]	; (8001640 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e021      	b.n	8001652 <HAL_GPIO_Init+0x2e2>
 800160e:	bf00      	nop
 8001610:	10320000 	.word	0x10320000
 8001614:	10310000 	.word	0x10310000
 8001618:	10220000 	.word	0x10220000
 800161c:	10210000 	.word	0x10210000
 8001620:	10120000 	.word	0x10120000
 8001624:	10110000 	.word	0x10110000
 8001628:	40021000 	.word	0x40021000
 800162c:	40010000 	.word	0x40010000
 8001630:	40010800 	.word	0x40010800
 8001634:	40010c00 	.word	0x40010c00
 8001638:	40011000 	.word	0x40011000
 800163c:	40011400 	.word	0x40011400
 8001640:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_GPIO_Init+0x304>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	43db      	mvns	r3, r3
 800164c:	4909      	ldr	r1, [pc, #36]	; (8001674 <HAL_GPIO_Init+0x304>)
 800164e:	4013      	ands	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	3301      	adds	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f ae8e 	bne.w	8001384 <HAL_GPIO_Init+0x14>
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	372c      	adds	r7, #44	; 0x2c
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40010400 	.word	0x40010400

08001678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	807b      	strh	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001688:	787b      	ldrb	r3, [r7, #1]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168e:	887a      	ldrh	r2, [r7, #2]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001694:	e003      	b.n	800169e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	041a      	lsls	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	611a      	str	r2, [r3, #16]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e26c      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8087 	beq.w	80017d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c8:	4b92      	ldr	r3, [pc, #584]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d00c      	beq.n	80016ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d4:	4b8f      	ldr	r3, [pc, #572]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d112      	bne.n	8001706 <HAL_RCC_OscConfig+0x5e>
 80016e0:	4b8c      	ldr	r3, [pc, #560]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d10b      	bne.n	8001706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ee:	4b89      	ldr	r3, [pc, #548]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d06c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x12c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d168      	bne.n	80017d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e246      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x76>
 8001710:	4b80      	ldr	r3, [pc, #512]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a7f      	ldr	r2, [pc, #508]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e02e      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x98>
 8001726:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a7a      	ldr	r2, [pc, #488]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b78      	ldr	r3, [pc, #480]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a77      	ldr	r2, [pc, #476]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e01d      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0xbc>
 800174a:	4b72      	ldr	r3, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a71      	ldr	r2, [pc, #452]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b6f      	ldr	r3, [pc, #444]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6e      	ldr	r2, [pc, #440]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 8001764:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a6a      	ldr	r2, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a67      	ldr	r2, [pc, #412]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff f90c 	bl	80009a0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff f908 	bl	80009a0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1fa      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0xe4>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff f8f8 	bl	80009a0 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff f8f4 	bl	80009a0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	; 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1e6      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x10c>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d063      	beq.n	80018aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e2:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d11c      	bne.n	8001834 <HAL_RCC_OscConfig+0x18c>
 80017fa:	4b46      	ldr	r3, [pc, #280]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d116      	bne.n	8001834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	4b43      	ldr	r3, [pc, #268]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x176>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e1ba      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4939      	ldr	r1, [pc, #228]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	e03a      	b.n	80018aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff f8ad 	bl	80009a0 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff f8a9 	bl	80009a0 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e19b      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4927      	ldr	r1, [pc, #156]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff f88c 	bl	80009a0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff f888 	bl	80009a0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e17a      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03a      	beq.n	800192c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d019      	beq.n	80018f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff f86c 	bl	80009a0 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff f868 	bl	80009a0 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e15a      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f000 fae8 	bl	8001ec0 <RCC_Delay>
 80018f0:	e01c      	b.n	800192c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff f852 	bl	80009a0 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fe:	e00f      	b.n	8001920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff f84e 	bl	80009a0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d908      	bls.n	8001920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e140      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	42420000 	.word	0x42420000
 800191c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001920:	4b9e      	ldr	r3, [pc, #632]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e9      	bne.n	8001900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a6 	beq.w	8001a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193e:	4b97      	ldr	r3, [pc, #604]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10d      	bne.n	8001966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a93      	ldr	r2, [pc, #588]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b91      	ldr	r3, [pc, #580]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b8e      	ldr	r3, [pc, #568]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a8a      	ldr	r2, [pc, #552]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197e:	f7ff f80f 	bl	80009a0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001986:	f7ff f80b 	bl	80009a0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b64      	cmp	r3, #100	; 0x64
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e0fd      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <HAL_RCC_OscConfig+0x4f8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x312>
 80019ac:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a7a      	ldr	r2, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	e02d      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x334>
 80019c2:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a75      	ldr	r2, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6213      	str	r3, [r2, #32]
 80019ce:	4b73      	ldr	r3, [pc, #460]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a72      	ldr	r2, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6213      	str	r3, [r2, #32]
 80019da:	e01c      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d10c      	bne.n	80019fe <HAL_RCC_OscConfig+0x356>
 80019e4:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a6c      	ldr	r2, [pc, #432]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a69      	ldr	r2, [pc, #420]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e00b      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019fe:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a66      	ldr	r2, [pc, #408]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	4b64      	ldr	r3, [pc, #400]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a63      	ldr	r2, [pc, #396]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d015      	beq.n	8001a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7fe ffbf 	bl	80009a0 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7fe ffbb 	bl	80009a0 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0ab      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ee      	beq.n	8001a26 <HAL_RCC_OscConfig+0x37e>
 8001a48:	e014      	b.n	8001a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7fe ffa9 	bl	80009a0 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7fe ffa5 	bl	80009a0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e095      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	4b4c      	ldr	r3, [pc, #304]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ee      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7a:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a47      	ldr	r2, [pc, #284]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8081 	beq.w	8001b92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a90:	4b42      	ldr	r3, [pc, #264]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d061      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d146      	bne.n	8001b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	; (8001ba4 <HAL_RCC_OscConfig+0x4fc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7fe ff79 	bl	80009a0 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7fe ff75 	bl	80009a0 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e067      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad8:	d108      	bne.n	8001aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	492d      	ldr	r1, [pc, #180]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a19      	ldr	r1, [r3, #32]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	430b      	orrs	r3, r1
 8001afe:	4927      	ldr	r1, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <HAL_RCC_OscConfig+0x4fc>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7fe ff49 	bl	80009a0 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7fe ff45 	bl	80009a0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e037      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x46a>
 8001b30:	e02f      	b.n	8001b92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_RCC_OscConfig+0x4fc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7fe ff32 	bl	80009a0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7fe ff2e 	bl	80009a0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e020      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x498>
 8001b5e:	e018      	b.n	8001b92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e013      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d001      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	42420060 	.word	0x42420060

08001ba8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0d0      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d910      	bls.n	8001bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b67      	ldr	r3, [pc, #412]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 0207 	bic.w	r2, r3, #7
 8001bd2:	4965      	ldr	r1, [pc, #404]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b63      	ldr	r3, [pc, #396]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0b8      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	494d      	ldr	r1, [pc, #308]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d040      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b47      	ldr	r3, [pc, #284]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d115      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e07f      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	4b41      	ldr	r3, [pc, #260]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e073      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e06b      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f023 0203 	bic.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4936      	ldr	r1, [pc, #216]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c98:	f7fe fe82 	bl	80009a0 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7fe fe7e 	bl	80009a0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e053      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 020c 	and.w	r2, r3, #12
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1eb      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d210      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 0207 	bic.w	r2, r3, #7
 8001cde:	4922      	ldr	r1, [pc, #136]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e032      	b.n	8001d5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4916      	ldr	r1, [pc, #88]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d009      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	490e      	ldr	r1, [pc, #56]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d36:	f000 f821 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	490a      	ldr	r1, [pc, #40]	; (8001d70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	5ccb      	ldrb	r3, [r1, r3]
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_RCC_ClockConfig+0x1cc>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fd18 	bl	800078c <HAL_InitTick>

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08005b90 	.word	0x08005b90
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d002      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0x30>
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d003      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x36>
 8001daa:	e027      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dae:	613b      	str	r3, [r7, #16]
      break;
 8001db0:	e027      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	0c9b      	lsrs	r3, r3, #18
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	4a17      	ldr	r2, [pc, #92]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0c5b      	lsrs	r3, r3, #17
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dde:	fb02 f203 	mul.w	r2, r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e004      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a0c      	ldr	r2, [pc, #48]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	613b      	str	r3, [r7, #16]
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfe:	613b      	str	r3, [r7, #16]
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	693b      	ldr	r3, [r7, #16]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	007a1200 	.word	0x007a1200
 8001e18:	08005ba8 	.word	0x08005ba8
 8001e1c:	08005bb8 	.word	0x08005bb8
 8001e20:	003d0900 	.word	0x003d0900

08001e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b02      	ldr	r3, [pc, #8]	; (8001e34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20000000 	.word	0x20000000

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e3c:	f7ff fff2 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	0adb      	lsrs	r3, r3, #11
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08005ba0 	.word	0x08005ba0

08001e60 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_GetClockConfig+0x58>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_RCC_GetClockConfig+0x58>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_GetClockConfig+0x58>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_RCC_GetClockConfig+0x58>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_RCC_GetClockConfig+0x5c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0207 	and.w	r2, r3, #7
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <RCC_Delay+0x34>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <RCC_Delay+0x38>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a5b      	lsrs	r3, r3, #9
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001edc:	bf00      	nop
  }
  while (Delay --);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1e5a      	subs	r2, r3, #1
 8001ee2:	60fa      	str	r2, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f9      	bne.n	8001edc <RCC_Delay+0x1c>
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	10624dd3 	.word	0x10624dd3

08001efc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d07d      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	61d3      	str	r3, [r2, #28]
 8001f34:	4b49      	ldr	r3, [pc, #292]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d118      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a42      	ldr	r2, [pc, #264]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fd20 	bl	80009a0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	e008      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7fe fd1c 	bl	80009a0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e06d      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f82:	4b36      	ldr	r3, [pc, #216]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d02e      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d027      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fb6:	4a29      	ldr	r2, [pc, #164]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d014      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fceb 	bl	80009a0 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fce:	f7fe fce7 	bl	80009a0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e036      	b.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ee      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4917      	ldr	r1, [pc, #92]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4a13      	ldr	r2, [pc, #76]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002012:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	490b      	ldr	r1, [pc, #44]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4904      	ldr	r1, [pc, #16]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	42420440 	.word	0x42420440

08002068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e041      	b.n	80020fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fb60 	bl	8000754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3304      	adds	r3, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f000 fabe 	bl	8002628 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d001      	beq.n	8002120 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e032      	b.n	8002186 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <HAL_TIM_Base_Start+0x88>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00e      	beq.n	8002150 <HAL_TIM_Base_Start+0x48>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800213a:	d009      	beq.n	8002150 <HAL_TIM_Base_Start+0x48>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <HAL_TIM_Base_Start+0x8c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_TIM_Base_Start+0x48>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a13      	ldr	r2, [pc, #76]	; (8002198 <HAL_TIM_Base_Start+0x90>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d111      	bne.n	8002174 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b06      	cmp	r3, #6
 8002160:	d010      	beq.n	8002184 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f042 0201 	orr.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002172:	e007      	b.n	8002184 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800

0800219c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d001      	beq.n	80021b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e03a      	b.n	800222a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_TIM_Base_Start_IT+0x98>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00e      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x58>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021de:	d009      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x58>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HAL_TIM_Base_Start_IT+0x9c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d004      	beq.n	80021f4 <HAL_TIM_Base_Start_IT+0x58>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_TIM_Base_Start_IT+0xa0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d111      	bne.n	8002218 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b06      	cmp	r3, #6
 8002204:	d010      	beq.n	8002228 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002216:	e007      	b.n	8002228 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	40012c00 	.word	0x40012c00
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800

08002240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b02      	cmp	r3, #2
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0202 	mvn.w	r2, #2
 800226c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f9b4 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f9a7 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f9b6 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d122      	bne.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d11b      	bne.n	80022f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0204 	mvn.w	r2, #4
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2202      	movs	r2, #2
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f98a 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f97d 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f98c 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d122      	bne.n	8002344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b08      	cmp	r3, #8
 800230a:	d11b      	bne.n	8002344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0208 	mvn.w	r2, #8
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2204      	movs	r2, #4
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f960 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f953 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f962 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b10      	cmp	r3, #16
 8002350:	d122      	bne.n	8002398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b10      	cmp	r3, #16
 800235e:	d11b      	bne.n	8002398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0210 	mvn.w	r2, #16
 8002368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2208      	movs	r2, #8
 800236e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f936 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f929 	bl	80025de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f938 	bl	8002602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10e      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d107      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0201 	mvn.w	r2, #1
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe f93a 	bl	8000638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	2b80      	cmp	r3, #128	; 0x80
 80023d0:	d10e      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d107      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa7b 	bl	80028e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	d10e      	bne.n	800241c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d107      	bne.n	800241c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8fc 	bl	8002614 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b20      	cmp	r3, #32
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0320 	and.w	r3, r3, #32
 8002434:	2b20      	cmp	r3, #32
 8002436:	d107      	bne.n	8002448 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0220 	mvn.w	r2, #32
 8002440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa46 	bl	80028d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_TIM_ConfigClockSource+0x1c>
 8002468:	2302      	movs	r3, #2
 800246a:	e0b4      	b.n	80025d6 <HAL_TIM_ConfigClockSource+0x186>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800248a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a4:	d03e      	beq.n	8002524 <HAL_TIM_ConfigClockSource+0xd4>
 80024a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024aa:	f200 8087 	bhi.w	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b2:	f000 8086 	beq.w	80025c2 <HAL_TIM_ConfigClockSource+0x172>
 80024b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ba:	d87f      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b70      	cmp	r3, #112	; 0x70
 80024be:	d01a      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0xa6>
 80024c0:	2b70      	cmp	r3, #112	; 0x70
 80024c2:	d87b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b60      	cmp	r3, #96	; 0x60
 80024c6:	d050      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x11a>
 80024c8:	2b60      	cmp	r3, #96	; 0x60
 80024ca:	d877      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b50      	cmp	r3, #80	; 0x50
 80024ce:	d03c      	beq.n	800254a <HAL_TIM_ConfigClockSource+0xfa>
 80024d0:	2b50      	cmp	r3, #80	; 0x50
 80024d2:	d873      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d058      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x13a>
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d86f      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b30      	cmp	r3, #48	; 0x30
 80024de:	d064      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024e0:	2b30      	cmp	r3, #48	; 0x30
 80024e2:	d86b      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d060      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d867      	bhi.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d05a      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x15a>
 80024f4:	e062      	b.n	80025bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f000 f968 	bl	80027da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	609a      	str	r2, [r3, #8]
      break;
 8002522:	e04f      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f000 f951 	bl	80027da <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002546:	609a      	str	r2, [r3, #8]
      break;
 8002548:	e03c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f8c8 	bl	80026ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2150      	movs	r1, #80	; 0x50
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f91f 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 8002568:	e02c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f8e6 	bl	8002748 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2160      	movs	r1, #96	; 0x60
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f90f 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 8002588:	e01c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	461a      	mov	r2, r3
 8002598:	f000 f8a8 	bl	80026ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2140      	movs	r1, #64	; 0x40
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f8ff 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 80025a8:	e00c      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f000 f8f6 	bl	80027a6 <TIM_ITRx_SetConfig>
      break;
 80025ba:	e003      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
      break;
 80025c0:	e000      	b.n	80025c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
	...

08002628 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <TIM_Base_SetConfig+0xb8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00b      	beq.n	8002658 <TIM_Base_SetConfig+0x30>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002646:	d007      	beq.n	8002658 <TIM_Base_SetConfig+0x30>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <TIM_Base_SetConfig+0xbc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x30>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <TIM_Base_SetConfig+0xc0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <TIM_Base_SetConfig+0xb8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00b      	beq.n	800268a <TIM_Base_SetConfig+0x62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d007      	beq.n	800268a <TIM_Base_SetConfig+0x62>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <TIM_Base_SetConfig+0xbc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d003      	beq.n	800268a <TIM_Base_SetConfig+0x62>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <TIM_Base_SetConfig+0xc0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <TIM_Base_SetConfig+0xb8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d103      	bne.n	80026d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	615a      	str	r2, [r3, #20]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800

080026ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0201 	bic.w	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f023 030a 	bic.w	r3, r3, #10
 8002728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f023 0210 	bic.w	r2, r3, #16
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	031b      	lsls	r3, r3, #12
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002784:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	621a      	str	r2, [r3, #32]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b085      	sub	sp, #20
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f043 0307 	orr.w	r3, r3, #7
 80027c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b087      	sub	sp, #28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	021a      	lsls	r2, r3, #8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4313      	orrs	r3, r2
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	609a      	str	r2, [r3, #8]
}
 800280e:	bf00      	nop
 8002810:	371c      	adds	r7, #28
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800282c:	2302      	movs	r3, #2
 800282e:	e046      	b.n	80028be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00e      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d009      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10c      	bne.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40000800 	.word	0x40000800

080028d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002902:	2301      	movs	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d05d      	beq.n	80029e8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	d059      	beq.n	80029e8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293c:	2100      	movs	r1, #0
 800293e:	fba3 2302 	umull	r2, r3, r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d000      	beq.n	8002948 <xQueueGenericReset+0x50>
 8002946:	2101      	movs	r1, #1
 8002948:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800294a:	2b00      	cmp	r3, #0
 800294c:	d14c      	bne.n	80029e8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800294e:	f002 fdff 	bl	8005550 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	6939      	ldr	r1, [r7, #16]
 800295c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	441a      	add	r2, r3
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2200      	movs	r2, #0
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	3b01      	subs	r3, #1
 8002980:	6939      	ldr	r1, [r7, #16]
 8002982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	441a      	add	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	22ff      	movs	r2, #255	; 0xff
 8002992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d114      	bne.n	80029ce <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01a      	beq.n	80029e2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	3310      	adds	r3, #16
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 fcc7 	bl	8004344 <xTaskRemoveFromEventList>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d012      	beq.n	80029e2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <xQueueGenericReset+0x11c>)
 80029be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	e009      	b.n	80029e2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	3310      	adds	r3, #16
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 fc3a 	bl	800524c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	3324      	adds	r3, #36	; 0x24
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 fc35 	bl	800524c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80029e2:	f002 fde5 	bl	80055b0 <vPortExitCritical>
 80029e6:	e001      	b.n	80029ec <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <xQueueGenericReset+0x110>
        __asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	60bb      	str	r3, [r7, #8]
    }
 8002a04:	bf00      	nop
 8002a06:	e7fe      	b.n	8002a06 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002a08:	697b      	ldr	r3, [r7, #20]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d02e      	beq.n	8002a8e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a30:	2100      	movs	r1, #0
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	fba3 2302 	umull	r2, r3, r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d000      	beq.n	8002a40 <xQueueGenericCreate+0x28>
 8002a3e:	2101      	movs	r1, #1
 8002a40:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d123      	bne.n	8002a8e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a4e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002a52:	d81c      	bhi.n	8002a8e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3350      	adds	r3, #80	; 0x50
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fbce 	bl	8005204 <pvPortMalloc>
 8002a68:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01c      	beq.n	8002aaa <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3350      	adds	r3, #80	; 0x50
 8002a78:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a7a:	79fa      	ldrb	r2, [r7, #7]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f814 	bl	8002ab4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002a8c:	e00d      	b.n	8002aaa <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <xQueueGenericCreate+0x92>
        __asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	613b      	str	r3, [r7, #16]
    }
 8002aa6:	bf00      	nop
 8002aa8:	e7fe      	b.n	8002aa8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
    }
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	e002      	b.n	8002ad6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	69b8      	ldr	r0, [r7, #24]
 8002ae6:	f7ff ff07 	bl	80028f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08e      	sub	sp, #56	; 0x38
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <xQueueGenericSend+0x32>
        __asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <xQueueGenericSend+0x40>
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <xQueueGenericSend+0x44>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <xQueueGenericSend+0x46>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <xQueueGenericSend+0x60>
        __asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002b58:	bf00      	nop
 8002b5a:	e7fe      	b.n	8002b5a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d103      	bne.n	8002b6a <xQueueGenericSend+0x6e>
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <xQueueGenericSend+0x72>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <xQueueGenericSend+0x74>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10a      	bne.n	8002b8a <xQueueGenericSend+0x8e>
        __asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	623b      	str	r3, [r7, #32]
    }
 8002b86:	bf00      	nop
 8002b88:	e7fe      	b.n	8002b88 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b8a:	f001 fe49 	bl	8004820 <xTaskGetSchedulerState>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <xQueueGenericSend+0x9e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <xQueueGenericSend+0xa2>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <xQueueGenericSend+0xa4>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <xQueueGenericSend+0xbe>
        __asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	61fb      	str	r3, [r7, #28]
    }
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002bba:	f002 fcc9 	bl	8005550 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <xQueueGenericSend+0xd4>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d129      	bne.n	8002c24 <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd6:	f000 fbda 	bl	800338e <prvCopyDataToQueue>
 8002bda:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	3324      	adds	r3, #36	; 0x24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fbab 	bl	8004344 <xTaskRemoveFromEventList>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <xQueueGenericSend+0x1f8>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	e00a      	b.n	8002c1c <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <xQueueGenericSend+0x1f8>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002c1c:	f002 fcc8 	bl	80055b0 <vPortExitCritical>
                return pdPASS;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e063      	b.n	8002cec <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c2a:	f002 fcc1 	bl	80055b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e05c      	b.n	8002cec <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 fc59 	bl	80044f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c42:	2301      	movs	r3, #1
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c46:	f002 fcb3 	bl	80055b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c4a:	f000 ffeb 	bl	8003c24 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c4e:	f002 fc7f 	bl	8005550 <vPortEnterCritical>
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5e:	d103      	bne.n	8002c68 <xQueueGenericSend+0x16c>
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d103      	bne.n	8002c7e <xQueueGenericSend+0x182>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c7e:	f002 fc97 	bl	80055b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c82:	1d3a      	adds	r2, r7, #4
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fc48 	bl	8004520 <xTaskCheckForTimeOut>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d124      	bne.n	8002ce0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c98:	f000 fc71 	bl	800357e <prvIsQueueFull>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 fae0 	bl	8004270 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb2:	f000 fbfc 	bl	80034ae <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002cb6:	f000 fff9 	bl	8003cac <xTaskResumeAll>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f47f af7c 	bne.w	8002bba <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <xQueueGenericSend+0x1f8>)
 8002cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	e772      	b.n	8002bba <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd6:	f000 fbea 	bl	80034ae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cda:	f000 ffe7 	bl	8003cac <xTaskResumeAll>
 8002cde:	e76c      	b.n	8002bba <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce2:	f000 fbe4 	bl	80034ae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ce6:	f000 ffe1 	bl	8003cac <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002cea:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3738      	adds	r7, #56	; 0x38
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b092      	sub	sp, #72	; 0x48
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8002d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <xQueueGenericSendFromISR+0x3c>
 8002d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <xQueueGenericSendFromISR+0x40>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <xQueueGenericSendFromISR+0x42>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002d50:	bf00      	nop
 8002d52:	e7fe      	b.n	8002d52 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d103      	bne.n	8002d62 <xQueueGenericSendFromISR+0x6a>
 8002d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <xQueueGenericSendFromISR+0x6e>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <xQueueGenericSendFromISR+0x70>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d82:	f002 fd89 	bl	8005898 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002d86:	f3ef 8211 	mrs	r2, BASEPRI
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	623a      	str	r2, [r7, #32]
 8002d9c:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <xQueueGenericSendFromISR+0xbc>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d146      	bne.n	8002e42 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002dca:	f000 fae0 	bl	800338e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002dce:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d112      	bne.n	8002dfe <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02d      	beq.n	8002e3c <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 faad 	bl	8004344 <xTaskRemoveFromEventList>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d025      	beq.n	8002e3c <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d022      	beq.n	8002e3c <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e01e      	b.n	8002e3c <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002dfe:	f001 f85f 	bl	8003ec0 <uxTaskGetNumberOfTasks>
 8002e02:	6338      	str	r0, [r7, #48]	; 0x30
 8002e04:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d916      	bls.n	8002e3c <xQueueGenericSendFromISR+0x144>
 8002e0e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002e12:	2b7f      	cmp	r3, #127	; 0x7f
 8002e14:	d10a      	bne.n	8002e2c <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	61bb      	str	r3, [r7, #24]
    }
 8002e28:	bf00      	nop
 8002e2a:	e7fe      	b.n	8002e2a <xQueueGenericSendFromISR+0x132>
 8002e2c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002e30:	3301      	adds	r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	b25a      	sxtb	r2, r3
 8002e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8002e40:	e001      	b.n	8002e46 <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	647b      	str	r3, [r7, #68]	; 0x44
 8002e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e48:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002e50:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3748      	adds	r7, #72	; 0x48
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b090      	sub	sp, #64	; 0x40
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <xQueueGiveFromISR+0x2a>
        __asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002e82:	bf00      	nop
 8002e84:	e7fe      	b.n	8002e84 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <xQueueGiveFromISR+0x48>
        __asm volatile
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	623b      	str	r3, [r7, #32]
    }
 8002ea0:	bf00      	nop
 8002ea2:	e7fe      	b.n	8002ea2 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <xQueueGiveFromISR+0x58>
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <xQueueGiveFromISR+0x5c>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <xQueueGiveFromISR+0x5e>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <xQueueGiveFromISR+0x78>
        __asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	61fb      	str	r3, [r7, #28]
    }
 8002ed0:	bf00      	nop
 8002ed2:	e7fe      	b.n	8002ed2 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ed4:	f002 fce0 	bl	8005898 <vPortValidateInterruptPriority>
        __asm volatile
 8002ed8:	f3ef 8211 	mrs	r2, BASEPRI
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	61ba      	str	r2, [r7, #24]
 8002eee:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8002ef0:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d242      	bcs.n	8002f8a <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002f16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1e:	d112      	bne.n	8002f46 <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d02d      	beq.n	8002f84 <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	3324      	adds	r3, #36	; 0x24
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 fa09 	bl	8004344 <xTaskRemoveFromEventList>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d025      	beq.n	8002f84 <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d022      	beq.n	8002f84 <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e01e      	b.n	8002f84 <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002f46:	f000 ffbb 	bl	8003ec0 <uxTaskGetNumberOfTasks>
 8002f4a:	62b8      	str	r0, [r7, #40]	; 0x28
 8002f4c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d916      	bls.n	8002f84 <xQueueGiveFromISR+0x128>
 8002f56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f5c:	d10a      	bne.n	8002f74 <xQueueGiveFromISR+0x118>
        __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	613b      	str	r3, [r7, #16]
    }
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <xQueueGiveFromISR+0x116>
 8002f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002f84:	2301      	movs	r3, #1
 8002f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f88:	e001      	b.n	8002f8e <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f90:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f383 8811 	msr	BASEPRI, r3
    }
 8002f98:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3740      	adds	r7, #64	; 0x40
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <xQueueReceive+0x30>
        __asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	623b      	str	r3, [r7, #32]
    }
 8002fd0:	bf00      	nop
 8002fd2:	e7fe      	b.n	8002fd2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <xQueueReceive+0x3e>
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <xQueueReceive+0x42>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <xQueueReceive+0x44>
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10a      	bne.n	8003002 <xQueueReceive+0x5e>
        __asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	61fb      	str	r3, [r7, #28]
    }
 8002ffe:	bf00      	nop
 8003000:	e7fe      	b.n	8003000 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003002:	f001 fc0d 	bl	8004820 <xTaskGetSchedulerState>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <xQueueReceive+0x6e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <xQueueReceive+0x72>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <xQueueReceive+0x74>
 8003016:	2300      	movs	r3, #0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <xQueueReceive+0x8e>
        __asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	61bb      	str	r3, [r7, #24]
    }
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003032:	f002 fa8d 	bl	8005550 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01f      	beq.n	8003082 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003046:	f000 fa0c 	bl	8003462 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	1e5a      	subs	r2, r3, #1
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00f      	beq.n	800307a <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	3310      	adds	r3, #16
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f970 	bl	8004344 <xTaskRemoveFromEventList>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <xQueueReceive+0x1bc>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800307a:	f002 fa99 	bl	80055b0 <vPortExitCritical>
                return pdPASS;
 800307e:	2301      	movs	r3, #1
 8003080:	e069      	b.n	8003156 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003088:	f002 fa92 	bl	80055b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800308c:	2300      	movs	r3, #0
 800308e:	e062      	b.n	8003156 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fa2a 	bl	80044f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030a4:	f002 fa84 	bl	80055b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80030a8:	f000 fdbc 	bl	8003c24 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80030ac:	f002 fa50 	bl	8005550 <vPortEnterCritical>
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030b6:	b25b      	sxtb	r3, r3
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d103      	bne.n	80030c6 <xQueueReceive+0x122>
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d2:	d103      	bne.n	80030dc <xQueueReceive+0x138>
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030dc:	f002 fa68 	bl	80055b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030e0:	1d3a      	adds	r2, r7, #4
 80030e2:	f107 0310 	add.w	r3, r7, #16
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 fa19 	bl	8004520 <xTaskCheckForTimeOut>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d123      	bne.n	800313c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f6:	f000 fa2c 	bl	8003552 <prvIsQueueEmpty>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	3324      	adds	r3, #36	; 0x24
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f001 f8b1 	bl	8004270 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800310e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003110:	f000 f9cd 	bl	80034ae <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003114:	f000 fdca 	bl	8003cac <xTaskResumeAll>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d189      	bne.n	8003032 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <xQueueReceive+0x1bc>)
 8003120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	e780      	b.n	8003032 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003132:	f000 f9bc 	bl	80034ae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003136:	f000 fdb9 	bl	8003cac <xTaskResumeAll>
 800313a:	e77a      	b.n	8003032 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800313c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313e:	f000 f9b6 	bl	80034ae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003142:	f000 fdb3 	bl	8003cac <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003148:	f000 fa03 	bl	8003552 <prvIsQueueEmpty>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	f43f af6f 	beq.w	8003032 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003154:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003156:	4618      	mov	r0, r3
 8003158:	3730      	adds	r7, #48	; 0x30
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	e000ed04 	.word	0xe000ed04

08003164 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08c      	sub	sp, #48	; 0x30
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800316e:	2300      	movs	r3, #0
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	61bb      	str	r3, [r7, #24]
    }
 8003192:	bf00      	nop
 8003194:	e7fe      	b.n	8003194 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	617b      	str	r3, [r7, #20]
    }
 80031b0:	bf00      	nop
 80031b2:	e7fe      	b.n	80031b2 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031b4:	f001 fb34 	bl	8004820 <xTaskGetSchedulerState>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <xQueueSemaphoreTake+0x60>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <xQueueSemaphoreTake+0x64>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <xQueueSemaphoreTake+0x66>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	613b      	str	r3, [r7, #16]
    }
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031e4:	f002 f9b4 	bl	8005550 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d024      	beq.n	800323e <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003204:	f001 fcfa 	bl	8004bfc <pvTaskIncrementMutexHeldCount>
 8003208:	4602      	mov	r2, r0
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00f      	beq.n	8003236 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	3310      	adds	r3, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f001 f892 	bl	8004344 <xTaskRemoveFromEventList>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003226:	4b4d      	ldr	r3, [pc, #308]	; (800335c <xQueueSemaphoreTake+0x1f8>)
 8003228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003236:	f002 f9bb 	bl	80055b0 <vPortExitCritical>
                return pdPASS;
 800323a:	2301      	movs	r3, #1
 800323c:	e089      	b.n	8003352 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003244:	f002 f9b4 	bl	80055b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003248:	2300      	movs	r3, #0
 800324a:	e082      	b.n	8003352 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	4618      	mov	r0, r3
 8003258:	f001 f94c 	bl	80044f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800325c:	2301      	movs	r3, #1
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003260:	f002 f9a6 	bl	80055b0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003264:	f000 fcde 	bl	8003c24 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003268:	f002 f972 	bl	8005550 <vPortEnterCritical>
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003272:	b25b      	sxtb	r3, r3
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d103      	bne.n	8003282 <xQueueSemaphoreTake+0x11e>
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003288:	b25b      	sxtb	r3, r3
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328e:	d103      	bne.n	8003298 <xQueueSemaphoreTake+0x134>
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003298:	f002 f98a 	bl	80055b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800329c:	463a      	mov	r2, r7
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 f93b 	bl	8004520 <xTaskCheckForTimeOut>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d132      	bne.n	8003316 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032b2:	f000 f94e 	bl	8003552 <prvIsQueueEmpty>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d026      	beq.n	800330a <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 80032c4:	f002 f944 	bl	8005550 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 fac5 	bl	800485c <xTaskPriorityInherit>
 80032d2:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 80032d4:	f002 f96c 	bl	80055b0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	3324      	adds	r3, #36	; 0x24
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 ffc5 	bl	8004270 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80032e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032e8:	f000 f8e1 	bl	80034ae <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80032ec:	f000 fcde 	bl	8003cac <xTaskResumeAll>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f47f af76 	bne.w	80031e4 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <xQueueSemaphoreTake+0x1f8>)
 80032fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	e76c      	b.n	80031e4 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800330a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800330c:	f000 f8cf 	bl	80034ae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003310:	f000 fccc 	bl	8003cac <xTaskResumeAll>
 8003314:	e766      	b.n	80031e4 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003318:	f000 f8c9 	bl	80034ae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800331c:	f000 fcc6 	bl	8003cac <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003322:	f000 f916 	bl	8003552 <prvIsQueueEmpty>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f43f af5b 	beq.w	80031e4 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 8003334:	f002 f90c 	bl	8005550 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800333a:	f000 f811 	bl	8003360 <prvGetDisinheritPriorityAfterTimeout>
 800333e:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	69f9      	ldr	r1, [r7, #28]
 8003346:	4618      	mov	r0, r3
 8003348:	f001 fbae 	bl	8004aa8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800334c:	f002 f930 	bl	80055b0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003350:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003352:	4618      	mov	r0, r3
 8003354:	3730      	adds	r7, #48	; 0x30
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d006      	beq.n	800337e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1c3 0305 	rsb	r3, r3, #5
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e001      	b.n	8003382 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003382:	68fb      	ldr	r3, [r7, #12]
    }
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d14d      	bne.n	8003450 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fadf 	bl	800497c <xTaskPriorityDisinherit>
 80033be:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	e043      	b.n	8003450 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6858      	ldr	r0, [r3, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	461a      	mov	r2, r3
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	f002 fad5 	bl	8005988 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	441a      	add	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d32b      	bcc.n	8003450 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	e026      	b.n	8003450 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68d8      	ldr	r0, [r3, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	461a      	mov	r2, r3
 800340c:	68b9      	ldr	r1, [r7, #8]
 800340e:	f002 fabb 	bl	8005988 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	425b      	negs	r3, r3
 800341c:	441a      	add	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d207      	bcs.n	800343e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	425b      	negs	r3, r3
 8003438:	441a      	add	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d105      	bne.n	8003450 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	3b01      	subs	r3, #1
 800344e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003458:	697b      	ldr	r3, [r7, #20]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d018      	beq.n	80034a6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d303      	bcc.n	8003496 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68d9      	ldr	r1, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	461a      	mov	r2, r3
 80034a0:	6838      	ldr	r0, [r7, #0]
 80034a2:	f002 fa71 	bl	8005988 <memcpy>
    }
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80034b6:	f002 f84b 	bl	8005550 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034c0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80034c2:	e011      	b.n	80034e8 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3324      	adds	r3, #36	; 0x24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 ff37 	bl	8004344 <xTaskRemoveFromEventList>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80034dc:	f001 f886 	bl	80045ec <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80034e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	dce9      	bgt.n	80034c4 <prvUnlockQueue+0x16>
 80034f0:	e000      	b.n	80034f4 <prvUnlockQueue+0x46>
                    break;
 80034f2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	22ff      	movs	r2, #255	; 0xff
 80034f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80034fc:	f002 f858 	bl	80055b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003500:	f002 f826 	bl	8005550 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800350a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800350c:	e011      	b.n	8003532 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3310      	adds	r3, #16
 800351a:	4618      	mov	r0, r3
 800351c:	f000 ff12 	bl	8004344 <xTaskRemoveFromEventList>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003526:	f001 f861 	bl	80045ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	3b01      	subs	r3, #1
 800352e:	b2db      	uxtb	r3, r3
 8003530:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003536:	2b00      	cmp	r3, #0
 8003538:	dce9      	bgt.n	800350e <prvUnlockQueue+0x60>
 800353a:	e000      	b.n	800353e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800353c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003546:	f002 f833 	bl	80055b0 <vPortExitCritical>
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b084      	sub	sp, #16
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800355a:	f001 fff9 	bl	8005550 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003566:	2301      	movs	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e001      	b.n	8003570 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003570:	f002 f81e 	bl	80055b0 <vPortExitCritical>

    return xReturn;
 8003574:	68fb      	ldr	r3, [r7, #12]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003586:	f001 ffe3 	bl	8005550 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	429a      	cmp	r2, r3
 8003594:	d102      	bne.n	800359c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003596:	2301      	movs	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e001      	b.n	80035a0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035a0:	f002 f806 	bl	80055b0 <vPortExitCritical>

    return xReturn;
 80035a4:	68fb      	ldr	r3, [r7, #12]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <vQueueAddToRegistry+0x2a>
        __asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	60fb      	str	r3, [r7, #12]
    }
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d024      	beq.n	800362a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e01e      	b.n	8003624 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80035e6:	4a18      	ldr	r2, [pc, #96]	; (8003648 <vQueueAddToRegistry+0x98>)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d105      	bne.n	8003602 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4a13      	ldr	r2, [pc, #76]	; (8003648 <vQueueAddToRegistry+0x98>)
 80035fc:	4413      	add	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
                    break;
 8003600:	e013      	b.n	800362a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <vQueueAddToRegistry+0x6e>
 8003608:	4a0f      	ldr	r2, [pc, #60]	; (8003648 <vQueueAddToRegistry+0x98>)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <vQueueAddToRegistry+0x98>)
 800361a:	4413      	add	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	3301      	adds	r3, #1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b07      	cmp	r3, #7
 8003628:	d9dd      	bls.n	80035e6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	200002d0 	.word	0x200002d0

0800364c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800365c:	f001 ff78 	bl	8005550 <vPortEnterCritical>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003666:	b25b      	sxtb	r3, r3
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366c:	d103      	bne.n	8003676 <vQueueWaitForMessageRestricted+0x2a>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800367c:	b25b      	sxtb	r3, r3
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d103      	bne.n	800368c <vQueueWaitForMessageRestricted+0x40>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800368c:	f001 ff90 	bl	80055b0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3324      	adds	r3, #36	; 0x24
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 fe09 	bl	80042b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80036a6:	6978      	ldr	r0, [r7, #20]
 80036a8:	f7ff ff01 	bl	80034ae <prvUnlockQueue>
    }
 80036ac:	bf00      	nop
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	; 0x30
 80036b8:	af04      	add	r7, sp, #16
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fd9c 	bl	8005204 <pvPortMalloc>
 80036cc:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036d4:	207c      	movs	r0, #124	; 0x7c
 80036d6:	f001 fd95 	bl	8005204 <pvPortMalloc>
 80036da:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80036e2:	227c      	movs	r2, #124	; 0x7c
 80036e4:	2100      	movs	r1, #0
 80036e6:	69f8      	ldr	r0, [r7, #28]
 80036e8:	f002 f95c 	bl	80059a4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
 80036f2:	e005      	b.n	8003700 <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80036f4:	6978      	ldr	r0, [r7, #20]
 80036f6:	f001 fd97 	bl	8005228 <vPortFree>
 80036fa:	e001      	b.n	8003700 <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d013      	beq.n	800372e <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003706:	2300      	movs	r3, #0
 8003708:	9303      	str	r3, [sp, #12]
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	9302      	str	r3, [sp, #8]
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f80e 	bl	800373e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003722:	69f8      	ldr	r0, [r7, #28]
 8003724:	f000 f89a 	bl	800385c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003728:	2301      	movs	r3, #1
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	e002      	b.n	8003734 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003734:	69bb      	ldr	r3, [r7, #24]
    }
 8003736:	4618      	mov	r0, r3
 8003738:	3720      	adds	r7, #32
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b088      	sub	sp, #32
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	461a      	mov	r2, r3
 8003756:	21a5      	movs	r1, #165	; 0xa5
 8003758:	f002 f924 	bl	80059a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003766:	3b01      	subs	r3, #1
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f023 0307 	bic.w	r3, r3, #7
 8003774:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	617b      	str	r3, [r7, #20]
    }
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01e      	beq.n	80037da <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	e012      	b.n	80037c8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	7819      	ldrb	r1, [r3, #0]
 80037aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	3334      	adds	r3, #52	; 0x34
 80037b2:	460a      	mov	r2, r1
 80037b4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3301      	adds	r3, #1
 80037c6:	61fb      	str	r3, [r7, #28]
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b13      	cmp	r3, #19
 80037cc:	d9e9      	bls.n	80037a2 <prvInitialiseNewTask+0x64>
 80037ce:	e000      	b.n	80037d2 <prvInitialiseNewTask+0x94>
            {
                break;
 80037d0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d90a      	bls.n	80037f6 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80037e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e4:	f383 8811 	msr	BASEPRI, r3
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	f3bf 8f4f 	dsb	sy
 80037f0:	613b      	str	r3, [r7, #16]
    }
 80037f2:	bf00      	nop
 80037f4:	e7fe      	b.n	80037f4 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d901      	bls.n	8003800 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037fc:	2304      	movs	r3, #4
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380a:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	3304      	adds	r3, #4
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fd3a 	bl	800528a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	3318      	adds	r3, #24
 800381a:	4618      	mov	r0, r3
 800381c:	f001 fd35 	bl	800528a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003824:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	f1c3 0205 	rsb	r2, r3, #5
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	68f9      	ldr	r1, [r7, #12]
 800383a:	69b8      	ldr	r0, [r7, #24]
 800383c:	f001 fd92 	bl	8005364 <pxPortInitialiseStack>
 8003840:	4602      	mov	r2, r0
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003850:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003852:	bf00      	nop
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003864:	f001 fe74 	bl	8005550 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003868:	4b41      	ldr	r3, [pc, #260]	; (8003970 <prvAddNewTaskToReadyList+0x114>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	4a40      	ldr	r2, [pc, #256]	; (8003970 <prvAddNewTaskToReadyList+0x114>)
 8003870:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003872:	4b40      	ldr	r3, [pc, #256]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800387a:	4a3e      	ldr	r2, [pc, #248]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003880:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <prvAddNewTaskToReadyList+0x114>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d110      	bne.n	80038aa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003888:	f000 ff32 	bl	80046f0 <prvInitialiseTaskLists>
 800388c:	e00d      	b.n	80038aa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800388e:	4b3a      	ldr	r3, [pc, #232]	; (8003978 <prvAddNewTaskToReadyList+0x11c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003896:	4b37      	ldr	r3, [pc, #220]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d802      	bhi.n	80038aa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80038a4:	4a33      	ldr	r2, [pc, #204]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80038aa:	4b34      	ldr	r3, [pc, #208]	; (800397c <prvAddNewTaskToReadyList+0x120>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a32      	ldr	r2, [pc, #200]	; (800397c <prvAddNewTaskToReadyList+0x120>)
 80038b2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038b4:	4b31      	ldr	r3, [pc, #196]	; (800397c <prvAddNewTaskToReadyList+0x120>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <prvAddNewTaskToReadyList+0x124>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d903      	bls.n	80038d0 <prvAddNewTaskToReadyList+0x74>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4a2c      	ldr	r2, [pc, #176]	; (8003980 <prvAddNewTaskToReadyList+0x124>)
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	492b      	ldr	r1, [pc, #172]	; (8003984 <prvAddNewTaskToReadyList+0x128>)
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	3304      	adds	r3, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	3204      	adds	r2, #4
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	1d1a      	adds	r2, r3, #4
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <prvAddNewTaskToReadyList+0x128>)
 8003914:	441a      	add	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	615a      	str	r2, [r3, #20]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	4919      	ldr	r1, [pc, #100]	; (8003984 <prvAddNewTaskToReadyList+0x128>)
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	1c59      	adds	r1, r3, #1
 800392e:	4815      	ldr	r0, [pc, #84]	; (8003984 <prvAddNewTaskToReadyList+0x128>)
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4403      	add	r3, r0
 800393a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800393c:	f001 fe38 	bl	80055b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003940:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <prvAddNewTaskToReadyList+0x11c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00e      	beq.n	8003966 <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <prvAddNewTaskToReadyList+0x118>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	429a      	cmp	r2, r3
 8003954:	d207      	bcs.n	8003966 <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003956:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <prvAddNewTaskToReadyList+0x12c>)
 8003958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003966:	bf00      	nop
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000180 	.word	0x20000180
 8003974:	200000a8 	.word	0x200000a8
 8003978:	2000018c 	.word	0x2000018c
 800397c:	2000019c 	.word	0x2000019c
 8003980:	20000188 	.word	0x20000188
 8003984:	200000ac 	.word	0x200000ac
 8003988:	e000ed04 	.word	0xe000ed04

0800398c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d017      	beq.n	80039ce <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <vTaskDelay+0x60>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <vTaskDelay+0x30>
        __asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	60bb      	str	r3, [r7, #8]
    }
 80039b8:	bf00      	nop
 80039ba:	e7fe      	b.n	80039ba <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80039bc:	f000 f932 	bl	8003c24 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039c0:	2100      	movs	r1, #0
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f001 f92e 	bl	8004c24 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80039c8:	f000 f970 	bl	8003cac <xTaskResumeAll>
 80039cc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d107      	bne.n	80039e4 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <vTaskDelay+0x64>)
 80039d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200001a8 	.word	0x200001a8
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d90a      	bls.n	8003a1e <vTaskPrioritySet+0x2a>
        __asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60bb      	str	r3, [r7, #8]
    }
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d901      	bls.n	8003a28 <vTaskPrioritySet+0x34>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a24:	2304      	movs	r3, #4
 8003a26:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003a28:	f001 fd92 	bl	8005550 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <vTaskPrioritySet+0x44>
 8003a32:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <vTaskPrioritySet+0x17c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	e000      	b.n	8003a3a <vTaskPrioritySet+0x46>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	f000 808c 	beq.w	8003b64 <vTaskPrioritySet+0x170>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d90d      	bls.n	8003a70 <vTaskPrioritySet+0x7c>
                {
                    if( pxTCB != pxCurrentTCB )
 8003a54:	4b46      	ldr	r3, [pc, #280]	; (8003b70 <vTaskPrioritySet+0x17c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d00f      	beq.n	8003a7e <vTaskPrioritySet+0x8a>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003a5e:	4b44      	ldr	r3, [pc, #272]	; (8003b70 <vTaskPrioritySet+0x17c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d309      	bcc.n	8003a7e <vTaskPrioritySet+0x8a>
                        {
                            xYieldRequired = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	e006      	b.n	8003a7e <vTaskPrioritySet+0x8a>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8003a70:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <vTaskPrioritySet+0x17c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d101      	bne.n	8003a7e <vTaskPrioritySet+0x8a>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d102      	bne.n	8003a96 <vTaskPrioritySet+0xa2>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	651a      	str	r2, [r3, #80]	; 0x50
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	db04      	blt.n	8003aae <vTaskPrioritySet+0xba>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f1c3 0205 	rsb	r2, r3, #5
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	6959      	ldr	r1, [r3, #20]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <vTaskPrioritySet+0x180>)
 8003abe:	4413      	add	r3, r2
 8003ac0:	4299      	cmp	r1, r3
 8003ac2:	d144      	bne.n	8003b4e <vTaskPrioritySet+0x15a>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fc22 	bl	8005312 <uxListRemove>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <vTaskPrioritySet+0x184>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d903      	bls.n	8003ae2 <vTaskPrioritySet+0xee>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <vTaskPrioritySet+0x184>)
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae6:	4923      	ldr	r1, [pc, #140]	; (8003b74 <vTaskPrioritySet+0x180>)
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	3304      	adds	r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	3204      	adds	r2, #4
 8003b0e:	605a      	str	r2, [r3, #4]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1d1a      	adds	r2, r3, #4
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4a13      	ldr	r2, [pc, #76]	; (8003b74 <vTaskPrioritySet+0x180>)
 8003b26:	441a      	add	r2, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	615a      	str	r2, [r3, #20]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	4910      	ldr	r1, [pc, #64]	; (8003b74 <vTaskPrioritySet+0x180>)
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	1c59      	adds	r1, r3, #1
 8003b40:	480c      	ldr	r0, [pc, #48]	; (8003b74 <vTaskPrioritySet+0x180>)
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4403      	add	r3, r0
 8003b4c:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <vTaskPrioritySet+0x170>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <vTaskPrioritySet+0x188>)
 8003b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8003b64:	f001 fd24 	bl	80055b0 <vPortExitCritical>
    }
 8003b68:	bf00      	nop
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200000a8 	.word	0x200000a8
 8003b74:	200000ac 	.word	0x200000ac
 8003b78:	20000188 	.word	0x20000188
 8003b7c:	e000ed04 	.word	0xe000ed04

08003b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003b86:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <vTaskStartScheduler+0x88>)
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2280      	movs	r2, #128	; 0x80
 8003b92:	491e      	ldr	r1, [pc, #120]	; (8003c0c <vTaskStartScheduler+0x8c>)
 8003b94:	481e      	ldr	r0, [pc, #120]	; (8003c10 <vTaskStartScheduler+0x90>)
 8003b96:	f7ff fd8d 	bl	80036b4 <xTaskCreate>
 8003b9a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003ba2:	f001 f8ad 	bl	8004d00 <xTimerCreateTimerTask>
 8003ba6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d116      	bne.n	8003bdc <vTaskStartScheduler+0x5c>
        __asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	60bb      	str	r3, [r7, #8]
    }
 8003bc0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <vTaskStartScheduler+0x94>)
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003bca:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <vTaskStartScheduler+0x98>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bd0:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <vTaskStartScheduler+0x9c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003bd6:	f001 fc49 	bl	800546c <xPortStartScheduler>
 8003bda:	e00e      	b.n	8003bfa <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d10a      	bne.n	8003bfa <vTaskStartScheduler+0x7a>
        __asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	607b      	str	r3, [r7, #4]
    }
 8003bf6:	bf00      	nop
 8003bf8:	e7fe      	b.n	8003bf8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <vTaskStartScheduler+0xa0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200001a4 	.word	0x200001a4
 8003c0c:	08005b78 	.word	0x08005b78
 8003c10:	08004605 	.word	0x08004605
 8003c14:	200001a0 	.word	0x200001a0
 8003c18:	2000018c 	.word	0x2000018c
 8003c1c:	20000184 	.word	0x20000184
 8003c20:	2000000c 	.word	0x2000000c

08003c24 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <vTaskSuspendAll+0x18>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	4a03      	ldr	r2, [pc, #12]	; (8003c3c <vTaskSuspendAll+0x18>)
 8003c30:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	200001a8 	.word	0x200001a8

08003c40 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8003c4a:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <prvGetExpectedIdleTime+0x58>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8003c52:	2301      	movs	r3, #1
 8003c54:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <prvGetExpectedIdleTime+0x5c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	607b      	str	r3, [r7, #4]
 8003c64:	e012      	b.n	8003c8c <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8003c66:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <prvGetExpectedIdleTime+0x60>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d902      	bls.n	8003c74 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	e00b      	b.n	8003c8c <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	607b      	str	r3, [r7, #4]
 8003c7e:	e005      	b.n	8003c8c <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <prvGetExpectedIdleTime+0x64>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <prvGetExpectedIdleTime+0x68>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 8003c8c:	687b      	ldr	r3, [r7, #4]
    }
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	20000188 	.word	0x20000188
 8003c9c:	200000a8 	.word	0x200000a8
 8003ca0:	200000ac 	.word	0x200000ac
 8003ca4:	200001a0 	.word	0x200001a0
 8003ca8:	20000184 	.word	0x20000184

08003cac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003cba:	4b71      	ldr	r3, [pc, #452]	; (8003e80 <xTaskResumeAll+0x1d4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <xTaskResumeAll+0x2c>
        __asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	607b      	str	r3, [r7, #4]
    }
 8003cd4:	bf00      	nop
 8003cd6:	e7fe      	b.n	8003cd6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003cd8:	f001 fc3a 	bl	8005550 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003cdc:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <xTaskResumeAll+0x1d4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	4a67      	ldr	r2, [pc, #412]	; (8003e80 <xTaskResumeAll+0x1d4>)
 8003ce4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce6:	4b66      	ldr	r3, [pc, #408]	; (8003e80 <xTaskResumeAll+0x1d4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f040 80c1 	bne.w	8003e72 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cf0:	4b64      	ldr	r3, [pc, #400]	; (8003e84 <xTaskResumeAll+0x1d8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 80bc 	beq.w	8003e72 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cfa:	e08b      	b.n	8003e14 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cfc:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <xTaskResumeAll+0x1dc>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	69fa      	ldr	r2, [r7, #28]
 8003d10:	6a12      	ldr	r2, [r2, #32]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	69d2      	ldr	r2, [r2, #28]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3318      	adds	r3, #24
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d103      	bne.n	8003d32 <xTaskResumeAll+0x86>
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2200      	movs	r2, #0
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1e5a      	subs	r2, r3, #1
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	68d2      	ldr	r2, [r2, #12]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	6892      	ldr	r2, [r2, #8]
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	3304      	adds	r3, #4
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d103      	bne.n	8003d70 <xTaskResumeAll+0xc4>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2200      	movs	r2, #0
 8003d74:	615a      	str	r2, [r3, #20]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	1e5a      	subs	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <xTaskResumeAll+0x1e0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d903      	bls.n	8003d94 <xTaskResumeAll+0xe8>
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a3e      	ldr	r2, [pc, #248]	; (8003e8c <xTaskResumeAll+0x1e0>)
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	493d      	ldr	r1, [pc, #244]	; (8003e90 <xTaskResumeAll+0x1e4>)
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3304      	adds	r3, #4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	60da      	str	r2, [r3, #12]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	3204      	adds	r2, #4
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	1d1a      	adds	r2, r3, #4
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	609a      	str	r2, [r3, #8]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4a2e      	ldr	r2, [pc, #184]	; (8003e90 <xTaskResumeAll+0x1e4>)
 8003dd8:	441a      	add	r2, r3
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	615a      	str	r2, [r3, #20]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de2:	492b      	ldr	r1, [pc, #172]	; (8003e90 <xTaskResumeAll+0x1e4>)
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1c59      	adds	r1, r3, #1
 8003df2:	4827      	ldr	r0, [pc, #156]	; (8003e90 <xTaskResumeAll+0x1e4>)
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4403      	add	r3, r0
 8003dfe:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <xTaskResumeAll+0x1e8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8003e0e:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <xTaskResumeAll+0x1ec>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e14:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <xTaskResumeAll+0x1dc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f47f af6f 	bne.w	8003cfc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003e24:	f000 fce2 	bl	80047ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e28:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <xTaskResumeAll+0x1f0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003e34:	f000 f8a8 	bl	8003f88 <xTaskIncrementTick>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8003e3e:	4b16      	ldr	r3, [pc, #88]	; (8003e98 <xTaskResumeAll+0x1ec>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f1      	bne.n	8003e34 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <xTaskResumeAll+0x1f0>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <xTaskResumeAll+0x1ec>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <xTaskResumeAll+0x1f4>)
 8003e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003e72:	f001 fb9d 	bl	80055b0 <vPortExitCritical>

    return xAlreadyYielded;
 8003e76:	69bb      	ldr	r3, [r7, #24]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	200001a8 	.word	0x200001a8
 8003e84:	20000180 	.word	0x20000180
 8003e88:	20000140 	.word	0x20000140
 8003e8c:	20000188 	.word	0x20000188
 8003e90:	200000ac 	.word	0x200000ac
 8003e94:	200000a8 	.word	0x200000a8
 8003e98:	20000194 	.word	0x20000194
 8003e9c:	20000190 	.word	0x20000190
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <xTaskGetTickCount+0x18>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003eb0:	687b      	ldr	r3, [r7, #4]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr
 8003ebc:	20000184 	.word	0x20000184

08003ec0 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8003ec4:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <uxTaskGetNumberOfTasks+0x10>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	20000180 	.word	0x20000180

08003ed4 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8003edc:	4b26      	ldr	r3, [pc, #152]	; (8003f78 <vTaskStepTick+0xa4>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	441a      	add	r2, r3
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <vTaskStepTick+0xa8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d90a      	bls.n	8003f02 <vTaskStepTick+0x2e>
        __asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	617b      	str	r3, [r7, #20]
    }
 8003efe:	bf00      	nop
 8003f00:	e7fe      	b.n	8003f00 <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <vTaskStepTick+0xa4>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	441a      	add	r2, r3
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <vTaskStepTick+0xa8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d128      	bne.n	8003f64 <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 8003f12:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <vTaskStepTick+0xac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <vTaskStepTick+0x5c>
        __asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	613b      	str	r3, [r7, #16]
    }
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <vTaskStepTick+0x78>
        __asm volatile
 8003f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	60fb      	str	r3, [r7, #12]
    }
 8003f48:	bf00      	nop
 8003f4a:	e7fe      	b.n	8003f4a <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 8003f4c:	f001 fb00 	bl	8005550 <vPortEnterCritical>
            {
                xPendedTicks++;
 8003f50:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <vTaskStepTick+0xb0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	4a0b      	ldr	r2, [pc, #44]	; (8003f84 <vTaskStepTick+0xb0>)
 8003f58:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003f5a:	f001 fb29 	bl	80055b0 <vPortExitCritical>
            xTicksToJump--;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <vTaskStepTick+0xa4>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	4a02      	ldr	r2, [pc, #8]	; (8003f78 <vTaskStepTick+0xa4>)
 8003f6e:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 8003f70:	bf00      	nop
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000184 	.word	0x20000184
 8003f7c:	200001a0 	.word	0x200001a0
 8003f80:	200001a8 	.word	0x200001a8
 8003f84:	20000190 	.word	0x20000190

08003f88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f92:	4b7e      	ldr	r3, [pc, #504]	; (800418c <xTaskIncrementTick+0x204>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 80ed 	bne.w	8004176 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f9c:	4b7c      	ldr	r3, [pc, #496]	; (8004190 <xTaskIncrementTick+0x208>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003fa4:	4a7a      	ldr	r2, [pc, #488]	; (8004190 <xTaskIncrementTick+0x208>)
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d120      	bne.n	8003ff2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003fb0:	4b78      	ldr	r3, [pc, #480]	; (8004194 <xTaskIncrementTick+0x20c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <xTaskIncrementTick+0x48>
        __asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	607b      	str	r3, [r7, #4]
    }
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <xTaskIncrementTick+0x46>
 8003fd0:	4b70      	ldr	r3, [pc, #448]	; (8004194 <xTaskIncrementTick+0x20c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	4b70      	ldr	r3, [pc, #448]	; (8004198 <xTaskIncrementTick+0x210>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <xTaskIncrementTick+0x20c>)
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4a6e      	ldr	r2, [pc, #440]	; (8004198 <xTaskIncrementTick+0x210>)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	4b6d      	ldr	r3, [pc, #436]	; (800419c <xTaskIncrementTick+0x214>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	4a6c      	ldr	r2, [pc, #432]	; (800419c <xTaskIncrementTick+0x214>)
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	f000 fbfd 	bl	80047ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003ff2:	4b6b      	ldr	r3, [pc, #428]	; (80041a0 <xTaskIncrementTick+0x218>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6a3a      	ldr	r2, [r7, #32]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	f0c0 80a7 	bcc.w	800414c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffe:	4b65      	ldr	r3, [pc, #404]	; (8004194 <xTaskIncrementTick+0x20c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004008:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <xTaskIncrementTick+0x218>)
 800400a:	f04f 32ff 	mov.w	r2, #4294967295
 800400e:	601a      	str	r2, [r3, #0]
                    break;
 8004010:	e09c      	b.n	800414c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004012:	4b60      	ldr	r3, [pc, #384]	; (8004194 <xTaskIncrementTick+0x20c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004022:	6a3a      	ldr	r2, [r7, #32]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	429a      	cmp	r2, r3
 8004028:	d203      	bcs.n	8004032 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800402a:	4a5d      	ldr	r2, [pc, #372]	; (80041a0 <xTaskIncrementTick+0x218>)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004030:	e08c      	b.n	800414c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	68d2      	ldr	r2, [r2, #12]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	6892      	ldr	r2, [r2, #8]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	3304      	adds	r3, #4
 8004054:	429a      	cmp	r2, r3
 8004056:	d103      	bne.n	8004060 <xTaskIncrementTick+0xd8>
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	605a      	str	r2, [r3, #4]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2200      	movs	r2, #0
 8004064:	615a      	str	r2, [r3, #20]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1e5a      	subs	r2, r3, #1
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01e      	beq.n	80040b6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	6a12      	ldr	r2, [r2, #32]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	69d2      	ldr	r2, [r2, #28]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	3318      	adds	r3, #24
 800409a:	429a      	cmp	r2, r3
 800409c:	d103      	bne.n	80040a6 <xTaskIncrementTick+0x11e>
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	6a1a      	ldr	r2, [r3, #32]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2200      	movs	r2, #0
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	1e5a      	subs	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	4b3a      	ldr	r3, [pc, #232]	; (80041a4 <xTaskIncrementTick+0x21c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d903      	bls.n	80040ca <xTaskIncrementTick+0x142>
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	4a37      	ldr	r2, [pc, #220]	; (80041a4 <xTaskIncrementTick+0x21c>)
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	4936      	ldr	r1, [pc, #216]	; (80041a8 <xTaskIncrementTick+0x220>)
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	3304      	adds	r3, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	609a      	str	r2, [r3, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	3204      	adds	r2, #4
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	1d1a      	adds	r2, r3, #4
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4a26      	ldr	r2, [pc, #152]	; (80041a8 <xTaskIncrementTick+0x220>)
 800410e:	441a      	add	r2, r3
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	615a      	str	r2, [r3, #20]
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	4923      	ldr	r1, [pc, #140]	; (80041a8 <xTaskIncrementTick+0x220>)
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	1c59      	adds	r1, r3, #1
 8004128:	481f      	ldr	r0, [pc, #124]	; (80041a8 <xTaskIncrementTick+0x220>)
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4403      	add	r3, r0
 8004134:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413a:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <xTaskIncrementTick+0x224>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	429a      	cmp	r2, r3
 8004142:	f67f af5c 	bls.w	8003ffe <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004146:	2301      	movs	r3, #1
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800414a:	e758      	b.n	8003ffe <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800414c:	4b17      	ldr	r3, [pc, #92]	; (80041ac <xTaskIncrementTick+0x224>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	4915      	ldr	r1, [pc, #84]	; (80041a8 <xTaskIncrementTick+0x220>)
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d901      	bls.n	8004168 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8004164:	2301      	movs	r3, #1
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <xTaskIncrementTick+0x228>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
 8004174:	e004      	b.n	8004180 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <xTaskIncrementTick+0x22c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a0d      	ldr	r2, [pc, #52]	; (80041b4 <xTaskIncrementTick+0x22c>)
 800417e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004182:	4618      	mov	r0, r3
 8004184:	3728      	adds	r7, #40	; 0x28
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200001a8 	.word	0x200001a8
 8004190:	20000184 	.word	0x20000184
 8004194:	20000138 	.word	0x20000138
 8004198:	2000013c 	.word	0x2000013c
 800419c:	20000198 	.word	0x20000198
 80041a0:	200001a0 	.word	0x200001a0
 80041a4:	20000188 	.word	0x20000188
 80041a8:	200000ac 	.word	0x200000ac
 80041ac:	200000a8 	.word	0x200000a8
 80041b0:	20000194 	.word	0x20000194
 80041b4:	20000190 	.word	0x20000190

080041b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <vTaskSwitchContext+0xa4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <vTaskSwitchContext+0xa8>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80041cc:	e041      	b.n	8004252 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <vTaskSwitchContext+0xa8>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d4:	4b23      	ldr	r3, [pc, #140]	; (8004264 <vTaskSwitchContext+0xac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e010      	b.n	80041fe <vTaskSwitchContext+0x46>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <vTaskSwitchContext+0x40>
        __asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	607b      	str	r3, [r7, #4]
    }
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <vTaskSwitchContext+0x3e>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	491a      	ldr	r1, [pc, #104]	; (8004268 <vTaskSwitchContext+0xb0>)
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4613      	mov	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0e4      	beq.n	80041dc <vTaskSwitchContext+0x24>
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4a12      	ldr	r2, [pc, #72]	; (8004268 <vTaskSwitchContext+0xb0>)
 800421e:	4413      	add	r3, r2
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	3308      	adds	r3, #8
 8004234:	429a      	cmp	r2, r3
 8004236:	d104      	bne.n	8004242 <vTaskSwitchContext+0x8a>
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a08      	ldr	r2, [pc, #32]	; (800426c <vTaskSwitchContext+0xb4>)
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4a05      	ldr	r2, [pc, #20]	; (8004264 <vTaskSwitchContext+0xac>)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6013      	str	r3, [r2, #0]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	200001a8 	.word	0x200001a8
 8004260:	20000194 	.word	0x20000194
 8004264:	20000188 	.word	0x20000188
 8004268:	200000ac 	.word	0x200000ac
 800426c:	200000a8 	.word	0x200000a8

08004270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10a      	bne.n	8004296 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
    }
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <vTaskPlaceOnEventList+0x44>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3318      	adds	r3, #24
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 ffff 	bl	80052a2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042a4:	2101      	movs	r1, #1
 80042a6:	6838      	ldr	r0, [r7, #0]
 80042a8:	f000 fcbc 	bl	8004c24 <prvAddCurrentTaskToDelayedList>
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	200000a8 	.word	0x200000a8

080042b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	613b      	str	r3, [r7, #16]
    }
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	4b16      	ldr	r3, [pc, #88]	; (8004340 <vTaskPlaceOnEventListRestricted+0x88>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	61da      	str	r2, [r3, #28]
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <vTaskPlaceOnEventListRestricted+0x88>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	6892      	ldr	r2, [r2, #8]
 80042f6:	621a      	str	r2, [r3, #32]
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <vTaskPlaceOnEventListRestricted+0x88>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	3218      	adds	r2, #24
 8004302:	605a      	str	r2, [r3, #4]
 8004304:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <vTaskPlaceOnEventListRestricted+0x88>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f103 0218 	add.w	r2, r3, #24
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <vTaskPlaceOnEventListRestricted+0x88>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004328:	f04f 33ff 	mov.w	r3, #4294967295
 800432c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	68b8      	ldr	r0, [r7, #8]
 8004332:	f000 fc77 	bl	8004c24 <prvAddCurrentTaskToDelayedList>
    }
 8004336:	bf00      	nop
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200000a8 	.word	0x200000a8

08004344 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	60fb      	str	r3, [r7, #12]
    }
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	6a3a      	ldr	r2, [r7, #32]
 800437c:	6a12      	ldr	r2, [r2, #32]
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	6a3a      	ldr	r2, [r7, #32]
 8004386:	69d2      	ldr	r2, [r2, #28]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	3318      	adds	r3, #24
 8004392:	429a      	cmp	r2, r3
 8004394:	d103      	bne.n	800439e <xTaskRemoveFromEventList+0x5a>
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	6a1a      	ldr	r2, [r3, #32]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2200      	movs	r2, #0
 80043a2:	629a      	str	r2, [r3, #40]	; 0x28
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	1e5a      	subs	r2, r3, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ae:	4b4b      	ldr	r3, [pc, #300]	; (80044dc <xTaskRemoveFromEventList+0x198>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d161      	bne.n	800447a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	6a3a      	ldr	r2, [r7, #32]
 80043c2:	68d2      	ldr	r2, [r2, #12]
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	6a3a      	ldr	r2, [r7, #32]
 80043cc:	6892      	ldr	r2, [r2, #8]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	3304      	adds	r3, #4
 80043d8:	429a      	cmp	r2, r3
 80043da:	d103      	bne.n	80043e4 <xTaskRemoveFromEventList+0xa0>
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	2200      	movs	r2, #0
 80043e8:	615a      	str	r2, [r3, #20]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1e5a      	subs	r2, r3, #1
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <xTaskRemoveFromEventList+0x19c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d903      	bls.n	8004408 <xTaskRemoveFromEventList+0xc4>
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	4a36      	ldr	r2, [pc, #216]	; (80044e0 <xTaskRemoveFromEventList+0x19c>)
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	4935      	ldr	r1, [pc, #212]	; (80044e4 <xTaskRemoveFromEventList+0x1a0>)
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	3304      	adds	r3, #4
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	60da      	str	r2, [r3, #12]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	3204      	adds	r2, #4
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	1d1a      	adds	r2, r3, #4
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	609a      	str	r2, [r3, #8]
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <xTaskRemoveFromEventList+0x1a0>)
 800444c:	441a      	add	r2, r3
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	615a      	str	r2, [r3, #20]
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004456:	4923      	ldr	r1, [pc, #140]	; (80044e4 <xTaskRemoveFromEventList+0x1a0>)
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	1c59      	adds	r1, r3, #1
 8004466:	481f      	ldr	r0, [pc, #124]	; (80044e4 <xTaskRemoveFromEventList+0x1a0>)
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4403      	add	r3, r0
 8004472:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 8004474:	f000 f9ba 	bl	80047ec <prvResetNextTaskUnblockTime>
 8004478:	e01b      	b.n	80044b2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800447a:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <xTaskRemoveFromEventList+0x1a4>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61bb      	str	r3, [r7, #24]
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	621a      	str	r2, [r3, #32]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	3218      	adds	r2, #24
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f103 0218 	add.w	r2, r3, #24
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	609a      	str	r2, [r3, #8]
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <xTaskRemoveFromEventList+0x1a4>)
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
 80044a8:	4b0f      	ldr	r3, [pc, #60]	; (80044e8 <xTaskRemoveFromEventList+0x1a4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <xTaskRemoveFromEventList+0x1a4>)
 80044b0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <xTaskRemoveFromEventList+0x1a8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d905      	bls.n	80044cc <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80044c4:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <xTaskRemoveFromEventList+0x1ac>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e001      	b.n	80044d0 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3728      	adds	r7, #40	; 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	200001a8 	.word	0x200001a8
 80044e0:	20000188 	.word	0x20000188
 80044e4:	200000ac 	.word	0x200000ac
 80044e8:	20000140 	.word	0x20000140
 80044ec:	200000a8 	.word	0x200000a8
 80044f0:	20000194 	.word	0x20000194

080044f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <vTaskInternalSetTimeOutState+0x24>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <vTaskInternalSetTimeOutState+0x28>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	605a      	str	r2, [r3, #4]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000198 	.word	0x20000198
 800451c:	20000184 	.word	0x20000184

08004520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10a      	bne.n	8004546 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	613b      	str	r3, [r7, #16]
    }
 8004542:	bf00      	nop
 8004544:	e7fe      	b.n	8004544 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	60fb      	str	r3, [r7, #12]
    }
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004562:	f000 fff5 	bl	8005550 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004566:	4b1f      	ldr	r3, [pc, #124]	; (80045e4 <xTaskCheckForTimeOut+0xc4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457e:	d102      	bne.n	8004586 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004580:	2300      	movs	r3, #0
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	e026      	b.n	80045d4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b17      	ldr	r3, [pc, #92]	; (80045e8 <xTaskCheckForTimeOut+0xc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d00a      	beq.n	80045a8 <xTaskCheckForTimeOut+0x88>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	429a      	cmp	r2, r3
 800459a:	d305      	bcc.n	80045a8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e015      	b.n	80045d4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d20b      	bcs.n	80045ca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	1ad2      	subs	r2, r2, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff ff98 	bl	80044f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80045c4:	2300      	movs	r3, #0
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e004      	b.n	80045d4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80045d0:	2301      	movs	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80045d4:	f000 ffec 	bl	80055b0 <vPortExitCritical>

    return xReturn;
 80045d8:	69fb      	ldr	r3, [r7, #28]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3720      	adds	r7, #32
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20000184 	.word	0x20000184
 80045e8:	20000198 	.word	0x20000198

080045ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80045f0:	4b03      	ldr	r3, [pc, #12]	; (8004600 <vTaskMissedYield+0x14>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000194 	.word	0x20000194

08004604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800460c:	f000 f8b0 	bl	8004770 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004610:	4b18      	ldr	r3, [pc, #96]	; (8004674 <prvIdleTask+0x70>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d907      	bls.n	8004628 <prvIdleTask+0x24>
            {
                taskYIELD();
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <prvIdleTask+0x74>)
 800461a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 8004628:	f7ff fb0a 	bl	8003c40 <prvGetExpectedIdleTime>
 800462c:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d9eb      	bls.n	800460c <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 8004634:	f7ff faf6 	bl	8003c24 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 8004638:	4b10      	ldr	r3, [pc, #64]	; (800467c <prvIdleTask+0x78>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b10      	ldr	r3, [pc, #64]	; (8004680 <prvIdleTask+0x7c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d20a      	bcs.n	800465a <prvIdleTask+0x56>
        __asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60bb      	str	r3, [r7, #8]
    }
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 800465a:	f7ff faf1 	bl	8003c40 <prvGetExpectedIdleTime>
 800465e:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d902      	bls.n	800466c <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f001 f810 	bl	800568c <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 800466c:	f7ff fb1e 	bl	8003cac <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 8004670:	e7cc      	b.n	800460c <prvIdleTask+0x8>
 8004672:	bf00      	nop
 8004674:	200000ac 	.word	0x200000ac
 8004678:	e000ed04 	.word	0xe000ed04
 800467c:	200001a0 	.word	0x200001a0
 8004680:	20000184 	.word	0x20000184

08004684 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 800468e:	2301      	movs	r3, #1
 8004690:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <eTaskConfirmSleepModeStatus+0x58>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 800469a:	2300      	movs	r3, #0
 800469c:	71fb      	strb	r3, [r7, #7]
 800469e:	e017      	b.n	80046d0 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <eTaskConfirmSleepModeStatus+0x5c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 80046a8:	2300      	movs	r3, #0
 80046aa:	71fb      	strb	r3, [r7, #7]
 80046ac:	e010      	b.n	80046d0 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <eTaskConfirmSleepModeStatus+0x60>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 80046b6:	2300      	movs	r3, #0
 80046b8:	71fb      	strb	r3, [r7, #7]
 80046ba:	e009      	b.n	80046d0 <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <eTaskConfirmSleepModeStatus+0x64>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <eTaskConfirmSleepModeStatus+0x68>)
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	1acb      	subs	r3, r1, r3
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d101      	bne.n	80046d0 <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 80046cc:	2302      	movs	r3, #2
 80046ce:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 80046d0:	79fb      	ldrb	r3, [r7, #7]
    }
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	20000140 	.word	0x20000140
 80046e0:	20000194 	.word	0x20000194
 80046e4:	20000190 	.word	0x20000190
 80046e8:	2000016c 	.word	0x2000016c
 80046ec:	20000180 	.word	0x20000180

080046f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	e00c      	b.n	8004716 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4a12      	ldr	r2, [pc, #72]	; (8004750 <prvInitialiseTaskLists+0x60>)
 8004708:	4413      	add	r3, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fd9e 	bl	800524c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3301      	adds	r3, #1
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b04      	cmp	r3, #4
 800471a:	d9ef      	bls.n	80046fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800471c:	480d      	ldr	r0, [pc, #52]	; (8004754 <prvInitialiseTaskLists+0x64>)
 800471e:	f000 fd95 	bl	800524c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004722:	480d      	ldr	r0, [pc, #52]	; (8004758 <prvInitialiseTaskLists+0x68>)
 8004724:	f000 fd92 	bl	800524c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004728:	480c      	ldr	r0, [pc, #48]	; (800475c <prvInitialiseTaskLists+0x6c>)
 800472a:	f000 fd8f 	bl	800524c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800472e:	480c      	ldr	r0, [pc, #48]	; (8004760 <prvInitialiseTaskLists+0x70>)
 8004730:	f000 fd8c 	bl	800524c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004734:	480b      	ldr	r0, [pc, #44]	; (8004764 <prvInitialiseTaskLists+0x74>)
 8004736:	f000 fd89 	bl	800524c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <prvInitialiseTaskLists+0x78>)
 800473c:	4a05      	ldr	r2, [pc, #20]	; (8004754 <prvInitialiseTaskLists+0x64>)
 800473e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004740:	4b0a      	ldr	r3, [pc, #40]	; (800476c <prvInitialiseTaskLists+0x7c>)
 8004742:	4a05      	ldr	r2, [pc, #20]	; (8004758 <prvInitialiseTaskLists+0x68>)
 8004744:	601a      	str	r2, [r3, #0]
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	200000ac 	.word	0x200000ac
 8004754:	20000110 	.word	0x20000110
 8004758:	20000124 	.word	0x20000124
 800475c:	20000140 	.word	0x20000140
 8004760:	20000154 	.word	0x20000154
 8004764:	2000016c 	.word	0x2000016c
 8004768:	20000138 	.word	0x20000138
 800476c:	2000013c 	.word	0x2000013c

08004770 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004776:	e019      	b.n	80047ac <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004778:	f000 feea 	bl	8005550 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <prvCheckTasksWaitingTermination+0x50>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fdc2 	bl	8005312 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800478e:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <prvCheckTasksWaitingTermination+0x54>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3b01      	subs	r3, #1
 8004794:	4a0b      	ldr	r2, [pc, #44]	; (80047c4 <prvCheckTasksWaitingTermination+0x54>)
 8004796:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <prvCheckTasksWaitingTermination+0x58>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3b01      	subs	r3, #1
 800479e:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <prvCheckTasksWaitingTermination+0x58>)
 80047a0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80047a2:	f000 ff05 	bl	80055b0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f810 	bl	80047cc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <prvCheckTasksWaitingTermination+0x58>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e1      	bne.n	8004778 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000154 	.word	0x20000154
 80047c4:	20000180 	.word	0x20000180
 80047c8:	20000168 	.word	0x20000168

080047cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fd25 	bl	8005228 <vPortFree>
            vPortFree( pxTCB );
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fd22 	bl	8005228 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <prvResetNextTaskUnblockTime+0x2c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80047fa:	4b08      	ldr	r3, [pc, #32]	; (800481c <prvResetNextTaskUnblockTime+0x30>)
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004802:	e005      	b.n	8004810 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <prvResetNextTaskUnblockTime+0x2c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a03      	ldr	r2, [pc, #12]	; (800481c <prvResetNextTaskUnblockTime+0x30>)
 800480e:	6013      	str	r3, [r2, #0]
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	20000138 	.word	0x20000138
 800481c:	200001a0 	.word	0x200001a0

08004820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <xTaskGetSchedulerState+0x34>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800482e:	2301      	movs	r3, #1
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	e008      	b.n	8004846 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004834:	4b08      	ldr	r3, [pc, #32]	; (8004858 <xTaskGetSchedulerState+0x38>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800483c:	2302      	movs	r3, #2
 800483e:	607b      	str	r3, [r7, #4]
 8004840:	e001      	b.n	8004846 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004846:	687b      	ldr	r3, [r7, #4]
    }
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000018c 	.word	0x2000018c
 8004858:	200001a8 	.word	0x200001a8

0800485c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d079      	beq.n	8004966 <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <xTaskPriorityInherit+0x114>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	429a      	cmp	r2, r3
 800487e:	d269      	bcs.n	8004954 <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	db06      	blt.n	8004896 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004888:	4b39      	ldr	r3, [pc, #228]	; (8004970 <xTaskPriorityInherit+0x114>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	f1c3 0205 	rsb	r2, r3, #5
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6959      	ldr	r1, [r3, #20]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4a33      	ldr	r2, [pc, #204]	; (8004974 <xTaskPriorityInherit+0x118>)
 80048a8:	4413      	add	r3, r2
 80048aa:	4299      	cmp	r1, r3
 80048ac:	d14a      	bne.n	8004944 <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fd2d 	bl	8005312 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80048b8:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <xTaskPriorityInherit+0x114>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c6:	4b2c      	ldr	r3, [pc, #176]	; (8004978 <xTaskPriorityInherit+0x11c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d903      	bls.n	80048d6 <xTaskPriorityInherit+0x7a>
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	4a29      	ldr	r2, [pc, #164]	; (8004978 <xTaskPriorityInherit+0x11c>)
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048da:	4926      	ldr	r1, [pc, #152]	; (8004974 <xTaskPriorityInherit+0x118>)
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	3304      	adds	r3, #4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	609a      	str	r2, [r3, #8]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	3204      	adds	r2, #4
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4a16      	ldr	r2, [pc, #88]	; (8004974 <xTaskPriorityInherit+0x118>)
 800491a:	441a      	add	r2, r3
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	615a      	str	r2, [r3, #20]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4913      	ldr	r1, [pc, #76]	; (8004974 <xTaskPriorityInherit+0x118>)
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	480f      	ldr	r0, [pc, #60]	; (8004974 <xTaskPriorityInherit+0x118>)
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4403      	add	r3, r0
 8004940:	6019      	str	r1, [r3, #0]
 8004942:	e004      	b.n	800494e <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004944:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <xTaskPriorityInherit+0x114>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800494e:	2301      	movs	r3, #1
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e008      	b.n	8004966 <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <xTaskPriorityInherit+0x114>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	429a      	cmp	r2, r3
 8004960:	d201      	bcs.n	8004966 <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004966:	697b      	ldr	r3, [r7, #20]
    }
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	200000a8 	.word	0x200000a8
 8004974:	200000ac 	.word	0x200000ac
 8004978:	20000188 	.word	0x20000188

0800497c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004988:	2300      	movs	r3, #0
 800498a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d07e      	beq.n	8004a90 <xTaskPriorityDisinherit+0x114>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004992:	4b42      	ldr	r3, [pc, #264]	; (8004a9c <xTaskPriorityDisinherit+0x120>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	429a      	cmp	r2, r3
 800499a:	d00a      	beq.n	80049b2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	613b      	str	r3, [r7, #16]
    }
 80049ae:	bf00      	nop
 80049b0:	e7fe      	b.n	80049b0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	60fb      	str	r3, [r7, #12]
    }
 80049cc:	bf00      	nop
 80049ce:	e7fe      	b.n	80049ce <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	1e5a      	subs	r2, r3, #1
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d054      	beq.n	8004a90 <xTaskPriorityDisinherit+0x114>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d150      	bne.n	8004a90 <xTaskPriorityDisinherit+0x114>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fc8d 	bl	8005312 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f1c3 0205 	rsb	r2, r3, #5
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <xTaskPriorityDisinherit+0x124>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d903      	bls.n	8004a20 <xTaskPriorityDisinherit+0xa4>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	4a20      	ldr	r2, [pc, #128]	; (8004aa0 <xTaskPriorityDisinherit+0x124>)
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a24:	491f      	ldr	r1, [pc, #124]	; (8004aa4 <xTaskPriorityDisinherit+0x128>)
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	3304      	adds	r3, #4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	60da      	str	r2, [r3, #12]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	3204      	adds	r2, #4
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	1d1a      	adds	r2, r3, #4
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <xTaskPriorityDisinherit+0x128>)
 8004a64:	441a      	add	r2, r3
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	615a      	str	r2, [r3, #20]
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6e:	490d      	ldr	r1, [pc, #52]	; (8004aa4 <xTaskPriorityDisinherit+0x128>)
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	1c59      	adds	r1, r3, #1
 8004a7e:	4809      	ldr	r0, [pc, #36]	; (8004aa4 <xTaskPriorityDisinherit+0x128>)
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4403      	add	r3, r0
 8004a8a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004a90:	69fb      	ldr	r3, [r7, #28]
    }
 8004a92:	4618      	mov	r0, r3
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200000a8 	.word	0x200000a8
 8004aa0:	20000188 	.word	0x20000188
 8004aa4:	200000ac 	.word	0x200000ac

08004aa8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	; 0x28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8093 	beq.w	8004be8 <vTaskPriorityDisinheritAfterTimeout+0x140>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	613b      	str	r3, [r7, #16]
    }
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d902      	bls.n	8004af0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
 8004aee:	e002      	b.n	8004af6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d073      	beq.n	8004be8 <vTaskPriorityDisinheritAfterTimeout+0x140>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d16e      	bne.n	8004be8 <vTaskPriorityDisinheritAfterTimeout+0x140>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004b0a:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6a3a      	ldr	r2, [r7, #32]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d10a      	bne.n	8004b2a <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	60fb      	str	r3, [r7, #12]
    }
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b34:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	db04      	blt.n	8004b48 <vTaskPriorityDisinheritAfterTimeout+0xa0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	f1c3 0205 	rsb	r2, r3, #5
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	6959      	ldr	r1, [r3, #20]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004b58:	4413      	add	r3, r2
 8004b5a:	4299      	cmp	r1, r3
 8004b5c:	d144      	bne.n	8004be8 <vTaskPriorityDisinheritAfterTimeout+0x140>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fbd5 	bl	8005312 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	4b22      	ldr	r3, [pc, #136]	; (8004bf8 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d903      	bls.n	8004b7c <vTaskPriorityDisinheritAfterTimeout+0xd4>
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	4a1f      	ldr	r2, [pc, #124]	; (8004bf8 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b80:	491c      	ldr	r1, [pc, #112]	; (8004bf4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	3204      	adds	r2, #4
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	1d1a      	adds	r2, r3, #4
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4a0d      	ldr	r2, [pc, #52]	; (8004bf4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004bc0:	441a      	add	r2, r3
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	615a      	str	r2, [r3, #20]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	490a      	ldr	r1, [pc, #40]	; (8004bf4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4403      	add	r3, r0
 8004be6:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004be8:	bf00      	nop
 8004bea:	3728      	adds	r7, #40	; 0x28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	200000a8 	.word	0x200000a8
 8004bf4:	200000ac 	.word	0x200000ac
 8004bf8:	20000188 	.word	0x20000188

08004bfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d004      	beq.n	8004c12 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c0e:	3201      	adds	r2, #1
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
        }

        return pxCurrentTCB;
 8004c12:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c14:	681b      	ldr	r3, [r3, #0]
    }
 8004c16:	4618      	mov	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	200000a8 	.word	0x200000a8

08004c24 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004c2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c34:	4b2d      	ldr	r3, [pc, #180]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fb69 	bl	8005312 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	d124      	bne.n	8004c92 <prvAddCurrentTaskToDelayedList+0x6e>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d021      	beq.n	8004c92 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	613b      	str	r3, [r7, #16]
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	4b23      	ldr	r3, [pc, #140]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	6892      	ldr	r2, [r2, #8]
 8004c64:	60da      	str	r2, [r3, #12]
 8004c66:	4b21      	ldr	r3, [pc, #132]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	3204      	adds	r2, #4
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	4b1e      	ldr	r3, [pc, #120]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	1d1a      	adds	r2, r3, #4
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c82:	615a      	str	r2, [r3, #20]
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004c90:	e026      	b.n	8004ce0 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4413      	add	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c9a:	4b14      	ldr	r3, [pc, #80]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d209      	bcs.n	8004cbe <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	f000 faf3 	bl	80052a2 <vListInsert>
}
 8004cbc:	e010      	b.n	8004ce0 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f000 fae9 	bl	80052a2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d202      	bcs.n	8004ce0 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8004cda:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6013      	str	r3, [r2, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000184 	.word	0x20000184
 8004cec:	200000a8 	.word	0x200000a8
 8004cf0:	2000016c 	.word	0x2000016c
 8004cf4:	2000013c 	.word	0x2000013c
 8004cf8:	20000138 	.word	0x20000138
 8004cfc:	200001a0 	.word	0x200001a0

08004d00 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004d0a:	f000 fa45 	bl	8005198 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004d0e:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <xTimerCreateTimerTask+0x54>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <xTimerCreateTimerTask+0x58>)
 8004d18:	9301      	str	r3, [sp, #4]
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2280      	movs	r2, #128	; 0x80
 8004d22:	490e      	ldr	r1, [pc, #56]	; (8004d5c <xTimerCreateTimerTask+0x5c>)
 8004d24:	480e      	ldr	r0, [pc, #56]	; (8004d60 <xTimerCreateTimerTask+0x60>)
 8004d26:	f7fe fcc5 	bl	80036b4 <xTaskCreate>
 8004d2a:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10a      	bne.n	8004d48 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	603b      	str	r3, [r7, #0]
    }
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8004d48:	687b      	ldr	r3, [r7, #4]
    }
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200001dc 	.word	0x200001dc
 8004d58:	200001e0 	.word	0x200001e0
 8004d5c:	08005b80 	.word	0x08005b80
 8004d60:	08004e09 	.word	0x08004e09

08004d64 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d70:	e008      	b.n	8004d84 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	4413      	add	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	18d1      	adds	r1, r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f8db 	bl	8004f4c <prvInsertTimerInActiveList>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ea      	bne.n	8004d72 <prvReloadTimer+0xe>
        }
    }
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db2:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <prvProcessExpiredTimer+0x5c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 faa6 	bl	8005312 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f7ff ffc3 	bl	8004d64 <prvReloadTimer>
 8004dde:	e008      	b.n	8004df2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	4798      	blx	r3
    }
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200001d4 	.word	0x200001d4

08004e08 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e10:	f107 0308 	add.w	r3, r7, #8
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f857 	bl	8004ec8 <prvGetNextExpireTime>
 8004e1a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 f803 	bl	8004e2c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004e26:	f000 f8d3 	bl	8004fd0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e2a:	e7f1      	b.n	8004e10 <prvTimerTask+0x8>

08004e2c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004e36:	f7fe fef5 	bl	8003c24 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f864 	bl	8004f0c <prvSampleTimeNow>
 8004e44:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d130      	bne.n	8004eae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <prvProcessTimerOrBlockTask+0x3c>
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d806      	bhi.n	8004e68 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004e5a:	f7fe ff27 	bl	8003cac <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e5e:	68f9      	ldr	r1, [r7, #12]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff ffa1 	bl	8004da8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004e66:	e024      	b.n	8004eb2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d008      	beq.n	8004e80 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <prvProcessTimerOrBlockTask+0x90>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <prvProcessTimerOrBlockTask+0x50>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <prvProcessTimerOrBlockTask+0x52>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e80:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <prvProcessTimerOrBlockTask+0x94>)
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f7fe fbdd 	bl	800364c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004e92:	f7fe ff0b 	bl	8003cac <xTaskResumeAll>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <prvProcessTimerOrBlockTask+0x98>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	f3bf 8f6f 	isb	sy
    }
 8004eac:	e001      	b.n	8004eb2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004eae:	f7fe fefd 	bl	8003cac <xTaskResumeAll>
    }
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	200001d8 	.word	0x200001d8
 8004ec0:	200001dc 	.word	0x200001dc
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ed0:	4b0d      	ldr	r3, [pc, #52]	; (8004f08 <prvGetNextExpireTime+0x40>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <prvGetNextExpireTime+0x16>
 8004eda:	2201      	movs	r2, #1
 8004edc:	e000      	b.n	8004ee0 <prvGetNextExpireTime+0x18>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <prvGetNextExpireTime+0x40>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	e001      	b.n	8004efc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004efc:	68fb      	ldr	r3, [r7, #12]
    }
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	200001d4 	.word	0x200001d4

08004f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004f14:	f7fe ffc6 	bl	8003ea4 <xTaskGetTickCount>
 8004f18:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <prvSampleTimeNow+0x3c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d205      	bcs.n	8004f30 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004f24:	f000 f912 	bl	800514c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e002      	b.n	8004f36 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004f36:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <prvSampleTimeNow+0x3c>)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
    }
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200001e4 	.word	0x200001e4

08004f4c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d812      	bhi.n	8004f98 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	1ad2      	subs	r2, r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004f80:	2301      	movs	r3, #1
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	e01b      	b.n	8004fbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <prvInsertTimerInActiveList+0x7c>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4610      	mov	r0, r2
 8004f92:	f000 f986 	bl	80052a2 <vListInsert>
 8004f96:	e012      	b.n	8004fbe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d206      	bcs.n	8004fae <prvInsertTimerInActiveList+0x62>
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e007      	b.n	8004fbe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fae:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <prvInsertTimerInActiveList+0x80>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 f972 	bl	80052a2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004fbe:	697b      	ldr	r3, [r7, #20]
    }
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	200001d8 	.word	0x200001d8
 8004fcc:	200001d4 	.word	0x200001d4

08004fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fd6:	e0a6      	b.n	8005126 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f2c0 80a2 	blt.w	8005124 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d004      	beq.n	8004ff6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 f98e 	bl	8005312 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ff6:	1d3b      	adds	r3, r7, #4
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff ff87 	bl	8004f0c <prvSampleTimeNow>
 8004ffe:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	3b01      	subs	r3, #1
 8005004:	2b08      	cmp	r3, #8
 8005006:	f200 808e 	bhi.w	8005126 <prvProcessReceivedCommands+0x156>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <prvProcessReceivedCommands+0x40>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005035 	.word	0x08005035
 8005014:	08005035 	.word	0x08005035
 8005018:	0800509d 	.word	0x0800509d
 800501c:	080050b1 	.word	0x080050b1
 8005020:	080050fb 	.word	0x080050fb
 8005024:	08005035 	.word	0x08005035
 8005028:	08005035 	.word	0x08005035
 800502c:	0800509d 	.word	0x0800509d
 8005030:	080050b1 	.word	0x080050b1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	b2da      	uxtb	r2, r3
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	18d1      	adds	r1, r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	69f8      	ldr	r0, [r7, #28]
 8005054:	f7ff ff7a 	bl	8004f4c <prvInsertTimerInActiveList>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d063      	beq.n	8005126 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	4413      	add	r3, r2
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4619      	mov	r1, r3
 8005078:	69f8      	ldr	r0, [r7, #28]
 800507a:	f7ff fe73 	bl	8004d64 <prvReloadTimer>
 800507e:	e008      	b.n	8005092 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005086:	f023 0301 	bic.w	r3, r3, #1
 800508a:	b2da      	uxtb	r2, r3
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	69f8      	ldr	r0, [r7, #28]
 8005098:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800509a:	e044      	b.n	8005126 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80050ae:	e03a      	b.n	8005126 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	617b      	str	r3, [r7, #20]
    }
 80050e2:	bf00      	nop
 80050e4:	e7fe      	b.n	80050e4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	699a      	ldr	r2, [r3, #24]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	18d1      	adds	r1, r2, r3
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	69f8      	ldr	r0, [r7, #28]
 80050f4:	f7ff ff2a 	bl	8004f4c <prvInsertTimerInActiveList>
                        break;
 80050f8:	e015      	b.n	8005126 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d103      	bne.n	8005110 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8005108:	69f8      	ldr	r0, [r7, #28]
 800510a:	f000 f88d 	bl	8005228 <vPortFree>
 800510e:	e00a      	b.n	8005126 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005122:	e000      	b.n	8005126 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005124:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005126:	4b08      	ldr	r3, [pc, #32]	; (8005148 <prvProcessReceivedCommands+0x178>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f107 0108 	add.w	r1, r7, #8
 800512e:	2200      	movs	r2, #0
 8005130:	4618      	mov	r0, r3
 8005132:	f7fd ff37 	bl	8002fa4 <xQueueReceive>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	f47f af4d 	bne.w	8004fd8 <prvProcessReceivedCommands+0x8>
        }
    }
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	200001dc 	.word	0x200001dc

0800514c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005152:	e009      	b.n	8005168 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005154:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <prvSwitchTimerLists+0x44>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800515e:	f04f 31ff 	mov.w	r1, #4294967295
 8005162:	6838      	ldr	r0, [r7, #0]
 8005164:	f7ff fe20 	bl	8004da8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005168:	4b09      	ldr	r3, [pc, #36]	; (8005190 <prvSwitchTimerLists+0x44>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005172:	4b07      	ldr	r3, [pc, #28]	; (8005190 <prvSwitchTimerLists+0x44>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005178:	4b06      	ldr	r3, [pc, #24]	; (8005194 <prvSwitchTimerLists+0x48>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <prvSwitchTimerLists+0x44>)
 800517e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005180:	4a04      	ldr	r2, [pc, #16]	; (8005194 <prvSwitchTimerLists+0x48>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6013      	str	r3, [r2, #0]
    }
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200001d4 	.word	0x200001d4
 8005194:	200001d8 	.word	0x200001d8

08005198 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800519c:	f000 f9d8 	bl	8005550 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80051a0:	4b12      	ldr	r3, [pc, #72]	; (80051ec <prvCheckForValidListAndQueue+0x54>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11d      	bne.n	80051e4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80051a8:	4811      	ldr	r0, [pc, #68]	; (80051f0 <prvCheckForValidListAndQueue+0x58>)
 80051aa:	f000 f84f 	bl	800524c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80051ae:	4811      	ldr	r0, [pc, #68]	; (80051f4 <prvCheckForValidListAndQueue+0x5c>)
 80051b0:	f000 f84c 	bl	800524c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80051b4:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <prvCheckForValidListAndQueue+0x60>)
 80051b6:	4a0e      	ldr	r2, [pc, #56]	; (80051f0 <prvCheckForValidListAndQueue+0x58>)
 80051b8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <prvCheckForValidListAndQueue+0x64>)
 80051bc:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <prvCheckForValidListAndQueue+0x5c>)
 80051be:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80051c0:	2200      	movs	r2, #0
 80051c2:	210c      	movs	r1, #12
 80051c4:	200a      	movs	r0, #10
 80051c6:	f7fd fc27 	bl	8002a18 <xQueueGenericCreate>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4a07      	ldr	r2, [pc, #28]	; (80051ec <prvCheckForValidListAndQueue+0x54>)
 80051ce:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <prvCheckForValidListAndQueue+0x54>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <prvCheckForValidListAndQueue+0x54>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4908      	ldr	r1, [pc, #32]	; (8005200 <prvCheckForValidListAndQueue+0x68>)
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe f9e6 	bl	80035b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80051e4:	f000 f9e4 	bl	80055b0 <vPortExitCritical>
    }
 80051e8:	bf00      	nop
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	200001dc 	.word	0x200001dc
 80051f0:	200001ac 	.word	0x200001ac
 80051f4:	200001c0 	.word	0x200001c0
 80051f8:	200001d4 	.word	0x200001d4
 80051fc:	200001d8 	.word	0x200001d8
 8005200:	08005b88 	.word	0x08005b88

08005204 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800520c:	f7fe fd0a 	bl	8003c24 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fba9 	bl	8005968 <malloc>
 8005216:	4603      	mov	r3, r0
 8005218:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800521a:	f7fe fd47 	bl	8003cac <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800521e:	68fb      	ldr	r3, [r7, #12]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d006      	beq.n	8005244 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 8005236:	f7fe fcf5 	bl	8003c24 <vTaskSuspendAll>
        {
            free( pv );
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fb9c 	bl	8005978 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8005240:	f7fe fd34 	bl	8003cac <xTaskResumeAll>
    }
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f103 0208 	add.w	r2, r3, #8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f04f 32ff 	mov.w	r2, #4294967295
 8005264:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f103 0208 	add.w	r2, r3, #8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f103 0208 	add.w	r2, r3, #8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr

0800528a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d103      	bne.n	80052c2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e00c      	b.n	80052dc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3308      	adds	r3, #8
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e002      	b.n	80052d0 <vListInsert+0x2e>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d2f6      	bcs.n	80052ca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	601a      	str	r2, [r3, #0]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr

08005312 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005312:	b480      	push	{r7}
 8005314:	b085      	sub	sp, #20
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6892      	ldr	r2, [r2, #8]
 8005328:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6852      	ldr	r2, [r2, #4]
 8005332:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	429a      	cmp	r2, r3
 800533c:	d103      	bne.n	8005346 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	1e5a      	subs	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3b04      	subs	r3, #4
 8005374:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800537c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3b04      	subs	r3, #4
 8005382:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f023 0201 	bic.w	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3b04      	subs	r3, #4
 8005392:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <pxPortInitialiseStack+0x54>)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3b14      	subs	r3, #20
 800539e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b20      	subs	r3, #32
 80053aa:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	080053bd 	.word	0x080053bd

080053bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80053c6:	4b12      	ldr	r3, [pc, #72]	; (8005410 <prvTaskExitError+0x54>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d00a      	beq.n	80053e6 <prvTaskExitError+0x2a>
        __asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60fb      	str	r3, [r7, #12]
    }
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <prvTaskExitError+0x28>
        __asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60bb      	str	r3, [r7, #8]
    }
 80053f8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80053fa:	bf00      	nop
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0fc      	beq.n	80053fc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20000010 	.word	0x20000010
	...

08005420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <pxCurrentTCBConst2>)
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	6808      	ldr	r0, [r1, #0]
 8005426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800542a:	f380 8809 	msr	PSP, r0
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f380 8811 	msr	BASEPRI, r0
 800543a:	f04e 0e0d 	orr.w	lr, lr, #13
 800543e:	4770      	bx	lr

08005440 <pxCurrentTCBConst2>:
 8005440:	200000a8 	.word	0x200000a8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop

08005448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8005448:	4806      	ldr	r0, [pc, #24]	; (8005464 <prvPortStartFirstTask+0x1c>)
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	6800      	ldr	r0, [r0, #0]
 800544e:	f380 8808 	msr	MSP, r0
 8005452:	b662      	cpsie	i
 8005454:	b661      	cpsie	f
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	df00      	svc	0
 8005460:	bf00      	nop
 8005462:	0000      	.short	0x0000
 8005464:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005468:	bf00      	nop
 800546a:	bf00      	nop

0800546c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005472:	4b32      	ldr	r3, [pc, #200]	; (800553c <xPortStartScheduler+0xd0>)
 8005474:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	22ff      	movs	r2, #255	; 0xff
 8005482:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005494:	b2da      	uxtb	r2, r3
 8005496:	4b2a      	ldr	r3, [pc, #168]	; (8005540 <xPortStartScheduler+0xd4>)
 8005498:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800549a:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <xPortStartScheduler+0xd8>)
 800549c:	2207      	movs	r2, #7
 800549e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054a0:	e009      	b.n	80054b6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80054a2:	4b28      	ldr	r3, [pc, #160]	; (8005544 <xPortStartScheduler+0xd8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	4a26      	ldr	r2, [pc, #152]	; (8005544 <xPortStartScheduler+0xd8>)
 80054aa:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	d0ef      	beq.n	80054a2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054c2:	4b20      	ldr	r3, [pc, #128]	; (8005544 <xPortStartScheduler+0xd8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f1c3 0307 	rsb	r3, r3, #7
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d00a      	beq.n	80054e4 <xPortStartScheduler+0x78>
        __asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	60bb      	str	r3, [r7, #8]
    }
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054e4:	4b17      	ldr	r3, [pc, #92]	; (8005544 <xPortStartScheduler+0xd8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	4a16      	ldr	r2, [pc, #88]	; (8005544 <xPortStartScheduler+0xd8>)
 80054ec:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054ee:	4b15      	ldr	r3, [pc, #84]	; (8005544 <xPortStartScheduler+0xd8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <xPortStartScheduler+0xd8>)
 80054f8:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <xPortStartScheduler+0xdc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a10      	ldr	r2, [pc, #64]	; (8005548 <xPortStartScheduler+0xdc>)
 8005508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800550c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800550e:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <xPortStartScheduler+0xdc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a0d      	ldr	r2, [pc, #52]	; (8005548 <xPortStartScheduler+0xdc>)
 8005514:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005518:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800551a:	f000 f981 	bl	8005820 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800551e:	4b0b      	ldr	r3, [pc, #44]	; (800554c <xPortStartScheduler+0xe0>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005524:	f7ff ff90 	bl	8005448 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005528:	f7fe fe46 	bl	80041b8 <vTaskSwitchContext>
    prvTaskExitError();
 800552c:	f7ff ff46 	bl	80053bc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	e000e400 	.word	0xe000e400
 8005540:	200001f4 	.word	0x200001f4
 8005544:	200001f8 	.word	0x200001f8
 8005548:	e000ed20 	.word	0xe000ed20
 800554c:	20000010 	.word	0x20000010

08005550 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
        __asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	607b      	str	r3, [r7, #4]
    }
 8005568:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800556a:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <vPortEnterCritical+0x58>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <vPortEnterCritical+0x58>)
 8005572:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <vPortEnterCritical+0x58>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d10f      	bne.n	800559c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <vPortEnterCritical+0x5c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <vPortEnterCritical+0x4c>
        __asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	603b      	str	r3, [r7, #0]
    }
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <vPortEnterCritical+0x4a>
    }
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20000010 	.word	0x20000010
 80055ac:	e000ed04 	.word	0xe000ed04

080055b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <vPortExitCritical+0x4c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <vPortExitCritical+0x24>
        __asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	607b      	str	r3, [r7, #4]
    }
 80055d0:	bf00      	nop
 80055d2:	e7fe      	b.n	80055d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80055d4:	4b09      	ldr	r3, [pc, #36]	; (80055fc <vPortExitCritical+0x4c>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3b01      	subs	r3, #1
 80055da:	4a08      	ldr	r2, [pc, #32]	; (80055fc <vPortExitCritical+0x4c>)
 80055dc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <vPortExitCritical+0x4c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <vPortExitCritical+0x42>
 80055e6:	2300      	movs	r3, #0
 80055e8:	603b      	str	r3, [r7, #0]
        __asm volatile
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f383 8811 	msr	BASEPRI, r3
    }
 80055f0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr
 80055fc:	20000010 	.word	0x20000010

08005600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005600:	f3ef 8009 	mrs	r0, PSP
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <pxCurrentTCBConst>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005610:	6010      	str	r0, [r2, #0]
 8005612:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800561a:	f380 8811 	msr	BASEPRI, r0
 800561e:	f7fe fdcb 	bl	80041b8 <vTaskSwitchContext>
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8811 	msr	BASEPRI, r0
 800562a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	6808      	ldr	r0, [r1, #0]
 8005632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005636:	f380 8809 	msr	PSP, r0
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	4770      	bx	lr

08005640 <pxCurrentTCBConst>:
 8005640:	200000a8 	.word	0x200000a8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop

08005648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
        __asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	607b      	str	r3, [r7, #4]
    }
 8005660:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005662:	f7fe fc91 	bl	8003f88 <xTaskIncrementTick>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <SysTick_Handler+0x40>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f383 8811 	msr	BASEPRI, r3
    }
 800567e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8005694:	4b5b      	ldr	r3, [pc, #364]	; (8005804 <vPortSuppressTicksAndSleep+0x178>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d902      	bls.n	80056a4 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800569e:	4b59      	ldr	r3, [pc, #356]	; (8005804 <vPortSuppressTicksAndSleep+0x178>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 80056a4:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 80056a6:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 80056aa:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80056ae:	f7fe ffe9 	bl	8004684 <eTaskConfirmSleepModeStatus>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 80056b8:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 80056ba:	e09e      	b.n	80057fa <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 80056bc:	4b52      	ldr	r3, [pc, #328]	; (8005808 <vPortSuppressTicksAndSleep+0x17c>)
 80056be:	2206      	movs	r2, #6
 80056c0:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80056c2:	4b52      	ldr	r3, [pc, #328]	; (800580c <vPortSuppressTicksAndSleep+0x180>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 80056ce:	4b50      	ldr	r3, [pc, #320]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	4a4d      	ldr	r2, [pc, #308]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	fb02 f303 	mul.w	r3, r2, r3
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4413      	add	r3, r2
 80056e4:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 80056e6:	4b4b      	ldr	r3, [pc, #300]	; (8005814 <vPortSuppressTicksAndSleep+0x188>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 80056f2:	4b48      	ldr	r3, [pc, #288]	; (8005814 <vPortSuppressTicksAndSleep+0x188>)
 80056f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056f8:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 80056fa:	4b45      	ldr	r3, [pc, #276]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 8005704:	4b44      	ldr	r3, [pc, #272]	; (8005818 <vPortSuppressTicksAndSleep+0x18c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	429a      	cmp	r2, r3
 800570c:	d904      	bls.n	8005718 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 800570e:	4b42      	ldr	r3, [pc, #264]	; (8005818 <vPortSuppressTicksAndSleep+0x18c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8005718:	4a40      	ldr	r2, [pc, #256]	; (800581c <vPortSuppressTicksAndSleep+0x190>)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800571e:	4b3b      	ldr	r3, [pc, #236]	; (800580c <vPortSuppressTicksAndSleep+0x180>)
 8005720:	2200      	movs	r2, #0
 8005722:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8005724:	4b38      	ldr	r3, [pc, #224]	; (8005808 <vPortSuppressTicksAndSleep+0x17c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a37      	ldr	r2, [pc, #220]	; (8005808 <vPortSuppressTicksAndSleep+0x17c>)
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d004      	beq.n	8005744 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 800573a:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 800573e:	bf30      	wfi
                __asm volatile ( "isb" );
 8005740:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 8005744:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 8005746:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800574a:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 800574e:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 8005750:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8005754:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <vPortSuppressTicksAndSleep+0x17c>)
 800575a:	2206      	movs	r2, #6
 800575c:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800575e:	4b2a      	ldr	r3, [pc, #168]	; (8005808 <vPortSuppressTicksAndSleep+0x17c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01d      	beq.n	80057a6 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800576a:	4b29      	ldr	r3, [pc, #164]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b27      	ldr	r3, [pc, #156]	; (800580c <vPortSuppressTicksAndSleep+0x180>)
 8005770:	6819      	ldr	r1, [r3, #0]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	1acb      	subs	r3, r1, r3
 8005776:	4413      	add	r3, r2
 8005778:	3b01      	subs	r3, #1
 800577a:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800577c:	4b26      	ldr	r3, [pc, #152]	; (8005818 <vPortSuppressTicksAndSleep+0x18c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	429a      	cmp	r2, r3
 8005784:	d904      	bls.n	8005790 <vPortSuppressTicksAndSleep+0x104>
 8005786:	4b22      	ldr	r3, [pc, #136]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	d903      	bls.n	8005798 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8005790:	4b1f      	ldr	r3, [pc, #124]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3b01      	subs	r3, #1
 8005796:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8005798:	4a20      	ldr	r2, [pc, #128]	; (800581c <vPortSuppressTicksAndSleep+0x190>)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	e01a      	b.n	80057dc <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80057a6:	4b19      	ldr	r3, [pc, #100]	; (800580c <vPortSuppressTicksAndSleep+0x180>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 80057ac:	4b18      	ldr	r3, [pc, #96]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	fb02 f203 	mul.w	r2, r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80057bc:	4b14      	ldr	r3, [pc, #80]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c6:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	3301      	adds	r3, #1
 80057cc:	4a10      	ldr	r2, [pc, #64]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	fb02 f203 	mul.w	r2, r2, r3
 80057d4:	4911      	ldr	r1, [pc, #68]	; (800581c <vPortSuppressTicksAndSleep+0x190>)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <vPortSuppressTicksAndSleep+0x180>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80057e2:	4b09      	ldr	r3, [pc, #36]	; (8005808 <vPortSuppressTicksAndSleep+0x17c>)
 80057e4:	2207      	movs	r2, #7
 80057e6:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <vPortSuppressTicksAndSleep+0x184>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a0b      	ldr	r2, [pc, #44]	; (800581c <vPortSuppressTicksAndSleep+0x190>)
 80057ee:	3b01      	subs	r3, #1
 80057f0:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 80057f2:	69b8      	ldr	r0, [r7, #24]
 80057f4:	f7fe fb6e 	bl	8003ed4 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 80057f8:	b662      	cpsie	i
    }
 80057fa:	bf00      	nop
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	200001ec 	.word	0x200001ec
 8005808:	e000e010 	.word	0xe000e010
 800580c:	e000e018 	.word	0xe000e018
 8005810:	200001e8 	.word	0x200001e8
 8005814:	e000ed04 	.word	0xe000ed04
 8005818:	200001f0 	.word	0x200001f0
 800581c:	e000e014 	.word	0xe000e014

08005820 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8005824:	4b14      	ldr	r3, [pc, #80]	; (8005878 <vPortSetupTimerInterrupt+0x58>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a14      	ldr	r2, [pc, #80]	; (800587c <vPortSetupTimerInterrupt+0x5c>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	099b      	lsrs	r3, r3, #6
 8005830:	4a13      	ldr	r2, [pc, #76]	; (8005880 <vPortSetupTimerInterrupt+0x60>)
 8005832:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8005834:	4b12      	ldr	r3, [pc, #72]	; (8005880 <vPortSetupTimerInterrupt+0x60>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800583c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005840:	4a10      	ldr	r2, [pc, #64]	; (8005884 <vPortSetupTimerInterrupt+0x64>)
 8005842:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8005844:	4b10      	ldr	r3, [pc, #64]	; (8005888 <vPortSetupTimerInterrupt+0x68>)
 8005846:	225e      	movs	r2, #94	; 0x5e
 8005848:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <vPortSetupTimerInterrupt+0x6c>)
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <vPortSetupTimerInterrupt+0x70>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005856:	4b08      	ldr	r3, [pc, #32]	; (8005878 <vPortSetupTimerInterrupt+0x58>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a08      	ldr	r2, [pc, #32]	; (800587c <vPortSetupTimerInterrupt+0x5c>)
 800585c:	fba2 2303 	umull	r2, r3, r2, r3
 8005860:	099b      	lsrs	r3, r3, #6
 8005862:	4a0c      	ldr	r2, [pc, #48]	; (8005894 <vPortSetupTimerInterrupt+0x74>)
 8005864:	3b01      	subs	r3, #1
 8005866:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005868:	4b08      	ldr	r3, [pc, #32]	; (800588c <vPortSetupTimerInterrupt+0x6c>)
 800586a:	2207      	movs	r2, #7
 800586c:	601a      	str	r2, [r3, #0]
}
 800586e:	bf00      	nop
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000000 	.word	0x20000000
 800587c:	10624dd3 	.word	0x10624dd3
 8005880:	200001e8 	.word	0x200001e8
 8005884:	200001ec 	.word	0x200001ec
 8005888:	200001f0 	.word	0x200001f0
 800588c:	e000e010 	.word	0xe000e010
 8005890:	e000e018 	.word	0xe000e018
 8005894:	e000e014 	.word	0xe000e014

08005898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800589e:	f3ef 8305 	mrs	r3, IPSR
 80058a2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d914      	bls.n	80058d4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058aa:	4a16      	ldr	r2, [pc, #88]	; (8005904 <vPortValidateInterruptPriority+0x6c>)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <vPortValidateInterruptPriority+0x70>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	7afa      	ldrb	r2, [r7, #11]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d20a      	bcs.n	80058d4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	607b      	str	r3, [r7, #4]
    }
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <vPortValidateInterruptPriority+0x74>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058dc:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <vPortValidateInterruptPriority+0x78>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d90a      	bls.n	80058fa <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	603b      	str	r3, [r7, #0]
    }
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <vPortValidateInterruptPriority+0x60>
    }
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	e000e3f0 	.word	0xe000e3f0
 8005908:	200001f4 	.word	0x200001f4
 800590c:	e000ed0c 	.word	0xe000ed0c
 8005910:	200001f8 	.word	0x200001f8

08005914 <__errno>:
 8005914:	4b01      	ldr	r3, [pc, #4]	; (800591c <__errno+0x8>)
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000014 	.word	0x20000014

08005920 <__libc_init_array>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	2600      	movs	r6, #0
 8005924:	4d0c      	ldr	r5, [pc, #48]	; (8005958 <__libc_init_array+0x38>)
 8005926:	4c0d      	ldr	r4, [pc, #52]	; (800595c <__libc_init_array+0x3c>)
 8005928:	1b64      	subs	r4, r4, r5
 800592a:	10a4      	asrs	r4, r4, #2
 800592c:	42a6      	cmp	r6, r4
 800592e:	d109      	bne.n	8005944 <__libc_init_array+0x24>
 8005930:	f000 f904 	bl	8005b3c <_init>
 8005934:	2600      	movs	r6, #0
 8005936:	4d0a      	ldr	r5, [pc, #40]	; (8005960 <__libc_init_array+0x40>)
 8005938:	4c0a      	ldr	r4, [pc, #40]	; (8005964 <__libc_init_array+0x44>)
 800593a:	1b64      	subs	r4, r4, r5
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	42a6      	cmp	r6, r4
 8005940:	d105      	bne.n	800594e <__libc_init_array+0x2e>
 8005942:	bd70      	pop	{r4, r5, r6, pc}
 8005944:	f855 3b04 	ldr.w	r3, [r5], #4
 8005948:	4798      	blx	r3
 800594a:	3601      	adds	r6, #1
 800594c:	e7ee      	b.n	800592c <__libc_init_array+0xc>
 800594e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005952:	4798      	blx	r3
 8005954:	3601      	adds	r6, #1
 8005956:	e7f2      	b.n	800593e <__libc_init_array+0x1e>
 8005958:	08005bbc 	.word	0x08005bbc
 800595c:	08005bbc 	.word	0x08005bbc
 8005960:	08005bbc 	.word	0x08005bbc
 8005964:	08005bc0 	.word	0x08005bc0

08005968 <malloc>:
 8005968:	4b02      	ldr	r3, [pc, #8]	; (8005974 <malloc+0xc>)
 800596a:	4601      	mov	r1, r0
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	f000 b86d 	b.w	8005a4c <_malloc_r>
 8005972:	bf00      	nop
 8005974:	20000014 	.word	0x20000014

08005978 <free>:
 8005978:	4b02      	ldr	r3, [pc, #8]	; (8005984 <free+0xc>)
 800597a:	4601      	mov	r1, r0
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	f000 b819 	b.w	80059b4 <_free_r>
 8005982:	bf00      	nop
 8005984:	20000014 	.word	0x20000014

08005988 <memcpy>:
 8005988:	440a      	add	r2, r1
 800598a:	4291      	cmp	r1, r2
 800598c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005990:	d100      	bne.n	8005994 <memcpy+0xc>
 8005992:	4770      	bx	lr
 8005994:	b510      	push	{r4, lr}
 8005996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800599a:	4291      	cmp	r1, r2
 800599c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a0:	d1f9      	bne.n	8005996 <memcpy+0xe>
 80059a2:	bd10      	pop	{r4, pc}

080059a4 <memset>:
 80059a4:	4603      	mov	r3, r0
 80059a6:	4402      	add	r2, r0
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d100      	bne.n	80059ae <memset+0xa>
 80059ac:	4770      	bx	lr
 80059ae:	f803 1b01 	strb.w	r1, [r3], #1
 80059b2:	e7f9      	b.n	80059a8 <memset+0x4>

080059b4 <_free_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4605      	mov	r5, r0
 80059b8:	2900      	cmp	r1, #0
 80059ba:	d043      	beq.n	8005a44 <_free_r+0x90>
 80059bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c0:	1f0c      	subs	r4, r1, #4
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bfb8      	it	lt
 80059c6:	18e4      	addlt	r4, r4, r3
 80059c8:	f000 f8aa 	bl	8005b20 <__malloc_lock>
 80059cc:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <_free_r+0x94>)
 80059ce:	6813      	ldr	r3, [r2, #0]
 80059d0:	4610      	mov	r0, r2
 80059d2:	b933      	cbnz	r3, 80059e2 <_free_r+0x2e>
 80059d4:	6063      	str	r3, [r4, #4]
 80059d6:	6014      	str	r4, [r2, #0]
 80059d8:	4628      	mov	r0, r5
 80059da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059de:	f000 b8a5 	b.w	8005b2c <__malloc_unlock>
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	d90a      	bls.n	80059fc <_free_r+0x48>
 80059e6:	6821      	ldr	r1, [r4, #0]
 80059e8:	1862      	adds	r2, r4, r1
 80059ea:	4293      	cmp	r3, r2
 80059ec:	bf01      	itttt	eq
 80059ee:	681a      	ldreq	r2, [r3, #0]
 80059f0:	685b      	ldreq	r3, [r3, #4]
 80059f2:	1852      	addeq	r2, r2, r1
 80059f4:	6022      	streq	r2, [r4, #0]
 80059f6:	6063      	str	r3, [r4, #4]
 80059f8:	6004      	str	r4, [r0, #0]
 80059fa:	e7ed      	b.n	80059d8 <_free_r+0x24>
 80059fc:	461a      	mov	r2, r3
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	b10b      	cbz	r3, 8005a06 <_free_r+0x52>
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	d9fa      	bls.n	80059fc <_free_r+0x48>
 8005a06:	6811      	ldr	r1, [r2, #0]
 8005a08:	1850      	adds	r0, r2, r1
 8005a0a:	42a0      	cmp	r0, r4
 8005a0c:	d10b      	bne.n	8005a26 <_free_r+0x72>
 8005a0e:	6820      	ldr	r0, [r4, #0]
 8005a10:	4401      	add	r1, r0
 8005a12:	1850      	adds	r0, r2, r1
 8005a14:	4283      	cmp	r3, r0
 8005a16:	6011      	str	r1, [r2, #0]
 8005a18:	d1de      	bne.n	80059d8 <_free_r+0x24>
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4401      	add	r1, r0
 8005a20:	6011      	str	r1, [r2, #0]
 8005a22:	6053      	str	r3, [r2, #4]
 8005a24:	e7d8      	b.n	80059d8 <_free_r+0x24>
 8005a26:	d902      	bls.n	8005a2e <_free_r+0x7a>
 8005a28:	230c      	movs	r3, #12
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	e7d4      	b.n	80059d8 <_free_r+0x24>
 8005a2e:	6820      	ldr	r0, [r4, #0]
 8005a30:	1821      	adds	r1, r4, r0
 8005a32:	428b      	cmp	r3, r1
 8005a34:	bf01      	itttt	eq
 8005a36:	6819      	ldreq	r1, [r3, #0]
 8005a38:	685b      	ldreq	r3, [r3, #4]
 8005a3a:	1809      	addeq	r1, r1, r0
 8005a3c:	6021      	streq	r1, [r4, #0]
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	6054      	str	r4, [r2, #4]
 8005a42:	e7c9      	b.n	80059d8 <_free_r+0x24>
 8005a44:	bd38      	pop	{r3, r4, r5, pc}
 8005a46:	bf00      	nop
 8005a48:	200001fc 	.word	0x200001fc

08005a4c <_malloc_r>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	1ccd      	adds	r5, r1, #3
 8005a50:	f025 0503 	bic.w	r5, r5, #3
 8005a54:	3508      	adds	r5, #8
 8005a56:	2d0c      	cmp	r5, #12
 8005a58:	bf38      	it	cc
 8005a5a:	250c      	movcc	r5, #12
 8005a5c:	2d00      	cmp	r5, #0
 8005a5e:	4606      	mov	r6, r0
 8005a60:	db01      	blt.n	8005a66 <_malloc_r+0x1a>
 8005a62:	42a9      	cmp	r1, r5
 8005a64:	d903      	bls.n	8005a6e <_malloc_r+0x22>
 8005a66:	230c      	movs	r3, #12
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a6e:	f000 f857 	bl	8005b20 <__malloc_lock>
 8005a72:	4921      	ldr	r1, [pc, #132]	; (8005af8 <_malloc_r+0xac>)
 8005a74:	680a      	ldr	r2, [r1, #0]
 8005a76:	4614      	mov	r4, r2
 8005a78:	b99c      	cbnz	r4, 8005aa2 <_malloc_r+0x56>
 8005a7a:	4f20      	ldr	r7, [pc, #128]	; (8005afc <_malloc_r+0xb0>)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	b923      	cbnz	r3, 8005a8a <_malloc_r+0x3e>
 8005a80:	4621      	mov	r1, r4
 8005a82:	4630      	mov	r0, r6
 8005a84:	f000 f83c 	bl	8005b00 <_sbrk_r>
 8005a88:	6038      	str	r0, [r7, #0]
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	f000 f837 	bl	8005b00 <_sbrk_r>
 8005a92:	1c43      	adds	r3, r0, #1
 8005a94:	d123      	bne.n	8005ade <_malloc_r+0x92>
 8005a96:	230c      	movs	r3, #12
 8005a98:	4630      	mov	r0, r6
 8005a9a:	6033      	str	r3, [r6, #0]
 8005a9c:	f000 f846 	bl	8005b2c <__malloc_unlock>
 8005aa0:	e7e3      	b.n	8005a6a <_malloc_r+0x1e>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	1b5b      	subs	r3, r3, r5
 8005aa6:	d417      	bmi.n	8005ad8 <_malloc_r+0x8c>
 8005aa8:	2b0b      	cmp	r3, #11
 8005aaa:	d903      	bls.n	8005ab4 <_malloc_r+0x68>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	441c      	add	r4, r3
 8005ab0:	6025      	str	r5, [r4, #0]
 8005ab2:	e004      	b.n	8005abe <_malloc_r+0x72>
 8005ab4:	6863      	ldr	r3, [r4, #4]
 8005ab6:	42a2      	cmp	r2, r4
 8005ab8:	bf0c      	ite	eq
 8005aba:	600b      	streq	r3, [r1, #0]
 8005abc:	6053      	strne	r3, [r2, #4]
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f000 f834 	bl	8005b2c <__malloc_unlock>
 8005ac4:	f104 000b 	add.w	r0, r4, #11
 8005ac8:	1d23      	adds	r3, r4, #4
 8005aca:	f020 0007 	bic.w	r0, r0, #7
 8005ace:	1ac2      	subs	r2, r0, r3
 8005ad0:	d0cc      	beq.n	8005a6c <_malloc_r+0x20>
 8005ad2:	1a1b      	subs	r3, r3, r0
 8005ad4:	50a3      	str	r3, [r4, r2]
 8005ad6:	e7c9      	b.n	8005a6c <_malloc_r+0x20>
 8005ad8:	4622      	mov	r2, r4
 8005ada:	6864      	ldr	r4, [r4, #4]
 8005adc:	e7cc      	b.n	8005a78 <_malloc_r+0x2c>
 8005ade:	1cc4      	adds	r4, r0, #3
 8005ae0:	f024 0403 	bic.w	r4, r4, #3
 8005ae4:	42a0      	cmp	r0, r4
 8005ae6:	d0e3      	beq.n	8005ab0 <_malloc_r+0x64>
 8005ae8:	1a21      	subs	r1, r4, r0
 8005aea:	4630      	mov	r0, r6
 8005aec:	f000 f808 	bl	8005b00 <_sbrk_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d1dd      	bne.n	8005ab0 <_malloc_r+0x64>
 8005af4:	e7cf      	b.n	8005a96 <_malloc_r+0x4a>
 8005af6:	bf00      	nop
 8005af8:	200001fc 	.word	0x200001fc
 8005afc:	20000200 	.word	0x20000200

08005b00 <_sbrk_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	2300      	movs	r3, #0
 8005b04:	4d05      	ldr	r5, [pc, #20]	; (8005b1c <_sbrk_r+0x1c>)
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	f7fa febe 	bl	800088c <_sbrk>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_sbrk_r+0x1a>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_sbrk_r+0x1a>
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	20000310 	.word	0x20000310

08005b20 <__malloc_lock>:
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <__malloc_lock+0x8>)
 8005b22:	f000 b809 	b.w	8005b38 <__retarget_lock_acquire_recursive>
 8005b26:	bf00      	nop
 8005b28:	20000318 	.word	0x20000318

08005b2c <__malloc_unlock>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	; (8005b34 <__malloc_unlock+0x8>)
 8005b2e:	f000 b804 	b.w	8005b3a <__retarget_lock_release_recursive>
 8005b32:	bf00      	nop
 8005b34:	20000318 	.word	0x20000318

08005b38 <__retarget_lock_acquire_recursive>:
 8005b38:	4770      	bx	lr

08005b3a <__retarget_lock_release_recursive>:
 8005b3a:	4770      	bx	lr

08005b3c <_init>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr

08005b48 <_fini>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr
