
interrup-RTOS-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b64  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ce0  08006ce0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006ce0  08006ce0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ce0  08006ce0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce4  08006ce4  00016ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000080  08006d68  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08006d68  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001456b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003093  00000000  00000000  00034614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  000376a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00038798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f9f  00000000  00000000  00039720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012852  00000000  00000000  000536bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095f7a  00000000  00000000  00065f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fbe8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004850  00000000  00000000  000fbee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c5c 	.word	0x08006c5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08006c5c 	.word	0x08006c5c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <Pantalla>:
#define BTN_USER_DOWN_INF  BTN_USER_DOWN - 60
#define BTN_USER_DOWN_SUP  BTN_USER_DOWN + 60
#define BTN_USER_OK 2100      //presiono dos botones valor ADC aprox: 1981.


static void Pantalla(void *pvParameters){
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	uint16_t display_value;
	unsigned portBASE_TYPE uxPriority;
	uxPriority = NULL;
 8000934:	2300      	movs	r3, #0
 8000936:	60fb      	str	r3, [r7, #12]
	while (1){
		//Consulta la prioridad a la que esta tarea está en ejecución.
		uxPriority = uxTaskPriorityGet( NULL );
 8000938:	2000      	movs	r0, #0
 800093a:	f004 f8d5 	bl	8004ae8 <uxTaskPriorityGet>
 800093e:	60f8      	str	r0, [r7, #12]
		if(uxPriority==3)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d109      	bne.n	800095a <Pantalla+0x2e>
		xQueuePeek(queue_CP,&display_value,portMAX_DELAY);//recibe valor que esta configurando tarea Config. Usa Peek para no eliminar y terminar en bloqueo.
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <Pantalla+0x58>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f107 010a 	add.w	r1, r7, #10
 800094e:	f04f 32ff 	mov.w	r2, #4294967295
 8000952:	4618      	mov	r0, r3
 8000954:	f003 fc9c 	bl	8004290 <xQueuePeek>
 8000958:	e00b      	b.n	8000972 <Pantalla+0x46>
		else if(uxPriority==2){
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	2b02      	cmp	r3, #2
 800095e:	d108      	bne.n	8000972 <Pantalla+0x46>
		xQueueReceive(queue_PA,&display_value,portMAX_DELAY);//recibe valor medido por sensor.
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <Pantalla+0x5c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f107 010a 	add.w	r1, r7, #10
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	4618      	mov	r0, r3
 800096e:	f003 fab1 	bl	8003ed4 <xQueueReceive>
		}
		tm1637_ShowNumber(display_value);
 8000972:	897b      	ldrh	r3, [r7, #10]
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fe2d 	bl	80015d4 <tm1637_ShowNumber>
		/*
		 * La función HAL-ADC-Start-IT() es responsable de permitir la interrupción y inicio de la conversión de ADC de los canales regulares.
		 * Toma en un solo parámetro que es el puntero de la estructura ADC-HandleTypeDef que contiene los parámetros de configuración para el
		 * ADC especificado. En nuestro caso es "&hadc1.
		 */
		HAL_ADC_Start_IT(&hadc1);
 800097a:	4804      	ldr	r0, [pc, #16]	; (800098c <Pantalla+0x60>)
 800097c:	f001 f872 	bl	8001a64 <HAL_ADC_Start_IT>
	while (1){
 8000980:	e7da      	b.n	8000938 <Pantalla+0xc>
 8000982:	bf00      	nop
 8000984:	2000024c 	.word	0x2000024c
 8000988:	20000214 	.word	0x20000214
 800098c:	20000218 	.word	0x20000218

08000990 <Medir>:
	}
}


static void Medir(void *pvParameters){
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b087      	sub	sp, #28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	uint32_t distancia = 0, pMillis, val1 = 0, val2 = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
	while(1){
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2108      	movs	r1, #8
 80009a8:	4837      	ldr	r0, [pc, #220]	; (8000a88 <Medir+0xf8>)
 80009aa:	f001 fdfc 	bl	80025a6 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim2, 0);
 80009ae:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <Medir+0xfc>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 80009b6:	bf00      	nop
 80009b8:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <Medir+0xfc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009be:	2b09      	cmp	r3, #9
 80009c0:	d9fa      	bls.n	80009b8 <Medir+0x28>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2108      	movs	r1, #8
 80009c6:	4830      	ldr	r0, [pc, #192]	; (8000a88 <Medir+0xf8>)
 80009c8:	f001 fded 	bl	80025a6 <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick();
 80009cc:	f000 ff68 	bl	80018a0 <HAL_GetTick>
 80009d0:	60f8      	str	r0, [r7, #12]
		while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 80009d2:	bf00      	nop
 80009d4:	2110      	movs	r1, #16
 80009d6:	482c      	ldr	r0, [pc, #176]	; (8000a88 <Medir+0xf8>)
 80009d8:	f001 fdce 	bl	8002578 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d107      	bne.n	80009f2 <Medir+0x62>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f103 040a 	add.w	r4, r3, #10
 80009e8:	f000 ff5a 	bl	80018a0 <HAL_GetTick>
 80009ec:	4603      	mov	r3, r0
 80009ee:	429c      	cmp	r4, r3
 80009f0:	d8f0      	bhi.n	80009d4 <Medir+0x44>
		val1 = __HAL_TIM_GET_COUNTER (&htim2);
 80009f2:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <Medir+0xfc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f8:	617b      	str	r3, [r7, #20]

		pMillis = HAL_GetTick();
 80009fa:	f000 ff51 	bl	80018a0 <HAL_GetTick>
 80009fe:	60f8      	str	r0, [r7, #12]
		while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 8000a00:	bf00      	nop
 8000a02:	2110      	movs	r1, #16
 8000a04:	4820      	ldr	r0, [pc, #128]	; (8000a88 <Medir+0xf8>)
 8000a06:	f001 fdb7 	bl	8002578 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d007      	beq.n	8000a20 <Medir+0x90>
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000a16:	f000 ff43 	bl	80018a0 <HAL_GetTick>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	429c      	cmp	r4, r3
 8000a1e:	d8f0      	bhi.n	8000a02 <Medir+0x72>
		val2 = __HAL_TIM_GET_COUNTER (&htim2);
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <Medir+0xfc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	613b      	str	r3, [r7, #16]
		distancia = (val2-val1)* 0.036/2;
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fcd0 	bl	80003d4 <__aeabi_ui2d>
 8000a34:	a312      	add	r3, pc, #72	; (adr r3, 8000a80 <Medir+0xf0>)
 8000a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a3a:	f7ff fd45 	bl	80004c8 <__aeabi_dmul>
 8000a3e:	4602      	mov	r2, r0
 8000a40:	460b      	mov	r3, r1
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	f04f 0200 	mov.w	r2, #0
 8000a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a4e:	f7ff fe65 	bl	800071c <__aeabi_ddiv>
 8000a52:	4602      	mov	r2, r0
 8000a54:	460b      	mov	r3, r1
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f7ff ff47 	bl	80008ec <__aeabi_d2uiz>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	60bb      	str	r3, [r7, #8]
		//xQueueSend(queue_AM, &distancia, portMAX_DELAY);
		xQueueSend(queue_PA, &distancia, portMAX_DELAY);
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <Medir+0x100>)
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	f107 0108 	add.w	r1, r7, #8
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	f002 ffdc 	bl	8003a2c <xQueueGenericSend>
		vTaskDelay(60/portTICK_PERIOD_MS);
 8000a74:	203c      	movs	r0, #60	; 0x3c
 8000a76:	f004 f803 	bl	8004a80 <vTaskDelay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000a7a:	e793      	b.n	80009a4 <Medir+0x14>
 8000a7c:	f3af 8000 	nop.w
 8000a80:	8d4fdf3b 	.word	0x8d4fdf3b
 8000a84:	3fa26e97 	.word	0x3fa26e97
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	20000254 	.word	0x20000254
 8000a90:	20000214 	.word	0x20000214

08000a94 <Config>:
	}
}

static void Config(void *pvParameters){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	//unsigned portBASE_TYPE uxPriority;
	//uxPriority = uxTaskPriorityGet( NULL );
	uint16_t ADC_value, display_value=0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	813b      	strh	r3, [r7, #8]
	char init_estate = 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
	char Param_Config = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	73bb      	strb	r3, [r7, #14]
	char E_Confir = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	737b      	strb	r3, [r7, #13]
	//char max = 70, min = 20; //xq pinto asi.... Las puse globales solo para verlas... van locales.
	while (1){

		xSemaphoreTake(ADC_semph, portMAX_DELAY);
 8000aac:	4b6b      	ldr	r3, [pc, #428]	; (8000c5c <Config+0x1c8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 faed 	bl	8004094 <xQueueSemaphoreTake>
		if (init_estate){                 //si init_estate es 1, significa que esta iniciando el sistema y debe verificar la cola.
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d010      	beq.n	8000ae2 <Config+0x4e>
			//aca deberia ir una funcion que verifique mejor los valores.
			if(!cola_max && !cola_max){   //solo si lee la cola y los valores son correctos
 8000ac0:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <Config+0x1cc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10c      	bne.n	8000ae2 <Config+0x4e>
 8000ac8:	4b65      	ldr	r3, [pc, #404]	; (8000c60 <Config+0x1cc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d108      	bne.n	8000ae2 <Config+0x4e>
				init_estate = 0;          //si hay valores correctos ya no es necesaio verificar cola.
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	73fb      	strb	r3, [r7, #15]
				//sube valores a cola CM. Es una especie de confirmacion de que estan bien.
				//sube prioridad de memoria.
				//vuelve a tomar el semaforo y asi se bloquea. CREO....
				xSemaphoreTake(ADC_semph, portMAX_DELAY);
 8000ad4:	4b61      	ldr	r3, [pc, #388]	; (8000c5c <Config+0x1c8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 fad9 	bl	8004094 <xQueueSemaphoreTake>
			}
		}
		//Si llego a esta etapa significa que debe configurar valores, para eso fuerza interrupcion ADC para actualizar cola.
		HAL_ADC_Start_IT(&hadc1);
 8000ae2:	4860      	ldr	r0, [pc, #384]	; (8000c64 <Config+0x1d0>)
 8000ae4:	f000 ffbe 	bl	8001a64 <HAL_ADC_Start_IT>
		xQueueReceive(queue_ADC,&ADC_value,portMAX_DELAY);
 8000ae8:	4b5f      	ldr	r3, [pc, #380]	; (8000c68 <Config+0x1d4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f107 010a 	add.w	r1, r7, #10
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 f9ed 	bl	8003ed4 <xQueueReceive>

		//la tarea pantalla debe poder leer su propia prioridad para saber si lee la cola CP(config-pantalla) o cola PA(Pantalla-Alarma)
		vTaskPrioritySet( xTarea_Pantalla_Handle, 3); //si aun no hay datos en la cola CP pantalla si bloquea hasat que primero aparezca valor de max. CREO.
 8000afa:	4b5c      	ldr	r3, [pc, #368]	; (8000c6c <Config+0x1d8>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2103      	movs	r1, #3
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 f80b 	bl	8004b1c <vTaskPrioritySet>


		//es muy probable que los if que tienen en su condicion un Param_Config se reemplacen por Switch CASE.
		if(Param_Config == 2){
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d139      	bne.n	8000b80 <Config+0xec>
			if ((ADC_value > BTN_USER_UP_INF) && (ADC_value < BTN_USER_UP_SUP)){  //condicion que responde a boton UP.
 8000b0c:	897b      	ldrh	r3, [r7, #10]
 8000b0e:	f640 2282 	movw	r2, #2690	; 0xa82
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d90d      	bls.n	8000b32 <Config+0x9e>
 8000b16:	897b      	ldrh	r3, [r7, #10]
 8000b18:	f640 22f9 	movw	r2, #2809	; 0xaf9
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d808      	bhi.n	8000b32 <Config+0x9e>
				max++;
 8000b20:	4b53      	ldr	r3, [pc, #332]	; (8000c70 <Config+0x1dc>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b51      	ldr	r3, [pc, #324]	; (8000c70 <Config+0x1dc>)
 8000b2a:	801a      	strh	r2, [r3, #0]
				E_Confir = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	737b      	strb	r3, [r7, #13]
 8000b30:	e011      	b.n	8000b56 <Config+0xc2>
			}
			else if ((ADC_value > BTN_USER_DOWN_INF) && (ADC_value < BTN_USER_DOWN_SUP)){  //condicion que responde a boton DOWN.
 8000b32:	897b      	ldrh	r3, [r7, #10]
 8000b34:	f640 12ce 	movw	r2, #2510	; 0x9ce
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d90c      	bls.n	8000b56 <Config+0xc2>
 8000b3c:	897b      	ldrh	r3, [r7, #10]
 8000b3e:	f640 2245 	movw	r2, #2629	; 0xa45
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d807      	bhi.n	8000b56 <Config+0xc2>
				max--;
 8000b46:	4b4a      	ldr	r3, [pc, #296]	; (8000c70 <Config+0x1dc>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4b48      	ldr	r3, [pc, #288]	; (8000c70 <Config+0x1dc>)
 8000b50:	801a      	strh	r2, [r3, #0]
				E_Confir = 1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	737b      	strb	r3, [r7, #13]
			}
			//aca se manda el valor de max a la cola CP para verlo en el display.
			xQueueReceive(queue_CP,&display_value,portMAX_DELAY);  //lo usa para eliminar el dato.
 8000b56:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <Config+0x1e0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f107 0108 	add.w	r1, r7, #8
 8000b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 f9b6 	bl	8003ed4 <xQueueReceive>
			xQueueSend(queue_CP,&max,portMAX_DELAY); //CP              //escribe el nuevo dato.
 8000b68:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <Config+0x1e0>)
 8000b6a:	6818      	ldr	r0, [r3, #0]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b72:	493f      	ldr	r1, [pc, #252]	; (8000c70 <Config+0x1dc>)
 8000b74:	f002 ff5a 	bl	8003a2c <xQueueGenericSend>
			vTaskDelay(50/portTICK_PERIOD_MS); //demora para que no incremente tan rapido, sale de la tarea y retora.
 8000b78:	2032      	movs	r0, #50	; 0x32
 8000b7a:	f003 ff81 	bl	8004a80 <vTaskDelay>
 8000b7e:	e03b      	b.n	8000bf8 <Config+0x164>
		}

		else if(Param_Config == 1){
 8000b80:	7bbb      	ldrb	r3, [r7, #14]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d138      	bne.n	8000bf8 <Config+0x164>
			if ((ADC_value > BTN_USER_UP_INF) && (ADC_value < BTN_USER_UP_SUP)){  //condicion que responde a boton UP.
 8000b86:	897b      	ldrh	r3, [r7, #10]
 8000b88:	f640 2282 	movw	r2, #2690	; 0xa82
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d90d      	bls.n	8000bac <Config+0x118>
 8000b90:	897b      	ldrh	r3, [r7, #10]
 8000b92:	f640 22f9 	movw	r2, #2809	; 0xaf9
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d808      	bhi.n	8000bac <Config+0x118>
				min++;
 8000b9a:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <Config+0x1e4>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <Config+0x1e4>)
 8000ba4:	801a      	strh	r2, [r3, #0]
				E_Confir = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	737b      	strb	r3, [r7, #13]
 8000baa:	e011      	b.n	8000bd0 <Config+0x13c>
			}
			else if ((ADC_value > BTN_USER_DOWN_INF) && (ADC_value < BTN_USER_DOWN_SUP)){  //condicion que responde a boton DOWN.
 8000bac:	897b      	ldrh	r3, [r7, #10]
 8000bae:	f640 12ce 	movw	r2, #2510	; 0x9ce
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d90c      	bls.n	8000bd0 <Config+0x13c>
 8000bb6:	897b      	ldrh	r3, [r7, #10]
 8000bb8:	f640 2245 	movw	r2, #2629	; 0xa45
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d807      	bhi.n	8000bd0 <Config+0x13c>
				min--;
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <Config+0x1e4>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <Config+0x1e4>)
 8000bca:	801a      	strh	r2, [r3, #0]
				E_Confir = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	737b      	strb	r3, [r7, #13]
			}
			//aca se manda el valor de max a la cola CP para verlo en el display.
			xQueueReceive(queue_CP,&display_value,portMAX_DELAY);
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <Config+0x1e0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f107 0108 	add.w	r1, r7, #8
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 f979 	bl	8003ed4 <xQueueReceive>
			xQueueSend(queue_CP,&min,portMAX_DELAY);
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <Config+0x1e0>)
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	2300      	movs	r3, #0
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	4922      	ldr	r1, [pc, #136]	; (8000c78 <Config+0x1e4>)
 8000bee:	f002 ff1d 	bl	8003a2c <xQueueGenericSend>
			vTaskDelay(50/portTICK_PERIOD_MS); //demora para que no incremente tan rapido, sale de la tarea y retora.
 8000bf2:	2032      	movs	r0, #50	; 0x32
 8000bf4:	f003 ff44 	bl	8004a80 <vTaskDelay>
		}

		//este es el if de confirmacion de parametro:
		if((BTN_USER_OK > ADC_value)&&(E_Confir)){ //esto significa que se presionaron los dos botones y que prebiamente se configiro un parametro.
 8000bf8:	897b      	ldrh	r3, [r7, #10]
 8000bfa:	f640 0233 	movw	r2, #2099	; 0x833
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d80a      	bhi.n	8000c18 <Config+0x184>
 8000c02:	7b7b      	ldrb	r3, [r7, #13]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d007      	beq.n	8000c18 <Config+0x184>
			Param_Config--;
 8000c08:	7bbb      	ldrb	r3, [r7, #14]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	73bb      	strb	r3, [r7, #14]
			E_Confir=0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	737b      	strb	r3, [r7, #13]
			vTaskDelay(250/portTICK_PERIOD_MS); //demora para que no incremente tan rapido.
 8000c12:	20fa      	movs	r0, #250	; 0xfa
 8000c14:	f003 ff34 	bl	8004a80 <vTaskDelay>
		}


		if(Param_Config>0) xSemaphoreGive(ADC_semph);  //mientras no se hayan configurado maximo y minimo sigue dando semaforo.
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d007      	beq.n	8000c2e <Config+0x19a>
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <Config+0x1c8>)
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	2300      	movs	r3, #0
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	f002 ff00 	bl	8003a2c <xQueueGenericSend>
 8000c2c:	e73e      	b.n	8000aac <Config+0x18>
		else{											//si ya configuro ambos parametros debe finalizar.
			Param_Config = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	73bb      	strb	r3, [r7, #14]
			vTaskPrioritySet( xTarea_Medir_Handle, 2); //si aun no hay datos en la cola CP pantalla si bloquea hasat que primero aparezca valor de max
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <Config+0x1e8>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2102      	movs	r1, #2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 ff6f 	bl	8004b1c <vTaskPrioritySet>
			vTaskPrioritySet( xTarea_Pantalla_Handle, 2);
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <Config+0x1d8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2102      	movs	r1, #2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 ff69 	bl	8004b1c <vTaskPrioritySet>
			xSemaphoreTake(ADC_semph, portMAX_DELAY);
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <Config+0x1c8>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fa1e 	bl	8004094 <xQueueSemaphoreTake>
		xSemaphoreTake(ADC_semph, portMAX_DELAY);
 8000c58:	e728      	b.n	8000aac <Config+0x18>
 8000c5a:	bf00      	nop
 8000c5c:	20000250 	.word	0x20000250
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000218 	.word	0x20000218
 8000c68:	20000210 	.word	0x20000210
 8000c6c:	200000a0 	.word	0x200000a0
 8000c70:	20000004 	.word	0x20000004
 8000c74:	2000024c 	.word	0x2000024c
 8000c78:	20000006 	.word	0x20000006
 8000c7c:	200000a4 	.word	0x200000a4

08000c80 <HAL_ADC_ConvCpltCallback>:

	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	static portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	static uint16_t adc_value = 0;

	// Obtains the conversion result
	adc_value = HAL_ADC_GetValue(hadc);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 ffa1 	bl	8001bd0 <HAL_ADC_GetValue>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_ADC_ConvCpltCallback+0x5c>)
 8000c94:	801a      	strh	r2, [r3, #0]

	// Sends the value to the queue
	xQueueOverwriteFromISR(queue_ADC, &adc_value, &xHigherPriorityTaskWoken); //en la cinfig de interrup: ADC1 y ADC2 global poner una prioridad de 5, sino queda trabado ahí.
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_ADC_ConvCpltCallback+0x60>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000c9e:	490f      	ldr	r1, [pc, #60]	; (8000cdc <HAL_ADC_ConvCpltCallback+0x5c>)
 8000ca0:	f002 ffc2 	bl	8003c28 <xQueueGenericSendFromISR>

	//En caso de que se presionen dos botones debe entregar semaforo para config.
	if(adc_value<BTN_USER_OK)
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_ADC_ConvCpltCallback+0x5c>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	f640 0233 	movw	r2, #2099	; 0x833
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d805      	bhi.n	8000cbc <HAL_ADC_ConvCpltCallback+0x3c>
		xSemaphoreGiveFromISR(ADC_semph, &xHigherPriorityTaskWoken);
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_ADC_ConvCpltCallback+0x68>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	490b      	ldr	r1, [pc, #44]	; (8000ce4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 f868 	bl	8003d8c <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_ADC_ConvCpltCallback+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d007      	beq.n	8000cd4 <HAL_ADC_ConvCpltCallback+0x54>
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_ADC_ConvCpltCallback+0x6c>)
 8000cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	f3bf 8f4f 	dsb	sy
 8000cd0:	f3bf 8f6f 	isb	sy

	//dos botones: max: 1981
	//boton up: 2750
	//boton min: 2574
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000a8 	.word	0x200000a8
 8000ce0:	20000210 	.word	0x20000210
 8000ce4:	200000ac 	.word	0x200000ac
 8000ce8:	20000250 	.word	0x20000250
 8000cec:	e000ed04 	.word	0xe000ed04

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf6:	f000 fdab 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cfa:	f000 f8a1 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfe:	f000 f985 	bl	800100c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d02:	f000 f8f9 	bl	8000ef8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000d06:	f000 f935 	bl	8000f74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d10:	483b      	ldr	r0, [pc, #236]	; (8000e00 <main+0x110>)
 8000d12:	f001 fc48 	bl	80025a6 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start(&htim2);
 8000d16:	483b      	ldr	r0, [pc, #236]	; (8000e04 <main+0x114>)
 8000d18:	f002 f98e 	bl	8003038 <HAL_TIM_Base_Start>

  //Creacion de Colas:
  queue_ADC = xQueueCreate(1,sizeof(uint16_t));
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2102      	movs	r1, #2
 8000d20:	2001      	movs	r0, #1
 8000d22:	f002 fe11 	bl	8003948 <xQueueGenericCreate>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4a37      	ldr	r2, [pc, #220]	; (8000e08 <main+0x118>)
 8000d2a:	6013      	str	r3, [r2, #0]
  queue_PA = xQueueCreate(1,sizeof(uint16_t));
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2102      	movs	r1, #2
 8000d30:	2001      	movs	r0, #1
 8000d32:	f002 fe09 	bl	8003948 <xQueueGenericCreate>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4a34      	ldr	r2, [pc, #208]	; (8000e0c <main+0x11c>)
 8000d3a:	6013      	str	r3, [r2, #0]
  queue_CP = xQueueCreate(1,sizeof(uint16_t));
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2102      	movs	r1, #2
 8000d40:	2001      	movs	r0, #1
 8000d42:	f002 fe01 	bl	8003948 <xQueueGenericCreate>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a31      	ldr	r2, [pc, #196]	; (8000e10 <main+0x120>)
 8000d4a:	6013      	str	r3, [r2, #0]
  queue_AM = xQueueCreate(1,sizeof(uint32_t));
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2104      	movs	r1, #4
 8000d50:	2001      	movs	r0, #1
 8000d52:	f002 fdf9 	bl	8003948 <xQueueGenericCreate>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a2e      	ldr	r2, [pc, #184]	; (8000e14 <main+0x124>)
 8000d5a:	6013      	str	r3, [r2, #0]
  int display_value = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
  xQueueSend(queue_CP,&display_value,portMAX_DELAY);
 8000d60:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <main+0x120>)
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	1d39      	adds	r1, r7, #4
 8000d66:	2300      	movs	r3, #0
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	f002 fe5e 	bl	8003a2c <xQueueGenericSend>

  //Creacion de semaforos:
  vSemaphoreCreateBinary(ADC_semph);
 8000d70:	2203      	movs	r2, #3
 8000d72:	2100      	movs	r1, #0
 8000d74:	2001      	movs	r0, #1
 8000d76:	f002 fde7 	bl	8003948 <xQueueGenericCreate>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a26      	ldr	r2, [pc, #152]	; (8000e18 <main+0x128>)
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <main+0x128>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <main+0xa6>
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <main+0x128>)
 8000d8a:	6818      	ldr	r0, [r3, #0]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	f002 fe4b 	bl	8003a2c <xQueueGenericSend>
  xSemaphoreTake(ADC_semph, portMAX_DELAY);
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <main+0x128>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 f978 	bl	8004094 <xQueueSemaphoreTake>

  //Creacion de tareas:
  xTaskCreate(Pantalla, "Pantalla task", configMINIMAL_STACK_SIZE, NULL, 2, &xTarea_Pantalla_Handle);
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <main+0x12c>)
 8000da6:	9301      	str	r3, [sp, #4]
 8000da8:	2302      	movs	r3, #2
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2300      	movs	r3, #0
 8000dae:	2280      	movs	r2, #128	; 0x80
 8000db0:	491b      	ldr	r1, [pc, #108]	; (8000e20 <main+0x130>)
 8000db2:	481c      	ldr	r0, [pc, #112]	; (8000e24 <main+0x134>)
 8000db4:	f003 fcf8 	bl	80047a8 <xTaskCreate>
  xTaskCreate(Config, "Config task", 200, NULL, 3, &xTarea_Config_Handle);
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <main+0x138>)
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	22c8      	movs	r2, #200	; 0xc8
 8000dc4:	4919      	ldr	r1, [pc, #100]	; (8000e2c <main+0x13c>)
 8000dc6:	481a      	ldr	r0, [pc, #104]	; (8000e30 <main+0x140>)
 8000dc8:	f003 fcee 	bl	80047a8 <xTaskCreate>
  xTaskCreate(Medir, "Medir task", 100, NULL, 2, &xTarea_Medir_Handle);
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <main+0x144>)
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2264      	movs	r2, #100	; 0x64
 8000dd8:	4917      	ldr	r1, [pc, #92]	; (8000e38 <main+0x148>)
 8000dda:	4818      	ldr	r0, [pc, #96]	; (8000e3c <main+0x14c>)
 8000ddc:	f003 fce4 	bl	80047a8 <xTaskCreate>

  //inicializa display:
  tm1637_SetBrightness(3);//Set max brightness
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 fb17 	bl	8001414 <tm1637_SetBrightness>
  tm1637_DisplayUpdate(0,0,0,0);//Clear display (all segments off)
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 fb26 	bl	800143e <tm1637_DisplayUpdate>
  tm1637_ShowNumber(122);
 8000df2:	207a      	movs	r0, #122	; 0x7a
 8000df4:	f000 fbee 	bl	80015d4 <tm1637_ShowNumber>
  vTaskStartScheduler();
 8000df8:	f003 ff56 	bl	8004ca8 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <main+0x10c>
 8000dfe:	bf00      	nop
 8000e00:	40011000 	.word	0x40011000
 8000e04:	20000254 	.word	0x20000254
 8000e08:	20000210 	.word	0x20000210
 8000e0c:	20000214 	.word	0x20000214
 8000e10:	2000024c 	.word	0x2000024c
 8000e14:	20000248 	.word	0x20000248
 8000e18:	20000250 	.word	0x20000250
 8000e1c:	200000a0 	.word	0x200000a0
 8000e20:	08006c74 	.word	0x08006c74
 8000e24:	0800092d 	.word	0x0800092d
 8000e28:	2000009c 	.word	0x2000009c
 8000e2c:	08006c84 	.word	0x08006c84
 8000e30:	08000a95 	.word	0x08000a95
 8000e34:	200000a4 	.word	0x200000a4
 8000e38:	08006c90 	.word	0x08006c90
 8000e3c:	08000991 	.word	0x08000991

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	; 0x50
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f005 fe38 	bl	8006ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
 8000e84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e8c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fb9e 	bl	80025d8 <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ea2:	f000 f963 	bl	800116c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fe08 	bl	8002ad8 <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ece:	f000 f94d 	bl	800116c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eda:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 ffa4 	bl	8002e2c <HAL_RCCEx_PeriphCLKConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000eea:	f000 f93f 	bl	800116c <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3750      	adds	r7, #80	; 0x50
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_ADC1_Init+0x74>)
 8000f0a:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <MX_ADC1_Init+0x78>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <MX_ADC1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_ADC1_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_ADC1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_ADC1_Init+0x74>)
 8000f22:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <MX_ADC1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_ADC1_Init+0x74>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_ADC1_Init+0x74>)
 8000f36:	f000 fcbd 	bl	80018b4 <HAL_ADC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f40:	f000 f914 	bl	800116c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f44:	2305      	movs	r3, #5
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_ADC1_Init+0x74>)
 8000f56:	f000 ff0f 	bl	8001d78 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f60:	f000 f904 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000218 	.word	0x20000218
 8000f70:	40012400 	.word	0x40012400

08000f74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_TIM2_Init+0x94>)
 8000f92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_TIM2_Init+0x94>)
 8000f9a:	2247      	movs	r2, #71	; 0x47
 8000f9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000faa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fba:	f001 ffed 	bl	8002f98 <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fc4:	f000 f8d2 	bl	800116c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_TIM2_Init+0x94>)
 8000fd6:	f002 f9d3 	bl	8003380 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fe0:	f000 f8c4 	bl	800116c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_TIM2_Init+0x94>)
 8000ff2:	f002 fba9 	bl	8003748 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ffc:	f000 f8b6 	bl	800116c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000254 	.word	0x20000254

0800100c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001020:	4b45      	ldr	r3, [pc, #276]	; (8001138 <MX_GPIO_Init+0x12c>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a44      	ldr	r2, [pc, #272]	; (8001138 <MX_GPIO_Init+0x12c>)
 8001026:	f043 0310 	orr.w	r3, r3, #16
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b42      	ldr	r3, [pc, #264]	; (8001138 <MX_GPIO_Init+0x12c>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0310 	and.w	r3, r3, #16
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001038:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <MX_GPIO_Init+0x12c>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a3e      	ldr	r2, [pc, #248]	; (8001138 <MX_GPIO_Init+0x12c>)
 800103e:	f043 0320 	orr.w	r3, r3, #32
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b3c      	ldr	r3, [pc, #240]	; (8001138 <MX_GPIO_Init+0x12c>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0320 	and.w	r3, r3, #32
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <MX_GPIO_Init+0x12c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a38      	ldr	r2, [pc, #224]	; (8001138 <MX_GPIO_Init+0x12c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b36      	ldr	r3, [pc, #216]	; (8001138 <MX_GPIO_Init+0x12c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b33      	ldr	r3, [pc, #204]	; (8001138 <MX_GPIO_Init+0x12c>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a32      	ldr	r2, [pc, #200]	; (8001138 <MX_GPIO_Init+0x12c>)
 800106e:	f043 0308 	orr.w	r3, r3, #8
 8001072:	6193      	str	r3, [r2, #24]
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <MX_GPIO_Init+0x12c>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001086:	482d      	ldr	r0, [pc, #180]	; (800113c <MX_GPIO_Init+0x130>)
 8001088:	f001 fa8d 	bl	80025a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2108      	movs	r1, #8
 8001090:	482b      	ldr	r0, [pc, #172]	; (8001140 <MX_GPIO_Init+0x134>)
 8001092:	f001 fa88 	bl	80025a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TM1637_DIO_Pin|TM1637_CLK_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 7140 	mov.w	r1, #768	; 0x300
 800109c:	4829      	ldr	r0, [pc, #164]	; (8001144 <MX_GPIO_Init+0x138>)
 800109e:	f001 fa82 	bl	80025a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	4820      	ldr	r0, [pc, #128]	; (800113c <MX_GPIO_Init+0x130>)
 80010bc:	f001 f8d8 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80010c0:	2308      	movs	r3, #8
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4619      	mov	r1, r3
 80010d6:	481a      	ldr	r0, [pc, #104]	; (8001140 <MX_GPIO_Init+0x134>)
 80010d8:	f001 f8ca 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80010dc:	2310      	movs	r3, #16
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	4814      	ldr	r0, [pc, #80]	; (8001140 <MX_GPIO_Init+0x134>)
 80010f0:	f001 f8be 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : TM1637_DIO_Pin */
  GPIO_InitStruct.Pin = TM1637_DIO_Pin;
 80010f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001102:	2301      	movs	r3, #1
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TM1637_DIO_GPIO_Port, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_GPIO_Init+0x138>)
 800110e:	f001 f8af 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : TM1637_CLK_Pin */
  GPIO_InitStruct.Pin = TM1637_CLK_Pin;
 8001112:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001118:	2311      	movs	r3, #17
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001120:	2301      	movs	r3, #1
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TM1637_CLK_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <MX_GPIO_Init+0x138>)
 800112c:	f001 f8a0 	bl	8002270 <HAL_GPIO_Init>

}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40021000 	.word	0x40021000
 800113c:	40011000 	.word	0x40011000
 8001140:	40010800 	.word	0x40010800
 8001144:	40010c00 	.word	0x40010c00

08001148 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800115a:	f000 fb8f 	bl	800187c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40012c00 	.word	0x40012c00

0800116c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001170:	b672      	cpsid	i
}
 8001172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001174:	e7fe      	b.n	8001174 <Error_Handler+0x8>
	...

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_MspInit+0x5c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_MspInit+0x5c>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_MspInit+0x5c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_MspInit+0x5c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_MspInit+0x60>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_MspInit+0x60>)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000

080011dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <HAL_ADC_MspInit+0x7c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d129      	bne.n	8001250 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_ADC_MspInit+0x80>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a16      	ldr	r2, [pc, #88]	; (800125c <HAL_ADC_MspInit+0x80>)
 8001202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_ADC_MspInit+0x80>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_ADC_MspInit+0x80>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_ADC_MspInit+0x80>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_ADC_MspInit+0x80>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_BTN_INT_Pin;
 800122c:	2320      	movs	r3, #32
 800122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001230:	2303      	movs	r3, #3
 8001232:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4809      	ldr	r0, [pc, #36]	; (8001260 <HAL_ADC_MspInit+0x84>)
 800123c:	f001 f818 	bl	8002270 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2105      	movs	r1, #5
 8001244:	2012      	movs	r0, #18
 8001246:	f000 ffe8 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800124a:	2012      	movs	r0, #18
 800124c:	f001 f801 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001250:	bf00      	nop
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40012400 	.word	0x40012400
 800125c:	40021000 	.word	0x40021000
 8001260:	40010800 	.word	0x40010800

08001264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001274:	d10b      	bne.n	800128e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_TIM_Base_MspInit+0x34>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	4a07      	ldr	r2, [pc, #28]	; (8001298 <HAL_TIM_Base_MspInit+0x34>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	61d3      	str	r3, [r2, #28]
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_TIM_Base_MspInit+0x34>)
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	2019      	movs	r0, #25
 80012b2:	f000 ffb2 	bl	800221a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012b6:	2019      	movs	r0, #25
 80012b8:	f000 ffcb 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_InitTick+0x9c>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_InitTick+0x9c>)
 80012c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_InitTick+0x9c>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012d4:	f107 0210 	add.w	r2, r7, #16
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fd56 	bl	8002d90 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012e4:	f001 fd40 	bl	8002d68 <HAL_RCC_GetPCLK2Freq>
 80012e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <HAL_InitTick+0xa0>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	0c9b      	lsrs	r3, r3, #18
 80012f4:	3b01      	subs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_InitTick+0xa4>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <HAL_InitTick+0xa8>)
 80012fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <HAL_InitTick+0xa4>)
 8001300:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001304:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001306:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <HAL_InitTick+0xa4>)
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_InitTick+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_InitTick+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <HAL_InitTick+0xa4>)
 800131a:	f001 fe3d 	bl	8002f98 <HAL_TIM_Base_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d104      	bne.n	800132e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001324:	4806      	ldr	r0, [pc, #24]	; (8001340 <HAL_InitTick+0xa4>)
 8001326:	f001 fed1 	bl	80030cc <HAL_TIM_Base_Start_IT>
 800132a:	4603      	mov	r3, r0
 800132c:	e000      	b.n	8001330 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
}
 8001330:	4618      	mov	r0, r3
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	431bde83 	.word	0x431bde83
 8001340:	2000029c 	.word	0x2000029c
 8001344:	40012c00 	.word	0x40012c00

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
	...

08001374 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <ADC1_2_IRQHandler+0x10>)
 800137a:	f000 fc35 	bl	8001be8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000218 	.word	0x20000218

08001388 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <TIM1_UP_IRQHandler+0x10>)
 800138e:	f001 feef 	bl	8003170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000029c 	.word	0x2000029c

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f005 fb32 	bl	8006a34 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20005000 	.word	0x20005000
 80013fc:	00000400 	.word	0x00000400
 8001400:	200000b0 	.word	0x200000b0
 8001404:	20000338 	.word	0x20000338

08001408 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <tm1637_SetBrightness>:

//=================================================
//Display control functions

// Brightness values: 0 - 8
void tm1637_SetBrightness(uint8_t brightness){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	tm1637_Start();
 800141e:	f000 f939 	bl	8001694 <tm1637_Start>
	tm1637_WriteByte(0x87 + brightness);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	3b79      	subs	r3, #121	; 0x79
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f975 	bl	8001718 <tm1637_WriteByte>
	tm1637_ReadACK();
 800142e:	f000 f953 	bl	80016d8 <tm1637_ReadACK>
	tm1637_Stop();
 8001432:	f000 f93c 	bl	80016ae <tm1637_Stop>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <tm1637_DisplayUpdate>:

//Send segments data into display
//d0 - ***8, d1 - **8*, d2 - *8**, d3 - 8***
void tm1637_DisplayUpdate(uint8_t d0,uint8_t d1,uint8_t d2,uint8_t d3){
 800143e:	b590      	push	{r4, r7, lr}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	4604      	mov	r4, r0
 8001446:	4608      	mov	r0, r1
 8001448:	4611      	mov	r1, r2
 800144a:	461a      	mov	r2, r3
 800144c:	4623      	mov	r3, r4
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	4603      	mov	r3, r0
 8001452:	71bb      	strb	r3, [r7, #6]
 8001454:	460b      	mov	r3, r1
 8001456:	717b      	strb	r3, [r7, #5]
 8001458:	4613      	mov	r3, r2
 800145a:	713b      	strb	r3, [r7, #4]

	tm1637_Start();
 800145c:	f000 f91a 	bl	8001694 <tm1637_Start>
	tm1637_WriteByte(0x40);//Memory write command
 8001460:	2040      	movs	r0, #64	; 0x40
 8001462:	f000 f959 	bl	8001718 <tm1637_WriteByte>
    tm1637_ReadACK();
 8001466:	f000 f937 	bl	80016d8 <tm1637_ReadACK>
    tm1637_Stop();
 800146a:	f000 f920 	bl	80016ae <tm1637_Stop>

    tm1637_Start();
 800146e:	f000 f911 	bl	8001694 <tm1637_Start>
    tm1637_WriteByte(0xc0);//Start address
 8001472:	20c0      	movs	r0, #192	; 0xc0
 8001474:	f000 f950 	bl	8001718 <tm1637_WriteByte>
    tm1637_ReadACK();
 8001478:	f000 f92e 	bl	80016d8 <tm1637_ReadACK>

	tm1637_WriteByte(d0);//Data
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f94a 	bl	8001718 <tm1637_WriteByte>
    tm1637_ReadACK();
 8001484:	f000 f928 	bl	80016d8 <tm1637_ReadACK>
	tm1637_WriteByte(d1);//Data
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f944 	bl	8001718 <tm1637_WriteByte>
    tm1637_ReadACK();
 8001490:	f000 f922 	bl	80016d8 <tm1637_ReadACK>
	tm1637_WriteByte(d2);//Data
 8001494:	797b      	ldrb	r3, [r7, #5]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f93e 	bl	8001718 <tm1637_WriteByte>
    tm1637_ReadACK();
 800149c:	f000 f91c 	bl	80016d8 <tm1637_ReadACK>
	tm1637_WriteByte(d3);//Data
 80014a0:	793b      	ldrb	r3, [r7, #4]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f938 	bl	8001718 <tm1637_WriteByte>
    tm1637_ReadACK();
 80014a8:	f000 f916 	bl	80016d8 <tm1637_ReadACK>

    tm1637_Stop();
 80014ac:	f000 f8ff 	bl	80016ae <tm1637_Stop>
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}

080014b8 <tm1637_NumberToSegments>:

//Convert number to 7-segment code
uint8_t tm1637_NumberToSegments(uint8_t n){
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	if (n == 0) return 0x3F;//0
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <tm1637_NumberToSegments+0x14>
 80014c8:	233f      	movs	r3, #63	; 0x3f
 80014ca:	e07d      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 1) return 0x06;//1
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <tm1637_NumberToSegments+0x1e>
 80014d2:	2306      	movs	r3, #6
 80014d4:	e078      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 2) return 0x5B;//2
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d101      	bne.n	80014e0 <tm1637_NumberToSegments+0x28>
 80014dc:	235b      	movs	r3, #91	; 0x5b
 80014de:	e073      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 3) return 0x4F;//3
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d101      	bne.n	80014ea <tm1637_NumberToSegments+0x32>
 80014e6:	234f      	movs	r3, #79	; 0x4f
 80014e8:	e06e      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 4) return 0x66;//4
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d101      	bne.n	80014f4 <tm1637_NumberToSegments+0x3c>
 80014f0:	2366      	movs	r3, #102	; 0x66
 80014f2:	e069      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 5) return 0x6D;//5
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d101      	bne.n	80014fe <tm1637_NumberToSegments+0x46>
 80014fa:	236d      	movs	r3, #109	; 0x6d
 80014fc:	e064      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 6) return 0x7D;//6
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b06      	cmp	r3, #6
 8001502:	d101      	bne.n	8001508 <tm1637_NumberToSegments+0x50>
 8001504:	237d      	movs	r3, #125	; 0x7d
 8001506:	e05f      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 7) return 0x07;//7
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b07      	cmp	r3, #7
 800150c:	d101      	bne.n	8001512 <tm1637_NumberToSegments+0x5a>
 800150e:	2307      	movs	r3, #7
 8001510:	e05a      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 8) return 0x7F;//8
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d101      	bne.n	800151c <tm1637_NumberToSegments+0x64>
 8001518:	237f      	movs	r3, #127	; 0x7f
 800151a:	e055      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 9) return 0x6F;//9
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2b09      	cmp	r3, #9
 8001520:	d101      	bne.n	8001526 <tm1637_NumberToSegments+0x6e>
 8001522:	236f      	movs	r3, #111	; 0x6f
 8001524:	e050      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 10) return 0x77;//A
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b0a      	cmp	r3, #10
 800152a:	d101      	bne.n	8001530 <tm1637_NumberToSegments+0x78>
 800152c:	2377      	movs	r3, #119	; 0x77
 800152e:	e04b      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 11) return 0x7C;//B
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b0b      	cmp	r3, #11
 8001534:	d101      	bne.n	800153a <tm1637_NumberToSegments+0x82>
 8001536:	237c      	movs	r3, #124	; 0x7c
 8001538:	e046      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 12) return 0x39;//C
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b0c      	cmp	r3, #12
 800153e:	d101      	bne.n	8001544 <tm1637_NumberToSegments+0x8c>
 8001540:	2339      	movs	r3, #57	; 0x39
 8001542:	e041      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 13) return 0x5E;//D
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b0d      	cmp	r3, #13
 8001548:	d101      	bne.n	800154e <tm1637_NumberToSegments+0x96>
 800154a:	235e      	movs	r3, #94	; 0x5e
 800154c:	e03c      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 14) return 0x79;//E
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b0e      	cmp	r3, #14
 8001552:	d101      	bne.n	8001558 <tm1637_NumberToSegments+0xa0>
 8001554:	2379      	movs	r3, #121	; 0x79
 8001556:	e037      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 15) return 0x71;//F
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d101      	bne.n	8001562 <tm1637_NumberToSegments+0xaa>
 800155e:	2371      	movs	r3, #113	; 0x71
 8001560:	e032      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 16) return 0x40;//-
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b10      	cmp	r3, #16
 8001566:	d101      	bne.n	800156c <tm1637_NumberToSegments+0xb4>
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	e02d      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 17) return 0x77;//A
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	2b11      	cmp	r3, #17
 8001570:	d101      	bne.n	8001576 <tm1637_NumberToSegments+0xbe>
 8001572:	2377      	movs	r3, #119	; 0x77
 8001574:	e028      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 18) return 0x3D;//G
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b12      	cmp	r3, #18
 800157a:	d101      	bne.n	8001580 <tm1637_NumberToSegments+0xc8>
 800157c:	233d      	movs	r3, #61	; 0x3d
 800157e:	e023      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 19) return 0x76;//H
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	2b13      	cmp	r3, #19
 8001584:	d101      	bne.n	800158a <tm1637_NumberToSegments+0xd2>
 8001586:	2376      	movs	r3, #118	; 0x76
 8001588:	e01e      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 20) return 0x3C;//J
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	2b14      	cmp	r3, #20
 800158e:	d101      	bne.n	8001594 <tm1637_NumberToSegments+0xdc>
 8001590:	233c      	movs	r3, #60	; 0x3c
 8001592:	e019      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 21) return 0x73;//P
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	2b15      	cmp	r3, #21
 8001598:	d101      	bne.n	800159e <tm1637_NumberToSegments+0xe6>
 800159a:	2373      	movs	r3, #115	; 0x73
 800159c:	e014      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 22) return 0x38;//L
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b16      	cmp	r3, #22
 80015a2:	d101      	bne.n	80015a8 <tm1637_NumberToSegments+0xf0>
 80015a4:	2338      	movs	r3, #56	; 0x38
 80015a6:	e00f      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 23) return 0x6D;//S
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b17      	cmp	r3, #23
 80015ac:	d101      	bne.n	80015b2 <tm1637_NumberToSegments+0xfa>
 80015ae:	236d      	movs	r3, #109	; 0x6d
 80015b0:	e00a      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 24) return 0x3E;//U
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b18      	cmp	r3, #24
 80015b6:	d101      	bne.n	80015bc <tm1637_NumberToSegments+0x104>
 80015b8:	233e      	movs	r3, #62	; 0x3e
 80015ba:	e005      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	if (n == 25) return 0x6E;//Y
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	2b19      	cmp	r3, #25
 80015c0:	d101      	bne.n	80015c6 <tm1637_NumberToSegments+0x10e>
 80015c2:	236e      	movs	r3, #110	; 0x6e
 80015c4:	e000      	b.n	80015c8 <tm1637_NumberToSegments+0x110>
	return 0x00;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <tm1637_ShowNumber>:

//Send number into display; BMS a bms se modificaron.
void tm1637_ShowNumber(uint16_t num){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
	uint8_t dg0,dg1,dg2,dg3;
	dg0 = tm1637_NumberToSegments((uint8_t)(num / 1000));
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	4a29      	ldr	r2, [pc, #164]	; (8001688 <tm1637_ShowNumber+0xb4>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	099b      	lsrs	r3, r3, #6
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff63 	bl	80014b8 <tm1637_NumberToSegments>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]
	num = num % 1000;
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	4a23      	ldr	r2, [pc, #140]	; (8001688 <tm1637_ShowNumber+0xb4>)
 80015fa:	fba2 1203 	umull	r1, r2, r2, r3
 80015fe:	0992      	lsrs	r2, r2, #6
 8001600:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001604:	fb01 f202 	mul.w	r2, r1, r2
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	dg1 = tm1637_NumberToSegments((uint8_t)(num / 100));
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	4a1f      	ldr	r2, [pc, #124]	; (800168c <tm1637_ShowNumber+0xb8>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	095b      	lsrs	r3, r3, #5
 8001616:	b29b      	uxth	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff4c 	bl	80014b8 <tm1637_NumberToSegments>
 8001620:	4603      	mov	r3, r0
 8001622:	73bb      	strb	r3, [r7, #14]
	num = num % 100;
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4a19      	ldr	r2, [pc, #100]	; (800168c <tm1637_ShowNumber+0xb8>)
 8001628:	fba2 1203 	umull	r1, r2, r2, r3
 800162c:	0952      	lsrs	r2, r2, #5
 800162e:	2164      	movs	r1, #100	; 0x64
 8001630:	fb01 f202 	mul.w	r2, r1, r2
 8001634:	1a9b      	subs	r3, r3, r2
 8001636:	80fb      	strh	r3, [r7, #6]
	dg2 = tm1637_NumberToSegments((uint8_t)(num / 10));
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <tm1637_ShowNumber+0xbc>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	b29b      	uxth	r3, r3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff36 	bl	80014b8 <tm1637_NumberToSegments>
 800164c:	4603      	mov	r3, r0
 800164e:	737b      	strb	r3, [r7, #13]
	num = num % 10;
 8001650:	88fa      	ldrh	r2, [r7, #6]
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <tm1637_ShowNumber+0xbc>)
 8001654:	fba3 1302 	umull	r1, r3, r3, r2
 8001658:	08d9      	lsrs	r1, r3, #3
 800165a:	460b      	mov	r3, r1
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	80fb      	strh	r3, [r7, #6]
	dg3 = tm1637_NumberToSegments((uint8_t)num);
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff24 	bl	80014b8 <tm1637_NumberToSegments>
 8001670:	4603      	mov	r3, r0
 8001672:	733b      	strb	r3, [r7, #12]
	tm1637_DisplayUpdate(dg0,dg1,dg2,dg3);
 8001674:	7b3b      	ldrb	r3, [r7, #12]
 8001676:	7b7a      	ldrb	r2, [r7, #13]
 8001678:	7bb9      	ldrb	r1, [r7, #14]
 800167a:	7bf8      	ldrb	r0, [r7, #15]
 800167c:	f7ff fedf 	bl	800143e <tm1637_DisplayUpdate>
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	10624dd3 	.word	0x10624dd3
 800168c:	51eb851f 	.word	0x51eb851f
 8001690:	cccccccd 	.word	0xcccccccd

08001694 <tm1637_Start>:

//=================================================
//Protocol functions

//Start transfer signal
void tm1637_Start(void){
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	tm1637_CLK_SetHigh();
 8001698:	f000 f884 	bl	80017a4 <tm1637_CLK_SetHigh>
	tm1637_DIO_SetHigh();
 800169c:	f000 f89a 	bl	80017d4 <tm1637_DIO_SetHigh>
	SomeDelay(5);
 80016a0:	2005      	movs	r0, #5
 80016a2:	f000 f863 	bl	800176c <SomeDelay>
	tm1637_DIO_SetLow();
 80016a6:	f000 f8a1 	bl	80017ec <tm1637_DIO_SetLow>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}

080016ae <tm1637_Stop>:

//Stop transfer signal
void tm1637_Stop(void){
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
	tm1637_CLK_SetLow();
 80016b2:	f000 f883 	bl	80017bc <tm1637_CLK_SetLow>
	SomeDelay(5);
 80016b6:	2005      	movs	r0, #5
 80016b8:	f000 f858 	bl	800176c <SomeDelay>
	tm1637_DIO_SetLow();
 80016bc:	f000 f896 	bl	80017ec <tm1637_DIO_SetLow>
    SomeDelay(5);
 80016c0:	2005      	movs	r0, #5
 80016c2:	f000 f853 	bl	800176c <SomeDelay>
    tm1637_CLK_SetHigh();
 80016c6:	f000 f86d 	bl	80017a4 <tm1637_CLK_SetHigh>
    SomeDelay(5);
 80016ca:	2005      	movs	r0, #5
 80016cc:	f000 f84e 	bl	800176c <SomeDelay>
    tm1637_DIO_SetHigh();
 80016d0:	f000 f880 	bl	80017d4 <tm1637_DIO_SetHigh>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <tm1637_ReadACK>:

//Read ack signal
uint8_t tm1637_ReadACK(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
	tm1637_CLK_SetLow();
 80016de:	f000 f86d 	bl	80017bc <tm1637_CLK_SetLow>
	tm1637_DIO_SetHigh();
 80016e2:	f000 f877 	bl	80017d4 <tm1637_DIO_SetHigh>
	SomeDelay(7);
 80016e6:	2007      	movs	r0, #7
 80016e8:	f000 f840 	bl	800176c <SomeDelay>
    uint8_t d = HAL_GPIO_ReadPin(TM1637_DIO_PORT, TM1637_DIO_PIN);
 80016ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <tm1637_ReadACK+0x3c>)
 80016f2:	f000 ff41 	bl	8002578 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	tm1637_CLK_SetHigh();
 80016fa:	f000 f853 	bl	80017a4 <tm1637_CLK_SetHigh>
	SomeDelay(5);
 80016fe:	2005      	movs	r0, #5
 8001700:	f000 f834 	bl	800176c <SomeDelay>
    tm1637_CLK_SetLow();
 8001704:	f000 f85a 	bl	80017bc <tm1637_CLK_SetLow>
    return d;
 8001708:	79fb      	ldrb	r3, [r7, #7]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40010c00 	.word	0x40010c00

08001718 <tm1637_WriteByte>:

//Send command or data into display
void tm1637_WriteByte(uint8_t data){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e019      	b.n	800175c <tm1637_WriteByte+0x44>
    	tm1637_CLK_SetLow();
 8001728:	f000 f848 	bl	80017bc <tm1637_CLK_SetLow>
        if (data & 0x01) {
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <tm1637_WriteByte+0x24>
        	tm1637_DIO_SetHigh();
 8001736:	f000 f84d 	bl	80017d4 <tm1637_DIO_SetHigh>
 800173a:	e001      	b.n	8001740 <tm1637_WriteByte+0x28>
        } else {
        	tm1637_DIO_SetLow();
 800173c:	f000 f856 	bl	80017ec <tm1637_DIO_SetLow>
        };
        SomeDelay(7);
 8001740:	2007      	movs	r0, #7
 8001742:	f000 f813 	bl	800176c <SomeDelay>
        data >>= 1;
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	71fb      	strb	r3, [r7, #7]
        tm1637_CLK_SetHigh();
 800174c:	f000 f82a 	bl	80017a4 <tm1637_CLK_SetHigh>
        SomeDelay(7);
 8001750:	2007      	movs	r0, #7
 8001752:	f000 f80b 	bl	800176c <SomeDelay>
    for (uint8_t i = 0; i < 8; i++) {
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	3301      	adds	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b07      	cmp	r3, #7
 8001760:	d9e2      	bls.n	8001728 <tm1637_WriteByte+0x10>
    };
}
 8001762:	bf00      	nop
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <SomeDelay>:

//=================================================
//We need some delay for protocol

//Delay approximately (0.95*i + 0.6) us on 72Mhz & optimization for size "-Os"
void SomeDelay(uint32_t i){
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    while (i > 0) {
 8001774:	e00c      	b.n	8001790 <SomeDelay+0x24>
    	for (uint32_t j = 0; j < 10; j++) {
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e003      	b.n	8001784 <SomeDelay+0x18>
    		__NOP();
 800177c:	bf00      	nop
    	for (uint32_t j = 0; j < 10; j++) {
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	3301      	adds	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b09      	cmp	r3, #9
 8001788:	d9f8      	bls.n	800177c <SomeDelay+0x10>
    	};
    	i--;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3b01      	subs	r3, #1
 800178e:	607b      	str	r3, [r7, #4]
    while (i > 0) {
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ef      	bne.n	8001776 <SomeDelay+0xa>
    };
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
	...

080017a4 <tm1637_CLK_SetHigh>:

//=================================================
//Pins control functions

//Set 1 on CLK pin
void tm1637_CLK_SetHigh(void){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_CLK_PORT, TM1637_CLK_PIN, GPIO_PIN_SET);//CLK
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ae:	4802      	ldr	r0, [pc, #8]	; (80017b8 <tm1637_CLK_SetHigh+0x14>)
 80017b0:	f000 fef9 	bl	80025a6 <HAL_GPIO_WritePin>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40010c00 	.word	0x40010c00

080017bc <tm1637_CLK_SetLow>:

//Set 0 on CLK pin
void tm1637_CLK_SetLow(void){
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_CLK_PORT, TM1637_CLK_PIN, GPIO_PIN_RESET);//CLK
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c6:	4802      	ldr	r0, [pc, #8]	; (80017d0 <tm1637_CLK_SetLow+0x14>)
 80017c8:	f000 feed 	bl	80025a6 <HAL_GPIO_WritePin>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40010c00 	.word	0x40010c00

080017d4 <tm1637_DIO_SetHigh>:

//Set 1 on DIO pin
void tm1637_DIO_SetHigh(void){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_DIO_PORT, TM1637_DIO_PIN, GPIO_PIN_SET);//DIO
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017de:	4802      	ldr	r0, [pc, #8]	; (80017e8 <tm1637_DIO_SetHigh+0x14>)
 80017e0:	f000 fee1 	bl	80025a6 <HAL_GPIO_WritePin>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40010c00 	.word	0x40010c00

080017ec <tm1637_DIO_SetLow>:

//Set 0 on DIO pin
void tm1637_DIO_SetLow(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TM1637_DIO_PORT, TM1637_DIO_PIN, GPIO_PIN_RESET);//DIO
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f6:	4802      	ldr	r0, [pc, #8]	; (8001800 <tm1637_DIO_SetLow+0x14>)
 80017f8:	f000 fed5 	bl	80025a6 <HAL_GPIO_WritePin>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40010c00 	.word	0x40010c00

08001804 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001804:	f7ff fe00 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001808:	480b      	ldr	r0, [pc, #44]	; (8001838 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800180a:	490c      	ldr	r1, [pc, #48]	; (800183c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800180c:	4a0c      	ldr	r2, [pc, #48]	; (8001840 <LoopFillZerobss+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a09      	ldr	r2, [pc, #36]	; (8001844 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001820:	4c09      	ldr	r4, [pc, #36]	; (8001848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182e:	f005 f907 	bl	8006a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001832:	f7ff fa5d 	bl	8000cf0 <main>
  bx lr
 8001836:	4770      	bx	lr
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001840:	08006ce8 	.word	0x08006ce8
  ldr r2, =_sbss
 8001844:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001848:	20000338 	.word	0x20000338

0800184c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800184c:	e7fe      	b.n	800184c <CAN1_RX1_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_Init+0x28>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_Init+0x28>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 fccf 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff fd18 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff fc84 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40022000 	.word	0x40022000

0800187c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x1c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_IncTick+0x20>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a03      	ldr	r2, [pc, #12]	; (800189c <HAL_IncTick+0x20>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	20000010 	.word	0x20000010
 800189c:	200002e4 	.word	0x200002e4

080018a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <HAL_GetTick+0x10>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	200002e4 	.word	0x200002e4

080018b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0be      	b.n	8001a54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fc72 	bl	80011dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fb8f 	bl	800201c <ADC_ConversionStop_Disable>
 80018fe:	4603      	mov	r3, r0
 8001900:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8099 	bne.w	8001a42 <HAL_ADC_Init+0x18e>
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 8095 	bne.w	8001a42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001920:	f023 0302 	bic.w	r3, r3, #2
 8001924:	f043 0202 	orr.w	r2, r3, #2
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001934:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7b1b      	ldrb	r3, [r3, #12]
 800193a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800193c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	4313      	orrs	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194c:	d003      	beq.n	8001956 <HAL_ADC_Init+0xa2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_ADC_Init+0xa8>
 8001956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195a:	e000      	b.n	800195e <HAL_ADC_Init+0xaa>
 800195c:	2300      	movs	r3, #0
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7d1b      	ldrb	r3, [r3, #20]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d119      	bne.n	80019a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7b1b      	ldrb	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	3b01      	subs	r3, #1
 800197a:	035a      	lsls	r2, r3, #13
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e00b      	b.n	80019a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	f043 0220 	orr.w	r2, r3, #32
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_ADC_Init+0x1a8>)
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d0:	d003      	beq.n	80019da <HAL_ADC_Init+0x126>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d104      	bne.n	80019e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	3b01      	subs	r3, #1
 80019e0:	051b      	lsls	r3, r3, #20
 80019e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_ADC_Init+0x1ac>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d10b      	bne.n	8001a20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a1e:	e018      	b.n	8001a52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f023 0312 	bic.w	r3, r3, #18
 8001a28:	f043 0210 	orr.w	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a40:	e007      	b.n	8001a52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	f043 0210 	orr.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a60:	ff1f0efe 	.word	0xff1f0efe

08001a64 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Start_IT+0x1a>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e0a0      	b.n	8001bc0 <HAL_ADC_Start_IT+0x15c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fa6e 	bl	8001f68 <ADC_Enable>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 808f 	bne.w	8001bb6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a45      	ldr	r2, [pc, #276]	; (8001bc8 <HAL_ADC_Start_IT+0x164>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d105      	bne.n	8001ac2 <HAL_ADC_Start_IT+0x5e>
 8001ab6:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <HAL_ADC_Start_IT+0x168>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d115      	bne.n	8001aee <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d026      	beq.n	8001b2a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aec:	e01d      	b.n	8001b2a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a33      	ldr	r2, [pc, #204]	; (8001bcc <HAL_ADC_Start_IT+0x168>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d004      	beq.n	8001b0e <HAL_ADC_Start_IT+0xaa>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2f      	ldr	r2, [pc, #188]	; (8001bc8 <HAL_ADC_Start_IT+0x164>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d10d      	bne.n	8001b2a <HAL_ADC_Start_IT+0xc6>
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_ADC_Start_IT+0x168>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	f023 0206 	bic.w	r2, r3, #6
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b42:	e002      	b.n	8001b4a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f06f 0202 	mvn.w	r2, #2
 8001b5a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0220 	orr.w	r2, r2, #32
 8001b6a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b7a:	d113      	bne.n	8001ba4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b80:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <HAL_ADC_Start_IT+0x164>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d105      	bne.n	8001b92 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_ADC_Start_IT+0x168>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d108      	bne.n	8001ba4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	e00c      	b.n	8001bbe <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e003      	b.n	8001bbe <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40012800 	.word	0x40012800
 8001bcc:	40012400 	.word	0x40012400

08001bd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d03e      	beq.n	8001c88 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d039      	beq.n	8001c88 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c3a:	d11d      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d119      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0220 	bic.w	r2, r2, #32
 8001c52:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff f801 	bl	8000c80 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f06f 0212 	mvn.w	r2, #18
 8001c86:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d04d      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d048      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001cbe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001cc2:	d012      	beq.n	8001cea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d125      	bne.n	8001d1e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cdc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ce0:	d11d      	bne.n	8001d1e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d119      	bne.n	8001d1e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	f043 0201 	orr.w	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f9bd 	bl	800209e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 020c 	mvn.w	r2, #12
 8001d2c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d012      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00d      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f809 	bl	8001d66 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0201 	mvn.w	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x20>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e0dc      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x1da>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d81c      	bhi.n	8001de2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	3b05      	subs	r3, #5
 8001dba:	221f      	movs	r2, #31
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	4019      	ands	r1, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3b05      	subs	r3, #5
 8001dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	635a      	str	r2, [r3, #52]	; 0x34
 8001de0:	e03c      	b.n	8001e5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d81c      	bhi.n	8001e24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	3b23      	subs	r3, #35	; 0x23
 8001dfc:	221f      	movs	r2, #31
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	4019      	ands	r1, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b23      	subs	r3, #35	; 0x23
 8001e16:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
 8001e22:	e01b      	b.n	8001e5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b41      	subs	r3, #65	; 0x41
 8001e36:	221f      	movs	r2, #31
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	4019      	ands	r1, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b41      	subs	r3, #65	; 0x41
 8001e50:	fa00 f203 	lsl.w	r2, r0, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	d91c      	bls.n	8001e9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68d9      	ldr	r1, [r3, #12]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4019      	ands	r1, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6898      	ldr	r0, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b1e      	subs	r3, #30
 8001e90:	fa00 f203 	lsl.w	r2, r0, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	e019      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6919      	ldr	r1, [r3, #16]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	2207      	movs	r2, #7
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4019      	ands	r1, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6898      	ldr	r0, [r3, #8]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d003      	beq.n	8001ee2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ede:	2b11      	cmp	r3, #17
 8001ee0:	d132      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d125      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d126      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b10      	cmp	r3, #16
 8001f10:	d11a      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	0c9a      	lsrs	r2, r3, #18
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f28:	e002      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f9      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x1b2>
 8001f36:	e007      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	f043 0220 	orr.w	r2, r3, #32
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40012400 	.word	0x40012400
 8001f60:	20000008 	.word	0x20000008
 8001f64:	431bde83 	.word	0x431bde83

08001f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d040      	beq.n	8002008 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f042 0201 	orr.w	r2, r2, #1
 8001f94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f96:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <ADC_Enable+0xac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <ADC_Enable+0xb0>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	0c9b      	lsrs	r3, r3, #18
 8001fa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fa4:	e002      	b.n	8001fac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f9      	bne.n	8001fa6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fb2:	f7ff fc75 	bl	80018a0 <HAL_GetTick>
 8001fb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fb8:	e01f      	b.n	8001ffa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fba:	f7ff fc71 	bl	80018a0 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d918      	bls.n	8001ffa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d011      	beq.n	8001ffa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	f043 0210 	orr.w	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e007      	b.n	800200a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d1d8      	bne.n	8001fba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008
 8002018:	431bde83 	.word	0x431bde83

0800201c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d12e      	bne.n	8002094 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002046:	f7ff fc2b 	bl	80018a0 <HAL_GetTick>
 800204a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800204c:	e01b      	b.n	8002086 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800204e:	f7ff fc27 	bl	80018a0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d914      	bls.n	8002086 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b01      	cmp	r3, #1
 8002068:	d10d      	bne.n	8002086 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	f043 0210 	orr.w	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e007      	b.n	8002096 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d0dc      	beq.n	800204e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	; (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4906      	ldr	r1, [pc, #24]	; (8002148 <__NVIC_EnableIRQ+0x34>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff4f 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff64 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ffb2 	bl	80021a0 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff81 	bl	800214c <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff57 	bl	8002114 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002270:	b480      	push	{r7}
 8002272:	b08b      	sub	sp, #44	; 0x2c
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	e169      	b.n	8002558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002284:	2201      	movs	r2, #1
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	429a      	cmp	r2, r3
 800229e:	f040 8158 	bne.w	8002552 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4a9a      	ldr	r2, [pc, #616]	; (8002510 <HAL_GPIO_Init+0x2a0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d05e      	beq.n	800236a <HAL_GPIO_Init+0xfa>
 80022ac:	4a98      	ldr	r2, [pc, #608]	; (8002510 <HAL_GPIO_Init+0x2a0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d875      	bhi.n	800239e <HAL_GPIO_Init+0x12e>
 80022b2:	4a98      	ldr	r2, [pc, #608]	; (8002514 <HAL_GPIO_Init+0x2a4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d058      	beq.n	800236a <HAL_GPIO_Init+0xfa>
 80022b8:	4a96      	ldr	r2, [pc, #600]	; (8002514 <HAL_GPIO_Init+0x2a4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d86f      	bhi.n	800239e <HAL_GPIO_Init+0x12e>
 80022be:	4a96      	ldr	r2, [pc, #600]	; (8002518 <HAL_GPIO_Init+0x2a8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d052      	beq.n	800236a <HAL_GPIO_Init+0xfa>
 80022c4:	4a94      	ldr	r2, [pc, #592]	; (8002518 <HAL_GPIO_Init+0x2a8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d869      	bhi.n	800239e <HAL_GPIO_Init+0x12e>
 80022ca:	4a94      	ldr	r2, [pc, #592]	; (800251c <HAL_GPIO_Init+0x2ac>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d04c      	beq.n	800236a <HAL_GPIO_Init+0xfa>
 80022d0:	4a92      	ldr	r2, [pc, #584]	; (800251c <HAL_GPIO_Init+0x2ac>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d863      	bhi.n	800239e <HAL_GPIO_Init+0x12e>
 80022d6:	4a92      	ldr	r2, [pc, #584]	; (8002520 <HAL_GPIO_Init+0x2b0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d046      	beq.n	800236a <HAL_GPIO_Init+0xfa>
 80022dc:	4a90      	ldr	r2, [pc, #576]	; (8002520 <HAL_GPIO_Init+0x2b0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d85d      	bhi.n	800239e <HAL_GPIO_Init+0x12e>
 80022e2:	2b12      	cmp	r3, #18
 80022e4:	d82a      	bhi.n	800233c <HAL_GPIO_Init+0xcc>
 80022e6:	2b12      	cmp	r3, #18
 80022e8:	d859      	bhi.n	800239e <HAL_GPIO_Init+0x12e>
 80022ea:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <HAL_GPIO_Init+0x80>)
 80022ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f0:	0800236b 	.word	0x0800236b
 80022f4:	08002345 	.word	0x08002345
 80022f8:	08002357 	.word	0x08002357
 80022fc:	08002399 	.word	0x08002399
 8002300:	0800239f 	.word	0x0800239f
 8002304:	0800239f 	.word	0x0800239f
 8002308:	0800239f 	.word	0x0800239f
 800230c:	0800239f 	.word	0x0800239f
 8002310:	0800239f 	.word	0x0800239f
 8002314:	0800239f 	.word	0x0800239f
 8002318:	0800239f 	.word	0x0800239f
 800231c:	0800239f 	.word	0x0800239f
 8002320:	0800239f 	.word	0x0800239f
 8002324:	0800239f 	.word	0x0800239f
 8002328:	0800239f 	.word	0x0800239f
 800232c:	0800239f 	.word	0x0800239f
 8002330:	0800239f 	.word	0x0800239f
 8002334:	0800234d 	.word	0x0800234d
 8002338:	08002361 	.word	0x08002361
 800233c:	4a79      	ldr	r2, [pc, #484]	; (8002524 <HAL_GPIO_Init+0x2b4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002342:	e02c      	b.n	800239e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	623b      	str	r3, [r7, #32]
          break;
 800234a:	e029      	b.n	80023a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	3304      	adds	r3, #4
 8002352:	623b      	str	r3, [r7, #32]
          break;
 8002354:	e024      	b.n	80023a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	3308      	adds	r3, #8
 800235c:	623b      	str	r3, [r7, #32]
          break;
 800235e:	e01f      	b.n	80023a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	330c      	adds	r3, #12
 8002366:	623b      	str	r3, [r7, #32]
          break;
 8002368:	e01a      	b.n	80023a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002372:	2304      	movs	r3, #4
 8002374:	623b      	str	r3, [r7, #32]
          break;
 8002376:	e013      	b.n	80023a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002380:	2308      	movs	r3, #8
 8002382:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	611a      	str	r2, [r3, #16]
          break;
 800238a:	e009      	b.n	80023a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800238c:	2308      	movs	r3, #8
 800238e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	615a      	str	r2, [r3, #20]
          break;
 8002396:	e003      	b.n	80023a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
          break;
 800239c:	e000      	b.n	80023a0 <HAL_GPIO_Init+0x130>
          break;
 800239e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2bff      	cmp	r3, #255	; 0xff
 80023a4:	d801      	bhi.n	80023aa <HAL_GPIO_Init+0x13a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	e001      	b.n	80023ae <HAL_GPIO_Init+0x13e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2bff      	cmp	r3, #255	; 0xff
 80023b4:	d802      	bhi.n	80023bc <HAL_GPIO_Init+0x14c>
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	e002      	b.n	80023c2 <HAL_GPIO_Init+0x152>
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	3b08      	subs	r3, #8
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	210f      	movs	r1, #15
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	401a      	ands	r2, r3
 80023d4:	6a39      	ldr	r1, [r7, #32]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	431a      	orrs	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80b1 	beq.w	8002552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023f0:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <HAL_GPIO_Init+0x2b8>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a4c      	ldr	r2, [pc, #304]	; (8002528 <HAL_GPIO_Init+0x2b8>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <HAL_GPIO_Init+0x2b8>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002408:	4a48      	ldr	r2, [pc, #288]	; (800252c <HAL_GPIO_Init+0x2bc>)
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002414:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	220f      	movs	r2, #15
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a40      	ldr	r2, [pc, #256]	; (8002530 <HAL_GPIO_Init+0x2c0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d013      	beq.n	800245c <HAL_GPIO_Init+0x1ec>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a3f      	ldr	r2, [pc, #252]	; (8002534 <HAL_GPIO_Init+0x2c4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d00d      	beq.n	8002458 <HAL_GPIO_Init+0x1e8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a3e      	ldr	r2, [pc, #248]	; (8002538 <HAL_GPIO_Init+0x2c8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d007      	beq.n	8002454 <HAL_GPIO_Init+0x1e4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a3d      	ldr	r2, [pc, #244]	; (800253c <HAL_GPIO_Init+0x2cc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_GPIO_Init+0x1e0>
 800244c:	2303      	movs	r3, #3
 800244e:	e006      	b.n	800245e <HAL_GPIO_Init+0x1ee>
 8002450:	2304      	movs	r3, #4
 8002452:	e004      	b.n	800245e <HAL_GPIO_Init+0x1ee>
 8002454:	2302      	movs	r3, #2
 8002456:	e002      	b.n	800245e <HAL_GPIO_Init+0x1ee>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_GPIO_Init+0x1ee>
 800245c:	2300      	movs	r3, #0
 800245e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800246e:	492f      	ldr	r1, [pc, #188]	; (800252c <HAL_GPIO_Init+0x2bc>)
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002488:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	492c      	ldr	r1, [pc, #176]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	43db      	mvns	r3, r3
 800249e:	4928      	ldr	r1, [pc, #160]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024b0:	4b23      	ldr	r3, [pc, #140]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4922      	ldr	r1, [pc, #136]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	491e      	ldr	r1, [pc, #120]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4918      	ldr	r1, [pc, #96]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024e6:	4b16      	ldr	r3, [pc, #88]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4914      	ldr	r1, [pc, #80]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d021      	beq.n	8002544 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <HAL_GPIO_Init+0x2d0>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
 800250c:	e021      	b.n	8002552 <HAL_GPIO_Init+0x2e2>
 800250e:	bf00      	nop
 8002510:	10320000 	.word	0x10320000
 8002514:	10310000 	.word	0x10310000
 8002518:	10220000 	.word	0x10220000
 800251c:	10210000 	.word	0x10210000
 8002520:	10120000 	.word	0x10120000
 8002524:	10110000 	.word	0x10110000
 8002528:	40021000 	.word	0x40021000
 800252c:	40010000 	.word	0x40010000
 8002530:	40010800 	.word	0x40010800
 8002534:	40010c00 	.word	0x40010c00
 8002538:	40011000 	.word	0x40011000
 800253c:	40011400 	.word	0x40011400
 8002540:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002544:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <HAL_GPIO_Init+0x304>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	43db      	mvns	r3, r3
 800254c:	4909      	ldr	r1, [pc, #36]	; (8002574 <HAL_GPIO_Init+0x304>)
 800254e:	4013      	ands	r3, r2
 8002550:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	f47f ae8e 	bne.w	8002284 <HAL_GPIO_Init+0x14>
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	372c      	adds	r7, #44	; 0x2c
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40010400 	.word	0x40010400

08002578 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	e001      	b.n	800259a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr

080025a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]
 80025b2:	4613      	mov	r3, r2
 80025b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b6:	787b      	ldrb	r3, [r7, #1]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025bc:	887a      	ldrh	r2, [r7, #2]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025c2:	e003      	b.n	80025cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	041a      	lsls	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	611a      	str	r2, [r3, #16]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e26c      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8087 	beq.w	8002706 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025f8:	4b92      	ldr	r3, [pc, #584]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b04      	cmp	r3, #4
 8002602:	d00c      	beq.n	800261e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002604:	4b8f      	ldr	r3, [pc, #572]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d112      	bne.n	8002636 <HAL_RCC_OscConfig+0x5e>
 8002610:	4b8c      	ldr	r3, [pc, #560]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d10b      	bne.n	8002636 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261e:	4b89      	ldr	r3, [pc, #548]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d06c      	beq.n	8002704 <HAL_RCC_OscConfig+0x12c>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d168      	bne.n	8002704 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e246      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x76>
 8002640:	4b80      	ldr	r3, [pc, #512]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a7f      	ldr	r2, [pc, #508]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e02e      	b.n	80026ac <HAL_RCC_OscConfig+0xd4>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x98>
 8002656:	4b7b      	ldr	r3, [pc, #492]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7a      	ldr	r2, [pc, #488]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b78      	ldr	r3, [pc, #480]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a77      	ldr	r2, [pc, #476]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e01d      	b.n	80026ac <HAL_RCC_OscConfig+0xd4>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0xbc>
 800267a:	4b72      	ldr	r3, [pc, #456]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a71      	ldr	r2, [pc, #452]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6e      	ldr	r2, [pc, #440]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0xd4>
 8002694:	4b6b      	ldr	r3, [pc, #428]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a6a      	ldr	r2, [pc, #424]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b68      	ldr	r3, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a67      	ldr	r2, [pc, #412]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7ff f8f4 	bl	80018a0 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7ff f8f0 	bl	80018a0 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1fa      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b5d      	ldr	r3, [pc, #372]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0xe4>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff f8e0 	bl	80018a0 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7ff f8dc 	bl	80018a0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1e6      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x10c>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d063      	beq.n	80027da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002712:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800271e:	4b49      	ldr	r3, [pc, #292]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 030c 	and.w	r3, r3, #12
 8002726:	2b08      	cmp	r3, #8
 8002728:	d11c      	bne.n	8002764 <HAL_RCC_OscConfig+0x18c>
 800272a:	4b46      	ldr	r3, [pc, #280]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d116      	bne.n	8002764 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_RCC_OscConfig+0x176>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e1ba      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4939      	ldr	r1, [pc, #228]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	e03a      	b.n	80027da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	4b36      	ldr	r3, [pc, #216]	; (8002848 <HAL_RCC_OscConfig+0x270>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7ff f895 	bl	80018a0 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277a:	f7ff f891 	bl	80018a0 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e19b      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4927      	ldr	r1, [pc, #156]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
 80027ac:	e015      	b.n	80027da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ae:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_RCC_OscConfig+0x270>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff f874 	bl	80018a0 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027bc:	f7ff f870 	bl	80018a0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e17a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d03a      	beq.n	800285c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d019      	beq.n	8002822 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_RCC_OscConfig+0x274>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f4:	f7ff f854 	bl	80018a0 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027fc:	f7ff f850 	bl	80018a0 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e15a      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_RCC_OscConfig+0x26c>)
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800281a:	2001      	movs	r0, #1
 800281c:	f000 fae8 	bl	8002df0 <RCC_Delay>
 8002820:	e01c      	b.n	800285c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_OscConfig+0x274>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002828:	f7ff f83a 	bl	80018a0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282e:	e00f      	b.n	8002850 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7ff f836 	bl	80018a0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d908      	bls.n	8002850 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e140      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	42420000 	.word	0x42420000
 800284c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	4b9e      	ldr	r3, [pc, #632]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e9      	bne.n	8002830 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80a6 	beq.w	80029b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286e:	4b97      	ldr	r3, [pc, #604]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b94      	ldr	r3, [pc, #592]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a93      	ldr	r2, [pc, #588]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	61d3      	str	r3, [r2, #28]
 8002886:	4b91      	ldr	r3, [pc, #580]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b8e      	ldr	r3, [pc, #568]	; (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d118      	bne.n	80028d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a2:	4b8b      	ldr	r3, [pc, #556]	; (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a8a      	ldr	r2, [pc, #552]	; (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fff7 	bl	80018a0 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7fe fff3 	bl	80018a0 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0fd      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c8:	4b81      	ldr	r3, [pc, #516]	; (8002ad0 <HAL_RCC_OscConfig+0x4f8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x312>
 80028dc:	4b7b      	ldr	r3, [pc, #492]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	4a7a      	ldr	r2, [pc, #488]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6213      	str	r3, [r2, #32]
 80028e8:	e02d      	b.n	8002946 <HAL_RCC_OscConfig+0x36e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x334>
 80028f2:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a72      	ldr	r2, [pc, #456]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	e01c      	b.n	8002946 <HAL_RCC_OscConfig+0x36e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b05      	cmp	r3, #5
 8002912:	d10c      	bne.n	800292e <HAL_RCC_OscConfig+0x356>
 8002914:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4a6c      	ldr	r2, [pc, #432]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	6213      	str	r3, [r2, #32]
 8002920:	4b6a      	ldr	r3, [pc, #424]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a69      	ldr	r2, [pc, #420]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6213      	str	r3, [r2, #32]
 800292c:	e00b      	b.n	8002946 <HAL_RCC_OscConfig+0x36e>
 800292e:	4b67      	ldr	r3, [pc, #412]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a66      	ldr	r2, [pc, #408]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6213      	str	r3, [r2, #32]
 800293a:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002940:	f023 0304 	bic.w	r3, r3, #4
 8002944:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d015      	beq.n	800297a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294e:	f7fe ffa7 	bl	80018a0 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe ffa3 	bl	80018a0 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0ab      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	4b57      	ldr	r3, [pc, #348]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ee      	beq.n	8002956 <HAL_RCC_OscConfig+0x37e>
 8002978:	e014      	b.n	80029a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7fe ff91 	bl	80018a0 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe ff8d 	bl	80018a0 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e095      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002998:	4b4c      	ldr	r3, [pc, #304]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ee      	bne.n	8002982 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d105      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029aa:	4b48      	ldr	r3, [pc, #288]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a47      	ldr	r2, [pc, #284]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8081 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c0:	4b42      	ldr	r3, [pc, #264]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d061      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d146      	bne.n	8002a62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d4:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_RCC_OscConfig+0x4fc>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7fe ff61 	bl	80018a0 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe ff5d 	bl	80018a0 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e067      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f4:	4b35      	ldr	r3, [pc, #212]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a08:	d108      	bne.n	8002a1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a0a:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	492d      	ldr	r1, [pc, #180]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a19      	ldr	r1, [r3, #32]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	4927      	ldr	r1, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_RCC_OscConfig+0x4fc>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe ff31 	bl	80018a0 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a42:	f7fe ff2d 	bl	80018a0 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e037      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x46a>
 8002a60:	e02f      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <HAL_RCC_OscConfig+0x4fc>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe ff1a 	bl	80018a0 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe ff16 	bl	80018a0 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e020      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1f0      	bne.n	8002a70 <HAL_RCC_OscConfig+0x498>
 8002a8e:	e018      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e013      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x4f4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	42420060 	.word	0x42420060

08002ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d0      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d910      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0207 	bic.w	r2, r3, #7
 8002b02:	4965      	ldr	r1, [pc, #404]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d040      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d115      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e073      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba6:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f023 0203 	bic.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	4936      	ldr	r1, [pc, #216]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe fe6a 	bl	80018a0 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	e00a      	b.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd0:	f7fe fe66 	bl	80018a0 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e053      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 020c 	and.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d1eb      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d210      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 0207 	bic.w	r2, r3, #7
 8002c0e:	4922      	ldr	r1, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fb08 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40022000 	.word	0x40022000
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08006cb4 	.word	0x08006cb4
 8002ca4:	20000008 	.word	0x20000008
 8002ca8:	2000000c 	.word	0x2000000c

08002cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d002      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x30>
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d003      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cda:	e027      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cde:	613b      	str	r3, [r7, #16]
      break;
 8002ce0:	e027      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0c9b      	lsrs	r3, r3, #18
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0c5b      	lsrs	r3, r3, #17
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	4a11      	ldr	r2, [pc, #68]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a0d      	ldr	r2, [pc, #52]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d0e:	fb02 f203 	mul.w	r2, r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e004      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	613b      	str	r3, [r7, #16]
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d2e:	613b      	str	r3, [r7, #16]
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	693b      	ldr	r3, [r7, #16]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	08006ccc 	.word	0x08006ccc
 8002d4c:	08006cdc 	.word	0x08006cdc
 8002d50:	003d0900 	.word	0x003d0900

08002d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	20000008 	.word	0x20000008

08002d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d6c:	f7ff fff2 	bl	8002d54 <HAL_RCC_GetHCLKFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	0adb      	lsrs	r3, r3, #11
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	4903      	ldr	r1, [pc, #12]	; (8002d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	08006cc4 	.word	0x08006cc4

08002d90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCC_GetClockConfig+0x58>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dac:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_RCC_GetClockConfig+0x58>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_GetClockConfig+0x58>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RCC_GetClockConfig+0x58>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_GetClockConfig+0x5c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0207 	and.w	r2, r3, #7
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40022000 	.word	0x40022000

08002df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df8:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <RCC_Delay+0x34>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <RCC_Delay+0x38>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0a5b      	lsrs	r3, r3, #9
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	fb02 f303 	mul.w	r3, r2, r3
 8002e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e0c:	bf00      	nop
  }
  while (Delay --);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e5a      	subs	r2, r3, #1
 8002e12:	60fa      	str	r2, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f9      	bne.n	8002e0c <RCC_Delay+0x1c>
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr
 8002e24:	20000008 	.word	0x20000008
 8002e28:	10624dd3 	.word	0x10624dd3

08002e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d07d      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4c:	4b4f      	ldr	r3, [pc, #316]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10d      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e58:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	4a4b      	ldr	r2, [pc, #300]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e62:	61d3      	str	r3, [r2, #28]
 8002e64:	4b49      	ldr	r3, [pc, #292]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e70:	2301      	movs	r3, #1
 8002e72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d118      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e80:	4b43      	ldr	r3, [pc, #268]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a42      	ldr	r2, [pc, #264]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fd08 	bl	80018a0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	e008      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e94:	f7fe fd04 	bl	80018a0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e06d      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eb2:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02e      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d027      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ed0:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eda:	4b2e      	ldr	r3, [pc, #184]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee0:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ee6:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d014      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fcd3 	bl	80018a0 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe fccf 	bl	80018a0 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e036      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ee      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4917      	ldr	r1, [pc, #92]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f50:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	490b      	ldr	r1, [pc, #44]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4904      	ldr	r1, [pc, #16]	; (8002f8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40007000 	.word	0x40007000
 8002f94:	42420440 	.word	0x42420440

08002f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e041      	b.n	800302e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fe f950 	bl	8001264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f000 fabe 	bl	8003558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d001      	beq.n	8003050 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e032      	b.n	80030b6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a18      	ldr	r2, [pc, #96]	; (80030c0 <HAL_TIM_Base_Start+0x88>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00e      	beq.n	8003080 <HAL_TIM_Base_Start+0x48>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306a:	d009      	beq.n	8003080 <HAL_TIM_Base_Start+0x48>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <HAL_TIM_Base_Start+0x8c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <HAL_TIM_Base_Start+0x48>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <HAL_TIM_Base_Start+0x90>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d111      	bne.n	80030a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b06      	cmp	r3, #6
 8003090:	d010      	beq.n	80030b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a2:	e007      	b.n	80030b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40000800 	.word	0x40000800

080030cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d001      	beq.n	80030e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e03a      	b.n	800315a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_TIM_Base_Start_IT+0x98>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00e      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x58>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310e:	d009      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x58>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <HAL_TIM_Base_Start_IT+0x9c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_TIM_Base_Start_IT+0x58>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <HAL_TIM_Base_Start_IT+0xa0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d111      	bne.n	8003148 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b06      	cmp	r3, #6
 8003134:	d010      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003146:	e007      	b.n	8003158 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	40012c00 	.word	0x40012c00
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800

08003170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b02      	cmp	r3, #2
 8003184:	d122      	bne.n	80031cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b02      	cmp	r3, #2
 8003192:	d11b      	bne.n	80031cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0202 	mvn.w	r2, #2
 800319c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f9b4 	bl	8003520 <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9a7 	bl	800350e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f9b6 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d122      	bne.n	8003220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d11b      	bne.n	8003220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0204 	mvn.w	r2, #4
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2202      	movs	r2, #2
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f98a 	bl	8003520 <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f97d 	bl	800350e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f98c 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b08      	cmp	r3, #8
 800322c:	d122      	bne.n	8003274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b08      	cmp	r3, #8
 800323a:	d11b      	bne.n	8003274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0208 	mvn.w	r2, #8
 8003244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2204      	movs	r2, #4
 800324a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f960 	bl	8003520 <HAL_TIM_IC_CaptureCallback>
 8003260:	e005      	b.n	800326e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f953 	bl	800350e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f962 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b10      	cmp	r3, #16
 8003280:	d122      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b10      	cmp	r3, #16
 800328e:	d11b      	bne.n	80032c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0210 	mvn.w	r2, #16
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2208      	movs	r2, #8
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f936 	bl	8003520 <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f929 	bl	800350e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f938 	bl	8003532 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10e      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d107      	bne.n	80032f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0201 	mvn.w	r2, #1
 80032ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7fd ff2a 	bl	8001148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b80      	cmp	r3, #128	; 0x80
 8003300:	d10e      	bne.n	8003320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	d107      	bne.n	8003320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fa7b 	bl	8003816 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d10e      	bne.n	800334c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	d107      	bne.n	800334c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8fc 	bl	8003544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b20      	cmp	r3, #32
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b20      	cmp	r3, #32
 8003366:	d107      	bne.n	8003378 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0220 	mvn.w	r2, #32
 8003370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa46 	bl	8003804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_TIM_ConfigClockSource+0x1c>
 8003398:	2302      	movs	r3, #2
 800339a:	e0b4      	b.n	8003506 <HAL_TIM_ConfigClockSource+0x186>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d4:	d03e      	beq.n	8003454 <HAL_TIM_ConfigClockSource+0xd4>
 80033d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033da:	f200 8087 	bhi.w	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	f000 8086 	beq.w	80034f2 <HAL_TIM_ConfigClockSource+0x172>
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ea:	d87f      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 80033ec:	2b70      	cmp	r3, #112	; 0x70
 80033ee:	d01a      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0xa6>
 80033f0:	2b70      	cmp	r3, #112	; 0x70
 80033f2:	d87b      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 80033f4:	2b60      	cmp	r3, #96	; 0x60
 80033f6:	d050      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x11a>
 80033f8:	2b60      	cmp	r3, #96	; 0x60
 80033fa:	d877      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 80033fc:	2b50      	cmp	r3, #80	; 0x50
 80033fe:	d03c      	beq.n	800347a <HAL_TIM_ConfigClockSource+0xfa>
 8003400:	2b50      	cmp	r3, #80	; 0x50
 8003402:	d873      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d058      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x13a>
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d86f      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 800340c:	2b30      	cmp	r3, #48	; 0x30
 800340e:	d064      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x15a>
 8003410:	2b30      	cmp	r3, #48	; 0x30
 8003412:	d86b      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b20      	cmp	r3, #32
 8003416:	d060      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x15a>
 8003418:	2b20      	cmp	r3, #32
 800341a:	d867      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05c      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x15a>
 8003420:	2b10      	cmp	r3, #16
 8003422:	d05a      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x15a>
 8003424:	e062      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f000 f968 	bl	800370a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	609a      	str	r2, [r3, #8]
      break;
 8003452:	e04f      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f000 f951 	bl	800370a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003476:	609a      	str	r2, [r3, #8]
      break;
 8003478:	e03c      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	f000 f8c8 	bl	800361c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2150      	movs	r1, #80	; 0x50
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f91f 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 8003498:	e02c      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f000 f8e6 	bl	8003678 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2160      	movs	r1, #96	; 0x60
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f90f 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 80034b8:	e01c      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f000 f8a8 	bl	800361c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2140      	movs	r1, #64	; 0x40
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 f8ff 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 80034d8:	e00c      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f000 f8f6 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 80034ea:	e003      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      break;
 80034f0:	e000      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003504:	7bfb      	ldrb	r3, [r7, #15]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr

08003532 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
	...

08003558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <TIM_Base_SetConfig+0xb8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00b      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003576:	d007      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a26      	ldr	r2, [pc, #152]	; (8003614 <TIM_Base_SetConfig+0xbc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a25      	ldr	r2, [pc, #148]	; (8003618 <TIM_Base_SetConfig+0xc0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <TIM_Base_SetConfig+0xb8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00b      	beq.n	80035ba <TIM_Base_SetConfig+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d007      	beq.n	80035ba <TIM_Base_SetConfig+0x62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <TIM_Base_SetConfig+0xbc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d003      	beq.n	80035ba <TIM_Base_SetConfig+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a18      	ldr	r2, [pc, #96]	; (8003618 <TIM_Base_SetConfig+0xc0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d108      	bne.n	80035cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <TIM_Base_SetConfig+0xb8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	615a      	str	r2, [r3, #20]
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800

0800361c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f023 0201 	bic.w	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f023 030a 	bic.w	r3, r3, #10
 8003658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	f023 0210 	bic.w	r2, r3, #16
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	031b      	lsls	r3, r3, #12
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	621a      	str	r2, [r3, #32]
}
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f043 0307 	orr.w	r3, r3, #7
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	609a      	str	r2, [r3, #8]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800370a:	b480      	push	{r7}
 800370c:	b087      	sub	sp, #28
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003724:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	021a      	lsls	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	431a      	orrs	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4313      	orrs	r3, r2
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	609a      	str	r2, [r3, #8]
}
 800373e:	bf00      	nop
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800375c:	2302      	movs	r3, #2
 800375e:	e046      	b.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00e      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ac:	d009      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d004      	beq.n	80037c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a10      	ldr	r2, [pc, #64]	; (8003800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10c      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800

08003804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <xQueueGenericReset>:
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
 8003832:	2301      	movs	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xQueueGenericReset+0x2e>
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xQueueGenericReset+0x2c>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05d      	beq.n	8003918 <xQueueGenericReset+0xf0>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d059      	beq.n	8003918 <xQueueGenericReset+0xf0>
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	2100      	movs	r1, #0
 800386e:	fba3 2302 	umull	r2, r3, r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d000      	beq.n	8003878 <xQueueGenericReset+0x50>
 8003876:	2101      	movs	r1, #1
 8003878:	460b      	mov	r3, r1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d14c      	bne.n	8003918 <xQueueGenericReset+0xf0>
 800387e:	f002 fef7 	bl	8006670 <vPortEnterCritical>
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	6939      	ldr	r1, [r7, #16]
 800388c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	441a      	add	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2200      	movs	r2, #0
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	3b01      	subs	r3, #1
 80038b0:	6939      	ldr	r1, [r7, #16]
 80038b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	441a      	add	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	22ff      	movs	r2, #255	; 0xff
 80038c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	22ff      	movs	r2, #255	; 0xff
 80038ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d114      	bne.n	80038fe <xQueueGenericReset+0xd6>
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01a      	beq.n	8003912 <xQueueGenericReset+0xea>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	3310      	adds	r3, #16
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fdc3 	bl	800546c <xTaskRemoveFromEventList>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d012      	beq.n	8003912 <xQueueGenericReset+0xea>
 80038ec:	4b15      	ldr	r3, [pc, #84]	; (8003944 <xQueueGenericReset+0x11c>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	e009      	b.n	8003912 <xQueueGenericReset+0xea>
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3310      	adds	r3, #16
 8003902:	4618      	mov	r0, r3
 8003904:	f002 fd36 	bl	8006374 <vListInitialise>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	3324      	adds	r3, #36	; 0x24
 800390c:	4618      	mov	r0, r3
 800390e:	f002 fd31 	bl	8006374 <vListInitialise>
 8003912:	f002 fedd 	bl	80066d0 <vPortExitCritical>
 8003916:	e001      	b.n	800391c <xQueueGenericReset+0xf4>
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <xQueueGenericReset+0x110>
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <xQueueGenericReset+0x10e>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <xQueueGenericCreate>:
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	71fb      	strb	r3, [r7, #7]
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02e      	beq.n	80039be <xQueueGenericCreate+0x76>
 8003960:	2100      	movs	r1, #0
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	fba3 2302 	umull	r2, r3, r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d000      	beq.n	8003970 <xQueueGenericCreate+0x28>
 800396e:	2101      	movs	r1, #1
 8003970:	460b      	mov	r3, r1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d123      	bne.n	80039be <xQueueGenericCreate+0x76>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003982:	d81c      	bhi.n	80039be <xQueueGenericCreate+0x76>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	fb02 f303 	mul.w	r3, r2, r3
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3350      	adds	r3, #80	; 0x50
 8003992:	4618      	mov	r0, r3
 8003994:	f002 fcca 	bl	800632c <pvPortMalloc>
 8003998:	61f8      	str	r0, [r7, #28]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01c      	beq.n	80039da <xQueueGenericCreate+0x92>
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3350      	adds	r3, #80	; 0x50
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	79fa      	ldrb	r2, [r7, #7]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 f814 	bl	80039e4 <prvInitialiseNewQueue>
 80039bc:	e00d      	b.n	80039da <xQueueGenericCreate+0x92>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xQueueGenericCreate+0x92>
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xQueueGenericCreate+0x90>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4618      	mov	r0, r3
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <prvInitialiseNewQueue>:
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	70fb      	strb	r3, [r7, #3]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d103      	bne.n	8003a00 <prvInitialiseNewQueue+0x1c>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	e002      	b.n	8003a06 <prvInitialiseNewQueue+0x22>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
 8003a12:	2101      	movs	r1, #1
 8003a14:	69b8      	ldr	r0, [r7, #24]
 8003a16:	f7ff ff07 	bl	8003828 <xQueueGenericReset>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <xQueueGenericSend>:
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08e      	sub	sp, #56	; 0x38
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	633b      	str	r3, [r7, #48]	; 0x30
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <xQueueGenericSend+0x32>
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5a:	bf00      	nop
 8003a5c:	e7fe      	b.n	8003a5c <xQueueGenericSend+0x30>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <xQueueGenericSend+0x40>
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <xQueueGenericSend+0x44>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <xQueueGenericSend+0x46>
 8003a70:	2300      	movs	r3, #0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10a      	bne.n	8003a8c <xQueueGenericSend+0x60>
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <xQueueGenericSend+0x5e>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d103      	bne.n	8003a9a <xQueueGenericSend+0x6e>
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <xQueueGenericSend+0x72>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <xQueueGenericSend+0x74>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <xQueueGenericSend+0x8e>
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	623b      	str	r3, [r7, #32]
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <xQueueGenericSend+0x8c>
 8003aba:	f001 ff45 	bl	8005948 <xTaskGetSchedulerState>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <xQueueGenericSend+0x9e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <xQueueGenericSend+0xa2>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <xQueueGenericSend+0xa4>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10a      	bne.n	8003aea <xQueueGenericSend+0xbe>
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	bf00      	nop
 8003ae8:	e7fe      	b.n	8003ae8 <xQueueGenericSend+0xbc>
 8003aea:	f002 fdc1 	bl	8006670 <vPortEnterCritical>
 8003aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d302      	bcc.n	8003b00 <xQueueGenericSend+0xd4>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d129      	bne.n	8003b54 <xQueueGenericSend+0x128>
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b06:	f000 fcbc 	bl	8004482 <prvCopyDataToQueue>
 8003b0a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d010      	beq.n	8003b36 <xQueueGenericSend+0x10a>
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	3324      	adds	r3, #36	; 0x24
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fca7 	bl	800546c <xTaskRemoveFromEventList>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <xQueueGenericSend+0x120>
 8003b24:	4b3f      	ldr	r3, [pc, #252]	; (8003c24 <xQueueGenericSend+0x1f8>)
 8003b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	e00a      	b.n	8003b4c <xQueueGenericSend+0x120>
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <xQueueGenericSend+0x120>
 8003b3c:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <xQueueGenericSend+0x1f8>)
 8003b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f002 fdc0 	bl	80066d0 <vPortExitCritical>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e063      	b.n	8003c1c <xQueueGenericSend+0x1f0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <xQueueGenericSend+0x136>
 8003b5a:	f002 fdb9 	bl	80066d0 <vPortExitCritical>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e05c      	b.n	8003c1c <xQueueGenericSend+0x1f0>
 8003b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d106      	bne.n	8003b76 <xQueueGenericSend+0x14a>
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f001 fd55 	bl	800561c <vTaskInternalSetTimeOutState>
 8003b72:	2301      	movs	r3, #1
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
 8003b76:	f002 fdab 	bl	80066d0 <vPortExitCritical>
 8003b7a:	f001 f8e7 	bl	8004d4c <vTaskSuspendAll>
 8003b7e:	f002 fd77 	bl	8006670 <vPortEnterCritical>
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d103      	bne.n	8003b98 <xQueueGenericSend+0x16c>
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b9e:	b25b      	sxtb	r3, r3
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d103      	bne.n	8003bae <xQueueGenericSend+0x182>
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bae:	f002 fd8f 	bl	80066d0 <vPortExitCritical>
 8003bb2:	1d3a      	adds	r2, r7, #4
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f001 fd44 	bl	8005648 <xTaskCheckForTimeOut>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d124      	bne.n	8003c10 <xQueueGenericSend+0x1e4>
 8003bc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc8:	f000 fd53 	bl	8004672 <prvIsQueueFull>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d018      	beq.n	8003c04 <xQueueGenericSend+0x1d8>
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	3310      	adds	r3, #16
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fbdc 	bl	8005398 <vTaskPlaceOnEventList>
 8003be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be2:	f000 fcde 	bl	80045a2 <prvUnlockQueue>
 8003be6:	f001 f8f5 	bl	8004dd4 <xTaskResumeAll>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f47f af7c 	bne.w	8003aea <xQueueGenericSend+0xbe>
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <xQueueGenericSend+0x1f8>)
 8003bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	e772      	b.n	8003aea <xQueueGenericSend+0xbe>
 8003c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c06:	f000 fccc 	bl	80045a2 <prvUnlockQueue>
 8003c0a:	f001 f8e3 	bl	8004dd4 <xTaskResumeAll>
 8003c0e:	e76c      	b.n	8003aea <xQueueGenericSend+0xbe>
 8003c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c12:	f000 fcc6 	bl	80045a2 <prvUnlockQueue>
 8003c16:	f001 f8dd 	bl	8004dd4 <xTaskResumeAll>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3738      	adds	r7, #56	; 0x38
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	e000ed04 	.word	0xe000ed04

08003c28 <xQueueGenericSendFromISR>:
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b092      	sub	sp, #72	; 0x48
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	643b      	str	r3, [r7, #64]	; 0x40
 8003c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10a      	bne.n	8003c56 <xQueueGenericSendFromISR+0x2e>
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xQueueGenericSendFromISR+0x2c>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <xQueueGenericSendFromISR+0x3c>
 8003c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <xQueueGenericSendFromISR+0x40>
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <xQueueGenericSendFromISR+0x42>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <xQueueGenericSendFromISR+0x5c>
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <xQueueGenericSendFromISR+0x5a>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d103      	bne.n	8003c92 <xQueueGenericSendFromISR+0x6a>
 8003c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <xQueueGenericSendFromISR+0x6e>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <xQueueGenericSendFromISR+0x70>
 8003c96:	2300      	movs	r3, #0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xQueueGenericSendFromISR+0x8a>
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xQueueGenericSendFromISR+0x88>
 8003cb2:	f002 fe81 	bl	80069b8 <vPortValidateInterruptPriority>
 8003cb6:	f3ef 8211 	mrs	r2, BASEPRI
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	623a      	str	r2, [r7, #32]
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <xQueueGenericSendFromISR+0xbc>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d146      	bne.n	8003d72 <xQueueGenericSendFromISR+0x14a>
 8003ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003cfa:	f000 fbc2 	bl	8004482 <prvCopyDataToQueue>
 8003cfe:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	d112      	bne.n	8003d2e <xQueueGenericSendFromISR+0x106>
 8003d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d02d      	beq.n	8003d6c <xQueueGenericSendFromISR+0x144>
 8003d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d12:	3324      	adds	r3, #36	; 0x24
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 fba9 	bl	800546c <xTaskRemoveFromEventList>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d025      	beq.n	8003d6c <xQueueGenericSendFromISR+0x144>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d022      	beq.n	8003d6c <xQueueGenericSendFromISR+0x144>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	e01e      	b.n	8003d6c <xQueueGenericSendFromISR+0x144>
 8003d2e:	f001 f95b 	bl	8004fe8 <uxTaskGetNumberOfTasks>
 8003d32:	6338      	str	r0, [r7, #48]	; 0x30
 8003d34:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d916      	bls.n	8003d6c <xQueueGenericSendFromISR+0x144>
 8003d3e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8003d42:	2b7f      	cmp	r3, #127	; 0x7f
 8003d44:	d10a      	bne.n	8003d5c <xQueueGenericSendFromISR+0x134>
 8003d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	bf00      	nop
 8003d5a:	e7fe      	b.n	8003d5a <xQueueGenericSendFromISR+0x132>
 8003d5c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003d60:	3301      	adds	r3, #1
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	b25a      	sxtb	r2, r3
 8003d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d70:	e001      	b.n	8003d76 <xQueueGenericSendFromISR+0x14e>
 8003d72:	2300      	movs	r3, #0
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
 8003d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	bf00      	nop
 8003d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d84:	4618      	mov	r0, r3
 8003d86:	3748      	adds	r7, #72	; 0x48
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <xQueueGiveFromISR>:
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b090      	sub	sp, #64	; 0x40
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <xQueueGiveFromISR+0x2a>
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <xQueueGiveFromISR+0x28>
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <xQueueGiveFromISR+0x48>
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	623b      	str	r3, [r7, #32]
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xQueueGiveFromISR+0x46>
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <xQueueGiveFromISR+0x58>
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <xQueueGiveFromISR+0x5c>
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <xQueueGiveFromISR+0x5e>
 8003de8:	2300      	movs	r3, #0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <xQueueGiveFromISR+0x78>
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	bf00      	nop
 8003e02:	e7fe      	b.n	8003e02 <xQueueGiveFromISR+0x76>
 8003e04:	f002 fdd8 	bl	80069b8 <vPortValidateInterruptPriority>
 8003e08:	f3ef 8211 	mrs	r2, BASEPRI
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	61ba      	str	r2, [r7, #24]
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	637b      	str	r3, [r7, #52]	; 0x34
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d242      	bcs.n	8003eba <xQueueGiveFromISR+0x12e>
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
 8003e46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d112      	bne.n	8003e76 <xQueueGiveFromISR+0xea>
 8003e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d02d      	beq.n	8003eb4 <xQueueGiveFromISR+0x128>
 8003e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5a:	3324      	adds	r3, #36	; 0x24
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 fb05 	bl	800546c <xTaskRemoveFromEventList>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d025      	beq.n	8003eb4 <xQueueGiveFromISR+0x128>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d022      	beq.n	8003eb4 <xQueueGiveFromISR+0x128>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e01e      	b.n	8003eb4 <xQueueGiveFromISR+0x128>
 8003e76:	f001 f8b7 	bl	8004fe8 <uxTaskGetNumberOfTasks>
 8003e7a:	62b8      	str	r0, [r7, #40]	; 0x28
 8003e7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d916      	bls.n	8003eb4 <xQueueGiveFromISR+0x128>
 8003e86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e8c:	d10a      	bne.n	8003ea4 <xQueueGiveFromISR+0x118>
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	bf00      	nop
 8003ea2:	e7fe      	b.n	8003ea2 <xQueueGiveFromISR+0x116>
 8003ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	b25a      	sxtb	r2, r3
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb8:	e001      	b.n	8003ebe <xQueueGiveFromISR+0x132>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	bf00      	nop
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3740      	adds	r7, #64	; 0x40
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <xQueueReceive>:
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08c      	sub	sp, #48	; 0x30
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <xQueueReceive+0x30>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <xQueueReceive+0x2e>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <xQueueReceive+0x3e>
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <xQueueReceive+0x42>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <xQueueReceive+0x44>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xQueueReceive+0x5e>
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xQueueReceive+0x5c>
 8003f32:	f001 fd09 	bl	8005948 <xTaskGetSchedulerState>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <xQueueReceive+0x6e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <xQueueReceive+0x72>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <xQueueReceive+0x74>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <xQueueReceive+0x8e>
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xQueueReceive+0x8c>
 8003f62:	f002 fb85 	bl	8006670 <vPortEnterCritical>
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01f      	beq.n	8003fb2 <xQueueReceive+0xde>
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f76:	f000 faee 	bl	8004556 <prvCopyDataFromQueue>
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1e5a      	subs	r2, r3, #1
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
 8003f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00f      	beq.n	8003faa <xQueueReceive+0xd6>
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	3310      	adds	r3, #16
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 fa6c 	bl	800546c <xTaskRemoveFromEventList>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d007      	beq.n	8003faa <xQueueReceive+0xd6>
 8003f9a:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <xQueueReceive+0x1bc>)
 8003f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f002 fb91 	bl	80066d0 <vPortExitCritical>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e069      	b.n	8004086 <xQueueReceive+0x1b2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <xQueueReceive+0xec>
 8003fb8:	f002 fb8a 	bl	80066d0 <vPortExitCritical>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e062      	b.n	8004086 <xQueueReceive+0x1b2>
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <xQueueReceive+0x100>
 8003fc6:	f107 0310 	add.w	r3, r7, #16
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 fb26 	bl	800561c <vTaskInternalSetTimeOutState>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd4:	f002 fb7c 	bl	80066d0 <vPortExitCritical>
 8003fd8:	f000 feb8 	bl	8004d4c <vTaskSuspendAll>
 8003fdc:	f002 fb48 	bl	8006670 <vPortEnterCritical>
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe6:	b25b      	sxtb	r3, r3
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d103      	bne.n	8003ff6 <xQueueReceive+0x122>
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ffc:	b25b      	sxtb	r3, r3
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d103      	bne.n	800400c <xQueueReceive+0x138>
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800400c:	f002 fb60 	bl	80066d0 <vPortExitCritical>
 8004010:	1d3a      	adds	r2, r7, #4
 8004012:	f107 0310 	add.w	r3, r7, #16
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f001 fb15 	bl	8005648 <xTaskCheckForTimeOut>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d123      	bne.n	800406c <xQueueReceive+0x198>
 8004024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004026:	f000 fb0e 	bl	8004646 <prvIsQueueEmpty>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d017      	beq.n	8004060 <xQueueReceive+0x18c>
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	3324      	adds	r3, #36	; 0x24
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f001 f9ad 	bl	8005398 <vTaskPlaceOnEventList>
 800403e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004040:	f000 faaf 	bl	80045a2 <prvUnlockQueue>
 8004044:	f000 fec6 	bl	8004dd4 <xTaskResumeAll>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d189      	bne.n	8003f62 <xQueueReceive+0x8e>
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <xQueueReceive+0x1bc>)
 8004050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	e780      	b.n	8003f62 <xQueueReceive+0x8e>
 8004060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004062:	f000 fa9e 	bl	80045a2 <prvUnlockQueue>
 8004066:	f000 feb5 	bl	8004dd4 <xTaskResumeAll>
 800406a:	e77a      	b.n	8003f62 <xQueueReceive+0x8e>
 800406c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406e:	f000 fa98 	bl	80045a2 <prvUnlockQueue>
 8004072:	f000 feaf 	bl	8004dd4 <xTaskResumeAll>
 8004076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004078:	f000 fae5 	bl	8004646 <prvIsQueueEmpty>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	f43f af6f 	beq.w	8003f62 <xQueueReceive+0x8e>
 8004084:	2300      	movs	r3, #0
 8004086:	4618      	mov	r0, r3
 8004088:	3730      	adds	r7, #48	; 0x30
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <xQueueSemaphoreTake>:
 8004094:	b580      	push	{r7, lr}
 8004096:	b08c      	sub	sp, #48	; 0x30
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
 80040a6:	2300      	movs	r3, #0
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xQueueSemaphoreTake+0x32>
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xQueueSemaphoreTake+0x30>
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <xQueueSemaphoreTake+0x50>
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <xQueueSemaphoreTake+0x4e>
 80040e4:	f001 fc30 	bl	8005948 <xTaskGetSchedulerState>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d102      	bne.n	80040f4 <xQueueSemaphoreTake+0x60>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <xQueueSemaphoreTake+0x64>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <xQueueSemaphoreTake+0x66>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <xQueueSemaphoreTake+0x80>
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	bf00      	nop
 8004112:	e7fe      	b.n	8004112 <xQueueSemaphoreTake+0x7e>
 8004114:	f002 faac 	bl	8006670 <vPortEnterCritical>
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	623b      	str	r3, [r7, #32]
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d024      	beq.n	800416e <xQueueSemaphoreTake+0xda>
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	1e5a      	subs	r2, r3, #1
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	639a      	str	r2, [r3, #56]	; 0x38
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d104      	bne.n	800413e <xQueueSemaphoreTake+0xaa>
 8004134:	f001 fdf6 	bl	8005d24 <pvTaskIncrementMutexHeldCount>
 8004138:	4602      	mov	r2, r0
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	609a      	str	r2, [r3, #8]
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00f      	beq.n	8004166 <xQueueSemaphoreTake+0xd2>
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	3310      	adds	r3, #16
 800414a:	4618      	mov	r0, r3
 800414c:	f001 f98e 	bl	800546c <xTaskRemoveFromEventList>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <xQueueSemaphoreTake+0xd2>
 8004156:	4b4d      	ldr	r3, [pc, #308]	; (800428c <xQueueSemaphoreTake+0x1f8>)
 8004158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f002 fab3 	bl	80066d0 <vPortExitCritical>
 800416a:	2301      	movs	r3, #1
 800416c:	e089      	b.n	8004282 <xQueueSemaphoreTake+0x1ee>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d103      	bne.n	800417c <xQueueSemaphoreTake+0xe8>
 8004174:	f002 faac 	bl	80066d0 <vPortExitCritical>
 8004178:	2300      	movs	r3, #0
 800417a:	e082      	b.n	8004282 <xQueueSemaphoreTake+0x1ee>
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <xQueueSemaphoreTake+0xfc>
 8004182:	f107 0308 	add.w	r3, r7, #8
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fa48 	bl	800561c <vTaskInternalSetTimeOutState>
 800418c:	2301      	movs	r3, #1
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004190:	f002 fa9e 	bl	80066d0 <vPortExitCritical>
 8004194:	f000 fdda 	bl	8004d4c <vTaskSuspendAll>
 8004198:	f002 fa6a 	bl	8006670 <vPortEnterCritical>
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041a2:	b25b      	sxtb	r3, r3
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d103      	bne.n	80041b2 <xQueueSemaphoreTake+0x11e>
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041b8:	b25b      	sxtb	r3, r3
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d103      	bne.n	80041c8 <xQueueSemaphoreTake+0x134>
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c8:	f002 fa82 	bl	80066d0 <vPortExitCritical>
 80041cc:	463a      	mov	r2, r7
 80041ce:	f107 0308 	add.w	r3, r7, #8
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 fa37 	bl	8005648 <xTaskCheckForTimeOut>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d132      	bne.n	8004246 <xQueueSemaphoreTake+0x1b2>
 80041e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041e2:	f000 fa30 	bl	8004646 <prvIsQueueEmpty>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d026      	beq.n	800423a <xQueueSemaphoreTake+0x1a6>
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d109      	bne.n	8004208 <xQueueSemaphoreTake+0x174>
 80041f4:	f002 fa3c 	bl	8006670 <vPortEnterCritical>
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fbc1 	bl	8005984 <xTaskPriorityInherit>
 8004202:	62b8      	str	r0, [r7, #40]	; 0x28
 8004204:	f002 fa64 	bl	80066d0 <vPortExitCritical>
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	3324      	adds	r3, #36	; 0x24
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f001 f8c1 	bl	8005398 <vTaskPlaceOnEventList>
 8004216:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004218:	f000 f9c3 	bl	80045a2 <prvUnlockQueue>
 800421c:	f000 fdda 	bl	8004dd4 <xTaskResumeAll>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	f47f af76 	bne.w	8004114 <xQueueSemaphoreTake+0x80>
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <xQueueSemaphoreTake+0x1f8>)
 800422a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	e76c      	b.n	8004114 <xQueueSemaphoreTake+0x80>
 800423a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800423c:	f000 f9b1 	bl	80045a2 <prvUnlockQueue>
 8004240:	f000 fdc8 	bl	8004dd4 <xTaskResumeAll>
 8004244:	e766      	b.n	8004114 <xQueueSemaphoreTake+0x80>
 8004246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004248:	f000 f9ab 	bl	80045a2 <prvUnlockQueue>
 800424c:	f000 fdc2 	bl	8004dd4 <xTaskResumeAll>
 8004250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004252:	f000 f9f8 	bl	8004646 <prvIsQueueEmpty>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f43f af5b 	beq.w	8004114 <xQueueSemaphoreTake+0x80>
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00d      	beq.n	8004280 <xQueueSemaphoreTake+0x1ec>
 8004264:	f002 fa04 	bl	8006670 <vPortEnterCritical>
 8004268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800426a:	f000 f8f3 	bl	8004454 <prvGetDisinheritPriorityAfterTimeout>
 800426e:	61f8      	str	r0, [r7, #28]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	69f9      	ldr	r1, [r7, #28]
 8004276:	4618      	mov	r0, r3
 8004278:	f001 fcaa 	bl	8005bd0 <vTaskPriorityDisinheritAfterTimeout>
 800427c:	f002 fa28 	bl	80066d0 <vPortExitCritical>
 8004280:	2300      	movs	r3, #0
 8004282:	4618      	mov	r0, r3
 8004284:	3730      	adds	r7, #48	; 0x30
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	e000ed04 	.word	0xe000ed04

08004290 <xQueuePeek>:
 8004290:	b580      	push	{r7, lr}
 8004292:	b08e      	sub	sp, #56	; 0x38
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	2300      	movs	r3, #0
 800429e:	637b      	str	r3, [r7, #52]	; 0x34
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10a      	bne.n	80042c0 <xQueuePeek+0x30>
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <xQueuePeek+0x2e>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <xQueuePeek+0x3e>
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <xQueuePeek+0x42>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xQueuePeek+0x44>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10a      	bne.n	80042ee <xQueuePeek+0x5e>
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	623b      	str	r3, [r7, #32]
 80042ea:	bf00      	nop
 80042ec:	e7fe      	b.n	80042ec <xQueuePeek+0x5c>
 80042ee:	f001 fb2b 	bl	8005948 <xTaskGetSchedulerState>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <xQueuePeek+0x6e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <xQueuePeek+0x72>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <xQueuePeek+0x74>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <xQueuePeek+0x8e>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xQueuePeek+0x8c>
 800431e:	f002 f9a7 	bl	8006670 <vPortEnterCritical>
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d021      	beq.n	8004372 <xQueuePeek+0xe2>
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004338:	f000 f90d 	bl	8004556 <prvCopyDataFromQueue>
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004340:	60da      	str	r2, [r3, #12]
 8004342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00f      	beq.n	800436a <xQueuePeek+0xda>
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	3324      	adds	r3, #36	; 0x24
 800434e:	4618      	mov	r0, r3
 8004350:	f001 f88c 	bl	800546c <xTaskRemoveFromEventList>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <xQueuePeek+0xda>
 800435a:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <xQueuePeek+0x1c0>)
 800435c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f002 f9b1 	bl	80066d0 <vPortExitCritical>
 800436e:	2301      	movs	r3, #1
 8004370:	e069      	b.n	8004446 <xQueuePeek+0x1b6>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d103      	bne.n	8004380 <xQueuePeek+0xf0>
 8004378:	f002 f9aa 	bl	80066d0 <vPortExitCritical>
 800437c:	2300      	movs	r3, #0
 800437e:	e062      	b.n	8004446 <xQueuePeek+0x1b6>
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <xQueuePeek+0x104>
 8004386:	f107 0314 	add.w	r3, r7, #20
 800438a:	4618      	mov	r0, r3
 800438c:	f001 f946 	bl	800561c <vTaskInternalSetTimeOutState>
 8004390:	2301      	movs	r3, #1
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
 8004394:	f002 f99c 	bl	80066d0 <vPortExitCritical>
 8004398:	f000 fcd8 	bl	8004d4c <vTaskSuspendAll>
 800439c:	f002 f968 	bl	8006670 <vPortEnterCritical>
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a6:	b25b      	sxtb	r3, r3
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d103      	bne.n	80043b6 <xQueuePeek+0x126>
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043bc:	b25b      	sxtb	r3, r3
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d103      	bne.n	80043cc <xQueuePeek+0x13c>
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043cc:	f002 f980 	bl	80066d0 <vPortExitCritical>
 80043d0:	1d3a      	adds	r2, r7, #4
 80043d2:	f107 0314 	add.w	r3, r7, #20
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f935 	bl	8005648 <xTaskCheckForTimeOut>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d123      	bne.n	800442c <xQueuePeek+0x19c>
 80043e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043e6:	f000 f92e 	bl	8004646 <prvIsQueueEmpty>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d017      	beq.n	8004420 <xQueuePeek+0x190>
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	3324      	adds	r3, #36	; 0x24
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 ffcd 	bl	8005398 <vTaskPlaceOnEventList>
 80043fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004400:	f000 f8cf 	bl	80045a2 <prvUnlockQueue>
 8004404:	f000 fce6 	bl	8004dd4 <xTaskResumeAll>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d187      	bne.n	800431e <xQueuePeek+0x8e>
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <xQueuePeek+0x1c0>)
 8004410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	e77e      	b.n	800431e <xQueuePeek+0x8e>
 8004420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004422:	f000 f8be 	bl	80045a2 <prvUnlockQueue>
 8004426:	f000 fcd5 	bl	8004dd4 <xTaskResumeAll>
 800442a:	e778      	b.n	800431e <xQueuePeek+0x8e>
 800442c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442e:	f000 f8b8 	bl	80045a2 <prvUnlockQueue>
 8004432:	f000 fccf 	bl	8004dd4 <xTaskResumeAll>
 8004436:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004438:	f000 f905 	bl	8004646 <prvIsQueueEmpty>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	f43f af6d 	beq.w	800431e <xQueuePeek+0x8e>
 8004444:	2300      	movs	r3, #0
 8004446:	4618      	mov	r0, r3
 8004448:	3738      	adds	r7, #56	; 0x38
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <prvGetDisinheritPriorityAfterTimeout>:
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d006      	beq.n	8004472 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1c3 0305 	rsb	r3, r3, #5
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e001      	b.n	8004476 <prvGetDisinheritPriorityAfterTimeout+0x22>
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <prvCopyDataToQueue>:
 8004482:	b580      	push	{r7, lr}
 8004484:	b086      	sub	sp, #24
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <prvCopyDataToQueue+0x3a>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d14d      	bne.n	8004544 <prvCopyDataToQueue+0xc2>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 faf9 	bl	8005aa4 <xTaskPriorityDisinherit>
 80044b2:	6178      	str	r0, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	e043      	b.n	8004544 <prvCopyDataToQueue+0xc2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d119      	bne.n	80044f6 <prvCopyDataToQueue+0x74>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6858      	ldr	r0, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	461a      	mov	r2, r3
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	f002 faeb 	bl	8006aa8 <memcpy>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	441a      	add	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d32b      	bcc.n	8004544 <prvCopyDataToQueue+0xc2>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	e026      	b.n	8004544 <prvCopyDataToQueue+0xc2>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	68d8      	ldr	r0, [r3, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	461a      	mov	r2, r3
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	f002 fad1 	bl	8006aa8 <memcpy>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	425b      	negs	r3, r3
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d207      	bcs.n	8004532 <prvCopyDataToQueue+0xb0>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	425b      	negs	r3, r3
 800452c:	441a      	add	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d105      	bne.n	8004544 <prvCopyDataToQueue+0xc2>
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <prvCopyDataToQueue+0xc2>
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	3b01      	subs	r3, #1
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <prvCopyDataFromQueue>:
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d018      	beq.n	800459a <prvCopyDataFromQueue+0x44>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	441a      	add	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	d303      	bcc.n	800458a <prvCopyDataFromQueue+0x34>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68d9      	ldr	r1, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	461a      	mov	r2, r3
 8004594:	6838      	ldr	r0, [r7, #0]
 8004596:	f002 fa87 	bl	8006aa8 <memcpy>
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <prvUnlockQueue>:
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	f002 f861 	bl	8006670 <vPortEnterCritical>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b4:	73fb      	strb	r3, [r7, #15]
 80045b6:	e011      	b.n	80045dc <prvUnlockQueue+0x3a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d012      	beq.n	80045e6 <prvUnlockQueue+0x44>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3324      	adds	r3, #36	; 0x24
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 ff51 	bl	800546c <xTaskRemoveFromEventList>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <prvUnlockQueue+0x32>
 80045d0:	f001 f8a0 	bl	8005714 <vTaskMissedYield>
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	dce9      	bgt.n	80045b8 <prvUnlockQueue+0x16>
 80045e4:	e000      	b.n	80045e8 <prvUnlockQueue+0x46>
 80045e6:	bf00      	nop
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	22ff      	movs	r2, #255	; 0xff
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f0:	f002 f86e 	bl	80066d0 <vPortExitCritical>
 80045f4:	f002 f83c 	bl	8006670 <vPortEnterCritical>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fe:	73bb      	strb	r3, [r7, #14]
 8004600:	e011      	b.n	8004626 <prvUnlockQueue+0x84>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <prvUnlockQueue+0x8e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3310      	adds	r3, #16
 800460e:	4618      	mov	r0, r3
 8004610:	f000 ff2c 	bl	800546c <xTaskRemoveFromEventList>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <prvUnlockQueue+0x7c>
 800461a:	f001 f87b 	bl	8005714 <vTaskMissedYield>
 800461e:	7bbb      	ldrb	r3, [r7, #14]
 8004620:	3b01      	subs	r3, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	73bb      	strb	r3, [r7, #14]
 8004626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800462a:	2b00      	cmp	r3, #0
 800462c:	dce9      	bgt.n	8004602 <prvUnlockQueue+0x60>
 800462e:	e000      	b.n	8004632 <prvUnlockQueue+0x90>
 8004630:	bf00      	nop
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	22ff      	movs	r2, #255	; 0xff
 8004636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463a:	f002 f849 	bl	80066d0 <vPortExitCritical>
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <prvIsQueueEmpty>:
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	f002 f80f 	bl	8006670 <vPortEnterCritical>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <prvIsQueueEmpty+0x1a>
 800465a:	2301      	movs	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e001      	b.n	8004664 <prvIsQueueEmpty+0x1e>
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	f002 f834 	bl	80066d0 <vPortExitCritical>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <prvIsQueueFull>:
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	f001 fff9 	bl	8006670 <vPortEnterCritical>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	429a      	cmp	r2, r3
 8004688:	d102      	bne.n	8004690 <prvIsQueueFull+0x1e>
 800468a:	2301      	movs	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e001      	b.n	8004694 <prvIsQueueFull+0x22>
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	f002 f81c 	bl	80066d0 <vPortExitCritical>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <vQueueAddToRegistry>:
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <vQueueAddToRegistry+0x2a>
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <vQueueAddToRegistry+0x28>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d024      	beq.n	800471e <vQueueAddToRegistry+0x7a>
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e01e      	b.n	8004718 <vQueueAddToRegistry+0x74>
 80046da:	4a18      	ldr	r2, [pc, #96]	; (800473c <vQueueAddToRegistry+0x98>)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d105      	bne.n	80046f6 <vQueueAddToRegistry+0x52>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4a13      	ldr	r2, [pc, #76]	; (800473c <vQueueAddToRegistry+0x98>)
 80046f0:	4413      	add	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	e013      	b.n	800471e <vQueueAddToRegistry+0x7a>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <vQueueAddToRegistry+0x6e>
 80046fc:	4a0f      	ldr	r2, [pc, #60]	; (800473c <vQueueAddToRegistry+0x98>)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <vQueueAddToRegistry+0x6e>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4a0b      	ldr	r2, [pc, #44]	; (800473c <vQueueAddToRegistry+0x98>)
 800470e:	4413      	add	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3301      	adds	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b07      	cmp	r3, #7
 800471c:	d9dd      	bls.n	80046da <vQueueAddToRegistry+0x36>
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <vQueueAddToRegistry+0x8c>
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	200002e8 	.word	0x200002e8

08004740 <vQueueWaitForMessageRestricted>:
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	f001 ff8e 	bl	8006670 <vPortEnterCritical>
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800475a:	b25b      	sxtb	r3, r3
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d103      	bne.n	800476a <vQueueWaitForMessageRestricted+0x2a>
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004770:	b25b      	sxtb	r3, r3
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d103      	bne.n	8004780 <vQueueWaitForMessageRestricted+0x40>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004780:	f001 ffa6 	bl	80066d0 <vPortExitCritical>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <vQueueWaitForMessageRestricted+0x5a>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3324      	adds	r3, #36	; 0x24
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fe23 	bl	80053e0 <vTaskPlaceOnEventListRestricted>
 800479a:	6978      	ldr	r0, [r7, #20]
 800479c:	f7ff ff01 	bl	80045a2 <prvUnlockQueue>
 80047a0:	bf00      	nop
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <xTaskCreate>:
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08c      	sub	sp, #48	; 0x30
 80047ac:	af04      	add	r7, sp, #16
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 fdb6 	bl	800632c <pvPortMalloc>
 80047c0:	6178      	str	r0, [r7, #20]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d013      	beq.n	80047f0 <xTaskCreate+0x48>
 80047c8:	207c      	movs	r0, #124	; 0x7c
 80047ca:	f001 fdaf 	bl	800632c <pvPortMalloc>
 80047ce:	61f8      	str	r0, [r7, #28]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <xTaskCreate+0x40>
 80047d6:	227c      	movs	r2, #124	; 0x7c
 80047d8:	2100      	movs	r1, #0
 80047da:	69f8      	ldr	r0, [r7, #28]
 80047dc:	f002 f972 	bl	8006ac4 <memset>
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
 80047e6:	e005      	b.n	80047f4 <xTaskCreate+0x4c>
 80047e8:	6978      	ldr	r0, [r7, #20]
 80047ea:	f001 fdb1 	bl	8006350 <vPortFree>
 80047ee:	e001      	b.n	80047f4 <xTaskCreate+0x4c>
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d013      	beq.n	8004822 <xTaskCreate+0x7a>
 80047fa:	2300      	movs	r3, #0
 80047fc:	9303      	str	r3, [sp, #12]
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	9302      	str	r3, [sp, #8]
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f80e 	bl	8004832 <prvInitialiseNewTask>
 8004816:	69f8      	ldr	r0, [r7, #28]
 8004818:	f000 f89a 	bl	8004950 <prvAddNewTaskToReadyList>
 800481c:	2301      	movs	r3, #1
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e002      	b.n	8004828 <xTaskCreate+0x80>
 8004822:	f04f 33ff 	mov.w	r3, #4294967295
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <prvInitialiseNewTask>:
 8004832:	b580      	push	{r7, lr}
 8004834:	b088      	sub	sp, #32
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	461a      	mov	r2, r3
 800484a:	21a5      	movs	r1, #165	; 0xa5
 800484c:	f002 f93a 	bl	8006ac4 <memset>
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800485a:	3b01      	subs	r3, #1
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f023 0307 	bic.w	r3, r3, #7
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <prvInitialiseNewTask+0x58>
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <prvInitialiseNewTask+0x56>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d01e      	beq.n	80048ce <prvInitialiseNewTask+0x9c>
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e012      	b.n	80048bc <prvInitialiseNewTask+0x8a>
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	7819      	ldrb	r1, [r3, #0]
 800489e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	4413      	add	r3, r2
 80048a4:	3334      	adds	r3, #52	; 0x34
 80048a6:	460a      	mov	r2, r1
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	4413      	add	r3, r2
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d006      	beq.n	80048c4 <prvInitialiseNewTask+0x92>
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	2b13      	cmp	r3, #19
 80048c0:	d9e9      	bls.n	8004896 <prvInitialiseNewTask+0x64>
 80048c2:	e000      	b.n	80048c6 <prvInitialiseNewTask+0x94>
 80048c4:	bf00      	nop
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d90a      	bls.n	80048ea <prvInitialiseNewTask+0xb8>
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <prvInitialiseNewTask+0xb6>
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d901      	bls.n	80048f4 <prvInitialiseNewTask+0xc2>
 80048f0:	2304      	movs	r3, #4
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fe:	651a      	str	r2, [r3, #80]	; 0x50
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	3304      	adds	r3, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f001 fd54 	bl	80063b2 <vListInitialiseItem>
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	3318      	adds	r3, #24
 800490e:	4618      	mov	r0, r3
 8004910:	f001 fd4f 	bl	80063b2 <vListInitialiseItem>
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004918:	611a      	str	r2, [r3, #16]
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	f1c3 0205 	rsb	r2, r3, #5
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	619a      	str	r2, [r3, #24]
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004928:	625a      	str	r2, [r3, #36]	; 0x24
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	68f9      	ldr	r1, [r7, #12]
 800492e:	69b8      	ldr	r0, [r7, #24]
 8004930:	f001 fdac 	bl	800648c <pxPortInitialiseStack>
 8004934:	4602      	mov	r2, r0
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <prvInitialiseNewTask+0x114>
 8004940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	bf00      	nop
 8004948:	3720      	adds	r7, #32
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <prvAddNewTaskToReadyList>:
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	f001 fe8a 	bl	8006670 <vPortEnterCritical>
 800495c:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <prvAddNewTaskToReadyList+0x114>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	4a40      	ldr	r2, [pc, #256]	; (8004a64 <prvAddNewTaskToReadyList+0x114>)
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	4b40      	ldr	r3, [pc, #256]	; (8004a68 <prvAddNewTaskToReadyList+0x118>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <prvAddNewTaskToReadyList+0x32>
 800496e:	4a3e      	ldr	r2, [pc, #248]	; (8004a68 <prvAddNewTaskToReadyList+0x118>)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <prvAddNewTaskToReadyList+0x114>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d110      	bne.n	800499e <prvAddNewTaskToReadyList+0x4e>
 800497c:	f000 ff4c 	bl	8005818 <prvInitialiseTaskLists>
 8004980:	e00d      	b.n	800499e <prvAddNewTaskToReadyList+0x4e>
 8004982:	4b3a      	ldr	r3, [pc, #232]	; (8004a6c <prvAddNewTaskToReadyList+0x11c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <prvAddNewTaskToReadyList+0x4e>
 800498a:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <prvAddNewTaskToReadyList+0x118>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	429a      	cmp	r2, r3
 8004996:	d802      	bhi.n	800499e <prvAddNewTaskToReadyList+0x4e>
 8004998:	4a33      	ldr	r2, [pc, #204]	; (8004a68 <prvAddNewTaskToReadyList+0x118>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4b34      	ldr	r3, [pc, #208]	; (8004a70 <prvAddNewTaskToReadyList+0x120>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	4a32      	ldr	r2, [pc, #200]	; (8004a70 <prvAddNewTaskToReadyList+0x120>)
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <prvAddNewTaskToReadyList+0x120>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	649a      	str	r2, [r3, #72]	; 0x48
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	4b2f      	ldr	r3, [pc, #188]	; (8004a74 <prvAddNewTaskToReadyList+0x124>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d903      	bls.n	80049c4 <prvAddNewTaskToReadyList+0x74>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <prvAddNewTaskToReadyList+0x124>)
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	492b      	ldr	r1, [pc, #172]	; (8004a78 <prvAddNewTaskToReadyList+0x128>)
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	3304      	adds	r3, #4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	3204      	adds	r2, #4
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	1d1a      	adds	r2, r3, #4
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	609a      	str	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <prvAddNewTaskToReadyList+0x128>)
 8004a08:	441a      	add	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	615a      	str	r2, [r3, #20]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	4919      	ldr	r1, [pc, #100]	; (8004a78 <prvAddNewTaskToReadyList+0x128>)
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	4815      	ldr	r0, [pc, #84]	; (8004a78 <prvAddNewTaskToReadyList+0x128>)
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4403      	add	r3, r0
 8004a2e:	6019      	str	r1, [r3, #0]
 8004a30:	f001 fe4e 	bl	80066d0 <vPortExitCritical>
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <prvAddNewTaskToReadyList+0x11c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00e      	beq.n	8004a5a <prvAddNewTaskToReadyList+0x10a>
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <prvAddNewTaskToReadyList+0x118>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d207      	bcs.n	8004a5a <prvAddNewTaskToReadyList+0x10a>
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <prvAddNewTaskToReadyList+0x12c>)
 8004a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	2000018c 	.word	0x2000018c
 8004a68:	200000b4 	.word	0x200000b4
 8004a6c:	20000198 	.word	0x20000198
 8004a70:	200001a8 	.word	0x200001a8
 8004a74:	20000194 	.word	0x20000194
 8004a78:	200000b8 	.word	0x200000b8
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <vTaskDelay>:
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d017      	beq.n	8004ac2 <vTaskDelay+0x42>
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <vTaskDelay+0x60>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <vTaskDelay+0x30>
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <vTaskDelay+0x2e>
 8004ab0:	f000 f94c 	bl	8004d4c <vTaskSuspendAll>
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f001 f948 	bl	8005d4c <prvAddCurrentTaskToDelayedList>
 8004abc:	f000 f98a 	bl	8004dd4 <xTaskResumeAll>
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <vTaskDelay+0x58>
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <vTaskDelay+0x64>)
 8004aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	200001b4 	.word	0x200001b4
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <uxTaskPriorityGet>:
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	f001 fdbe 	bl	8006670 <vPortEnterCritical>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d102      	bne.n	8004b00 <uxTaskPriorityGet+0x18>
 8004afa:	4b07      	ldr	r3, [pc, #28]	; (8004b18 <uxTaskPriorityGet+0x30>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	e000      	b.n	8004b02 <uxTaskPriorityGet+0x1a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	f001 fde1 	bl	80066d0 <vPortExitCritical>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	200000b4 	.word	0x200000b4

08004b1c <vTaskPrioritySet>:
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d90a      	bls.n	8004b46 <vTaskPrioritySet+0x2a>
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <vTaskPrioritySet+0x28>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d901      	bls.n	8004b50 <vTaskPrioritySet+0x34>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	f001 fd8e 	bl	8006670 <vPortEnterCritical>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d102      	bne.n	8004b60 <vTaskPrioritySet+0x44>
 8004b5a:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <vTaskPrioritySet+0x17c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	e000      	b.n	8004b62 <vTaskPrioritySet+0x46>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	f000 808c 	beq.w	8004c8c <vTaskPrioritySet+0x170>
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d90d      	bls.n	8004b98 <vTaskPrioritySet+0x7c>
 8004b7c:	4b46      	ldr	r3, [pc, #280]	; (8004c98 <vTaskPrioritySet+0x17c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d00f      	beq.n	8004ba6 <vTaskPrioritySet+0x8a>
 8004b86:	4b44      	ldr	r3, [pc, #272]	; (8004c98 <vTaskPrioritySet+0x17c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d309      	bcc.n	8004ba6 <vTaskPrioritySet+0x8a>
 8004b92:	2301      	movs	r3, #1
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	e006      	b.n	8004ba6 <vTaskPrioritySet+0x8a>
 8004b98:	4b3f      	ldr	r3, [pc, #252]	; (8004c98 <vTaskPrioritySet+0x17c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d101      	bne.n	8004ba6 <vTaskPrioritySet+0x8a>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d102      	bne.n	8004bbe <vTaskPrioritySet+0xa2>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	651a      	str	r2, [r3, #80]	; 0x50
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db04      	blt.n	8004bd6 <vTaskPrioritySet+0xba>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f1c3 0205 	rsb	r2, r3, #5
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	619a      	str	r2, [r3, #24]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	6959      	ldr	r1, [r3, #20]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4a2d      	ldr	r2, [pc, #180]	; (8004c9c <vTaskPrioritySet+0x180>)
 8004be6:	4413      	add	r3, r2
 8004be8:	4299      	cmp	r1, r3
 8004bea:	d144      	bne.n	8004c76 <vTaskPrioritySet+0x15a>
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 fc22 	bl	800643a <uxListRemove>
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <vTaskPrioritySet+0x184>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d903      	bls.n	8004c0a <vTaskPrioritySet+0xee>
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <vTaskPrioritySet+0x184>)
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c0e:	4923      	ldr	r1, [pc, #140]	; (8004c9c <vTaskPrioritySet+0x180>)
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	609a      	str	r2, [r3, #8]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	60da      	str	r2, [r3, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	3204      	adds	r2, #4
 8004c36:	605a      	str	r2, [r3, #4]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4a13      	ldr	r2, [pc, #76]	; (8004c9c <vTaskPrioritySet+0x180>)
 8004c4e:	441a      	add	r2, r3
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	615a      	str	r2, [r3, #20]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c58:	4910      	ldr	r1, [pc, #64]	; (8004c9c <vTaskPrioritySet+0x180>)
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	1c59      	adds	r1, r3, #1
 8004c68:	480c      	ldr	r0, [pc, #48]	; (8004c9c <vTaskPrioritySet+0x180>)
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4403      	add	r3, r0
 8004c74:	6019      	str	r1, [r3, #0]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <vTaskPrioritySet+0x170>
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <vTaskPrioritySet+0x188>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f001 fd20 	bl	80066d0 <vPortExitCritical>
 8004c90:	bf00      	nop
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	200000b4 	.word	0x200000b4
 8004c9c:	200000b8 	.word	0x200000b8
 8004ca0:	20000194 	.word	0x20000194
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <vTaskStartScheduler>:
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <vTaskStartScheduler+0x88>)
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	2280      	movs	r2, #128	; 0x80
 8004cba:	491e      	ldr	r1, [pc, #120]	; (8004d34 <vTaskStartScheduler+0x8c>)
 8004cbc:	481e      	ldr	r0, [pc, #120]	; (8004d38 <vTaskStartScheduler+0x90>)
 8004cbe:	f7ff fd73 	bl	80047a8 <xTaskCreate>
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d102      	bne.n	8004cd0 <vTaskStartScheduler+0x28>
 8004cca:	f001 f8ad 	bl	8005e28 <xTimerCreateTimerTask>
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d116      	bne.n	8004d04 <vTaskStartScheduler+0x5c>
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	bf00      	nop
 8004cea:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <vTaskStartScheduler+0x94>)
 8004cec:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <vTaskStartScheduler+0x98>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <vTaskStartScheduler+0x9c>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	f001 fc45 	bl	800658c <xPortStartScheduler>
 8004d02:	e00e      	b.n	8004d22 <vTaskStartScheduler+0x7a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0a:	d10a      	bne.n	8004d22 <vTaskStartScheduler+0x7a>
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <vTaskStartScheduler+0x78>
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <vTaskStartScheduler+0xa0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	200001b0 	.word	0x200001b0
 8004d34:	08006c9c 	.word	0x08006c9c
 8004d38:	0800572d 	.word	0x0800572d
 8004d3c:	200001ac 	.word	0x200001ac
 8004d40:	20000198 	.word	0x20000198
 8004d44:	20000190 	.word	0x20000190
 8004d48:	20000014 	.word	0x20000014

08004d4c <vTaskSuspendAll>:
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <vTaskSuspendAll+0x18>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	4a03      	ldr	r2, [pc, #12]	; (8004d64 <vTaskSuspendAll+0x18>)
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	bf00      	nop
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	200001b4 	.word	0x200001b4

08004d68 <prvGetExpectedIdleTime>:
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	2300      	movs	r3, #0
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <prvGetExpectedIdleTime+0x58>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <prvGetExpectedIdleTime+0x16>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <prvGetExpectedIdleTime+0x5c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <prvGetExpectedIdleTime+0x26>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	e012      	b.n	8004db4 <prvGetExpectedIdleTime+0x4c>
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <prvGetExpectedIdleTime+0x60>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d902      	bls.n	8004d9c <prvGetExpectedIdleTime+0x34>
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	e00b      	b.n	8004db4 <prvGetExpectedIdleTime+0x4c>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <prvGetExpectedIdleTime+0x40>
 8004da2:	2300      	movs	r3, #0
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	e005      	b.n	8004db4 <prvGetExpectedIdleTime+0x4c>
 8004da8:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <prvGetExpectedIdleTime+0x64>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b08      	ldr	r3, [pc, #32]	; (8004dd0 <prvGetExpectedIdleTime+0x68>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4618      	mov	r0, r3
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	20000194 	.word	0x20000194
 8004dc4:	200000b4 	.word	0x200000b4
 8004dc8:	200000b8 	.word	0x200000b8
 8004dcc:	200001ac 	.word	0x200001ac
 8004dd0:	20000190 	.word	0x20000190

08004dd4 <xTaskResumeAll>:
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	4b71      	ldr	r3, [pc, #452]	; (8004fa8 <xTaskResumeAll+0x1d4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <xTaskResumeAll+0x2c>
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <xTaskResumeAll+0x2a>
 8004e00:	f001 fc36 	bl	8006670 <vPortEnterCritical>
 8004e04:	4b68      	ldr	r3, [pc, #416]	; (8004fa8 <xTaskResumeAll+0x1d4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	4a67      	ldr	r2, [pc, #412]	; (8004fa8 <xTaskResumeAll+0x1d4>)
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	4b66      	ldr	r3, [pc, #408]	; (8004fa8 <xTaskResumeAll+0x1d4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f040 80c1 	bne.w	8004f9a <xTaskResumeAll+0x1c6>
 8004e18:	4b64      	ldr	r3, [pc, #400]	; (8004fac <xTaskResumeAll+0x1d8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80bc 	beq.w	8004f9a <xTaskResumeAll+0x1c6>
 8004e22:	e08b      	b.n	8004f3c <xTaskResumeAll+0x168>
 8004e24:	4b62      	ldr	r3, [pc, #392]	; (8004fb0 <xTaskResumeAll+0x1dc>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	613b      	str	r3, [r7, #16]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	6a12      	ldr	r2, [r2, #32]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	69d2      	ldr	r2, [r2, #28]
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	3318      	adds	r3, #24
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d103      	bne.n	8004e5a <xTaskResumeAll+0x86>
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	605a      	str	r2, [r3, #4]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	1e5a      	subs	r2, r3, #1
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	68d2      	ldr	r2, [r2, #12]
 8004e78:	609a      	str	r2, [r3, #8]
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	6892      	ldr	r2, [r2, #8]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d103      	bne.n	8004e98 <xTaskResumeAll+0xc4>
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	615a      	str	r2, [r3, #20]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	1e5a      	subs	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eac:	4b41      	ldr	r3, [pc, #260]	; (8004fb4 <xTaskResumeAll+0x1e0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d903      	bls.n	8004ebc <xTaskResumeAll+0xe8>
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	4a3e      	ldr	r2, [pc, #248]	; (8004fb4 <xTaskResumeAll+0x1e0>)
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	493d      	ldr	r1, [pc, #244]	; (8004fb8 <xTaskResumeAll+0x1e4>)
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	3304      	adds	r3, #4
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	60da      	str	r2, [r3, #12]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	3204      	adds	r2, #4
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	1d1a      	adds	r2, r3, #4
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	609a      	str	r2, [r3, #8]
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <xTaskResumeAll+0x1e4>)
 8004f00:	441a      	add	r2, r3
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	615a      	str	r2, [r3, #20]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f0a:	492b      	ldr	r1, [pc, #172]	; (8004fb8 <xTaskResumeAll+0x1e4>)
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	1c59      	adds	r1, r3, #1
 8004f1a:	4827      	ldr	r0, [pc, #156]	; (8004fb8 <xTaskResumeAll+0x1e4>)
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4403      	add	r3, r0
 8004f26:	6019      	str	r1, [r3, #0]
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <xTaskResumeAll+0x1e8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d302      	bcc.n	8004f3c <xTaskResumeAll+0x168>
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <xTaskResumeAll+0x1ec>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <xTaskResumeAll+0x1dc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f47f af6f 	bne.w	8004e24 <xTaskResumeAll+0x50>
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <xTaskResumeAll+0x17c>
 8004f4c:	f000 fce2 	bl	8005914 <prvResetNextTaskUnblockTime>
 8004f50:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <xTaskResumeAll+0x1f0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d010      	beq.n	8004f7e <xTaskResumeAll+0x1aa>
 8004f5c:	f000 f8a8 	bl	80050b0 <xTaskIncrementTick>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <xTaskResumeAll+0x198>
 8004f66:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <xTaskResumeAll+0x1ec>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f1      	bne.n	8004f5c <xTaskResumeAll+0x188>
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <xTaskResumeAll+0x1f0>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <xTaskResumeAll+0x1ec>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <xTaskResumeAll+0x1c6>
 8004f86:	2301      	movs	r3, #1
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <xTaskResumeAll+0x1f4>)
 8004f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f001 fb99 	bl	80066d0 <vPortExitCritical>
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	200001b4 	.word	0x200001b4
 8004fac:	2000018c 	.word	0x2000018c
 8004fb0:	2000014c 	.word	0x2000014c
 8004fb4:	20000194 	.word	0x20000194
 8004fb8:	200000b8 	.word	0x200000b8
 8004fbc:	200000b4 	.word	0x200000b4
 8004fc0:	200001a0 	.word	0x200001a0
 8004fc4:	2000019c 	.word	0x2000019c
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <xTaskGetTickCount>:
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <xTaskGetTickCount+0x18>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	20000190 	.word	0x20000190

08004fe8 <uxTaskGetNumberOfTasks>:
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	4b02      	ldr	r3, [pc, #8]	; (8004ff8 <uxTaskGetNumberOfTasks+0x10>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	2000018c 	.word	0x2000018c

08004ffc <vTaskStepTick>:
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	4b26      	ldr	r3, [pc, #152]	; (80050a0 <vTaskStepTick+0xa4>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	441a      	add	r2, r3
 800500c:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <vTaskStepTick+0xa8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d90a      	bls.n	800502a <vTaskStepTick+0x2e>
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <vTaskStepTick+0x2c>
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <vTaskStepTick+0xa4>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	441a      	add	r2, r3
 8005032:	4b1c      	ldr	r3, [pc, #112]	; (80050a4 <vTaskStepTick+0xa8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d128      	bne.n	800508c <vTaskStepTick+0x90>
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <vTaskStepTick+0xac>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <vTaskStepTick+0x5c>
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <vTaskStepTick+0x5a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <vTaskStepTick+0x78>
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vTaskStepTick+0x76>
 8005074:	f001 fafc 	bl	8006670 <vPortEnterCritical>
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <vTaskStepTick+0xb0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	4a0b      	ldr	r2, [pc, #44]	; (80050ac <vTaskStepTick+0xb0>)
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	f001 fb25 	bl	80066d0 <vPortExitCritical>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3b01      	subs	r3, #1
 800508a:	607b      	str	r3, [r7, #4]
 800508c:	4b04      	ldr	r3, [pc, #16]	; (80050a0 <vTaskStepTick+0xa4>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4413      	add	r3, r2
 8005094:	4a02      	ldr	r2, [pc, #8]	; (80050a0 <vTaskStepTick+0xa4>)
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	bf00      	nop
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000190 	.word	0x20000190
 80050a4:	200001ac 	.word	0x200001ac
 80050a8:	200001b4 	.word	0x200001b4
 80050ac:	2000019c 	.word	0x2000019c

080050b0 <xTaskIncrementTick>:
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	4b7e      	ldr	r3, [pc, #504]	; (80052b4 <xTaskIncrementTick+0x204>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f040 80ed 	bne.w	800529e <xTaskIncrementTick+0x1ee>
 80050c4:	4b7c      	ldr	r3, [pc, #496]	; (80052b8 <xTaskIncrementTick+0x208>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3301      	adds	r3, #1
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	4a7a      	ldr	r2, [pc, #488]	; (80052b8 <xTaskIncrementTick+0x208>)
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d120      	bne.n	800511a <xTaskIncrementTick+0x6a>
 80050d8:	4b78      	ldr	r3, [pc, #480]	; (80052bc <xTaskIncrementTick+0x20c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <xTaskIncrementTick+0x48>
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	bf00      	nop
 80050f6:	e7fe      	b.n	80050f6 <xTaskIncrementTick+0x46>
 80050f8:	4b70      	ldr	r3, [pc, #448]	; (80052bc <xTaskIncrementTick+0x20c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	4b70      	ldr	r3, [pc, #448]	; (80052c0 <xTaskIncrementTick+0x210>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6e      	ldr	r2, [pc, #440]	; (80052bc <xTaskIncrementTick+0x20c>)
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	4a6e      	ldr	r2, [pc, #440]	; (80052c0 <xTaskIncrementTick+0x210>)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4b6d      	ldr	r3, [pc, #436]	; (80052c4 <xTaskIncrementTick+0x214>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3301      	adds	r3, #1
 8005112:	4a6c      	ldr	r2, [pc, #432]	; (80052c4 <xTaskIncrementTick+0x214>)
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	f000 fbfd 	bl	8005914 <prvResetNextTaskUnblockTime>
 800511a:	4b6b      	ldr	r3, [pc, #428]	; (80052c8 <xTaskIncrementTick+0x218>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a3a      	ldr	r2, [r7, #32]
 8005120:	429a      	cmp	r2, r3
 8005122:	f0c0 80a7 	bcc.w	8005274 <xTaskIncrementTick+0x1c4>
 8005126:	4b65      	ldr	r3, [pc, #404]	; (80052bc <xTaskIncrementTick+0x20c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <xTaskIncrementTick+0x8a>
 8005130:	4b65      	ldr	r3, [pc, #404]	; (80052c8 <xTaskIncrementTick+0x218>)
 8005132:	f04f 32ff 	mov.w	r2, #4294967295
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e09c      	b.n	8005274 <xTaskIncrementTick+0x1c4>
 800513a:	4b60      	ldr	r3, [pc, #384]	; (80052bc <xTaskIncrementTick+0x20c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	6a3a      	ldr	r2, [r7, #32]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	429a      	cmp	r2, r3
 8005150:	d203      	bcs.n	800515a <xTaskIncrementTick+0xaa>
 8005152:	4a5d      	ldr	r2, [pc, #372]	; (80052c8 <xTaskIncrementTick+0x218>)
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	e08c      	b.n	8005274 <xTaskIncrementTick+0x1c4>
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	68d2      	ldr	r2, [r2, #12]
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	6892      	ldr	r2, [r2, #8]
 8005172:	605a      	str	r2, [r3, #4]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	3304      	adds	r3, #4
 800517c:	429a      	cmp	r2, r3
 800517e:	d103      	bne.n	8005188 <xTaskIncrementTick+0xd8>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2200      	movs	r2, #0
 800518c:	615a      	str	r2, [r3, #20]
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	1e5a      	subs	r2, r3, #1
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	2b00      	cmp	r3, #0
 800519e:	d01e      	beq.n	80051de <xTaskIncrementTick+0x12e>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	6a12      	ldr	r2, [r2, #32]
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	69d2      	ldr	r2, [r2, #28]
 80051b8:	605a      	str	r2, [r3, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	3318      	adds	r3, #24
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d103      	bne.n	80051ce <xTaskIncrementTick+0x11e>
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	6a1a      	ldr	r2, [r3, #32]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2200      	movs	r2, #0
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e2:	4b3a      	ldr	r3, [pc, #232]	; (80052cc <xTaskIncrementTick+0x21c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d903      	bls.n	80051f2 <xTaskIncrementTick+0x142>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	4a37      	ldr	r2, [pc, #220]	; (80052cc <xTaskIncrementTick+0x21c>)
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f6:	4936      	ldr	r1, [pc, #216]	; (80052d0 <xTaskIncrementTick+0x220>)
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	3304      	adds	r3, #4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	609a      	str	r2, [r3, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	3204      	adds	r2, #4
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	1d1a      	adds	r2, r3, #4
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4a26      	ldr	r2, [pc, #152]	; (80052d0 <xTaskIncrementTick+0x220>)
 8005236:	441a      	add	r2, r3
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	615a      	str	r2, [r3, #20]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005240:	4923      	ldr	r1, [pc, #140]	; (80052d0 <xTaskIncrementTick+0x220>)
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	1c59      	adds	r1, r3, #1
 8005250:	481f      	ldr	r0, [pc, #124]	; (80052d0 <xTaskIncrementTick+0x220>)
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4403      	add	r3, r0
 800525c:	6019      	str	r1, [r3, #0]
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <xTaskIncrementTick+0x224>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	f67f af5c 	bls.w	8005126 <xTaskIncrementTick+0x76>
 800526e:	2301      	movs	r3, #1
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
 8005272:	e758      	b.n	8005126 <xTaskIncrementTick+0x76>
 8005274:	4b17      	ldr	r3, [pc, #92]	; (80052d4 <xTaskIncrementTick+0x224>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527a:	4915      	ldr	r1, [pc, #84]	; (80052d0 <xTaskIncrementTick+0x220>)
 800527c:	4613      	mov	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d901      	bls.n	8005290 <xTaskIncrementTick+0x1e0>
 800528c:	2301      	movs	r3, #1
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <xTaskIncrementTick+0x228>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <xTaskIncrementTick+0x1f8>
 8005298:	2301      	movs	r3, #1
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
 800529c:	e004      	b.n	80052a8 <xTaskIncrementTick+0x1f8>
 800529e:	4b0f      	ldr	r3, [pc, #60]	; (80052dc <xTaskIncrementTick+0x22c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3301      	adds	r3, #1
 80052a4:	4a0d      	ldr	r2, [pc, #52]	; (80052dc <xTaskIncrementTick+0x22c>)
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	4618      	mov	r0, r3
 80052ac:	3728      	adds	r7, #40	; 0x28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	200001b4 	.word	0x200001b4
 80052b8:	20000190 	.word	0x20000190
 80052bc:	20000144 	.word	0x20000144
 80052c0:	20000148 	.word	0x20000148
 80052c4:	200001a4 	.word	0x200001a4
 80052c8:	200001ac 	.word	0x200001ac
 80052cc:	20000194 	.word	0x20000194
 80052d0:	200000b8 	.word	0x200000b8
 80052d4:	200000b4 	.word	0x200000b4
 80052d8:	200001a0 	.word	0x200001a0
 80052dc:	2000019c 	.word	0x2000019c

080052e0 <vTaskSwitchContext>:
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4b27      	ldr	r3, [pc, #156]	; (8005384 <vTaskSwitchContext+0xa4>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <vTaskSwitchContext+0x16>
 80052ee:	4b26      	ldr	r3, [pc, #152]	; (8005388 <vTaskSwitchContext+0xa8>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e041      	b.n	800537a <vTaskSwitchContext+0x9a>
 80052f6:	4b24      	ldr	r3, [pc, #144]	; (8005388 <vTaskSwitchContext+0xa8>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <vTaskSwitchContext+0xac>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e010      	b.n	8005326 <vTaskSwitchContext+0x46>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <vTaskSwitchContext+0x40>
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	607b      	str	r3, [r7, #4]
 800531c:	bf00      	nop
 800531e:	e7fe      	b.n	800531e <vTaskSwitchContext+0x3e>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3b01      	subs	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	491a      	ldr	r1, [pc, #104]	; (8005390 <vTaskSwitchContext+0xb0>)
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0e4      	beq.n	8005304 <vTaskSwitchContext+0x24>
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4a12      	ldr	r2, [pc, #72]	; (8005390 <vTaskSwitchContext+0xb0>)
 8005346:	4413      	add	r3, r2
 8005348:	60bb      	str	r3, [r7, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	605a      	str	r2, [r3, #4]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	3308      	adds	r3, #8
 800535c:	429a      	cmp	r2, r3
 800535e:	d104      	bne.n	800536a <vTaskSwitchContext+0x8a>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	605a      	str	r2, [r3, #4]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <vTaskSwitchContext+0xb4>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4a05      	ldr	r2, [pc, #20]	; (800538c <vTaskSwitchContext+0xac>)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr
 8005384:	200001b4 	.word	0x200001b4
 8005388:	200001a0 	.word	0x200001a0
 800538c:	20000194 	.word	0x20000194
 8005390:	200000b8 	.word	0x200000b8
 8005394:	200000b4 	.word	0x200000b4

08005398 <vTaskPlaceOnEventList>:
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <vTaskPlaceOnEventList+0x26>
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <vTaskPlaceOnEventList+0x24>
 80053be:	4b07      	ldr	r3, [pc, #28]	; (80053dc <vTaskPlaceOnEventList+0x44>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3318      	adds	r3, #24
 80053c4:	4619      	mov	r1, r3
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 ffff 	bl	80063ca <vListInsert>
 80053cc:	2101      	movs	r1, #1
 80053ce:	6838      	ldr	r0, [r7, #0]
 80053d0:	f000 fcbc 	bl	8005d4c <prvAddCurrentTaskToDelayedList>
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	200000b4 	.word	0x200000b4

080053e0 <vTaskPlaceOnEventListRestricted>:
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10a      	bne.n	8005408 <vTaskPlaceOnEventListRestricted+0x28>
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <vTaskPlaceOnEventListRestricted+0x26>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	4b16      	ldr	r3, [pc, #88]	; (8005468 <vTaskPlaceOnEventListRestricted+0x88>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	61da      	str	r2, [r3, #28]
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <vTaskPlaceOnEventListRestricted+0x88>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	6892      	ldr	r2, [r2, #8]
 800541e:	621a      	str	r2, [r3, #32]
 8005420:	4b11      	ldr	r3, [pc, #68]	; (8005468 <vTaskPlaceOnEventListRestricted+0x88>)
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	3218      	adds	r2, #24
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <vTaskPlaceOnEventListRestricted+0x88>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f103 0218 	add.w	r2, r3, #24
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <vTaskPlaceOnEventListRestricted+0x88>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <vTaskPlaceOnEventListRestricted+0x76>
 8005450:	f04f 33ff 	mov.w	r3, #4294967295
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	68b8      	ldr	r0, [r7, #8]
 800545a:	f000 fc77 	bl	8005d4c <prvAddCurrentTaskToDelayedList>
 800545e:	bf00      	nop
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200000b4 	.word	0x200000b4

0800546c <xTaskRemoveFromEventList>:
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	623b      	str	r3, [r7, #32]
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <xTaskRemoveFromEventList+0x2c>
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <xTaskRemoveFromEventList+0x2a>
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	6a3a      	ldr	r2, [r7, #32]
 80054a4:	6a12      	ldr	r2, [r2, #32]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	6a3a      	ldr	r2, [r7, #32]
 80054ae:	69d2      	ldr	r2, [r2, #28]
 80054b0:	605a      	str	r2, [r3, #4]
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	3318      	adds	r3, #24
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d103      	bne.n	80054c6 <xTaskRemoveFromEventList+0x5a>
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	605a      	str	r2, [r3, #4]
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	2200      	movs	r2, #0
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1e5a      	subs	r2, r3, #1
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <xTaskRemoveFromEventList+0x198>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d161      	bne.n	80055a2 <xTaskRemoveFromEventList+0x136>
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	6a3a      	ldr	r2, [r7, #32]
 80054ea:	68d2      	ldr	r2, [r2, #12]
 80054ec:	609a      	str	r2, [r3, #8]
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	6a3a      	ldr	r2, [r7, #32]
 80054f4:	6892      	ldr	r2, [r2, #8]
 80054f6:	605a      	str	r2, [r3, #4]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	3304      	adds	r3, #4
 8005500:	429a      	cmp	r2, r3
 8005502:	d103      	bne.n	800550c <xTaskRemoveFromEventList+0xa0>
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	605a      	str	r2, [r3, #4]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	2200      	movs	r2, #0
 8005510:	615a      	str	r2, [r3, #20]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	1e5a      	subs	r2, r3, #1
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	4b39      	ldr	r3, [pc, #228]	; (8005608 <xTaskRemoveFromEventList+0x19c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d903      	bls.n	8005530 <xTaskRemoveFromEventList+0xc4>
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	4a36      	ldr	r2, [pc, #216]	; (8005608 <xTaskRemoveFromEventList+0x19c>)
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005534:	4935      	ldr	r1, [pc, #212]	; (800560c <xTaskRemoveFromEventList+0x1a0>)
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	3304      	adds	r3, #4
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	609a      	str	r2, [r3, #8]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	60da      	str	r2, [r3, #12]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	6a3a      	ldr	r2, [r7, #32]
 800555a:	3204      	adds	r2, #4
 800555c:	605a      	str	r2, [r3, #4]
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	1d1a      	adds	r2, r3, #4
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	609a      	str	r2, [r3, #8]
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4a26      	ldr	r2, [pc, #152]	; (800560c <xTaskRemoveFromEventList+0x1a0>)
 8005574:	441a      	add	r2, r3
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	615a      	str	r2, [r3, #20]
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	4923      	ldr	r1, [pc, #140]	; (800560c <xTaskRemoveFromEventList+0x1a0>)
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1c59      	adds	r1, r3, #1
 800558e:	481f      	ldr	r0, [pc, #124]	; (800560c <xTaskRemoveFromEventList+0x1a0>)
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4403      	add	r3, r0
 800559a:	6019      	str	r1, [r3, #0]
 800559c:	f000 f9ba 	bl	8005914 <prvResetNextTaskUnblockTime>
 80055a0:	e01b      	b.n	80055da <xTaskRemoveFromEventList+0x16e>
 80055a2:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <xTaskRemoveFromEventList+0x1a4>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	61bb      	str	r3, [r7, #24]
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	61da      	str	r2, [r3, #28]
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	621a      	str	r2, [r3, #32]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	3218      	adds	r2, #24
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	f103 0218 	add.w	r2, r3, #24
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	4a10      	ldr	r2, [pc, #64]	; (8005610 <xTaskRemoveFromEventList+0x1a4>)
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <xTaskRemoveFromEventList+0x1a4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3301      	adds	r3, #1
 80055d6:	4a0e      	ldr	r2, [pc, #56]	; (8005610 <xTaskRemoveFromEventList+0x1a4>)
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055de:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <xTaskRemoveFromEventList+0x1a8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d905      	bls.n	80055f4 <xTaskRemoveFromEventList+0x188>
 80055e8:	2301      	movs	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
 80055ec:	4b0a      	ldr	r3, [pc, #40]	; (8005618 <xTaskRemoveFromEventList+0x1ac>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e001      	b.n	80055f8 <xTaskRemoveFromEventList+0x18c>
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	4618      	mov	r0, r3
 80055fc:	3728      	adds	r7, #40	; 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	200001b4 	.word	0x200001b4
 8005608:	20000194 	.word	0x20000194
 800560c:	200000b8 	.word	0x200000b8
 8005610:	2000014c 	.word	0x2000014c
 8005614:	200000b4 	.word	0x200000b4
 8005618:	200001a0 	.word	0x200001a0

0800561c <vTaskInternalSetTimeOutState>:
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <vTaskInternalSetTimeOutState+0x24>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <vTaskInternalSetTimeOutState+0x28>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	605a      	str	r2, [r3, #4]
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	200001a4 	.word	0x200001a4
 8005644:	20000190 	.word	0x20000190

08005648 <xTaskCheckForTimeOut>:
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <xTaskCheckForTimeOut+0x26>
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	bf00      	nop
 800566c:	e7fe      	b.n	800566c <xTaskCheckForTimeOut+0x24>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10a      	bne.n	800568a <xTaskCheckForTimeOut+0x42>
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	bf00      	nop
 8005688:	e7fe      	b.n	8005688 <xTaskCheckForTimeOut+0x40>
 800568a:	f000 fff1 	bl	8006670 <vPortEnterCritical>
 800568e:	4b1f      	ldr	r3, [pc, #124]	; (800570c <xTaskCheckForTimeOut+0xc4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	61bb      	str	r3, [r7, #24]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d102      	bne.n	80056ae <xTaskCheckForTimeOut+0x66>
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e026      	b.n	80056fc <xTaskCheckForTimeOut+0xb4>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b17      	ldr	r3, [pc, #92]	; (8005710 <xTaskCheckForTimeOut+0xc8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d00a      	beq.n	80056d0 <xTaskCheckForTimeOut+0x88>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d305      	bcc.n	80056d0 <xTaskCheckForTimeOut+0x88>
 80056c4:	2301      	movs	r3, #1
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	e015      	b.n	80056fc <xTaskCheckForTimeOut+0xb4>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d20b      	bcs.n	80056f2 <xTaskCheckForTimeOut+0xaa>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	1ad2      	subs	r2, r2, r3
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff ff98 	bl	800561c <vTaskInternalSetTimeOutState>
 80056ec:	2300      	movs	r3, #0
 80056ee:	61fb      	str	r3, [r7, #28]
 80056f0:	e004      	b.n	80056fc <xTaskCheckForTimeOut+0xb4>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	2301      	movs	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	f000 ffe8 	bl	80066d0 <vPortExitCritical>
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000190 	.word	0x20000190
 8005710:	200001a4 	.word	0x200001a4

08005714 <vTaskMissedYield>:
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
 8005718:	4b03      	ldr	r3, [pc, #12]	; (8005728 <vTaskMissedYield+0x14>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	bf00      	nop
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	200001a0 	.word	0x200001a0

0800572c <prvIdleTask>:
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	f000 f8b0 	bl	8005898 <prvCheckTasksWaitingTermination>
 8005738:	4b18      	ldr	r3, [pc, #96]	; (800579c <prvIdleTask+0x70>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d907      	bls.n	8005750 <prvIdleTask+0x24>
 8005740:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <prvIdleTask+0x74>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f7ff fb0a 	bl	8004d68 <prvGetExpectedIdleTime>
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d9eb      	bls.n	8005734 <prvIdleTask+0x8>
 800575c:	f7ff faf6 	bl	8004d4c <vTaskSuspendAll>
 8005760:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <prvIdleTask+0x78>)
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <prvIdleTask+0x7c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d20a      	bcs.n	8005782 <prvIdleTask+0x56>
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <prvIdleTask+0x54>
 8005782:	f7ff faf1 	bl	8004d68 <prvGetExpectedIdleTime>
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d902      	bls.n	8005794 <prvIdleTask+0x68>
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f001 f80c 	bl	80067ac <vPortSuppressTicksAndSleep>
 8005794:	f7ff fb1e 	bl	8004dd4 <xTaskResumeAll>
 8005798:	e7cc      	b.n	8005734 <prvIdleTask+0x8>
 800579a:	bf00      	nop
 800579c:	200000b8 	.word	0x200000b8
 80057a0:	e000ed04 	.word	0xe000ed04
 80057a4:	200001ac 	.word	0x200001ac
 80057a8:	20000190 	.word	0x20000190

080057ac <eTaskConfirmSleepModeStatus>:
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	2301      	movs	r3, #1
 80057b4:	603b      	str	r3, [r7, #0]
 80057b6:	2301      	movs	r3, #1
 80057b8:	71fb      	strb	r3, [r7, #7]
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <eTaskConfirmSleepModeStatus+0x58>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <eTaskConfirmSleepModeStatus+0x1c>
 80057c2:	2300      	movs	r3, #0
 80057c4:	71fb      	strb	r3, [r7, #7]
 80057c6:	e017      	b.n	80057f8 <eTaskConfirmSleepModeStatus+0x4c>
 80057c8:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <eTaskConfirmSleepModeStatus+0x5c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <eTaskConfirmSleepModeStatus+0x2a>
 80057d0:	2300      	movs	r3, #0
 80057d2:	71fb      	strb	r3, [r7, #7]
 80057d4:	e010      	b.n	80057f8 <eTaskConfirmSleepModeStatus+0x4c>
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <eTaskConfirmSleepModeStatus+0x60>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <eTaskConfirmSleepModeStatus+0x38>
 80057de:	2300      	movs	r3, #0
 80057e0:	71fb      	strb	r3, [r7, #7]
 80057e2:	e009      	b.n	80057f8 <eTaskConfirmSleepModeStatus+0x4c>
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <eTaskConfirmSleepModeStatus+0x64>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <eTaskConfirmSleepModeStatus+0x68>)
 80057ea:	6819      	ldr	r1, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	1acb      	subs	r3, r1, r3
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d101      	bne.n	80057f8 <eTaskConfirmSleepModeStatus+0x4c>
 80057f4:	2302      	movs	r3, #2
 80057f6:	71fb      	strb	r3, [r7, #7]
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr
 8005804:	2000014c 	.word	0x2000014c
 8005808:	200001a0 	.word	0x200001a0
 800580c:	2000019c 	.word	0x2000019c
 8005810:	20000178 	.word	0x20000178
 8005814:	2000018c 	.word	0x2000018c

08005818 <prvInitialiseTaskLists>:
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	e00c      	b.n	800583e <prvInitialiseTaskLists+0x26>
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4a12      	ldr	r2, [pc, #72]	; (8005878 <prvInitialiseTaskLists+0x60>)
 8005830:	4413      	add	r3, r2
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fd9e 	bl	8006374 <vListInitialise>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3301      	adds	r3, #1
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b04      	cmp	r3, #4
 8005842:	d9ef      	bls.n	8005824 <prvInitialiseTaskLists+0xc>
 8005844:	480d      	ldr	r0, [pc, #52]	; (800587c <prvInitialiseTaskLists+0x64>)
 8005846:	f000 fd95 	bl	8006374 <vListInitialise>
 800584a:	480d      	ldr	r0, [pc, #52]	; (8005880 <prvInitialiseTaskLists+0x68>)
 800584c:	f000 fd92 	bl	8006374 <vListInitialise>
 8005850:	480c      	ldr	r0, [pc, #48]	; (8005884 <prvInitialiseTaskLists+0x6c>)
 8005852:	f000 fd8f 	bl	8006374 <vListInitialise>
 8005856:	480c      	ldr	r0, [pc, #48]	; (8005888 <prvInitialiseTaskLists+0x70>)
 8005858:	f000 fd8c 	bl	8006374 <vListInitialise>
 800585c:	480b      	ldr	r0, [pc, #44]	; (800588c <prvInitialiseTaskLists+0x74>)
 800585e:	f000 fd89 	bl	8006374 <vListInitialise>
 8005862:	4b0b      	ldr	r3, [pc, #44]	; (8005890 <prvInitialiseTaskLists+0x78>)
 8005864:	4a05      	ldr	r2, [pc, #20]	; (800587c <prvInitialiseTaskLists+0x64>)
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <prvInitialiseTaskLists+0x7c>)
 800586a:	4a05      	ldr	r2, [pc, #20]	; (8005880 <prvInitialiseTaskLists+0x68>)
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200000b8 	.word	0x200000b8
 800587c:	2000011c 	.word	0x2000011c
 8005880:	20000130 	.word	0x20000130
 8005884:	2000014c 	.word	0x2000014c
 8005888:	20000160 	.word	0x20000160
 800588c:	20000178 	.word	0x20000178
 8005890:	20000144 	.word	0x20000144
 8005894:	20000148 	.word	0x20000148

08005898 <prvCheckTasksWaitingTermination>:
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	e019      	b.n	80058d4 <prvCheckTasksWaitingTermination+0x3c>
 80058a0:	f000 fee6 	bl	8006670 <vPortEnterCritical>
 80058a4:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <prvCheckTasksWaitingTermination+0x50>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fdc2 	bl	800643a <uxListRemove>
 80058b6:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <prvCheckTasksWaitingTermination+0x54>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	4a0b      	ldr	r2, [pc, #44]	; (80058ec <prvCheckTasksWaitingTermination+0x54>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <prvCheckTasksWaitingTermination+0x58>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <prvCheckTasksWaitingTermination+0x58>)
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	f000 ff01 	bl	80066d0 <vPortExitCritical>
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f810 	bl	80058f4 <prvDeleteTCB>
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <prvCheckTasksWaitingTermination+0x58>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e1      	bne.n	80058a0 <prvCheckTasksWaitingTermination+0x8>
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000160 	.word	0x20000160
 80058ec:	2000018c 	.word	0x2000018c
 80058f0:	20000174 	.word	0x20000174

080058f4 <prvDeleteTCB>:
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fd25 	bl	8006350 <vPortFree>
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fd22 	bl	8006350 <vPortFree>
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <prvResetNextTaskUnblockTime>:
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
 8005918:	4b09      	ldr	r3, [pc, #36]	; (8005940 <prvResetNextTaskUnblockTime+0x2c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d104      	bne.n	800592c <prvResetNextTaskUnblockTime+0x18>
 8005922:	4b08      	ldr	r3, [pc, #32]	; (8005944 <prvResetNextTaskUnblockTime+0x30>)
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e005      	b.n	8005938 <prvResetNextTaskUnblockTime+0x24>
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <prvResetNextTaskUnblockTime+0x2c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a03      	ldr	r2, [pc, #12]	; (8005944 <prvResetNextTaskUnblockTime+0x30>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	bf00      	nop
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr
 8005940:	20000144 	.word	0x20000144
 8005944:	200001ac 	.word	0x200001ac

08005948 <xTaskGetSchedulerState>:
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	4b0b      	ldr	r3, [pc, #44]	; (800597c <xTaskGetSchedulerState+0x34>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <xTaskGetSchedulerState+0x14>
 8005956:	2301      	movs	r3, #1
 8005958:	607b      	str	r3, [r7, #4]
 800595a:	e008      	b.n	800596e <xTaskGetSchedulerState+0x26>
 800595c:	4b08      	ldr	r3, [pc, #32]	; (8005980 <xTaskGetSchedulerState+0x38>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <xTaskGetSchedulerState+0x22>
 8005964:	2302      	movs	r3, #2
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	e001      	b.n	800596e <xTaskGetSchedulerState+0x26>
 800596a:	2300      	movs	r3, #0
 800596c:	607b      	str	r3, [r7, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000198 	.word	0x20000198
 8005980:	200001b4 	.word	0x200001b4

08005984 <xTaskPriorityInherit>:
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d079      	beq.n	8005a8e <xTaskPriorityInherit+0x10a>
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599e:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <xTaskPriorityInherit+0x114>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d269      	bcs.n	8005a7c <xTaskPriorityInherit+0xf8>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	db06      	blt.n	80059be <xTaskPriorityInherit+0x3a>
 80059b0:	4b39      	ldr	r3, [pc, #228]	; (8005a98 <xTaskPriorityInherit+0x114>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	f1c3 0205 	rsb	r2, r3, #5
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	619a      	str	r2, [r3, #24]
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6959      	ldr	r1, [r3, #20]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a33      	ldr	r2, [pc, #204]	; (8005a9c <xTaskPriorityInherit+0x118>)
 80059d0:	4413      	add	r3, r2
 80059d2:	4299      	cmp	r1, r3
 80059d4:	d14a      	bne.n	8005a6c <xTaskPriorityInherit+0xe8>
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	3304      	adds	r3, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fd2d 	bl	800643a <uxListRemove>
 80059e0:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <xTaskPriorityInherit+0x114>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ee:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <xTaskPriorityInherit+0x11c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d903      	bls.n	80059fe <xTaskPriorityInherit+0x7a>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	4a29      	ldr	r2, [pc, #164]	; (8005aa0 <xTaskPriorityInherit+0x11c>)
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	4926      	ldr	r1, [pc, #152]	; (8005a9c <xTaskPriorityInherit+0x118>)
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3304      	adds	r3, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	609a      	str	r2, [r3, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	3204      	adds	r2, #4
 8005a2a:	605a      	str	r2, [r3, #4]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1d1a      	adds	r2, r3, #4
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	609a      	str	r2, [r3, #8]
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4a16      	ldr	r2, [pc, #88]	; (8005a9c <xTaskPriorityInherit+0x118>)
 8005a42:	441a      	add	r2, r3
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	615a      	str	r2, [r3, #20]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4c:	4913      	ldr	r1, [pc, #76]	; (8005a9c <xTaskPriorityInherit+0x118>)
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1c59      	adds	r1, r3, #1
 8005a5c:	480f      	ldr	r0, [pc, #60]	; (8005a9c <xTaskPriorityInherit+0x118>)
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4403      	add	r3, r0
 8005a68:	6019      	str	r1, [r3, #0]
 8005a6a:	e004      	b.n	8005a76 <xTaskPriorityInherit+0xf2>
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <xTaskPriorityInherit+0x114>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a76:	2301      	movs	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	e008      	b.n	8005a8e <xTaskPriorityInherit+0x10a>
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <xTaskPriorityInherit+0x114>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d201      	bcs.n	8005a8e <xTaskPriorityInherit+0x10a>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	200000b4 	.word	0x200000b4
 8005a9c:	200000b8 	.word	0x200000b8
 8005aa0:	20000194 	.word	0x20000194

08005aa4 <xTaskPriorityDisinherit>:
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d07e      	beq.n	8005bb8 <xTaskPriorityDisinherit+0x114>
 8005aba:	4b42      	ldr	r3, [pc, #264]	; (8005bc4 <xTaskPriorityDisinherit+0x120>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d00a      	beq.n	8005ada <xTaskPriorityDisinherit+0x36>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xTaskPriorityDisinherit+0x34>
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <xTaskPriorityDisinherit+0x54>
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xTaskPriorityDisinherit+0x52>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d054      	beq.n	8005bb8 <xTaskPriorityDisinherit+0x114>
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d150      	bne.n	8005bb8 <xTaskPriorityDisinherit+0x114>
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fc8d 	bl	800643a <uxListRemove>
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	f1c3 0205 	rsb	r2, r3, #5
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	619a      	str	r2, [r3, #24]
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b38:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <xTaskPriorityDisinherit+0x124>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d903      	bls.n	8005b48 <xTaskPriorityDisinherit+0xa4>
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4a20      	ldr	r2, [pc, #128]	; (8005bc8 <xTaskPriorityDisinherit+0x124>)
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4c:	491f      	ldr	r1, [pc, #124]	; (8005bcc <xTaskPriorityDisinherit+0x128>)
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	3304      	adds	r3, #4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	609a      	str	r2, [r3, #8]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	3204      	adds	r2, #4
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	1d1a      	adds	r2, r3, #4
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	609a      	str	r2, [r3, #8]
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <xTaskPriorityDisinherit+0x128>)
 8005b8c:	441a      	add	r2, r3
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	615a      	str	r2, [r3, #20]
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b96:	490d      	ldr	r1, [pc, #52]	; (8005bcc <xTaskPriorityDisinherit+0x128>)
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	1c59      	adds	r1, r3, #1
 8005ba6:	4809      	ldr	r0, [pc, #36]	; (8005bcc <xTaskPriorityDisinherit+0x128>)
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4403      	add	r3, r0
 8005bb2:	6019      	str	r1, [r3, #0]
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	200000b4 	.word	0x200000b4
 8005bc8:	20000194 	.word	0x20000194
 8005bcc:	200000b8 	.word	0x200000b8

08005bd0 <vTaskPriorityDisinheritAfterTimeout>:
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	; 0x28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	623b      	str	r3, [r7, #32]
 8005bde:	2301      	movs	r3, #1
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8093 	beq.w	8005d10 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d902      	bls.n	8005c18 <vTaskPriorityDisinheritAfterTimeout+0x48>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
 8005c16:	e002      	b.n	8005c1e <vTaskPriorityDisinheritAfterTimeout+0x4e>
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d073      	beq.n	8005d10 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d16e      	bne.n	8005d10 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8005c32:	4b39      	ldr	r3, [pc, #228]	; (8005d18 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6a3a      	ldr	r2, [r7, #32]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d10a      	bne.n	8005c52 <vTaskPriorityDisinheritAfterTimeout+0x82>
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	db04      	blt.n	8005c70 <vTaskPriorityDisinheritAfterTimeout+0xa0>
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	f1c3 0205 	rsb	r2, r3, #5
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	619a      	str	r2, [r3, #24]
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	6959      	ldr	r1, [r3, #20]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4a27      	ldr	r2, [pc, #156]	; (8005d1c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8005c80:	4413      	add	r3, r2
 8005c82:	4299      	cmp	r1, r3
 8005c84:	d144      	bne.n	8005d10 <vTaskPriorityDisinheritAfterTimeout+0x140>
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fbd5 	bl	800643a <uxListRemove>
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d903      	bls.n	8005ca4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	491c      	ldr	r1, [pc, #112]	; (8005d1c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	609a      	str	r2, [r3, #8]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	60da      	str	r2, [r3, #12]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	3204      	adds	r2, #4
 8005cd0:	605a      	str	r2, [r3, #4]
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	1d1a      	adds	r2, r3, #4
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	609a      	str	r2, [r3, #8]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4a0d      	ldr	r2, [pc, #52]	; (8005d1c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8005ce8:	441a      	add	r2, r3
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	615a      	str	r2, [r3, #20]
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf2:	490a      	ldr	r1, [pc, #40]	; (8005d1c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	1c59      	adds	r1, r3, #1
 8005d02:	4806      	ldr	r0, [pc, #24]	; (8005d1c <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4403      	add	r3, r0
 8005d0e:	6019      	str	r1, [r3, #0]
 8005d10:	bf00      	nop
 8005d12:	3728      	adds	r7, #40	; 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	200000b4 	.word	0x200000b4
 8005d1c:	200000b8 	.word	0x200000b8
 8005d20:	20000194 	.word	0x20000194

08005d24 <pvTaskIncrementMutexHeldCount>:
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <pvTaskIncrementMutexHeldCount+0x16>
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d36:	3201      	adds	r2, #1
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54
 8005d3a:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	200000b4 	.word	0x200000b4

08005d4c <prvAddCurrentTaskToDelayedList>:
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
 8005d56:	4b2e      	ldr	r3, [pc, #184]	; (8005e10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fb69 	bl	800643a <uxListRemove>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6e:	d124      	bne.n	8005dba <prvAddCurrentTaskToDelayedList+0x6e>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d021      	beq.n	8005dba <prvAddCurrentTaskToDelayedList+0x6e>
 8005d76:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	609a      	str	r2, [r3, #8]
 8005d84:	4b23      	ldr	r3, [pc, #140]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	6892      	ldr	r2, [r2, #8]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	3204      	adds	r2, #4
 8005d98:	605a      	str	r2, [r3, #4]
 8005d9a:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	1d1a      	adds	r2, r3, #4
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005daa:	615a      	str	r2, [r3, #20]
 8005dac:	4b1a      	ldr	r3, [pc, #104]	; (8005e18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	bf00      	nop
 8005db8:	e026      	b.n	8005e08 <prvAddCurrentTaskToDelayedList+0xbc>
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	4b14      	ldr	r3, [pc, #80]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	605a      	str	r2, [r3, #4]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d209      	bcs.n	8005de6 <prvAddCurrentTaskToDelayedList+0x9a>
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <prvAddCurrentTaskToDelayedList+0xd0>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b0f      	ldr	r3, [pc, #60]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4610      	mov	r0, r2
 8005de0:	f000 faf3 	bl	80063ca <vListInsert>
 8005de4:	e010      	b.n	8005e08 <prvAddCurrentTaskToDelayedList+0xbc>
 8005de6:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <prvAddCurrentTaskToDelayedList+0xd4>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f000 fae9 	bl	80063ca <vListInsert>
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d202      	bcs.n	8005e08 <prvAddCurrentTaskToDelayedList+0xbc>
 8005e02:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	bf00      	nop
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20000190 	.word	0x20000190
 8005e14:	200000b4 	.word	0x200000b4
 8005e18:	20000178 	.word	0x20000178
 8005e1c:	20000148 	.word	0x20000148
 8005e20:	20000144 	.word	0x20000144
 8005e24:	200001ac 	.word	0x200001ac

08005e28 <xTimerCreateTimerTask>:
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
 8005e32:	f000 fa45 	bl	80062c0 <prvCheckForValidListAndQueue>
 8005e36:	4b11      	ldr	r3, [pc, #68]	; (8005e7c <xTimerCreateTimerTask+0x54>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <xTimerCreateTimerTask+0x2c>
 8005e3e:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <xTimerCreateTimerTask+0x58>)
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	2303      	movs	r3, #3
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2300      	movs	r3, #0
 8005e48:	2280      	movs	r2, #128	; 0x80
 8005e4a:	490e      	ldr	r1, [pc, #56]	; (8005e84 <xTimerCreateTimerTask+0x5c>)
 8005e4c:	480e      	ldr	r0, [pc, #56]	; (8005e88 <xTimerCreateTimerTask+0x60>)
 8005e4e:	f7fe fcab 	bl	80047a8 <xTaskCreate>
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10a      	bne.n	8005e70 <xTimerCreateTimerTask+0x48>
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <xTimerCreateTimerTask+0x46>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	200001e8 	.word	0x200001e8
 8005e80:	200001ec 	.word	0x200001ec
 8005e84:	08006ca4 	.word	0x08006ca4
 8005e88:	08005f31 	.word	0x08005f31

08005e8c <prvReloadTimer>:
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	e008      	b.n	8005eac <prvReloadTimer+0x20>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	4798      	blx	r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	18d1      	adds	r1, r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f8db 	bl	8006074 <prvInsertTimerInActiveList>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1ea      	bne.n	8005e9a <prvReloadTimer+0xe>
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <prvProcessExpiredTimer>:
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
 8005eda:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <prvProcessExpiredTimer+0x5c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f000 faa6 	bl	800643a <uxListRemove>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <prvProcessExpiredTimer+0x38>
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff ffc3 	bl	8005e8c <prvReloadTimer>
 8005f06:	e008      	b.n	8005f1a <prvProcessExpiredTimer+0x4a>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	4798      	blx	r3
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200001e0 	.word	0x200001e0

08005f30 <prvTimerTask>:
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	f107 0308 	add.w	r3, r7, #8
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 f857 	bl	8005ff0 <prvGetNextExpireTime>
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4619      	mov	r1, r3
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f803 	bl	8005f54 <prvProcessTimerOrBlockTask>
 8005f4e:	f000 f8d3 	bl	80060f8 <prvProcessReceivedCommands>
 8005f52:	e7f1      	b.n	8005f38 <prvTimerTask+0x8>

08005f54 <prvProcessTimerOrBlockTask>:
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
 8005f5e:	f7fe fef5 	bl	8004d4c <vTaskSuspendAll>
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f864 	bl	8006034 <prvSampleTimeNow>
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d130      	bne.n	8005fd6 <prvProcessTimerOrBlockTask+0x82>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <prvProcessTimerOrBlockTask+0x3c>
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d806      	bhi.n	8005f90 <prvProcessTimerOrBlockTask+0x3c>
 8005f82:	f7fe ff27 	bl	8004dd4 <xTaskResumeAll>
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff ffa1 	bl	8005ed0 <prvProcessExpiredTimer>
 8005f8e:	e024      	b.n	8005fda <prvProcessTimerOrBlockTask+0x86>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <prvProcessTimerOrBlockTask+0x54>
 8005f96:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <prvProcessTimerOrBlockTask+0x90>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <prvProcessTimerOrBlockTask+0x50>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <prvProcessTimerOrBlockTask+0x52>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <prvProcessTimerOrBlockTask+0x94>)
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f7fe fbc3 	bl	8004740 <vQueueWaitForMessageRestricted>
 8005fba:	f7fe ff0b 	bl	8004dd4 <xTaskResumeAll>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10a      	bne.n	8005fda <prvProcessTimerOrBlockTask+0x86>
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <prvProcessTimerOrBlockTask+0x98>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	e001      	b.n	8005fda <prvProcessTimerOrBlockTask+0x86>
 8005fd6:	f7fe fefd 	bl	8004dd4 <xTaskResumeAll>
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200001e4 	.word	0x200001e4
 8005fe8:	200001e8 	.word	0x200001e8
 8005fec:	e000ed04 	.word	0xe000ed04

08005ff0 <prvGetNextExpireTime>:
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	4b0d      	ldr	r3, [pc, #52]	; (8006030 <prvGetNextExpireTime+0x40>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <prvGetNextExpireTime+0x16>
 8006002:	2201      	movs	r2, #1
 8006004:	e000      	b.n	8006008 <prvGetNextExpireTime+0x18>
 8006006:	2200      	movs	r2, #0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d105      	bne.n	8006020 <prvGetNextExpireTime+0x30>
 8006014:	4b06      	ldr	r3, [pc, #24]	; (8006030 <prvGetNextExpireTime+0x40>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e001      	b.n	8006024 <prvGetNextExpireTime+0x34>
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr
 8006030:	200001e0 	.word	0x200001e0

08006034 <prvSampleTimeNow>:
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	f7fe ffc6 	bl	8004fcc <xTaskGetTickCount>
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <prvSampleTimeNow+0x3c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	429a      	cmp	r2, r3
 800604a:	d205      	bcs.n	8006058 <prvSampleTimeNow+0x24>
 800604c:	f000 f912 	bl	8006274 <prvSwitchTimerLists>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e002      	b.n	800605e <prvSampleTimeNow+0x2a>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	4a04      	ldr	r2, [pc, #16]	; (8006070 <prvSampleTimeNow+0x3c>)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	200001f0 	.word	0x200001f0

08006074 <prvInsertTimerInActiveList>:
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	611a      	str	r2, [r3, #16]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	429a      	cmp	r2, r3
 8006098:	d812      	bhi.n	80060c0 <prvInsertTimerInActiveList+0x4c>
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	1ad2      	subs	r2, r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d302      	bcc.n	80060ae <prvInsertTimerInActiveList+0x3a>
 80060a8:	2301      	movs	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e01b      	b.n	80060e6 <prvInsertTimerInActiveList+0x72>
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <prvInsertTimerInActiveList+0x7c>)
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3304      	adds	r3, #4
 80060b6:	4619      	mov	r1, r3
 80060b8:	4610      	mov	r0, r2
 80060ba:	f000 f986 	bl	80063ca <vListInsert>
 80060be:	e012      	b.n	80060e6 <prvInsertTimerInActiveList+0x72>
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d206      	bcs.n	80060d6 <prvInsertTimerInActiveList+0x62>
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d302      	bcc.n	80060d6 <prvInsertTimerInActiveList+0x62>
 80060d0:	2301      	movs	r3, #1
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e007      	b.n	80060e6 <prvInsertTimerInActiveList+0x72>
 80060d6:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <prvInsertTimerInActiveList+0x80>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3304      	adds	r3, #4
 80060de:	4619      	mov	r1, r3
 80060e0:	4610      	mov	r0, r2
 80060e2:	f000 f972 	bl	80063ca <vListInsert>
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	200001e4 	.word	0x200001e4
 80060f4:	200001e0 	.word	0x200001e0

080060f8 <prvProcessReceivedCommands>:
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	e0a6      	b.n	800624e <prvProcessReceivedCommands+0x156>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f2c0 80a2 	blt.w	800624c <prvProcessReceivedCommands+0x154>
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <prvProcessReceivedCommands+0x26>
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3304      	adds	r3, #4
 8006118:	4618      	mov	r0, r3
 800611a:	f000 f98e 	bl	800643a <uxListRemove>
 800611e:	1d3b      	adds	r3, r7, #4
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff ff87 	bl	8006034 <prvSampleTimeNow>
 8006126:	61b8      	str	r0, [r7, #24]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	3b01      	subs	r3, #1
 800612c:	2b08      	cmp	r3, #8
 800612e:	f200 808e 	bhi.w	800624e <prvProcessReceivedCommands+0x156>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <prvProcessReceivedCommands+0x40>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	0800615d 	.word	0x0800615d
 800613c:	0800615d 	.word	0x0800615d
 8006140:	080061c5 	.word	0x080061c5
 8006144:	080061d9 	.word	0x080061d9
 8006148:	08006223 	.word	0x08006223
 800614c:	0800615d 	.word	0x0800615d
 8006150:	0800615d 	.word	0x0800615d
 8006154:	080061c5 	.word	0x080061c5
 8006158:	080061d9 	.word	0x080061d9
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006162:	f043 0301 	orr.w	r3, r3, #1
 8006166:	b2da      	uxtb	r2, r3
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	18d1      	adds	r1, r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	69f8      	ldr	r0, [r7, #28]
 800617c:	f7ff ff7a 	bl	8006074 <prvInsertTimerInActiveList>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d063      	beq.n	800624e <prvProcessReceivedCommands+0x156>
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d009      	beq.n	80061a8 <prvProcessReceivedCommands+0xb0>
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	4413      	add	r3, r2
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4619      	mov	r1, r3
 80061a0:	69f8      	ldr	r0, [r7, #28]
 80061a2:	f7ff fe73 	bl	8005e8c <prvReloadTimer>
 80061a6:	e008      	b.n	80061ba <prvProcessReceivedCommands+0xc2>
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ae:	f023 0301 	bic.w	r3, r3, #1
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	69f8      	ldr	r0, [r7, #28]
 80061c0:	4798      	blx	r3
 80061c2:	e044      	b.n	800624e <prvProcessReceivedCommands+0x156>
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ca:	f023 0301 	bic.w	r3, r3, #1
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80061d6:	e03a      	b.n	800624e <prvProcessReceivedCommands+0x156>
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061de:	f043 0301 	orr.w	r3, r3, #1
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	619a      	str	r2, [r3, #24]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <prvProcessReceivedCommands+0x116>
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <prvProcessReceivedCommands+0x114>
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	18d1      	adds	r1, r2, r3
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	69f8      	ldr	r0, [r7, #28]
 800621c:	f7ff ff2a 	bl	8006074 <prvInsertTimerInActiveList>
 8006220:	e015      	b.n	800624e <prvProcessReceivedCommands+0x156>
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <prvProcessReceivedCommands+0x140>
 8006230:	69f8      	ldr	r0, [r7, #28]
 8006232:	f000 f88d 	bl	8006350 <vPortFree>
 8006236:	e00a      	b.n	800624e <prvProcessReceivedCommands+0x156>
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	b2da      	uxtb	r2, r3
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800624a:	e000      	b.n	800624e <prvProcessReceivedCommands+0x156>
 800624c:	bf00      	nop
 800624e:	4b08      	ldr	r3, [pc, #32]	; (8006270 <prvProcessReceivedCommands+0x178>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f107 0108 	add.w	r1, r7, #8
 8006256:	2200      	movs	r2, #0
 8006258:	4618      	mov	r0, r3
 800625a:	f7fd fe3b 	bl	8003ed4 <xQueueReceive>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	f47f af4d 	bne.w	8006100 <prvProcessReceivedCommands+0x8>
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	3720      	adds	r7, #32
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	200001e8 	.word	0x200001e8

08006274 <prvSwitchTimerLists>:
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	e009      	b.n	8006290 <prvSwitchTimerLists+0x1c>
 800627c:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <prvSwitchTimerLists+0x44>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	f04f 31ff 	mov.w	r1, #4294967295
 800628a:	6838      	ldr	r0, [r7, #0]
 800628c:	f7ff fe20 	bl	8005ed0 <prvProcessExpiredTimer>
 8006290:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <prvSwitchTimerLists+0x44>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1f0      	bne.n	800627c <prvSwitchTimerLists+0x8>
 800629a:	4b07      	ldr	r3, [pc, #28]	; (80062b8 <prvSwitchTimerLists+0x44>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	607b      	str	r3, [r7, #4]
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <prvSwitchTimerLists+0x48>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <prvSwitchTimerLists+0x44>)
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	4a04      	ldr	r2, [pc, #16]	; (80062bc <prvSwitchTimerLists+0x48>)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	200001e0 	.word	0x200001e0
 80062bc:	200001e4 	.word	0x200001e4

080062c0 <prvCheckForValidListAndQueue>:
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	f000 f9d4 	bl	8006670 <vPortEnterCritical>
 80062c8:	4b12      	ldr	r3, [pc, #72]	; (8006314 <prvCheckForValidListAndQueue+0x54>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d11d      	bne.n	800630c <prvCheckForValidListAndQueue+0x4c>
 80062d0:	4811      	ldr	r0, [pc, #68]	; (8006318 <prvCheckForValidListAndQueue+0x58>)
 80062d2:	f000 f84f 	bl	8006374 <vListInitialise>
 80062d6:	4811      	ldr	r0, [pc, #68]	; (800631c <prvCheckForValidListAndQueue+0x5c>)
 80062d8:	f000 f84c 	bl	8006374 <vListInitialise>
 80062dc:	4b10      	ldr	r3, [pc, #64]	; (8006320 <prvCheckForValidListAndQueue+0x60>)
 80062de:	4a0e      	ldr	r2, [pc, #56]	; (8006318 <prvCheckForValidListAndQueue+0x58>)
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	4b10      	ldr	r3, [pc, #64]	; (8006324 <prvCheckForValidListAndQueue+0x64>)
 80062e4:	4a0d      	ldr	r2, [pc, #52]	; (800631c <prvCheckForValidListAndQueue+0x5c>)
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	2200      	movs	r2, #0
 80062ea:	210c      	movs	r1, #12
 80062ec:	200a      	movs	r0, #10
 80062ee:	f7fd fb2b 	bl	8003948 <xQueueGenericCreate>
 80062f2:	4603      	mov	r3, r0
 80062f4:	4a07      	ldr	r2, [pc, #28]	; (8006314 <prvCheckForValidListAndQueue+0x54>)
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	4b06      	ldr	r3, [pc, #24]	; (8006314 <prvCheckForValidListAndQueue+0x54>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <prvCheckForValidListAndQueue+0x4c>
 8006300:	4b04      	ldr	r3, [pc, #16]	; (8006314 <prvCheckForValidListAndQueue+0x54>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4908      	ldr	r1, [pc, #32]	; (8006328 <prvCheckForValidListAndQueue+0x68>)
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe f9cc 	bl	80046a4 <vQueueAddToRegistry>
 800630c:	f000 f9e0 	bl	80066d0 <vPortExitCritical>
 8006310:	bf00      	nop
 8006312:	bd80      	pop	{r7, pc}
 8006314:	200001e8 	.word	0x200001e8
 8006318:	200001b8 	.word	0x200001b8
 800631c:	200001cc 	.word	0x200001cc
 8006320:	200001e0 	.word	0x200001e0
 8006324:	200001e4 	.word	0x200001e4
 8006328:	08006cac 	.word	0x08006cac

0800632c <pvPortMalloc>:
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	f7fe fd0a 	bl	8004d4c <vTaskSuspendAll>
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fba5 	bl	8006a88 <malloc>
 800633e:	4603      	mov	r3, r0
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	f7fe fd47 	bl	8004dd4 <xTaskResumeAll>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <vPortFree>:
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <vPortFree+0x1c>
 800635e:	f7fe fcf5 	bl	8004d4c <vTaskSuspendAll>
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fb98 	bl	8006a98 <free>
 8006368:	f7fe fd34 	bl	8004dd4 <xTaskResumeAll>
 800636c:	bf00      	nop
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <vListInitialise>:
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f103 0208 	add.w	r2, r3, #8
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f04f 32ff 	mov.w	r2, #4294967295
 800638c:	609a      	str	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f103 0208 	add.w	r2, r3, #8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f103 0208 	add.w	r2, r3, #8
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	611a      	str	r2, [r3, #16]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr

080063b2 <vListInitialiseItem>:
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	611a      	str	r2, [r3, #16]
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr

080063ca <vListInsert>:
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d103      	bne.n	80063ea <vListInsert+0x20>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e00c      	b.n	8006404 <vListInsert+0x3a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3308      	adds	r3, #8
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e002      	b.n	80063f8 <vListInsert+0x2e>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	429a      	cmp	r2, r3
 8006402:	d2f6      	bcs.n	80063f2 <vListInsert+0x28>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	609a      	str	r2, [r3, #8]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	609a      	str	r2, [r3, #8]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	605a      	str	r2, [r3, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	611a      	str	r2, [r3, #16]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <uxListRemove>:
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6892      	ldr	r2, [r2, #8]
 8006450:	609a      	str	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6852      	ldr	r2, [r2, #4]
 800645a:	605a      	str	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	429a      	cmp	r2, r3
 8006464:	d103      	bne.n	800646e <uxListRemove+0x34>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	605a      	str	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	611a      	str	r2, [r3, #16]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	1e5a      	subs	r2, r3, #1
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr

0800648c <pxPortInitialiseStack>:
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3b04      	subs	r3, #4
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3b04      	subs	r3, #4
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f023 0201 	bic.w	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3b04      	subs	r3, #4
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	4a08      	ldr	r2, [pc, #32]	; (80064e0 <pxPortInitialiseStack+0x54>)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3b14      	subs	r3, #20
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3b20      	subs	r3, #32
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr
 80064e0:	080064e5 	.word	0x080064e5

080064e4 <prvTaskExitError>:
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	2300      	movs	r3, #0
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	4b12      	ldr	r3, [pc, #72]	; (8006538 <prvTaskExitError+0x54>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f6:	d00a      	beq.n	800650e <prvTaskExitError+0x2a>
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <prvTaskExitError+0x28>
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0fc      	beq.n	8006524 <prvTaskExitError+0x40>
 800652a:	bf00      	nop
 800652c:	bf00      	nop
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	bc80      	pop	{r7}
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	20000018 	.word	0x20000018
 800653c:	00000000 	.word	0x00000000

08006540 <SVC_Handler>:
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <pxCurrentTCBConst2>)
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	6808      	ldr	r0, [r1, #0]
 8006546:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800654a:	f380 8809 	msr	PSP, r0
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f380 8811 	msr	BASEPRI, r0
 800655a:	f04e 0e0d 	orr.w	lr, lr, #13
 800655e:	4770      	bx	lr

08006560 <pxCurrentTCBConst2>:
 8006560:	200000b4 	.word	0x200000b4
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <prvPortStartFirstTask>:
 8006568:	4806      	ldr	r0, [pc, #24]	; (8006584 <prvPortStartFirstTask+0x1c>)
 800656a:	6800      	ldr	r0, [r0, #0]
 800656c:	6800      	ldr	r0, [r0, #0]
 800656e:	f380 8808 	msr	MSP, r0
 8006572:	b662      	cpsie	i
 8006574:	b661      	cpsie	f
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	df00      	svc	0
 8006580:	bf00      	nop
 8006582:	0000      	.short	0x0000
 8006584:	e000ed08 	.word	0xe000ed08
 8006588:	bf00      	nop
 800658a:	bf00      	nop

0800658c <xPortStartScheduler>:
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	4b32      	ldr	r3, [pc, #200]	; (800665c <xPortStartScheduler+0xd0>)
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	b2db      	uxtb	r3, r3
 800659c:	607b      	str	r3, [r7, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	22ff      	movs	r2, #255	; 0xff
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	70fb      	strb	r3, [r7, #3]
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	4b2a      	ldr	r3, [pc, #168]	; (8006660 <xPortStartScheduler+0xd4>)
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	4b2a      	ldr	r3, [pc, #168]	; (8006664 <xPortStartScheduler+0xd8>)
 80065bc:	2207      	movs	r2, #7
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	e009      	b.n	80065d6 <xPortStartScheduler+0x4a>
 80065c2:	4b28      	ldr	r3, [pc, #160]	; (8006664 <xPortStartScheduler+0xd8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4a26      	ldr	r2, [pc, #152]	; (8006664 <xPortStartScheduler+0xd8>)
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	70fb      	strb	r3, [r7, #3]
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065de:	2b80      	cmp	r3, #128	; 0x80
 80065e0:	d0ef      	beq.n	80065c2 <xPortStartScheduler+0x36>
 80065e2:	4b20      	ldr	r3, [pc, #128]	; (8006664 <xPortStartScheduler+0xd8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1c3 0307 	rsb	r3, r3, #7
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d00a      	beq.n	8006604 <xPortStartScheduler+0x78>
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <xPortStartScheduler+0x76>
 8006604:	4b17      	ldr	r3, [pc, #92]	; (8006664 <xPortStartScheduler+0xd8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	4a16      	ldr	r2, [pc, #88]	; (8006664 <xPortStartScheduler+0xd8>)
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	4b15      	ldr	r3, [pc, #84]	; (8006664 <xPortStartScheduler+0xd8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006616:	4a13      	ldr	r2, [pc, #76]	; (8006664 <xPortStartScheduler+0xd8>)
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	4b11      	ldr	r3, [pc, #68]	; (8006668 <xPortStartScheduler+0xdc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <xPortStartScheduler+0xdc>)
 8006628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <xPortStartScheduler+0xdc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a0d      	ldr	r2, [pc, #52]	; (8006668 <xPortStartScheduler+0xdc>)
 8006634:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	f000 f981 	bl	8006940 <vPortSetupTimerInterrupt>
 800663e:	4b0b      	ldr	r3, [pc, #44]	; (800666c <xPortStartScheduler+0xe0>)
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	f7ff ff90 	bl	8006568 <prvPortStartFirstTask>
 8006648:	f7fe fe4a 	bl	80052e0 <vTaskSwitchContext>
 800664c:	f7ff ff4a 	bl	80064e4 <prvTaskExitError>
 8006650:	2300      	movs	r3, #0
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	e000e400 	.word	0xe000e400
 8006660:	20000200 	.word	0x20000200
 8006664:	20000204 	.word	0x20000204
 8006668:	e000ed20 	.word	0xe000ed20
 800666c:	20000018 	.word	0x20000018

08006670 <vPortEnterCritical>:
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	bf00      	nop
 800668a:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <vPortEnterCritical+0x58>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3301      	adds	r3, #1
 8006690:	4a0d      	ldr	r2, [pc, #52]	; (80066c8 <vPortEnterCritical+0x58>)
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <vPortEnterCritical+0x58>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d10f      	bne.n	80066bc <vPortEnterCritical+0x4c>
 800669c:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <vPortEnterCritical+0x5c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <vPortEnterCritical+0x4c>
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <vPortEnterCritical+0x4a>
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20000018 	.word	0x20000018
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <vPortExitCritical>:
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4b11      	ldr	r3, [pc, #68]	; (800671c <vPortExitCritical+0x4c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <vPortExitCritical+0x24>
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <vPortExitCritical+0x22>
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <vPortExitCritical+0x4c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	4a08      	ldr	r2, [pc, #32]	; (800671c <vPortExitCritical+0x4c>)
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	4b07      	ldr	r3, [pc, #28]	; (800671c <vPortExitCritical+0x4c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d105      	bne.n	8006712 <vPortExitCritical+0x42>
 8006706:	2300      	movs	r3, #0
 8006708:	603b      	str	r3, [r7, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr
 800671c:	20000018 	.word	0x20000018

08006720 <PendSV_Handler>:
 8006720:	f3ef 8009 	mrs	r0, PSP
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	4b0d      	ldr	r3, [pc, #52]	; (8006760 <pxCurrentTCBConst>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006730:	6010      	str	r0, [r2, #0]
 8006732:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006736:	f04f 0050 	mov.w	r0, #80	; 0x50
 800673a:	f380 8811 	msr	BASEPRI, r0
 800673e:	f7fe fdcf 	bl	80052e0 <vTaskSwitchContext>
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f380 8811 	msr	BASEPRI, r0
 800674a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800674e:	6819      	ldr	r1, [r3, #0]
 8006750:	6808      	ldr	r0, [r1, #0]
 8006752:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006756:	f380 8809 	msr	PSP, r0
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	4770      	bx	lr

08006760 <pxCurrentTCBConst>:
 8006760:	200000b4 	.word	0x200000b4
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <SysTick_Handler>:
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	bf00      	nop
 8006782:	f7fe fc95 	bl	80050b0 <xTaskIncrementTick>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <SysTick_Handler+0x2c>
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <SysTick_Handler+0x40>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <vPortSuppressTicksAndSleep>:
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	4b5b      	ldr	r3, [pc, #364]	; (8006924 <vPortSuppressTicksAndSleep+0x178>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d902      	bls.n	80067c4 <vPortSuppressTicksAndSleep+0x18>
 80067be:	4b59      	ldr	r3, [pc, #356]	; (8006924 <vPortSuppressTicksAndSleep+0x178>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	607b      	str	r3, [r7, #4]
 80067c4:	b672      	cpsid	i
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f7fe ffed 	bl	80057ac <eTaskConfirmSleepModeStatus>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <vPortSuppressTicksAndSleep+0x30>
 80067d8:	b662      	cpsie	i
 80067da:	e09e      	b.n	800691a <vPortSuppressTicksAndSleep+0x16e>
 80067dc:	4b52      	ldr	r3, [pc, #328]	; (8006928 <vPortSuppressTicksAndSleep+0x17c>)
 80067de:	2206      	movs	r2, #6
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	4b52      	ldr	r3, [pc, #328]	; (800692c <vPortSuppressTicksAndSleep+0x180>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d102      	bne.n	80067f4 <vPortSuppressTicksAndSleep+0x48>
 80067ee:	4b50      	ldr	r3, [pc, #320]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	4a4d      	ldr	r2, [pc, #308]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 80067fa:	6812      	ldr	r2, [r2, #0]
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4413      	add	r3, r2
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	4b4b      	ldr	r3, [pc, #300]	; (8006934 <vPortSuppressTicksAndSleep+0x188>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <vPortSuppressTicksAndSleep+0x78>
 8006812:	4b48      	ldr	r3, [pc, #288]	; (8006934 <vPortSuppressTicksAndSleep+0x188>)
 8006814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	4b45      	ldr	r3, [pc, #276]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69fa      	ldr	r2, [r7, #28]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	61fb      	str	r3, [r7, #28]
 8006824:	4b44      	ldr	r3, [pc, #272]	; (8006938 <vPortSuppressTicksAndSleep+0x18c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	429a      	cmp	r2, r3
 800682c:	d904      	bls.n	8006838 <vPortSuppressTicksAndSleep+0x8c>
 800682e:	4b42      	ldr	r3, [pc, #264]	; (8006938 <vPortSuppressTicksAndSleep+0x18c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	4a40      	ldr	r2, [pc, #256]	; (800693c <vPortSuppressTicksAndSleep+0x190>)
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	4b3b      	ldr	r3, [pc, #236]	; (800692c <vPortSuppressTicksAndSleep+0x180>)
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	4b38      	ldr	r3, [pc, #224]	; (8006928 <vPortSuppressTicksAndSleep+0x17c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a37      	ldr	r2, [pc, #220]	; (8006928 <vPortSuppressTicksAndSleep+0x17c>)
 800684a:	f043 0301 	orr.w	r3, r3, #1
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <vPortSuppressTicksAndSleep+0xb8>
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	bf30      	wfi
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	b662      	cpsie	i
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	b672      	cpsid	i
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	4b2b      	ldr	r3, [pc, #172]	; (8006928 <vPortSuppressTicksAndSleep+0x17c>)
 800687a:	2206      	movs	r2, #6
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	4b2a      	ldr	r3, [pc, #168]	; (8006928 <vPortSuppressTicksAndSleep+0x17c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01d      	beq.n	80068c6 <vPortSuppressTicksAndSleep+0x11a>
 800688a:	4b29      	ldr	r3, [pc, #164]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	4b27      	ldr	r3, [pc, #156]	; (800692c <vPortSuppressTicksAndSleep+0x180>)
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	1acb      	subs	r3, r1, r3
 8006896:	4413      	add	r3, r2
 8006898:	3b01      	subs	r3, #1
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	4b26      	ldr	r3, [pc, #152]	; (8006938 <vPortSuppressTicksAndSleep+0x18c>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d904      	bls.n	80068b0 <vPortSuppressTicksAndSleep+0x104>
 80068a6:	4b22      	ldr	r3, [pc, #136]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d903      	bls.n	80068b8 <vPortSuppressTicksAndSleep+0x10c>
 80068b0:	4b1f      	ldr	r3, [pc, #124]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <vPortSuppressTicksAndSleep+0x190>)
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e01a      	b.n	80068fc <vPortSuppressTicksAndSleep+0x150>
 80068c6:	4b19      	ldr	r3, [pc, #100]	; (800692c <vPortSuppressTicksAndSleep+0x180>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	4b18      	ldr	r3, [pc, #96]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	fb02 f203 	mul.w	r2, r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	60bb      	str	r3, [r7, #8]
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	3301      	adds	r3, #1
 80068ec:	4a10      	ldr	r2, [pc, #64]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	fb02 f203 	mul.w	r2, r2, r3
 80068f4:	4911      	ldr	r1, [pc, #68]	; (800693c <vPortSuppressTicksAndSleep+0x190>)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	600b      	str	r3, [r1, #0]
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <vPortSuppressTicksAndSleep+0x180>)
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	4b09      	ldr	r3, [pc, #36]	; (8006928 <vPortSuppressTicksAndSleep+0x17c>)
 8006904:	2207      	movs	r2, #7
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	4b09      	ldr	r3, [pc, #36]	; (8006930 <vPortSuppressTicksAndSleep+0x184>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a0b      	ldr	r2, [pc, #44]	; (800693c <vPortSuppressTicksAndSleep+0x190>)
 800690e:	3b01      	subs	r3, #1
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	69b8      	ldr	r0, [r7, #24]
 8006914:	f7fe fb72 	bl	8004ffc <vTaskStepTick>
 8006918:	b662      	cpsie	i
 800691a:	bf00      	nop
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	200001f8 	.word	0x200001f8
 8006928:	e000e010 	.word	0xe000e010
 800692c:	e000e018 	.word	0xe000e018
 8006930:	200001f4 	.word	0x200001f4
 8006934:	e000ed04 	.word	0xe000ed04
 8006938:	200001fc 	.word	0x200001fc
 800693c:	e000e014 	.word	0xe000e014

08006940 <vPortSetupTimerInterrupt>:
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
 8006944:	4b14      	ldr	r3, [pc, #80]	; (8006998 <vPortSetupTimerInterrupt+0x58>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a14      	ldr	r2, [pc, #80]	; (800699c <vPortSetupTimerInterrupt+0x5c>)
 800694a:	fba2 2303 	umull	r2, r3, r2, r3
 800694e:	099b      	lsrs	r3, r3, #6
 8006950:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <vPortSetupTimerInterrupt+0x60>)
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <vPortSetupTimerInterrupt+0x60>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	4a10      	ldr	r2, [pc, #64]	; (80069a4 <vPortSetupTimerInterrupt+0x64>)
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <vPortSetupTimerInterrupt+0x68>)
 8006966:	225e      	movs	r2, #94	; 0x5e
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	4b10      	ldr	r3, [pc, #64]	; (80069ac <vPortSetupTimerInterrupt+0x6c>)
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <vPortSetupTimerInterrupt+0x70>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	4b08      	ldr	r3, [pc, #32]	; (8006998 <vPortSetupTimerInterrupt+0x58>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a08      	ldr	r2, [pc, #32]	; (800699c <vPortSetupTimerInterrupt+0x5c>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	099b      	lsrs	r3, r3, #6
 8006982:	4a0c      	ldr	r2, [pc, #48]	; (80069b4 <vPortSetupTimerInterrupt+0x74>)
 8006984:	3b01      	subs	r3, #1
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4b08      	ldr	r3, [pc, #32]	; (80069ac <vPortSetupTimerInterrupt+0x6c>)
 800698a:	2207      	movs	r2, #7
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	bf00      	nop
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20000008 	.word	0x20000008
 800699c:	10624dd3 	.word	0x10624dd3
 80069a0:	200001f4 	.word	0x200001f4
 80069a4:	200001f8 	.word	0x200001f8
 80069a8:	200001fc 	.word	0x200001fc
 80069ac:	e000e010 	.word	0xe000e010
 80069b0:	e000e018 	.word	0xe000e018
 80069b4:	e000e014 	.word	0xe000e014

080069b8 <vPortValidateInterruptPriority>:
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	f3ef 8305 	mrs	r3, IPSR
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b0f      	cmp	r3, #15
 80069c8:	d914      	bls.n	80069f4 <vPortValidateInterruptPriority+0x3c>
 80069ca:	4a16      	ldr	r2, [pc, #88]	; (8006a24 <vPortValidateInterruptPriority+0x6c>)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	72fb      	strb	r3, [r7, #11]
 80069d4:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <vPortValidateInterruptPriority+0x70>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	7afa      	ldrb	r2, [r7, #11]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d20a      	bcs.n	80069f4 <vPortValidateInterruptPriority+0x3c>
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	607b      	str	r3, [r7, #4]
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <vPortValidateInterruptPriority+0x3a>
 80069f4:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <vPortValidateInterruptPriority+0x74>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80069fc:	4b0c      	ldr	r3, [pc, #48]	; (8006a30 <vPortValidateInterruptPriority+0x78>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d90a      	bls.n	8006a1a <vPortValidateInterruptPriority+0x62>
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	603b      	str	r3, [r7, #0]
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <vPortValidateInterruptPriority+0x60>
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr
 8006a24:	e000e3f0 	.word	0xe000e3f0
 8006a28:	20000200 	.word	0x20000200
 8006a2c:	e000ed0c 	.word	0xe000ed0c
 8006a30:	20000204 	.word	0x20000204

08006a34 <__errno>:
 8006a34:	4b01      	ldr	r3, [pc, #4]	; (8006a3c <__errno+0x8>)
 8006a36:	6818      	ldr	r0, [r3, #0]
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	2000001c 	.word	0x2000001c

08006a40 <__libc_init_array>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	2600      	movs	r6, #0
 8006a44:	4d0c      	ldr	r5, [pc, #48]	; (8006a78 <__libc_init_array+0x38>)
 8006a46:	4c0d      	ldr	r4, [pc, #52]	; (8006a7c <__libc_init_array+0x3c>)
 8006a48:	1b64      	subs	r4, r4, r5
 8006a4a:	10a4      	asrs	r4, r4, #2
 8006a4c:	42a6      	cmp	r6, r4
 8006a4e:	d109      	bne.n	8006a64 <__libc_init_array+0x24>
 8006a50:	f000 f904 	bl	8006c5c <_init>
 8006a54:	2600      	movs	r6, #0
 8006a56:	4d0a      	ldr	r5, [pc, #40]	; (8006a80 <__libc_init_array+0x40>)
 8006a58:	4c0a      	ldr	r4, [pc, #40]	; (8006a84 <__libc_init_array+0x44>)
 8006a5a:	1b64      	subs	r4, r4, r5
 8006a5c:	10a4      	asrs	r4, r4, #2
 8006a5e:	42a6      	cmp	r6, r4
 8006a60:	d105      	bne.n	8006a6e <__libc_init_array+0x2e>
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a68:	4798      	blx	r3
 8006a6a:	3601      	adds	r6, #1
 8006a6c:	e7ee      	b.n	8006a4c <__libc_init_array+0xc>
 8006a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a72:	4798      	blx	r3
 8006a74:	3601      	adds	r6, #1
 8006a76:	e7f2      	b.n	8006a5e <__libc_init_array+0x1e>
 8006a78:	08006ce0 	.word	0x08006ce0
 8006a7c:	08006ce0 	.word	0x08006ce0
 8006a80:	08006ce0 	.word	0x08006ce0
 8006a84:	08006ce4 	.word	0x08006ce4

08006a88 <malloc>:
 8006a88:	4b02      	ldr	r3, [pc, #8]	; (8006a94 <malloc+0xc>)
 8006a8a:	4601      	mov	r1, r0
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	f000 b86d 	b.w	8006b6c <_malloc_r>
 8006a92:	bf00      	nop
 8006a94:	2000001c 	.word	0x2000001c

08006a98 <free>:
 8006a98:	4b02      	ldr	r3, [pc, #8]	; (8006aa4 <free+0xc>)
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	f000 b819 	b.w	8006ad4 <_free_r>
 8006aa2:	bf00      	nop
 8006aa4:	2000001c 	.word	0x2000001c

08006aa8 <memcpy>:
 8006aa8:	440a      	add	r2, r1
 8006aaa:	4291      	cmp	r1, r2
 8006aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ab0:	d100      	bne.n	8006ab4 <memcpy+0xc>
 8006ab2:	4770      	bx	lr
 8006ab4:	b510      	push	{r4, lr}
 8006ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aba:	4291      	cmp	r1, r2
 8006abc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ac0:	d1f9      	bne.n	8006ab6 <memcpy+0xe>
 8006ac2:	bd10      	pop	{r4, pc}

08006ac4 <memset>:
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4402      	add	r2, r0
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d100      	bne.n	8006ace <memset+0xa>
 8006acc:	4770      	bx	lr
 8006ace:	f803 1b01 	strb.w	r1, [r3], #1
 8006ad2:	e7f9      	b.n	8006ac8 <memset+0x4>

08006ad4 <_free_r>:
 8006ad4:	b538      	push	{r3, r4, r5, lr}
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	d043      	beq.n	8006b64 <_free_r+0x90>
 8006adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae0:	1f0c      	subs	r4, r1, #4
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	bfb8      	it	lt
 8006ae6:	18e4      	addlt	r4, r4, r3
 8006ae8:	f000 f8aa 	bl	8006c40 <__malloc_lock>
 8006aec:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <_free_r+0x94>)
 8006aee:	6813      	ldr	r3, [r2, #0]
 8006af0:	4610      	mov	r0, r2
 8006af2:	b933      	cbnz	r3, 8006b02 <_free_r+0x2e>
 8006af4:	6063      	str	r3, [r4, #4]
 8006af6:	6014      	str	r4, [r2, #0]
 8006af8:	4628      	mov	r0, r5
 8006afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006afe:	f000 b8a5 	b.w	8006c4c <__malloc_unlock>
 8006b02:	42a3      	cmp	r3, r4
 8006b04:	d90a      	bls.n	8006b1c <_free_r+0x48>
 8006b06:	6821      	ldr	r1, [r4, #0]
 8006b08:	1862      	adds	r2, r4, r1
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	bf01      	itttt	eq
 8006b0e:	681a      	ldreq	r2, [r3, #0]
 8006b10:	685b      	ldreq	r3, [r3, #4]
 8006b12:	1852      	addeq	r2, r2, r1
 8006b14:	6022      	streq	r2, [r4, #0]
 8006b16:	6063      	str	r3, [r4, #4]
 8006b18:	6004      	str	r4, [r0, #0]
 8006b1a:	e7ed      	b.n	8006af8 <_free_r+0x24>
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	b10b      	cbz	r3, 8006b26 <_free_r+0x52>
 8006b22:	42a3      	cmp	r3, r4
 8006b24:	d9fa      	bls.n	8006b1c <_free_r+0x48>
 8006b26:	6811      	ldr	r1, [r2, #0]
 8006b28:	1850      	adds	r0, r2, r1
 8006b2a:	42a0      	cmp	r0, r4
 8006b2c:	d10b      	bne.n	8006b46 <_free_r+0x72>
 8006b2e:	6820      	ldr	r0, [r4, #0]
 8006b30:	4401      	add	r1, r0
 8006b32:	1850      	adds	r0, r2, r1
 8006b34:	4283      	cmp	r3, r0
 8006b36:	6011      	str	r1, [r2, #0]
 8006b38:	d1de      	bne.n	8006af8 <_free_r+0x24>
 8006b3a:	6818      	ldr	r0, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4401      	add	r1, r0
 8006b40:	6011      	str	r1, [r2, #0]
 8006b42:	6053      	str	r3, [r2, #4]
 8006b44:	e7d8      	b.n	8006af8 <_free_r+0x24>
 8006b46:	d902      	bls.n	8006b4e <_free_r+0x7a>
 8006b48:	230c      	movs	r3, #12
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	e7d4      	b.n	8006af8 <_free_r+0x24>
 8006b4e:	6820      	ldr	r0, [r4, #0]
 8006b50:	1821      	adds	r1, r4, r0
 8006b52:	428b      	cmp	r3, r1
 8006b54:	bf01      	itttt	eq
 8006b56:	6819      	ldreq	r1, [r3, #0]
 8006b58:	685b      	ldreq	r3, [r3, #4]
 8006b5a:	1809      	addeq	r1, r1, r0
 8006b5c:	6021      	streq	r1, [r4, #0]
 8006b5e:	6063      	str	r3, [r4, #4]
 8006b60:	6054      	str	r4, [r2, #4]
 8006b62:	e7c9      	b.n	8006af8 <_free_r+0x24>
 8006b64:	bd38      	pop	{r3, r4, r5, pc}
 8006b66:	bf00      	nop
 8006b68:	20000208 	.word	0x20000208

08006b6c <_malloc_r>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	1ccd      	adds	r5, r1, #3
 8006b70:	f025 0503 	bic.w	r5, r5, #3
 8006b74:	3508      	adds	r5, #8
 8006b76:	2d0c      	cmp	r5, #12
 8006b78:	bf38      	it	cc
 8006b7a:	250c      	movcc	r5, #12
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	4606      	mov	r6, r0
 8006b80:	db01      	blt.n	8006b86 <_malloc_r+0x1a>
 8006b82:	42a9      	cmp	r1, r5
 8006b84:	d903      	bls.n	8006b8e <_malloc_r+0x22>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b8e:	f000 f857 	bl	8006c40 <__malloc_lock>
 8006b92:	4921      	ldr	r1, [pc, #132]	; (8006c18 <_malloc_r+0xac>)
 8006b94:	680a      	ldr	r2, [r1, #0]
 8006b96:	4614      	mov	r4, r2
 8006b98:	b99c      	cbnz	r4, 8006bc2 <_malloc_r+0x56>
 8006b9a:	4f20      	ldr	r7, [pc, #128]	; (8006c1c <_malloc_r+0xb0>)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	b923      	cbnz	r3, 8006baa <_malloc_r+0x3e>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f000 f83c 	bl	8006c20 <_sbrk_r>
 8006ba8:	6038      	str	r0, [r7, #0]
 8006baa:	4629      	mov	r1, r5
 8006bac:	4630      	mov	r0, r6
 8006bae:	f000 f837 	bl	8006c20 <_sbrk_r>
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	d123      	bne.n	8006bfe <_malloc_r+0x92>
 8006bb6:	230c      	movs	r3, #12
 8006bb8:	4630      	mov	r0, r6
 8006bba:	6033      	str	r3, [r6, #0]
 8006bbc:	f000 f846 	bl	8006c4c <__malloc_unlock>
 8006bc0:	e7e3      	b.n	8006b8a <_malloc_r+0x1e>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	1b5b      	subs	r3, r3, r5
 8006bc6:	d417      	bmi.n	8006bf8 <_malloc_r+0x8c>
 8006bc8:	2b0b      	cmp	r3, #11
 8006bca:	d903      	bls.n	8006bd4 <_malloc_r+0x68>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	441c      	add	r4, r3
 8006bd0:	6025      	str	r5, [r4, #0]
 8006bd2:	e004      	b.n	8006bde <_malloc_r+0x72>
 8006bd4:	6863      	ldr	r3, [r4, #4]
 8006bd6:	42a2      	cmp	r2, r4
 8006bd8:	bf0c      	ite	eq
 8006bda:	600b      	streq	r3, [r1, #0]
 8006bdc:	6053      	strne	r3, [r2, #4]
 8006bde:	4630      	mov	r0, r6
 8006be0:	f000 f834 	bl	8006c4c <__malloc_unlock>
 8006be4:	f104 000b 	add.w	r0, r4, #11
 8006be8:	1d23      	adds	r3, r4, #4
 8006bea:	f020 0007 	bic.w	r0, r0, #7
 8006bee:	1ac2      	subs	r2, r0, r3
 8006bf0:	d0cc      	beq.n	8006b8c <_malloc_r+0x20>
 8006bf2:	1a1b      	subs	r3, r3, r0
 8006bf4:	50a3      	str	r3, [r4, r2]
 8006bf6:	e7c9      	b.n	8006b8c <_malloc_r+0x20>
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	6864      	ldr	r4, [r4, #4]
 8006bfc:	e7cc      	b.n	8006b98 <_malloc_r+0x2c>
 8006bfe:	1cc4      	adds	r4, r0, #3
 8006c00:	f024 0403 	bic.w	r4, r4, #3
 8006c04:	42a0      	cmp	r0, r4
 8006c06:	d0e3      	beq.n	8006bd0 <_malloc_r+0x64>
 8006c08:	1a21      	subs	r1, r4, r0
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 f808 	bl	8006c20 <_sbrk_r>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d1dd      	bne.n	8006bd0 <_malloc_r+0x64>
 8006c14:	e7cf      	b.n	8006bb6 <_malloc_r+0x4a>
 8006c16:	bf00      	nop
 8006c18:	20000208 	.word	0x20000208
 8006c1c:	2000020c 	.word	0x2000020c

08006c20 <_sbrk_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	2300      	movs	r3, #0
 8006c24:	4d05      	ldr	r5, [pc, #20]	; (8006c3c <_sbrk_r+0x1c>)
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	f7fa fbb6 	bl	800139c <_sbrk>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_sbrk_r+0x1a>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_sbrk_r+0x1a>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	20000328 	.word	0x20000328

08006c40 <__malloc_lock>:
 8006c40:	4801      	ldr	r0, [pc, #4]	; (8006c48 <__malloc_lock+0x8>)
 8006c42:	f000 b809 	b.w	8006c58 <__retarget_lock_acquire_recursive>
 8006c46:	bf00      	nop
 8006c48:	20000330 	.word	0x20000330

08006c4c <__malloc_unlock>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	; (8006c54 <__malloc_unlock+0x8>)
 8006c4e:	f000 b804 	b.w	8006c5a <__retarget_lock_release_recursive>
 8006c52:	bf00      	nop
 8006c54:	20000330 	.word	0x20000330

08006c58 <__retarget_lock_acquire_recursive>:
 8006c58:	4770      	bx	lr

08006c5a <__retarget_lock_release_recursive>:
 8006c5a:	4770      	bx	lr

08006c5c <_init>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	bf00      	nop
 8006c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c62:	bc08      	pop	{r3}
 8006c64:	469e      	mov	lr, r3
 8006c66:	4770      	bx	lr

08006c68 <_fini>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	bf00      	nop
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr
