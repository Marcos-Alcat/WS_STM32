
memoria.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e58  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe0  08004fe0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004fe0  08004fe0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fe0  08004fe0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000078  08005060  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08005060  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013992  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f90  00000000  00000000  00033a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  000369c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  000379e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2a6  00000000  00000000  000388a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115cf  00000000  00000000  00052b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091904  00000000  00000000  00064115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5a19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004420  00000000  00000000  000f5a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f50 	.word	0x08004f50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004f50 	.word	0x08004f50

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_f2uiz>:
 800036c:	0042      	lsls	r2, r0, #1
 800036e:	d20e      	bcs.n	800038e <__aeabi_f2uiz+0x22>
 8000370:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000374:	d30b      	bcc.n	800038e <__aeabi_f2uiz+0x22>
 8000376:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800037a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037e:	d409      	bmi.n	8000394 <__aeabi_f2uiz+0x28>
 8000380:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000388:	fa23 f002 	lsr.w	r0, r3, r2
 800038c:	4770      	bx	lr
 800038e:	f04f 0000 	mov.w	r0, #0
 8000392:	4770      	bx	lr
 8000394:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000398:	d101      	bne.n	800039e <__aeabi_f2uiz+0x32>
 800039a:	0242      	lsls	r2, r0, #9
 800039c:	d102      	bne.n	80003a4 <__aeabi_f2uiz+0x38>
 800039e:	f04f 30ff 	mov.w	r0, #4294967295
 80003a2:	4770      	bx	lr
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop

080003ac <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	e016      	b.n	80003e8 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80003c0:	3301      	adds	r3, #1
 80003c2:	029b      	lsls	r3, r3, #10
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d20b      	bcs.n	80003e2 <GetPage+0x36>
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80003d0:	029b      	lsls	r3, r3, #10
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d304      	bcc.n	80003e2 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80003de:	029b      	lsls	r3, r3, #10
 80003e0:	e006      	b.n	80003f0 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3301      	adds	r3, #1
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2b7f      	cmp	r3, #127	; 0x7f
 80003ec:	dde5      	ble.n	80003ba <GetPage+0xe>
	  }
  }

  return 0;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <float2Bytes>:

uint8_t bytes_temp[4];


void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 80003fa:	b480      	push	{r7}
 80003fc:	b085      	sub	sp, #20
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
 8000402:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8000408:	2300      	movs	r3, #0
 800040a:	73fb      	strb	r3, [r7, #15]
 800040c:	e00c      	b.n	8000428 <float2Bytes+0x2e>
      ftoa_bytes_temp[i] = thing.bytes[i];
 800040e:	7bfa      	ldrb	r2, [r7, #15]
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	6879      	ldr	r1, [r7, #4]
 8000414:	440b      	add	r3, r1
 8000416:	f107 0110 	add.w	r1, r7, #16
 800041a:	440a      	add	r2, r1
 800041c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000420:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	3301      	adds	r3, #1
 8000426:	73fb      	strb	r3, [r7, #15]
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	2b03      	cmp	r3, #3
 800042c:	d9ef      	bls.n	800040e <float2Bytes+0x14>
    }

}
 800042e:	bf00      	nop
 8000430:	bf00      	nop
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 800043a:	b480      	push	{r7}
 800043c:	b087      	sub	sp, #28
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000442:	2300      	movs	r3, #0
 8000444:	75fb      	strb	r3, [r7, #23]
 8000446:	e00c      	b.n	8000462 <Bytes2float+0x28>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8000448:	7dfb      	ldrb	r3, [r7, #23]
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	441a      	add	r2, r3
 800044e:	7dfb      	ldrb	r3, [r7, #23]
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	f107 0118 	add.w	r1, r7, #24
 8000456:	440b      	add	r3, r1
 8000458:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < 4; i++) {
 800045c:	7dfb      	ldrb	r3, [r7, #23]
 800045e:	3301      	adds	r3, #1
 8000460:	75fb      	strb	r3, [r7, #23]
 8000462:	7dfb      	ldrb	r3, [r7, #23]
 8000464:	2b03      	cmp	r3, #3
 8000466:	d9ef      	bls.n	8000448 <Bytes2float+0xe>
    }

   float float_variable =  thing.a;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	613b      	str	r3, [r7, #16]
   return float_variable;
 800046c:	693b      	ldr	r3, [r7, #16]
}
 800046e:	4618      	mov	r0, r3
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	4613      	mov	r3, r2
 8000484:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8000486:	2300      	movs	r3, #0
 8000488:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800048a:	f000 fdbb 	bl	8001004 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 800048e:	68f8      	ldr	r0, [r7, #12]
 8000490:	f7ff ff8c 	bl	80003ac <GetPage>
 8000494:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	461a      	mov	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	4413      	add	r3, r2
 80004a0:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80004a2:	69f8      	ldr	r0, [r7, #28]
 80004a4:	f7ff ff82 	bl	80003ac <GetPage>
 80004a8:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80004aa:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <Flash_Write_Data+0xb0>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <Flash_Write_Data+0xb0>)
 80004b2:	6a3b      	ldr	r3, [r7, #32]
 80004b4:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	6a3b      	ldr	r3, [r7, #32]
 80004ba:	1ad3      	subs	r3, r2, r3
 80004bc:	0a9b      	lsrs	r3, r3, #10
 80004be:	3301      	adds	r3, #1
 80004c0:	4a19      	ldr	r2, [pc, #100]	; (8000528 <Flash_Write_Data+0xb0>)
 80004c2:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	4619      	mov	r1, r3
 80004ca:	4817      	ldr	r0, [pc, #92]	; (8000528 <Flash_Write_Data+0xb0>)
 80004cc:	f000 fe8c 	bl	80011e8 <HAL_FLASHEx_Erase>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d01d      	beq.n	8000512 <Flash_Write_Data+0x9a>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 80004d6:	f000 fdcb 	bl	8001070 <HAL_FLASH_GetError>
 80004da:	4603      	mov	r3, r0
 80004dc:	e020      	b.n	8000520 <Flash_Write_Data+0xa8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 80004de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	4413      	add	r3, r2
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	f04f 0300 	mov.w	r3, #0
 80004ee:	68f9      	ldr	r1, [r7, #12]
 80004f0:	2002      	movs	r0, #2
 80004f2:	f000 fd17 	bl	8000f24 <HAL_FLASH_Program>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d106      	bne.n	800050a <Flash_Write_Data+0x92>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3304      	adds	r3, #4
 8000500:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000504:	3301      	adds	r3, #1
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
 8000508:	e003      	b.n	8000512 <Flash_Write_Data+0x9a>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800050a:	f000 fdb1 	bl	8001070 <HAL_FLASH_GetError>
 800050e:	4603      	mov	r3, r0
 8000510:	e006      	b.n	8000520 <Flash_Write_Data+0xa8>
	   while (sofar<numberofwords)
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000516:	429a      	cmp	r2, r3
 8000518:	dbe1      	blt.n	80004de <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800051a:	f000 fd99 	bl	8001050 <HAL_FLASH_Lock>

	   return 0;
 800051e:	2300      	movs	r3, #0
}
 8000520:	4618      	mov	r0, r3
 8000522:	3728      	adds	r7, #40	; 0x28
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000094 	.word	0x20000094

0800052c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	4613      	mov	r3, r2
 8000538:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3304      	adds	r3, #4
 8000546:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	3304      	adds	r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	80fa      	strh	r2, [r7, #6]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d000      	beq.n	800055a <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000558:	e7ef      	b.n	800053a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 800055a:	bf00      	nop
	}
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
	...

08000568 <Flash_Write_NUM>:
	}
}


void Flash_Write_NUM (uint32_t StartSectorAddress, float Num)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]

	float2Bytes(bytes_temp, Num);
 8000572:	6839      	ldr	r1, [r7, #0]
 8000574:	4805      	ldr	r0, [pc, #20]	; (800058c <Flash_Write_NUM+0x24>)
 8000576:	f7ff ff40 	bl	80003fa <float2Bytes>

	Flash_Write_Data (StartSectorAddress, (uint32_t *)bytes_temp, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	4903      	ldr	r1, [pc, #12]	; (800058c <Flash_Write_NUM+0x24>)
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f7ff ff7a 	bl	8000478 <Flash_Write_Data>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000218 	.word	0x20000218

08000590 <Flash_Read_NUM>:


float Flash_Read_NUM (uint32_t StartSectorAddress)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	Flash_Read_Data(StartSectorAddress, (uint32_t *)buffer, 1);
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2201      	movs	r2, #1
 800059e:	4619      	mov	r1, r3
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff ffc3 	bl	800052c <Flash_Read_Data>
	value = Bytes2float(buffer);
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff45 	bl	800043a <Bytes2float>
 80005b0:	60f8      	str	r0, [r7, #12]
	return value;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Tarea_config>:
int tarea = 0;

TaskHandle_t xTarea_config_Handle = NULL,xTarea_memoria_Handle=NULL;

void Tarea_config( void *pvParameters )
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxPriority;
	uxPriority = uxTaskPriorityGet( NULL );
 80005c4:	2000      	movs	r0, #0
 80005c6:	f002 fd9f 	bl	8003108 <uxTaskPriorityGet>
 80005ca:	61f8      	str	r0, [r7, #28]

	secuencias cola,envio;
	int contador=0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
	for( ;; )
	{
		 if(read_sw1_state)
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <Tarea_config+0x88>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d022      	beq.n	800061e <Tarea_config+0x62>
		 {
			 envio.maximo = 78;
 80005d8:	234e      	movs	r3, #78	; 0x4e
 80005da:	60bb      	str	r3, [r7, #8]
			 envio.minimo = 7;
 80005dc:	2307      	movs	r3, #7
 80005de:	60fb      	str	r3, [r7, #12]
			 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e6:	4818      	ldr	r0, [pc, #96]	; (8000648 <Tarea_config+0x8c>)
 80005e8:	f001 f82a 	bl	8001640 <HAL_GPIO_WritePin>
			 xQueueReceive(CM,&cola,portMAX_DELAY);
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <Tarea_config+0x90>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f107 0110 	add.w	r1, r7, #16
 80005f4:	f04f 32ff 	mov.w	r2, #4294967295
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 f8c5 	bl	8002788 <xQueueReceive>
			 xQueueSend(CM, &envio, portMAX_DELAY);
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <Tarea_config+0x90>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	f107 0108 	add.w	r1, r7, #8
 8000606:	2300      	movs	r3, #0
 8000608:	f04f 32ff 	mov.w	r2, #4294967295
 800060c:	f001 ffbe 	bl	800258c <xQueueGenericSend>
			 vTaskPrioritySet( xTarea_memoria_Handle, 4 );
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <Tarea_config+0x94>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2104      	movs	r1, #4
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fd90 	bl	800313c <vTaskPrioritySet>
 800061c:	e005      	b.n	800062a <Tarea_config+0x6e>
			 /// vTaskPrioritySet( NULL, 1 ); LE BAJO LA PRIORIDAD ASI LA MEMORIA VUELVE GRABA , BAJA Y QUEDAN LAS OTRAS 4 CON MAS PRIORIDAD
		 }
		else
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <Tarea_config+0x8c>)
 8000626:	f001 f80b 	bl	8001640 <HAL_GPIO_WritePin>

		 xQueuePeek(CM,&cola,portMAX_DELAY);
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <Tarea_config+0x90>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f107 0110 	add.w	r1, r7, #16
 8000632:	f04f 32ff 	mov.w	r2, #4294967295
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f986 	bl	8002948 <xQueuePeek>
		 ///xQueueSend(my_queue, &envio, portMAX_DELAY); X2 ENVIO A ALARMA Y A PANTALLA

		 tarea = 2;
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <Tarea_config+0x98>)
 800063e:	2202      	movs	r2, #2
 8000640:	601a      	str	r2, [r3, #0]
		 if(read_sw1_state)
 8000642:	e7c5      	b.n	80005d0 <Tarea_config+0x14>
 8000644:	200000a4 	.word	0x200000a4
 8000648:	40011000 	.word	0x40011000
 800064c:	20000234 	.word	0x20000234
 8000650:	200000b4 	.word	0x200000b4
 8000654:	200000ac 	.word	0x200000ac

08000658 <Tarea_memoria>:
	}
}


void Tarea_memoria( void *pvParameters )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxPriority;
uxPriority = uxTaskPriorityGet( NULL );
 8000660:	2000      	movs	r0, #0
 8000662:	f002 fd51 	bl	8003108 <uxTaskPriorityGet>
 8000666:	6178      	str	r0, [r7, #20]

secuencias recepcion;
for( ;; )
	{
	/// Tarea memoria ///////////////////////
		  tarea = 1;
 8000668:	4b66      	ldr	r3, [pc, #408]	; (8000804 <Tarea_memoria+0x1ac>)
 800066a:	2201      	movs	r2, #1
 800066c:	601a      	str	r2, [r3, #0]
		  if(estados==0)
 800066e:	4b66      	ldr	r3, [pc, #408]	; (8000808 <Tarea_memoria+0x1b0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d160      	bne.n	8000738 <Tarea_memoria+0xe0>
		  {
			  /// solo de prueba /////////////////////////////////////////////////

				Flash_Write_NUM(0x08005C10, 100);
 8000676:	4965      	ldr	r1, [pc, #404]	; (800080c <Tarea_memoria+0x1b4>)
 8000678:	4865      	ldr	r0, [pc, #404]	; (8000810 <Tarea_memoria+0x1b8>)
 800067a:	f7ff ff75 	bl	8000568 <Flash_Write_NUM>
				Flash_Write_NUM(0x08006010, 0);
 800067e:	f04f 0100 	mov.w	r1, #0
 8000682:	4864      	ldr	r0, [pc, #400]	; (8000814 <Tarea_memoria+0x1bc>)
 8000684:	f7ff ff70 	bl	8000568 <Flash_Write_NUM>

				Flash_Write_NUM(0x08006410, 70);
 8000688:	4963      	ldr	r1, [pc, #396]	; (8000818 <Tarea_memoria+0x1c0>)
 800068a:	4864      	ldr	r0, [pc, #400]	; (800081c <Tarea_memoria+0x1c4>)
 800068c:	f7ff ff6c 	bl	8000568 <Flash_Write_NUM>
				Flash_Write_NUM(0x08006810, 30);
 8000690:	4963      	ldr	r1, [pc, #396]	; (8000820 <Tarea_memoria+0x1c8>)
 8000692:	4864      	ldr	r0, [pc, #400]	; (8000824 <Tarea_memoria+0x1cc>)
 8000694:	f7ff ff68 	bl	8000568 <Flash_Write_NUM>

				Flash_Write_NUM(0x08006C10, 40);
 8000698:	4963      	ldr	r1, [pc, #396]	; (8000828 <Tarea_memoria+0x1d0>)
 800069a:	4864      	ldr	r0, [pc, #400]	; (800082c <Tarea_memoria+0x1d4>)
 800069c:	f7ff ff64 	bl	8000568 <Flash_Write_NUM>
				Flash_Write_NUM(0x08007010, 25);
 80006a0:	4963      	ldr	r1, [pc, #396]	; (8000830 <Tarea_memoria+0x1d8>)
 80006a2:	4864      	ldr	r0, [pc, #400]	; (8000834 <Tarea_memoria+0x1dc>)
 80006a4:	f7ff ff60 	bl	8000568 <Flash_Write_NUM>
			  /// //////////////////////////////////////////////////////////////

			  ///inicializacion memoria //////////////////////////////////
			   secuencia[2].maximo = Flash_Read_NUM(0x08006C10);
 80006a8:	4860      	ldr	r0, [pc, #384]	; (800082c <Tarea_memoria+0x1d4>)
 80006aa:	f7ff ff71 	bl	8000590 <Flash_Read_NUM>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fe5b 	bl	800036c <__aeabi_f2uiz>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a5f      	ldr	r2, [pc, #380]	; (8000838 <Tarea_memoria+0x1e0>)
 80006ba:	6113      	str	r3, [r2, #16]
			   secuencia[2].minimo = Flash_Read_NUM(0x08007010);
 80006bc:	485d      	ldr	r0, [pc, #372]	; (8000834 <Tarea_memoria+0x1dc>)
 80006be:	f7ff ff67 	bl	8000590 <Flash_Read_NUM>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fe51 	bl	800036c <__aeabi_f2uiz>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a5a      	ldr	r2, [pc, #360]	; (8000838 <Tarea_memoria+0x1e0>)
 80006ce:	6153      	str	r3, [r2, #20]

			   secuencia[1].maximo = Flash_Read_NUM(0x08006410);
 80006d0:	4852      	ldr	r0, [pc, #328]	; (800081c <Tarea_memoria+0x1c4>)
 80006d2:	f7ff ff5d 	bl	8000590 <Flash_Read_NUM>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fe47 	bl	800036c <__aeabi_f2uiz>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a55      	ldr	r2, [pc, #340]	; (8000838 <Tarea_memoria+0x1e0>)
 80006e2:	6093      	str	r3, [r2, #8]
			   secuencia[1].minimo = Flash_Read_NUM(0x08006810);
 80006e4:	484f      	ldr	r0, [pc, #316]	; (8000824 <Tarea_memoria+0x1cc>)
 80006e6:	f7ff ff53 	bl	8000590 <Flash_Read_NUM>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fe3d 	bl	800036c <__aeabi_f2uiz>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a50      	ldr	r2, [pc, #320]	; (8000838 <Tarea_memoria+0x1e0>)
 80006f6:	60d3      	str	r3, [r2, #12]

			   secuencia[0].maximo = Flash_Read_NUM(0x08005C10);
 80006f8:	4845      	ldr	r0, [pc, #276]	; (8000810 <Tarea_memoria+0x1b8>)
 80006fa:	f7ff ff49 	bl	8000590 <Flash_Read_NUM>
 80006fe:	4603      	mov	r3, r0
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fe33 	bl	800036c <__aeabi_f2uiz>
 8000706:	4603      	mov	r3, r0
 8000708:	4a4b      	ldr	r2, [pc, #300]	; (8000838 <Tarea_memoria+0x1e0>)
 800070a:	6013      	str	r3, [r2, #0]
			   secuencia[0].minimo = Flash_Read_NUM(0x08006010);
 800070c:	4841      	ldr	r0, [pc, #260]	; (8000814 <Tarea_memoria+0x1bc>)
 800070e:	f7ff ff3f 	bl	8000590 <Flash_Read_NUM>
 8000712:	4603      	mov	r3, r0
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fe29 	bl	800036c <__aeabi_f2uiz>
 800071a:	4603      	mov	r3, r0
 800071c:	4a46      	ldr	r2, [pc, #280]	; (8000838 <Tarea_memoria+0x1e0>)
 800071e:	6053      	str	r3, [r2, #4]
			  /// //////////////////////////////////////////////////////////////////////////////////
			  /// inicializa - carga : ARRANCA EL SISTEMA CON EL VALOR ULTIMO GUARDADO DE LA SECUENCIA EN MEMORIA, Y SE CARGA A LA COLA CM

			  xQueueSend(CM, &secuencia[0], portMAX_DELAY);
 8000720:	4b46      	ldr	r3, [pc, #280]	; (800083c <Tarea_memoria+0x1e4>)
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	2300      	movs	r3, #0
 8000726:	f04f 32ff 	mov.w	r2, #4294967295
 800072a:	4943      	ldr	r1, [pc, #268]	; (8000838 <Tarea_memoria+0x1e0>)
 800072c:	f001 ff2e 	bl	800258c <xQueueGenericSend>
			  /// cambia estado
			  estados = 1;
 8000730:	4b35      	ldr	r3, [pc, #212]	; (8000808 <Tarea_memoria+0x1b0>)
 8000732:	2201      	movs	r2, #1
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	e05f      	b.n	80007f8 <Tarea_memoria+0x1a0>
		  }
		  else
		  {
			  /// CADA VES QUE RECIBE UN DATO DE LA COLA CM LO GUARDA EN PRIMER LUGAR , LOS DATOS ANTERIORWS LOS DESPLAZA 1 Y LUEGO GUARAD EN MEMORIA Y LUEGO SE BLOQUEA
			  xQueuePeek(CM,&recepcion,portMAX_DELAY);
 8000738:	4b40      	ldr	r3, [pc, #256]	; (800083c <Tarea_memoria+0x1e4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f107 010c 	add.w	r1, r7, #12
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	4618      	mov	r0, r3
 8000746:	f002 f8ff 	bl	8002948 <xQueuePeek>
			  /// graba

			  secuencia[2] = secuencia[1];
 800074a:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <Tarea_memoria+0x1e0>)
 800074c:	4a3a      	ldr	r2, [pc, #232]	; (8000838 <Tarea_memoria+0x1e0>)
 800074e:	3310      	adds	r3, #16
 8000750:	3208      	adds	r2, #8
 8000752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000756:	e883 0003 	stmia.w	r3, {r0, r1}
			  Flash_Write_NUM(0x08006C10, secuencia[2].maximo);
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <Tarea_memoria+0x1e0>)
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fdac 	bl	80002bc <__aeabi_ui2f>
 8000764:	4603      	mov	r3, r0
 8000766:	4619      	mov	r1, r3
 8000768:	4830      	ldr	r0, [pc, #192]	; (800082c <Tarea_memoria+0x1d4>)
 800076a:	f7ff fefd 	bl	8000568 <Flash_Write_NUM>
			  Flash_Write_NUM(0x08007010, secuencia[2].minimo);
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <Tarea_memoria+0x1e0>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fda2 	bl	80002bc <__aeabi_ui2f>
 8000778:	4603      	mov	r3, r0
 800077a:	4619      	mov	r1, r3
 800077c:	482d      	ldr	r0, [pc, #180]	; (8000834 <Tarea_memoria+0x1dc>)
 800077e:	f7ff fef3 	bl	8000568 <Flash_Write_NUM>

			  secuencia[1] = secuencia[0];
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <Tarea_memoria+0x1e0>)
 8000784:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <Tarea_memoria+0x1e0>)
 8000786:	3308      	adds	r3, #8
 8000788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078c:	e883 0003 	stmia.w	r3, {r0, r1}
			  Flash_Write_NUM(0x08006410, secuencia[1].maximo);
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <Tarea_memoria+0x1e0>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fd91 	bl	80002bc <__aeabi_ui2f>
 800079a:	4603      	mov	r3, r0
 800079c:	4619      	mov	r1, r3
 800079e:	481f      	ldr	r0, [pc, #124]	; (800081c <Tarea_memoria+0x1c4>)
 80007a0:	f7ff fee2 	bl	8000568 <Flash_Write_NUM>
			  Flash_Write_NUM(0x08006810, secuencia[1].minimo);
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <Tarea_memoria+0x1e0>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd87 	bl	80002bc <__aeabi_ui2f>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4619      	mov	r1, r3
 80007b2:	481c      	ldr	r0, [pc, #112]	; (8000824 <Tarea_memoria+0x1cc>)
 80007b4:	f7ff fed8 	bl	8000568 <Flash_Write_NUM>

			  secuencia[0] = recepcion;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <Tarea_memoria+0x1e0>)
 80007ba:	461a      	mov	r2, r3
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007c4:	e882 0003 	stmia.w	r2, {r0, r1}
			  Flash_Write_NUM(0x08005C10, recepcion.maximo);
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd76 	bl	80002bc <__aeabi_ui2f>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4619      	mov	r1, r3
 80007d4:	480e      	ldr	r0, [pc, #56]	; (8000810 <Tarea_memoria+0x1b8>)
 80007d6:	f7ff fec7 	bl	8000568 <Flash_Write_NUM>
			  Flash_Write_NUM(0x08006010, recepcion.minimo);
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fd6d 	bl	80002bc <__aeabi_ui2f>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4619      	mov	r1, r3
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <Tarea_memoria+0x1bc>)
 80007e8:	f7ff febe 	bl	8000568 <Flash_Write_NUM>
			  /// si lo hago al reves pierdo datos

			  vTaskPrioritySet( xTarea_config_Handle, 1 );
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <Tarea_memoria+0x1e8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2101      	movs	r1, #1
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fca2 	bl	800313c <vTaskPrioritySet>

		  }
		  /// ///////////////////////////
		  vTaskPrioritySet( NULL, 1 );
 80007f8:	2101      	movs	r1, #1
 80007fa:	2000      	movs	r0, #0
 80007fc:	f002 fc9e 	bl	800313c <vTaskPrioritySet>
		  tarea = 1;
 8000800:	e732      	b.n	8000668 <Tarea_memoria+0x10>
 8000802:	bf00      	nop
 8000804:	200000ac 	.word	0x200000ac
 8000808:	200000a8 	.word	0x200000a8
 800080c:	42c80000 	.word	0x42c80000
 8000810:	08005c10 	.word	0x08005c10
 8000814:	08006010 	.word	0x08006010
 8000818:	428c0000 	.word	0x428c0000
 800081c:	08006410 	.word	0x08006410
 8000820:	41f00000 	.word	0x41f00000
 8000824:	08006810 	.word	0x08006810
 8000828:	42200000 	.word	0x42200000
 800082c:	08006c10 	.word	0x08006c10
 8000830:	41c80000 	.word	0x41c80000
 8000834:	08007010 	.word	0x08007010
 8000838:	2000021c 	.word	0x2000021c
 800083c:	20000234 	.word	0x20000234
 8000840:	200000b0 	.word	0x200000b0

08000844 <Tareas_restantes>:
}



void Tareas_restantes( void *pvParameters )
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	unsigned portBASE_TYPE uxPriority;
	uxPriority = uxTaskPriorityGet( NULL );
 800084c:	2000      	movs	r0, #0
 800084e:	f002 fc5b 	bl	8003108 <uxTaskPriorityGet>
 8000852:	6178      	str	r0, [r7, #20]

	secuencias recepcion;
	for( ;; )
	{
		tarea = 3;
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <Tareas_restantes+0x48>)
 8000856:	2203      	movs	r2, #3
 8000858:	601a      	str	r2, [r3, #0]
		if(read_sw1_state)
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <Tareas_restantes+0x4c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00c      	beq.n	800087c <Tareas_restantes+0x38>
		 {
			 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	480a      	ldr	r0, [pc, #40]	; (8000894 <Tareas_restantes+0x50>)
 800086a:	f000 fee9 	bl	8001640 <HAL_GPIO_WritePin>
			 vTaskPrioritySet( xTarea_config_Handle, 3 );
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <Tareas_restantes+0x54>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2103      	movs	r1, #3
 8000874:	4618      	mov	r0, r3
 8000876:	f002 fc61 	bl	800313c <vTaskPrioritySet>
 800087a:	e7eb      	b.n	8000854 <Tareas_restantes+0x10>
		 }
		else
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000882:	4804      	ldr	r0, [pc, #16]	; (8000894 <Tareas_restantes+0x50>)
 8000884:	f000 fedc 	bl	8001640 <HAL_GPIO_WritePin>
		tarea = 3;
 8000888:	e7e4      	b.n	8000854 <Tareas_restantes+0x10>
 800088a:	bf00      	nop
 800088c:	200000ac 	.word	0x200000ac
 8000890:	200000a4 	.word	0x200000a4
 8000894:	40011000 	.word	0x40011000
 8000898:	200000b0 	.word	0x200000b0

0800089c <main>:




int main( void )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af02      	add	r7, sp, #8
	HAL_Init();
 80008a2:	f000 fa2d 	bl	8000d00 <HAL_Init>
	SystemClock_Config();
 80008a6:	f000 f841 	bl	800092c <SystemClock_Config>
	MX_GPIO_Init();
 80008aa:	f000 f885 	bl	80009b8 <MX_GPIO_Init>

	xTaskCreate( Tarea_memoria, "Tarea_memoria", 1000, NULL, 4, &xTarea_memoria_Handle );///MAX_priority???????
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <main+0x6c>)
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	2304      	movs	r3, #4
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2300      	movs	r3, #0
 80008b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008bc:	4913      	ldr	r1, [pc, #76]	; (800090c <main+0x70>)
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <main+0x74>)
 80008c0:	f002 fab6 	bl	8002e30 <xTaskCreate>
	xTaskCreate( Tarea_config, "Tarea_config", 1000, NULL, 3, &xTarea_config_Handle );
 80008c4:	4b13      	ldr	r3, [pc, #76]	; (8000914 <main+0x78>)
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	2303      	movs	r3, #3
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008d2:	4911      	ldr	r1, [pc, #68]	; (8000918 <main+0x7c>)
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <main+0x80>)
 80008d6:	f002 faab 	bl	8002e30 <xTaskCreate>
	xTaskCreate( Tareas_restantes, "Tareas_restantes", 1000, NULL, 2, NULL );
 80008da:	2300      	movs	r3, #0
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	2302      	movs	r3, #2
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2300      	movs	r3, #0
 80008e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e8:	490d      	ldr	r1, [pc, #52]	; (8000920 <main+0x84>)
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <main+0x88>)
 80008ec:	f002 faa0 	bl	8002e30 <xTaskCreate>
	/* El manipulador de tarea es el último parámetro. */
	CM = xQueueCreate(1,sizeof(secuencias));
 80008f0:	2200      	movs	r2, #0
 80008f2:	2108      	movs	r1, #8
 80008f4:	2001      	movs	r0, #1
 80008f6:	f001 fdd7 	bl	80024a8 <xQueueGenericCreate>
 80008fa:	4603      	mov	r3, r0
 80008fc:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <main+0x8c>)
 80008fe:	6013      	str	r3, [r2, #0]
	/* Inicio el Scheduler para que last areas comiencen a ejecutarse. */
	vTaskStartScheduler();
 8000900:	f002 fce2 	bl	80032c8 <vTaskStartScheduler>

	for( ;; );
 8000904:	e7fe      	b.n	8000904 <main+0x68>
 8000906:	bf00      	nop
 8000908:	200000b4 	.word	0x200000b4
 800090c:	08004f68 	.word	0x08004f68
 8000910:	08000659 	.word	0x08000659
 8000914:	200000b0 	.word	0x200000b0
 8000918:	08004f78 	.word	0x08004f78
 800091c:	080005bd 	.word	0x080005bd
 8000920:	08004f88 	.word	0x08004f88
 8000924:	08000845 	.word	0x08000845
 8000928:	20000234 	.word	0x20000234

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b090      	sub	sp, #64	; 0x40
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0318 	add.w	r3, r7, #24
 8000936:	2228      	movs	r2, #40	; 0x28
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f004 fa3c 	bl	8004db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800094e:	2301      	movs	r3, #1
 8000950:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000960:	2302      	movs	r3, #2
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800096a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fe93 	bl	80016a0 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000980:	f000 f890 	bl	8000aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2302      	movs	r3, #2
 800098a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 f8fe 	bl	8001ba0 <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009aa:	f000 f87b 	bl	8000aa4 <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3740      	adds	r7, #64	; 0x40
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a27      	ldr	r2, [pc, #156]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009d2:	f043 0310 	orr.w	r3, r3, #16
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0310 	and.w	r3, r3, #16
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a21      	ldr	r2, [pc, #132]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0320 	and.w	r3, r3, #32
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_GPIO_Init+0xb8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <MX_GPIO_Init+0xb8>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <MX_GPIO_Init+0xb8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <MX_GPIO_Init+0xbc>)
 8000a1c:	f000 fe10 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4619      	mov	r1, r3
 8000a38:	480e      	ldr	r0, [pc, #56]	; (8000a74 <MX_GPIO_Init+0xbc>)
 8000a3a:	f000 fc7d 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_GPIO_Init+0xc0>)
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480a      	ldr	r0, [pc, #40]	; (8000a7c <MX_GPIO_Init+0xc4>)
 8000a52:	f000 fc71 	bl	8001338 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2017      	movs	r0, #23
 8000a5c:	f000 fa37 	bl	8000ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a60:	2017      	movs	r0, #23
 8000a62:	f000 fa50 	bl	8000f06 <HAL_NVIC_EnableIRQ>

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40011000 	.word	0x40011000
 8000a78:	10210000 	.word	0x10210000
 8000a7c:	40010800 	.word	0x40010800

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 f94b 	bl	8000d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40012c00 	.word	0x40012c00

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
	if(read_sw1_state) read_sw1_state = 0;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_EXTI_Callback+0x1a>
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
	else read_sw1_state = 1;

	//HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin);
}
 8000ac8:	e002      	b.n	8000ad0 <HAL_GPIO_EXTI_Callback+0x20>
	else read_sw1_state = 1;
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <HAL_GPIO_EXTI_Callback+0x2c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	200000a4 	.word	0x200000a4

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_MspInit+0x5c>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_MspInit+0x5c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_MspInit+0x5c>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_MspInit+0x60>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_MspInit+0x60>)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	2019      	movs	r0, #25
 8000b5a:	f000 f9b8 	bl	8000ece <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b5e:	2019      	movs	r0, #25
 8000b60:	f000 f9d1 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <HAL_InitTick+0x9c>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a1d      	ldr	r2, [pc, #116]	; (8000be0 <HAL_InitTick+0x9c>)
 8000b6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <HAL_InitTick+0x9c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b7c:	f107 0210 	add.w	r2, r7, #16
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 f966 	bl	8001e58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b8c:	f001 f950 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 8000b90:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <HAL_InitTick+0xa0>)
 8000b96:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9a:	0c9b      	lsrs	r3, r3, #18
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_InitTick+0xa4>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <HAL_InitTick+0xa8>)
 8000ba4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <HAL_InitTick+0xa4>)
 8000ba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bae:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <HAL_InitTick+0xa4>)
 8000bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <HAL_InitTick+0xa4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_InitTick+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <HAL_InitTick+0xa4>)
 8000bc2:	f001 f997 	bl	8001ef4 <HAL_TIM_Base_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d104      	bne.n	8000bd6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bcc:	4806      	ldr	r0, [pc, #24]	; (8000be8 <HAL_InitTick+0xa4>)
 8000bce:	f001 f9e9 	bl	8001fa4 <HAL_TIM_Base_Start_IT>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3730      	adds	r7, #48	; 0x30
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	431bde83 	.word	0x431bde83
 8000be8:	20000240 	.word	0x20000240
 8000bec:	40012c00 	.word	0x40012c00

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c1e:	2040      	movs	r0, #64	; 0x40
 8000c20:	f000 fd26 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM1_UP_IRQHandler+0x10>)
 8000c2e:	f001 fa0b 	bl	8002048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000240 	.word	0x20000240

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f004 f85c 	bl	8004d28 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20005000 	.word	0x20005000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	200000b8 	.word	0x200000b8
 8000ca4:	20000300 	.word	0x20000300

08000ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff fff8 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cba:	490c      	ldr	r1, [pc, #48]	; (8000cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd0:	4c09      	ldr	r4, [pc, #36]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f004 f829 	bl	8004d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff fddb 	bl	800089c <main>
  bx lr
 8000ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cf0:	08004fe8 	.word	0x08004fe8
  ldr r2, =_sbss
 8000cf4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cf8:	20000300 	.word	0x20000300

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f8d1 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ff14 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fee0 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_IncTick+0x1c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_IncTick+0x20>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a03      	ldr	r2, [pc, #12]	; (8000d4c <HAL_IncTick+0x20>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000288 	.word	0x20000288

08000d50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <HAL_GetTick+0x10>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000288 	.word	0x20000288

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4906      	ldr	r1, [pc, #24]	; (8000dfc <__NVIC_EnableIRQ+0x34>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff4f 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff64 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ffb2 	bl	8000e54 <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff81 	bl	8000e00 <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff57 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f3e:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <HAL_FLASH_Program+0xd8>)
 8000f40:	7e1b      	ldrb	r3, [r3, #24]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_FLASH_Program+0x26>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e054      	b.n	8000ff4 <HAL_FLASH_Program+0xd0>
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <HAL_FLASH_Program+0xd8>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f54:	f000 f8b2 	bl	80010bc <FLASH_WaitForLastOperation>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d144      	bne.n	8000fec <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d102      	bne.n	8000f6e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	757b      	strb	r3, [r7, #21]
 8000f6c:	e007      	b.n	8000f7e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d102      	bne.n	8000f7a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f74:	2302      	movs	r3, #2
 8000f76:	757b      	strb	r3, [r7, #21]
 8000f78:	e001      	b.n	8000f7e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f7a:	2304      	movs	r3, #4
 8000f7c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	75bb      	strb	r3, [r7, #22]
 8000f82:	e02d      	b.n	8000fe0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f84:	7dbb      	ldrb	r3, [r7, #22]
 8000f86:	005a      	lsls	r2, r3, #1
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	eb02 0c03 	add.w	ip, r2, r3
 8000f8e:	7dbb      	ldrb	r3, [r7, #22]
 8000f90:	0119      	lsls	r1, r3, #4
 8000f92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f96:	f1c1 0620 	rsb	r6, r1, #32
 8000f9a:	f1a1 0020 	sub.w	r0, r1, #32
 8000f9e:	fa22 f401 	lsr.w	r4, r2, r1
 8000fa2:	fa03 f606 	lsl.w	r6, r3, r6
 8000fa6:	4334      	orrs	r4, r6
 8000fa8:	fa23 f000 	lsr.w	r0, r3, r0
 8000fac:	4304      	orrs	r4, r0
 8000fae:	fa23 f501 	lsr.w	r5, r3, r1
 8000fb2:	b2a3      	uxth	r3, r4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4660      	mov	r0, ip
 8000fb8:	f000 f864 	bl	8001084 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000fbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fc0:	f000 f87c 	bl	80010bc <FLASH_WaitForLastOperation>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_FLASH_Program+0xdc>)
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <HAL_FLASH_Program+0xdc>)
 8000fce:	f023 0301 	bic.w	r3, r3, #1
 8000fd2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d107      	bne.n	8000fea <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000fda:	7dbb      	ldrb	r3, [r7, #22]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	75bb      	strb	r3, [r7, #22]
 8000fe0:	7dba      	ldrb	r2, [r7, #22]
 8000fe2:	7d7b      	ldrb	r3, [r7, #21]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d3cd      	bcc.n	8000f84 <HAL_FLASH_Program+0x60>
 8000fe8:	e000      	b.n	8000fec <HAL_FLASH_Program+0xc8>
      {
        break;
 8000fea:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_FLASH_Program+0xd8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	761a      	strb	r2, [r3, #24]

  return status;
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ffc:	20000290 	.word	0x20000290
 8001000:	40022000 	.word	0x40022000

08001004 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_FLASH_Unlock+0x40>)
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00d      	beq.n	8001036 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_FLASH_Unlock+0x40>)
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_FLASH_Unlock+0x44>)
 800101e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_FLASH_Unlock+0x40>)
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_FLASH_Unlock+0x48>)
 8001024:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_FLASH_Unlock+0x40>)
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001036:	79fb      	ldrb	r3, [r7, #7]
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40022000 	.word	0x40022000
 8001048:	45670123 	.word	0x45670123
 800104c:	cdef89ab 	.word	0xcdef89ab

08001050 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_FLASH_Lock+0x1c>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_FLASH_Lock+0x1c>)
 800105a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <HAL_FLASH_GetError+0x10>)
 8001076:	69db      	ldr	r3, [r3, #28]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	20000290 	.word	0x20000290

08001084 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <FLASH_Program_HalfWord+0x30>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <FLASH_Program_HalfWord+0x34>)
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <FLASH_Program_HalfWord+0x34>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	887a      	ldrh	r2, [r7, #2]
 80010a6:	801a      	strh	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000290 	.word	0x20000290
 80010b8:	40022000 	.word	0x40022000

080010bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff fe44 	bl	8000d50 <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010ca:	e010      	b.n	80010ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d2:	d00c      	beq.n	80010ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <FLASH_WaitForLastOperation+0x2e>
 80010da:	f7ff fe39 	bl	8000d50 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d201      	bcs.n	80010ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e025      	b.n	800113a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <FLASH_WaitForLastOperation+0x88>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1e8      	bne.n	80010cc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <FLASH_WaitForLastOperation+0x88>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f003 0320 	and.w	r3, r3, #32
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <FLASH_WaitForLastOperation+0x88>)
 8001108:	2220      	movs	r2, #32
 800110a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <FLASH_WaitForLastOperation+0x88>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10b      	bne.n	8001130 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <FLASH_WaitForLastOperation+0x88>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001120:	2b00      	cmp	r3, #0
 8001122:	d105      	bne.n	8001130 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <FLASH_WaitForLastOperation+0x88>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001130:	f000 f80a 	bl	8001148 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40022000 	.word	0x40022000

08001148 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001152:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <FLASH_SetErrorCode+0x98>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b00      	cmp	r3, #0
 800115c:	d009      	beq.n	8001172 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <FLASH_SetErrorCode+0x9c>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <FLASH_SetErrorCode+0x9c>)
 8001168:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f043 0310 	orr.w	r3, r3, #16
 8001170:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <FLASH_SetErrorCode+0x98>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	2b00      	cmp	r3, #0
 800117c:	d009      	beq.n	8001192 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <FLASH_SetErrorCode+0x9c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <FLASH_SetErrorCode+0x9c>)
 8001188:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <FLASH_SetErrorCode+0x98>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <FLASH_SetErrorCode+0x9c>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <FLASH_SetErrorCode+0x9c>)
 80011a8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <FLASH_SetErrorCode+0x98>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <FLASH_SetErrorCode+0x98>)
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f240 1201 	movw	r2, #257	; 0x101
 80011bc:	4293      	cmp	r3, r2
 80011be:	d106      	bne.n	80011ce <FLASH_SetErrorCode+0x86>
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <FLASH_SetErrorCode+0x98>)
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <FLASH_SetErrorCode+0x98>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	61d3      	str	r3, [r2, #28]
}  
 80011cc:	e002      	b.n	80011d4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <FLASH_SetErrorCode+0x98>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	60d3      	str	r3, [r2, #12]
}  
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000
 80011e4:	20000290 	.word	0x20000290

080011e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <HAL_FLASHEx_Erase+0xd0>)
 80011fc:	7e1b      	ldrb	r3, [r3, #24]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_FLASHEx_Erase+0x1e>
 8001202:	2302      	movs	r3, #2
 8001204:	e053      	b.n	80012ae <HAL_FLASHEx_Erase+0xc6>
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <HAL_FLASHEx_Erase+0xd0>)
 8001208:	2201      	movs	r2, #1
 800120a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d116      	bne.n	8001242 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001214:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001218:	f7ff ff50 	bl	80010bc <FLASH_WaitForLastOperation>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d141      	bne.n	80012a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001222:	2001      	movs	r0, #1
 8001224:	f000 f84c 	bl	80012c0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001228:	f24c 3050 	movw	r0, #50000	; 0xc350
 800122c:	f7ff ff46 	bl	80010bc <FLASH_WaitForLastOperation>
 8001230:	4603      	mov	r3, r0
 8001232:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_FLASHEx_Erase+0xd4>)
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	4a20      	ldr	r2, [pc, #128]	; (80012bc <HAL_FLASHEx_Erase+0xd4>)
 800123a:	f023 0304 	bic.w	r3, r3, #4
 800123e:	6113      	str	r3, [r2, #16]
 8001240:	e031      	b.n	80012a6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001242:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001246:	f7ff ff39 	bl	80010bc <FLASH_WaitForLastOperation>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d12a      	bne.n	80012a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f04f 32ff 	mov.w	r2, #4294967295
 8001256:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	e019      	b.n	8001294 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f000 f849 	bl	80012f8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001266:	f24c 3050 	movw	r0, #50000	; 0xc350
 800126a:	f7ff ff27 	bl	80010bc <FLASH_WaitForLastOperation>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_FLASHEx_Erase+0xd4>)
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	4a11      	ldr	r2, [pc, #68]	; (80012bc <HAL_FLASHEx_Erase+0xd4>)
 8001278:	f023 0302 	bic.w	r3, r3, #2
 800127c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	601a      	str	r2, [r3, #0]
            break;
 800128a:	e00c      	b.n	80012a6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001292:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	029a      	lsls	r2, r3, #10
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d3dc      	bcc.n	8001260 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <HAL_FLASHEx_Erase+0xd0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	761a      	strb	r2, [r3, #24]

  return status;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000290 	.word	0x20000290
 80012bc:	40022000 	.word	0x40022000

080012c0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <FLASH_MassErase+0x30>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <FLASH_MassErase+0x34>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <FLASH_MassErase+0x34>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <FLASH_MassErase+0x34>)
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <FLASH_MassErase+0x34>)
 80012e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000290 	.word	0x20000290
 80012f4:	40022000 	.word	0x40022000

080012f8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <FLASH_PageErase+0x38>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <FLASH_PageErase+0x3c>)
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <FLASH_PageErase+0x3c>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <FLASH_PageErase+0x3c>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <FLASH_PageErase+0x3c>)
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	4a05      	ldr	r2, [pc, #20]	; (8001334 <FLASH_PageErase+0x3c>)
 800131e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001322:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000290 	.word	0x20000290
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b08b      	sub	sp, #44	; 0x2c
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	e169      	b.n	8001620 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800134c:	2201      	movs	r2, #1
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8158 	bne.w	800161a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a9a      	ldr	r2, [pc, #616]	; (80015d8 <HAL_GPIO_Init+0x2a0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d05e      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 8001374:	4a98      	ldr	r2, [pc, #608]	; (80015d8 <HAL_GPIO_Init+0x2a0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d875      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 800137a:	4a98      	ldr	r2, [pc, #608]	; (80015dc <HAL_GPIO_Init+0x2a4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d058      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 8001380:	4a96      	ldr	r2, [pc, #600]	; (80015dc <HAL_GPIO_Init+0x2a4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d86f      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 8001386:	4a96      	ldr	r2, [pc, #600]	; (80015e0 <HAL_GPIO_Init+0x2a8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d052      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 800138c:	4a94      	ldr	r2, [pc, #592]	; (80015e0 <HAL_GPIO_Init+0x2a8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d869      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 8001392:	4a94      	ldr	r2, [pc, #592]	; (80015e4 <HAL_GPIO_Init+0x2ac>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d04c      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 8001398:	4a92      	ldr	r2, [pc, #584]	; (80015e4 <HAL_GPIO_Init+0x2ac>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d863      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 800139e:	4a92      	ldr	r2, [pc, #584]	; (80015e8 <HAL_GPIO_Init+0x2b0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d046      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
 80013a4:	4a90      	ldr	r2, [pc, #576]	; (80015e8 <HAL_GPIO_Init+0x2b0>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d85d      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d82a      	bhi.n	8001404 <HAL_GPIO_Init+0xcc>
 80013ae:	2b12      	cmp	r3, #18
 80013b0:	d859      	bhi.n	8001466 <HAL_GPIO_Init+0x12e>
 80013b2:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <HAL_GPIO_Init+0x80>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	08001433 	.word	0x08001433
 80013bc:	0800140d 	.word	0x0800140d
 80013c0:	0800141f 	.word	0x0800141f
 80013c4:	08001461 	.word	0x08001461
 80013c8:	08001467 	.word	0x08001467
 80013cc:	08001467 	.word	0x08001467
 80013d0:	08001467 	.word	0x08001467
 80013d4:	08001467 	.word	0x08001467
 80013d8:	08001467 	.word	0x08001467
 80013dc:	08001467 	.word	0x08001467
 80013e0:	08001467 	.word	0x08001467
 80013e4:	08001467 	.word	0x08001467
 80013e8:	08001467 	.word	0x08001467
 80013ec:	08001467 	.word	0x08001467
 80013f0:	08001467 	.word	0x08001467
 80013f4:	08001467 	.word	0x08001467
 80013f8:	08001467 	.word	0x08001467
 80013fc:	08001415 	.word	0x08001415
 8001400:	08001429 	.word	0x08001429
 8001404:	4a79      	ldr	r2, [pc, #484]	; (80015ec <HAL_GPIO_Init+0x2b4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800140a:	e02c      	b.n	8001466 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e029      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	3304      	adds	r3, #4
 800141a:	623b      	str	r3, [r7, #32]
          break;
 800141c:	e024      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	3308      	adds	r3, #8
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e01f      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	330c      	adds	r3, #12
 800142e:	623b      	str	r3, [r7, #32]
          break;
 8001430:	e01a      	b.n	8001468 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800143a:	2304      	movs	r3, #4
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e013      	b.n	8001468 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001448:	2308      	movs	r3, #8
 800144a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	611a      	str	r2, [r3, #16]
          break;
 8001452:	e009      	b.n	8001468 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001454:	2308      	movs	r3, #8
 8001456:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	615a      	str	r2, [r3, #20]
          break;
 800145e:	e003      	b.n	8001468 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e000      	b.n	8001468 <HAL_GPIO_Init+0x130>
          break;
 8001466:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d801      	bhi.n	8001472 <HAL_GPIO_Init+0x13a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	e001      	b.n	8001476 <HAL_GPIO_Init+0x13e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3304      	adds	r3, #4
 8001476:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2bff      	cmp	r3, #255	; 0xff
 800147c:	d802      	bhi.n	8001484 <HAL_GPIO_Init+0x14c>
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	e002      	b.n	800148a <HAL_GPIO_Init+0x152>
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	3b08      	subs	r3, #8
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	210f      	movs	r1, #15
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	6a39      	ldr	r1, [r7, #32]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	fa01 f303 	lsl.w	r3, r1, r3
 80014a4:	431a      	orrs	r2, r3
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80b1 	beq.w	800161a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b8:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a4c      	ldr	r2, [pc, #304]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b4a      	ldr	r3, [pc, #296]	; (80015f0 <HAL_GPIO_Init+0x2b8>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014d0:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <HAL_GPIO_Init+0x2bc>)
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	3302      	adds	r3, #2
 80014d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a40      	ldr	r2, [pc, #256]	; (80015f8 <HAL_GPIO_Init+0x2c0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d013      	beq.n	8001524 <HAL_GPIO_Init+0x1ec>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3f      	ldr	r2, [pc, #252]	; (80015fc <HAL_GPIO_Init+0x2c4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00d      	beq.n	8001520 <HAL_GPIO_Init+0x1e8>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a3e      	ldr	r2, [pc, #248]	; (8001600 <HAL_GPIO_Init+0x2c8>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d007      	beq.n	800151c <HAL_GPIO_Init+0x1e4>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a3d      	ldr	r2, [pc, #244]	; (8001604 <HAL_GPIO_Init+0x2cc>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_GPIO_Init+0x1e0>
 8001514:	2303      	movs	r3, #3
 8001516:	e006      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 8001518:	2304      	movs	r3, #4
 800151a:	e004      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 800151c:	2302      	movs	r3, #2
 800151e:	e002      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_GPIO_Init+0x1ee>
 8001524:	2300      	movs	r3, #0
 8001526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001528:	f002 0203 	and.w	r2, r2, #3
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	4093      	lsls	r3, r2
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001536:	492f      	ldr	r1, [pc, #188]	; (80015f4 <HAL_GPIO_Init+0x2bc>)
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	492c      	ldr	r1, [pc, #176]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	43db      	mvns	r3, r3
 8001566:	4928      	ldr	r1, [pc, #160]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001568:	4013      	ands	r3, r2
 800156a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	4922      	ldr	r1, [pc, #136]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	60cb      	str	r3, [r1, #12]
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	43db      	mvns	r3, r3
 800158e:	491e      	ldr	r1, [pc, #120]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 8001590:	4013      	ands	r3, r2
 8001592:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	4918      	ldr	r1, [pc, #96]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	4914      	ldr	r1, [pc, #80]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015b8:	4013      	ands	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d021      	beq.n	800160c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	490e      	ldr	r1, [pc, #56]	; (8001608 <HAL_GPIO_Init+0x2d0>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e021      	b.n	800161a <HAL_GPIO_Init+0x2e2>
 80015d6:	bf00      	nop
 80015d8:	10320000 	.word	0x10320000
 80015dc:	10310000 	.word	0x10310000
 80015e0:	10220000 	.word	0x10220000
 80015e4:	10210000 	.word	0x10210000
 80015e8:	10120000 	.word	0x10120000
 80015ec:	10110000 	.word	0x10110000
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010000 	.word	0x40010000
 80015f8:	40010800 	.word	0x40010800
 80015fc:	40010c00 	.word	0x40010c00
 8001600:	40011000 	.word	0x40011000
 8001604:	40011400 	.word	0x40011400
 8001608:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_GPIO_Init+0x304>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	43db      	mvns	r3, r3
 8001614:	4909      	ldr	r1, [pc, #36]	; (800163c <HAL_GPIO_Init+0x304>)
 8001616:	4013      	ands	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f ae8e 	bne.w	800134c <HAL_GPIO_Init+0x14>
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	372c      	adds	r7, #44	; 0x2c
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800165c:	e003      	b.n	8001666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	041a      	lsls	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	611a      	str	r2, [r3, #16]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fa0e 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e26c      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8087 	beq.w	80017ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c0:	4b92      	ldr	r3, [pc, #584]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d00c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016cc:	4b8f      	ldr	r3, [pc, #572]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d112      	bne.n	80016fe <HAL_RCC_OscConfig+0x5e>
 80016d8:	4b8c      	ldr	r3, [pc, #560]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e4:	d10b      	bne.n	80016fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e6:	4b89      	ldr	r3, [pc, #548]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d06c      	beq.n	80017cc <HAL_RCC_OscConfig+0x12c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d168      	bne.n	80017cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e246      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x76>
 8001708:	4b80      	ldr	r3, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a7f      	ldr	r2, [pc, #508]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e02e      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x98>
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a7a      	ldr	r2, [pc, #488]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a77      	ldr	r2, [pc, #476]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e01d      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0xbc>
 8001742:	4b72      	ldr	r3, [pc, #456]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a71      	ldr	r2, [pc, #452]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b6f      	ldr	r3, [pc, #444]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a6e      	ldr	r2, [pc, #440]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0xd4>
 800175c:	4b6b      	ldr	r3, [pc, #428]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a6a      	ldr	r2, [pc, #424]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a67      	ldr	r2, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fae8 	bl	8000d50 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001784:	f7ff fae4 	bl	8000d50 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b64      	cmp	r3, #100	; 0x64
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e1fa      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0xe4>
 80017a2:	e014      	b.n	80017ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fad4 	bl	8000d50 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fad0 	bl	8000d50 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1e6      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x10c>
 80017ca:	e000      	b.n	80017ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d063      	beq.n	80018a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017da:	4b4c      	ldr	r3, [pc, #304]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017e6:	4b49      	ldr	r3, [pc, #292]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d11c      	bne.n	800182c <HAL_RCC_OscConfig+0x18c>
 80017f2:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_RCC_OscConfig+0x176>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e1ba      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4939      	ldr	r1, [pc, #228]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	e03a      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_RCC_OscConfig+0x270>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fa89 	bl	8000d50 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff fa85 	bl	8000d50 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e19b      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4927      	ldr	r1, [pc, #156]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001870:	4313      	orrs	r3, r2
 8001872:	600b      	str	r3, [r1, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCC_OscConfig+0x270>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fa68 	bl	8000d50 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001884:	f7ff fa64 	bl	8000d50 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e17a      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d03a      	beq.n	8001924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d019      	beq.n	80018ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff fa48 	bl	8000d50 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c4:	f7ff fa44 	bl	8000d50 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e15a      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f000 fae8 	bl	8001eb8 <RCC_Delay>
 80018e8:	e01c      	b.n	8001924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_RCC_OscConfig+0x274>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f0:	f7ff fa2e 	bl	8000d50 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f6:	e00f      	b.n	8001918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f8:	f7ff fa2a 	bl	8000d50 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d908      	bls.n	8001918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e140      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	42420000 	.word	0x42420000
 8001914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	4b9e      	ldr	r3, [pc, #632]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e9      	bne.n	80018f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80a6 	beq.w	8001a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001936:	4b97      	ldr	r3, [pc, #604]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10d      	bne.n	800195e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	4b94      	ldr	r3, [pc, #592]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a93      	ldr	r2, [pc, #588]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b91      	ldr	r3, [pc, #580]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	4b8e      	ldr	r3, [pc, #568]	; (8001b98 <HAL_RCC_OscConfig+0x4f8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d118      	bne.n	800199c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196a:	4b8b      	ldr	r3, [pc, #556]	; (8001b98 <HAL_RCC_OscConfig+0x4f8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a8a      	ldr	r2, [pc, #552]	; (8001b98 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001976:	f7ff f9eb 	bl	8000d50 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197e:	f7ff f9e7 	bl	8000d50 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b64      	cmp	r3, #100	; 0x64
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e0fd      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	4b81      	ldr	r3, [pc, #516]	; (8001b98 <HAL_RCC_OscConfig+0x4f8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d106      	bne.n	80019b2 <HAL_RCC_OscConfig+0x312>
 80019a4:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4a7a      	ldr	r2, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6213      	str	r3, [r2, #32]
 80019b0:	e02d      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10c      	bne.n	80019d4 <HAL_RCC_OscConfig+0x334>
 80019ba:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a75      	ldr	r2, [pc, #468]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019c0:	f023 0301 	bic.w	r3, r3, #1
 80019c4:	6213      	str	r3, [r2, #32]
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a72      	ldr	r2, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	e01c      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b05      	cmp	r3, #5
 80019da:	d10c      	bne.n	80019f6 <HAL_RCC_OscConfig+0x356>
 80019dc:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a6c      	ldr	r2, [pc, #432]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a69      	ldr	r2, [pc, #420]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	e00b      	b.n	8001a0e <HAL_RCC_OscConfig+0x36e>
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	4a66      	ldr	r2, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	4b64      	ldr	r3, [pc, #400]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a63      	ldr	r2, [pc, #396]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d015      	beq.n	8001a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a16:	f7ff f99b 	bl	8000d50 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f997 	bl	8000d50 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0ab      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	4b57      	ldr	r3, [pc, #348]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0ee      	beq.n	8001a1e <HAL_RCC_OscConfig+0x37e>
 8001a40:	e014      	b.n	8001a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff f985 	bl	8000d50 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff f981 	bl	8000d50 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e095      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d105      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4a47      	ldr	r2, [pc, #284]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8081 	beq.w	8001b8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a88:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d061      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d146      	bne.n	8001b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <HAL_RCC_OscConfig+0x4fc>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff f955 	bl	8000d50 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff f951 	bl	8000d50 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e067      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ad2:	4b30      	ldr	r3, [pc, #192]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	492d      	ldr	r1, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a19      	ldr	r1, [r3, #32]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	430b      	orrs	r3, r1
 8001af6:	4927      	ldr	r1, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <HAL_RCC_OscConfig+0x4fc>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff f925 	bl	8000d50 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7ff f921 	bl	8000d50 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e037      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46a>
 8001b28:	e02f      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_RCC_OscConfig+0x4fc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7ff f90e 	bl	8000d50 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff f90a 	bl	8000d50 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e020      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x498>
 8001b56:	e018      	b.n	8001b8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e013      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d001      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	42420060 	.word	0x42420060

08001ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0d0      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d910      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	4965      	ldr	r1, [pc, #404]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0b8      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b50      	ldr	r3, [pc, #320]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	494d      	ldr	r1, [pc, #308]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d040      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d115      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e07f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e073      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e06b      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f023 0203 	bic.w	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4936      	ldr	r1, [pc, #216]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c90:	f7ff f85e 	bl	8000d50 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7ff f85a 	bl	8000d50 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e053      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 020c 	and.w	r2, r3, #12
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1eb      	bne.n	8001c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d210      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 0207 	bic.w	r2, r3, #7
 8001cd6:	4922      	ldr	r1, [pc, #136]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e032      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4916      	ldr	r1, [pc, #88]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	490e      	ldr	r1, [pc, #56]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d2e:	f000 f821 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001d32:	4602      	mov	r2, r0
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	490a      	ldr	r1, [pc, #40]	; (8001d68 <HAL_RCC_ClockConfig+0x1c8>)
 8001d40:	5ccb      	ldrb	r3, [r1, r3]
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1cc>)
 8001d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_RCC_ClockConfig+0x1d0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fef8 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40022000 	.word	0x40022000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08004fb4 	.word	0x08004fb4
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000004 	.word	0x20000004

08001d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d8e:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x30>
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x36>
 8001da2:	e027      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001da6:	613b      	str	r3, [r7, #16]
      break;
 8001da8:	e027      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	0c9b      	lsrs	r3, r3, #18
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001db4:	5cd3      	ldrb	r3, [r2, r3]
 8001db6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d010      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	0c5b      	lsrs	r3, r3, #17
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001dd6:	fb02 f203 	mul.w	r2, r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e004      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a0c      	ldr	r2, [pc, #48]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	613b      	str	r3, [r7, #16]
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8001df6:	613b      	str	r3, [r7, #16]
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	693b      	ldr	r3, [r7, #16]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	007a1200 	.word	0x007a1200
 8001e10:	08004fcc 	.word	0x08004fcc
 8001e14:	08004fdc 	.word	0x08004fdc
 8001e18:	003d0900 	.word	0x003d0900

08001e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20000000 	.word	0x20000000

08001e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e34:	f7ff fff2 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	0adb      	lsrs	r3, r3, #11
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4903      	ldr	r1, [pc, #12]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08004fc4 	.word	0x08004fc4

08001e58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	220f      	movs	r2, #15
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_RCC_GetClockConfig+0x58>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_RCC_GetClockConfig+0x58>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_GetClockConfig+0x58>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_RCC_GetClockConfig+0x58>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	08db      	lsrs	r3, r3, #3
 8001e92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0207 	and.w	r2, r3, #7
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <RCC_Delay+0x34>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <RCC_Delay+0x38>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0a5b      	lsrs	r3, r3, #9
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed4:	bf00      	nop
  }
  while (Delay --);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	60fa      	str	r2, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f9      	bne.n	8001ed4 <RCC_Delay+0x1c>
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	10624dd3 	.word	0x10624dd3

08001ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e041      	b.n	8001f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f839 	bl	8001f92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f000 f9b4 	bl	80022a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d001      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e03a      	b.n	8002032 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_TIM_Base_Start_IT+0x98>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00e      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x58>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d009      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x58>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a14      	ldr	r2, [pc, #80]	; (8002040 <HAL_TIM_Base_Start_IT+0x9c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d004      	beq.n	8001ffc <HAL_TIM_Base_Start_IT+0x58>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b06      	cmp	r3, #6
 800200c:	d010      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 0201 	orr.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800201e:	e007      	b.n	8002030 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40012c00 	.word	0x40012c00
 8002040:	40000400 	.word	0x40000400
 8002044:	40000800 	.word	0x40000800

08002048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b02      	cmp	r3, #2
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0202 	mvn.w	r2, #2
 8002074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8ed 	bl	800226a <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8e0 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8ef 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0204 	mvn.w	r2, #4
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8c3 	bl	800226a <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8b6 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f8c5 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b08      	cmp	r3, #8
 8002104:	d122      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d11b      	bne.n	800214c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0208 	mvn.w	r2, #8
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2204      	movs	r2, #4
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f899 	bl	800226a <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f88c 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f89b 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b10      	cmp	r3, #16
 8002158:	d122      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b10      	cmp	r3, #16
 8002166:	d11b      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0210 	mvn.w	r2, #16
 8002170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2208      	movs	r2, #8
 8002176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f86f 	bl	800226a <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f862 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f871 	bl	800227c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0201 	mvn.w	r2, #1
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7fe fc5a 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b80      	cmp	r3, #128	; 0x80
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b80      	cmp	r3, #128	; 0x80
 80021e6:	d107      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8bf 	bl	8002376 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f835 	bl	800228e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	2b20      	cmp	r3, #32
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b20      	cmp	r3, #32
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0220 	mvn.w	r2, #32
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f88a 	bl	8002364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a29      	ldr	r2, [pc, #164]	; (8002358 <TIM_Base_SetConfig+0xb8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00b      	beq.n	80022d0 <TIM_Base_SetConfig+0x30>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022be:	d007      	beq.n	80022d0 <TIM_Base_SetConfig+0x30>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a26      	ldr	r2, [pc, #152]	; (800235c <TIM_Base_SetConfig+0xbc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d003      	beq.n	80022d0 <TIM_Base_SetConfig+0x30>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a25      	ldr	r2, [pc, #148]	; (8002360 <TIM_Base_SetConfig+0xc0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d108      	bne.n	80022e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <TIM_Base_SetConfig+0xb8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00b      	beq.n	8002302 <TIM_Base_SetConfig+0x62>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f0:	d007      	beq.n	8002302 <TIM_Base_SetConfig+0x62>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <TIM_Base_SetConfig+0xbc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d003      	beq.n	8002302 <TIM_Base_SetConfig+0x62>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a18      	ldr	r2, [pc, #96]	; (8002360 <TIM_Base_SetConfig+0xc0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d108      	bne.n	8002314 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a07      	ldr	r2, [pc, #28]	; (8002358 <TIM_Base_SetConfig+0xb8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d103      	bne.n	8002348 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	615a      	str	r2, [r3, #20]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40012c00 	.word	0x40012c00
 800235c:	40000400 	.word	0x40000400
 8002360:	40000800 	.word	0x40000800

08002364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <xQueueGenericReset>:
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	2301      	movs	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <xQueueGenericReset+0x2e>
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <xQueueGenericReset+0x2c>
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d05d      	beq.n	8002478 <xQueueGenericReset+0xf0>
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d059      	beq.n	8002478 <xQueueGenericReset+0xf0>
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	2100      	movs	r1, #0
 80023ce:	fba3 2302 	umull	r2, r3, r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d000      	beq.n	80023d8 <xQueueGenericReset+0x50>
 80023d6:	2101      	movs	r1, #1
 80023d8:	460b      	mov	r3, r1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d14c      	bne.n	8002478 <xQueueGenericReset+0xf0>
 80023de:	f002 faff 	bl	80049e0 <vPortEnterCritical>
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	6939      	ldr	r1, [r7, #16]
 80023ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	441a      	add	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2200      	movs	r2, #0
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	3b01      	subs	r3, #1
 8002410:	6939      	ldr	r1, [r7, #16]
 8002412:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	441a      	add	r2, r3
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	22ff      	movs	r2, #255	; 0xff
 8002422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d114      	bne.n	800245e <xQueueGenericReset+0xd6>
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01a      	beq.n	8002472 <xQueueGenericReset+0xea>
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	3310      	adds	r3, #16
 8002440:	4618      	mov	r0, r3
 8002442:	f001 fb19 	bl	8003a78 <xTaskRemoveFromEventList>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <xQueueGenericReset+0xea>
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <xQueueGenericReset+0x11c>)
 800244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	e009      	b.n	8002472 <xQueueGenericReset+0xea>
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	3310      	adds	r3, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f002 f93e 	bl	80046e4 <vListInitialise>
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	3324      	adds	r3, #36	; 0x24
 800246c:	4618      	mov	r0, r3
 800246e:	f002 f939 	bl	80046e4 <vListInitialise>
 8002472:	f002 fae5 	bl	8004a40 <vPortExitCritical>
 8002476:	e001      	b.n	800247c <xQueueGenericReset+0xf4>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <xQueueGenericReset+0x110>
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xQueueGenericReset+0x10e>
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000ed04 	.word	0xe000ed04

080024a8 <xQueueGenericCreate>:
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	4613      	mov	r3, r2
 80024b4:	71fb      	strb	r3, [r7, #7]
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d02e      	beq.n	800251e <xQueueGenericCreate+0x76>
 80024c0:	2100      	movs	r1, #0
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	fba3 2302 	umull	r2, r3, r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d000      	beq.n	80024d0 <xQueueGenericCreate+0x28>
 80024ce:	2101      	movs	r1, #1
 80024d0:	460b      	mov	r3, r1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d123      	bne.n	800251e <xQueueGenericCreate+0x76>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80024e2:	d81c      	bhi.n	800251e <xQueueGenericCreate+0x76>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	fb02 f303 	mul.w	r3, r2, r3
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	3350      	adds	r3, #80	; 0x50
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 f8d2 	bl	800469c <pvPortMalloc>
 80024f8:	61f8      	str	r0, [r7, #28]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <xQueueGenericCreate+0x92>
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3350      	adds	r3, #80	; 0x50
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	79fa      	ldrb	r2, [r7, #7]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f814 	bl	8002544 <prvInitialiseNewQueue>
 800251c:	e00d      	b.n	800253a <xQueueGenericCreate+0x92>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <xQueueGenericCreate+0x92>
 8002524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002528:	f383 8811 	msr	BASEPRI, r3
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	f3bf 8f4f 	dsb	sy
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	bf00      	nop
 8002538:	e7fe      	b.n	8002538 <xQueueGenericCreate+0x90>
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4618      	mov	r0, r3
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <prvInitialiseNewQueue>:
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	70fb      	strb	r3, [r7, #3]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d103      	bne.n	8002560 <prvInitialiseNewQueue+0x1c>
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	e002      	b.n	8002566 <prvInitialiseNewQueue+0x22>
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
 8002572:	2101      	movs	r1, #1
 8002574:	69b8      	ldr	r0, [r7, #24]
 8002576:	f7ff ff07 	bl	8002388 <xQueueGenericReset>
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <xQueueGenericSend>:
 800258c:	b580      	push	{r7, lr}
 800258e:	b08e      	sub	sp, #56	; 0x38
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <xQueueGenericSend+0x32>
 80025a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ba:	bf00      	nop
 80025bc:	e7fe      	b.n	80025bc <xQueueGenericSend+0x30>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d103      	bne.n	80025cc <xQueueGenericSend+0x40>
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <xQueueGenericSend+0x44>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <xQueueGenericSend+0x46>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <xQueueGenericSend+0x60>
 80025d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	bf00      	nop
 80025ea:	e7fe      	b.n	80025ea <xQueueGenericSend+0x5e>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d103      	bne.n	80025fa <xQueueGenericSend+0x6e>
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <xQueueGenericSend+0x72>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <xQueueGenericSend+0x74>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <xQueueGenericSend+0x8e>
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	623b      	str	r3, [r7, #32]
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xQueueGenericSend+0x8c>
 800261a:	f001 fc9b 	bl	8003f54 <xTaskGetSchedulerState>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <xQueueGenericSend+0x9e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <xQueueGenericSend+0xa2>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <xQueueGenericSend+0xa4>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <xQueueGenericSend+0xbe>
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	bf00      	nop
 8002648:	e7fe      	b.n	8002648 <xQueueGenericSend+0xbc>
 800264a:	f002 f9c9 	bl	80049e0 <vPortEnterCritical>
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002656:	429a      	cmp	r2, r3
 8002658:	d302      	bcc.n	8002660 <xQueueGenericSend+0xd4>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d129      	bne.n	80026b4 <xQueueGenericSend+0x128>
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002666:	f000 fa51 	bl	8002b0c <prvCopyDataToQueue>
 800266a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <xQueueGenericSend+0x10a>
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	3324      	adds	r3, #36	; 0x24
 8002678:	4618      	mov	r0, r3
 800267a:	f001 f9fd 	bl	8003a78 <xTaskRemoveFromEventList>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <xQueueGenericSend+0x120>
 8002684:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <xQueueGenericSend+0x1f8>)
 8002686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	e00a      	b.n	80026ac <xQueueGenericSend+0x120>
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <xQueueGenericSend+0x120>
 800269c:	4b39      	ldr	r3, [pc, #228]	; (8002784 <xQueueGenericSend+0x1f8>)
 800269e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f002 f9c8 	bl	8004a40 <vPortExitCritical>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e063      	b.n	800277c <xQueueGenericSend+0x1f0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <xQueueGenericSend+0x136>
 80026ba:	f002 f9c1 	bl	8004a40 <vPortExitCritical>
 80026be:	2300      	movs	r3, #0
 80026c0:	e05c      	b.n	800277c <xQueueGenericSend+0x1f0>
 80026c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <xQueueGenericSend+0x14a>
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 faab 	bl	8003c28 <vTaskInternalSetTimeOutState>
 80026d2:	2301      	movs	r3, #1
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
 80026d6:	f002 f9b3 	bl	8004a40 <vPortExitCritical>
 80026da:	f000 fe47 	bl	800336c <vTaskSuspendAll>
 80026de:	f002 f97f 	bl	80049e0 <vPortEnterCritical>
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026e8:	b25b      	sxtb	r3, r3
 80026ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ee:	d103      	bne.n	80026f8 <xQueueGenericSend+0x16c>
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d103      	bne.n	800270e <xQueueGenericSend+0x182>
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800270e:	f002 f997 	bl	8004a40 <vPortExitCritical>
 8002712:	1d3a      	adds	r2, r7, #4
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f001 fa9a 	bl	8003c54 <xTaskCheckForTimeOut>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d124      	bne.n	8002770 <xQueueGenericSend+0x1e4>
 8002726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002728:	f000 fae8 	bl	8002cfc <prvIsQueueFull>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d018      	beq.n	8002764 <xQueueGenericSend+0x1d8>
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	3310      	adds	r3, #16
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f001 f932 	bl	80039a4 <vTaskPlaceOnEventList>
 8002740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002742:	f000 fa73 	bl	8002c2c <prvUnlockQueue>
 8002746:	f000 fe55 	bl	80033f4 <xTaskResumeAll>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	f47f af7c 	bne.w	800264a <xQueueGenericSend+0xbe>
 8002752:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <xQueueGenericSend+0x1f8>)
 8002754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	f3bf 8f6f 	isb	sy
 8002762:	e772      	b.n	800264a <xQueueGenericSend+0xbe>
 8002764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002766:	f000 fa61 	bl	8002c2c <prvUnlockQueue>
 800276a:	f000 fe43 	bl	80033f4 <xTaskResumeAll>
 800276e:	e76c      	b.n	800264a <xQueueGenericSend+0xbe>
 8002770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002772:	f000 fa5b 	bl	8002c2c <prvUnlockQueue>
 8002776:	f000 fe3d 	bl	80033f4 <xTaskResumeAll>
 800277a:	2300      	movs	r3, #0
 800277c:	4618      	mov	r0, r3
 800277e:	3738      	adds	r7, #56	; 0x38
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	e000ed04 	.word	0xe000ed04

08002788 <xQueueReceive>:
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	; 0x30
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <xQueueReceive+0x30>
 80027a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	bf00      	nop
 80027b6:	e7fe      	b.n	80027b6 <xQueueReceive+0x2e>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d103      	bne.n	80027c6 <xQueueReceive+0x3e>
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <xQueueReceive+0x42>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <xQueueReceive+0x44>
 80027ca:	2300      	movs	r3, #0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <xQueueReceive+0x5e>
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	f383 8811 	msr	BASEPRI, r3
 80027d8:	f3bf 8f6f 	isb	sy
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	bf00      	nop
 80027e4:	e7fe      	b.n	80027e4 <xQueueReceive+0x5c>
 80027e6:	f001 fbb5 	bl	8003f54 <xTaskGetSchedulerState>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <xQueueReceive+0x6e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <xQueueReceive+0x72>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <xQueueReceive+0x74>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueReceive+0x8e>
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueReceive+0x8c>
 8002816:	f002 f8e3 	bl	80049e0 <vPortEnterCritical>
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01f      	beq.n	8002866 <xQueueReceive+0xde>
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800282a:	f000 f9d9 	bl	8002be0 <prvCopyDataFromQueue>
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	639a      	str	r2, [r3, #56]	; 0x38
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00f      	beq.n	800285e <xQueueReceive+0xd6>
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	3310      	adds	r3, #16
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f918 	bl	8003a78 <xTaskRemoveFromEventList>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <xQueueReceive+0xd6>
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <xQueueReceive+0x1bc>)
 8002850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f002 f8ef 	bl	8004a40 <vPortExitCritical>
 8002862:	2301      	movs	r3, #1
 8002864:	e069      	b.n	800293a <xQueueReceive+0x1b2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d103      	bne.n	8002874 <xQueueReceive+0xec>
 800286c:	f002 f8e8 	bl	8004a40 <vPortExitCritical>
 8002870:	2300      	movs	r3, #0
 8002872:	e062      	b.n	800293a <xQueueReceive+0x1b2>
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <xQueueReceive+0x100>
 800287a:	f107 0310 	add.w	r3, r7, #16
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f9d2 	bl	8003c28 <vTaskInternalSetTimeOutState>
 8002884:	2301      	movs	r3, #1
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002888:	f002 f8da 	bl	8004a40 <vPortExitCritical>
 800288c:	f000 fd6e 	bl	800336c <vTaskSuspendAll>
 8002890:	f002 f8a6 	bl	80049e0 <vPortEnterCritical>
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800289a:	b25b      	sxtb	r3, r3
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d103      	bne.n	80028aa <xQueueReceive+0x122>
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028b0:	b25b      	sxtb	r3, r3
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d103      	bne.n	80028c0 <xQueueReceive+0x138>
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028c0:	f002 f8be 	bl	8004a40 <vPortExitCritical>
 80028c4:	1d3a      	adds	r2, r7, #4
 80028c6:	f107 0310 	add.w	r3, r7, #16
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 f9c1 	bl	8003c54 <xTaskCheckForTimeOut>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d123      	bne.n	8002920 <xQueueReceive+0x198>
 80028d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028da:	f000 f9f9 	bl	8002cd0 <prvIsQueueEmpty>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d017      	beq.n	8002914 <xQueueReceive+0x18c>
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	3324      	adds	r3, #36	; 0x24
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 f859 	bl	80039a4 <vTaskPlaceOnEventList>
 80028f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f4:	f000 f99a 	bl	8002c2c <prvUnlockQueue>
 80028f8:	f000 fd7c 	bl	80033f4 <xTaskResumeAll>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d189      	bne.n	8002816 <xQueueReceive+0x8e>
 8002902:	4b10      	ldr	r3, [pc, #64]	; (8002944 <xQueueReceive+0x1bc>)
 8002904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	e780      	b.n	8002816 <xQueueReceive+0x8e>
 8002914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002916:	f000 f989 	bl	8002c2c <prvUnlockQueue>
 800291a:	f000 fd6b 	bl	80033f4 <xTaskResumeAll>
 800291e:	e77a      	b.n	8002816 <xQueueReceive+0x8e>
 8002920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002922:	f000 f983 	bl	8002c2c <prvUnlockQueue>
 8002926:	f000 fd65 	bl	80033f4 <xTaskResumeAll>
 800292a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292c:	f000 f9d0 	bl	8002cd0 <prvIsQueueEmpty>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	f43f af6f 	beq.w	8002816 <xQueueReceive+0x8e>
 8002938:	2300      	movs	r3, #0
 800293a:	4618      	mov	r0, r3
 800293c:	3730      	adds	r7, #48	; 0x30
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <xQueuePeek>:
 8002948:	b580      	push	{r7, lr}
 800294a:	b08e      	sub	sp, #56	; 0x38
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	2300      	movs	r3, #0
 8002956:	637b      	str	r3, [r7, #52]	; 0x34
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <xQueuePeek+0x30>
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	bf00      	nop
 8002976:	e7fe      	b.n	8002976 <xQueuePeek+0x2e>
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <xQueuePeek+0x3e>
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <xQueuePeek+0x42>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <xQueuePeek+0x44>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xQueuePeek+0x5e>
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	623b      	str	r3, [r7, #32]
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueuePeek+0x5c>
 80029a6:	f001 fad5 	bl	8003f54 <xTaskGetSchedulerState>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <xQueuePeek+0x6e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <xQueuePeek+0x72>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <xQueuePeek+0x74>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10a      	bne.n	80029d6 <xQueuePeek+0x8e>
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	bf00      	nop
 80029d4:	e7fe      	b.n	80029d4 <xQueuePeek+0x8c>
 80029d6:	f002 f803 	bl	80049e0 <vPortEnterCritical>
 80029da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d021      	beq.n	8002a2a <xQueuePeek+0xe2>
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029f0:	f000 f8f6 	bl	8002be0 <prvCopyDataFromQueue>
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00f      	beq.n	8002a22 <xQueuePeek+0xda>
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	3324      	adds	r3, #36	; 0x24
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 f836 	bl	8003a78 <xTaskRemoveFromEventList>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <xQueuePeek+0xda>
 8002a12:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <xQueuePeek+0x1c0>)
 8002a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f002 f80d 	bl	8004a40 <vPortExitCritical>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e069      	b.n	8002afe <xQueuePeek+0x1b6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <xQueuePeek+0xf0>
 8002a30:	f002 f806 	bl	8004a40 <vPortExitCritical>
 8002a34:	2300      	movs	r3, #0
 8002a36:	e062      	b.n	8002afe <xQueuePeek+0x1b6>
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <xQueuePeek+0x104>
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 f8f0 	bl	8003c28 <vTaskInternalSetTimeOutState>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a4c:	f001 fff8 	bl	8004a40 <vPortExitCritical>
 8002a50:	f000 fc8c 	bl	800336c <vTaskSuspendAll>
 8002a54:	f001 ffc4 	bl	80049e0 <vPortEnterCritical>
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a5e:	b25b      	sxtb	r3, r3
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d103      	bne.n	8002a6e <xQueuePeek+0x126>
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a74:	b25b      	sxtb	r3, r3
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d103      	bne.n	8002a84 <xQueuePeek+0x13c>
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a84:	f001 ffdc 	bl	8004a40 <vPortExitCritical>
 8002a88:	1d3a      	adds	r2, r7, #4
 8002a8a:	f107 0314 	add.w	r3, r7, #20
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 f8df 	bl	8003c54 <xTaskCheckForTimeOut>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d123      	bne.n	8002ae4 <xQueuePeek+0x19c>
 8002a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a9e:	f000 f917 	bl	8002cd0 <prvIsQueueEmpty>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d017      	beq.n	8002ad8 <xQueuePeek+0x190>
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aaa:	3324      	adds	r3, #36	; 0x24
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 ff77 	bl	80039a4 <vTaskPlaceOnEventList>
 8002ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab8:	f000 f8b8 	bl	8002c2c <prvUnlockQueue>
 8002abc:	f000 fc9a 	bl	80033f4 <xTaskResumeAll>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d187      	bne.n	80029d6 <xQueuePeek+0x8e>
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <xQueuePeek+0x1c0>)
 8002ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	e77e      	b.n	80029d6 <xQueuePeek+0x8e>
 8002ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ada:	f000 f8a7 	bl	8002c2c <prvUnlockQueue>
 8002ade:	f000 fc89 	bl	80033f4 <xTaskResumeAll>
 8002ae2:	e778      	b.n	80029d6 <xQueuePeek+0x8e>
 8002ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ae6:	f000 f8a1 	bl	8002c2c <prvUnlockQueue>
 8002aea:	f000 fc83 	bl	80033f4 <xTaskResumeAll>
 8002aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af0:	f000 f8ee 	bl	8002cd0 <prvIsQueueEmpty>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f43f af6d 	beq.w	80029d6 <xQueuePeek+0x8e>
 8002afc:	2300      	movs	r3, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	3738      	adds	r7, #56	; 0x38
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <prvCopyDataToQueue>:
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10d      	bne.n	8002b46 <prvCopyDataToQueue+0x3a>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d14d      	bne.n	8002bce <prvCopyDataToQueue+0xc2>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 fa2a 	bl	8003f90 <xTaskPriorityDisinherit>
 8002b3c:	6178      	str	r0, [r7, #20]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	e043      	b.n	8002bce <prvCopyDataToQueue+0xc2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d119      	bne.n	8002b80 <prvCopyDataToQueue+0x74>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6858      	ldr	r0, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	461a      	mov	r2, r3
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	f002 f920 	bl	8004d9c <memcpy>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	441a      	add	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d32b      	bcc.n	8002bce <prvCopyDataToQueue+0xc2>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	e026      	b.n	8002bce <prvCopyDataToQueue+0xc2>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	68d8      	ldr	r0, [r3, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	f002 f906 	bl	8004d9c <memcpy>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	425b      	negs	r3, r3
 8002b9a:	441a      	add	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	60da      	str	r2, [r3, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d207      	bcs.n	8002bbc <prvCopyDataToQueue+0xb0>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	425b      	negs	r3, r3
 8002bb6:	441a      	add	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d105      	bne.n	8002bce <prvCopyDataToQueue+0xc2>
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <prvCopyDataToQueue+0xc2>
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <prvCopyDataFromQueue>:
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d018      	beq.n	8002c24 <prvCopyDataFromQueue+0x44>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	441a      	add	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d303      	bcc.n	8002c14 <prvCopyDataFromQueue+0x34>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68d9      	ldr	r1, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	6838      	ldr	r0, [r7, #0]
 8002c20:	f002 f8bc 	bl	8004d9c <memcpy>
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <prvUnlockQueue>:
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	f001 fed4 	bl	80049e0 <vPortEnterCritical>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e011      	b.n	8002c66 <prvUnlockQueue+0x3a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <prvUnlockQueue+0x44>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3324      	adds	r3, #36	; 0x24
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 ff12 	bl	8003a78 <xTaskRemoveFromEventList>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <prvUnlockQueue+0x32>
 8002c5a:	f001 f861 	bl	8003d20 <vTaskMissedYield>
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	dce9      	bgt.n	8002c42 <prvUnlockQueue+0x16>
 8002c6e:	e000      	b.n	8002c72 <prvUnlockQueue+0x46>
 8002c70:	bf00      	nop
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	22ff      	movs	r2, #255	; 0xff
 8002c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c7a:	f001 fee1 	bl	8004a40 <vPortExitCritical>
 8002c7e:	f001 feaf 	bl	80049e0 <vPortEnterCritical>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c88:	73bb      	strb	r3, [r7, #14]
 8002c8a:	e011      	b.n	8002cb0 <prvUnlockQueue+0x84>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d012      	beq.n	8002cba <prvUnlockQueue+0x8e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3310      	adds	r3, #16
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 feed 	bl	8003a78 <xTaskRemoveFromEventList>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <prvUnlockQueue+0x7c>
 8002ca4:	f001 f83c 	bl	8003d20 <vTaskMissedYield>
 8002ca8:	7bbb      	ldrb	r3, [r7, #14]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	73bb      	strb	r3, [r7, #14]
 8002cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	dce9      	bgt.n	8002c8c <prvUnlockQueue+0x60>
 8002cb8:	e000      	b.n	8002cbc <prvUnlockQueue+0x90>
 8002cba:	bf00      	nop
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	22ff      	movs	r2, #255	; 0xff
 8002cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc4:	f001 febc 	bl	8004a40 <vPortExitCritical>
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <prvIsQueueEmpty>:
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	f001 fe82 	bl	80049e0 <vPortEnterCritical>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <prvIsQueueEmpty+0x1a>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e001      	b.n	8002cee <prvIsQueueEmpty+0x1e>
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	f001 fea7 	bl	8004a40 <vPortExitCritical>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <prvIsQueueFull>:
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	f001 fe6c 	bl	80049e0 <vPortEnterCritical>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d102      	bne.n	8002d1a <prvIsQueueFull+0x1e>
 8002d14:	2301      	movs	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e001      	b.n	8002d1e <prvIsQueueFull+0x22>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	f001 fe8f 	bl	8004a40 <vPortExitCritical>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <vQueueAddToRegistry>:
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <vQueueAddToRegistry+0x2a>
 8002d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d44:	f383 8811 	msr	BASEPRI, r3
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	bf00      	nop
 8002d54:	e7fe      	b.n	8002d54 <vQueueAddToRegistry+0x28>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d024      	beq.n	8002da6 <vQueueAddToRegistry+0x7a>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e01e      	b.n	8002da0 <vQueueAddToRegistry+0x74>
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <vQueueAddToRegistry+0x98>)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d105      	bne.n	8002d7e <vQueueAddToRegistry+0x52>
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4a13      	ldr	r2, [pc, #76]	; (8002dc4 <vQueueAddToRegistry+0x98>)
 8002d78:	4413      	add	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	e013      	b.n	8002da6 <vQueueAddToRegistry+0x7a>
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <vQueueAddToRegistry+0x6e>
 8002d84:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <vQueueAddToRegistry+0x98>)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d104      	bne.n	8002d9a <vQueueAddToRegistry+0x6e>
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <vQueueAddToRegistry+0x98>)
 8002d96:	4413      	add	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2b07      	cmp	r3, #7
 8002da4:	d9dd      	bls.n	8002d62 <vQueueAddToRegistry+0x36>
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d005      	beq.n	8002db8 <vQueueAddToRegistry+0x8c>
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	bf00      	nop
 8002dba:	371c      	adds	r7, #28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	200002b0 	.word	0x200002b0

08002dc8 <vQueueWaitForMessageRestricted>:
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	f001 fe02 	bl	80049e0 <vPortEnterCritical>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d103      	bne.n	8002df2 <vQueueWaitForMessageRestricted+0x2a>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfe:	d103      	bne.n	8002e08 <vQueueWaitForMessageRestricted+0x40>
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e08:	f001 fe1a 	bl	8004a40 <vPortExitCritical>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <vQueueWaitForMessageRestricted+0x5a>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	3324      	adds	r3, #36	; 0x24
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fde5 	bl	80039ec <vTaskPlaceOnEventListRestricted>
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f7ff ff02 	bl	8002c2c <prvUnlockQueue>
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <xTaskCreate>:
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af04      	add	r7, sp, #16
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fc2a 	bl	800469c <pvPortMalloc>
 8002e48:	6178      	str	r0, [r7, #20]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <xTaskCreate+0x48>
 8002e50:	207c      	movs	r0, #124	; 0x7c
 8002e52:	f001 fc23 	bl	800469c <pvPortMalloc>
 8002e56:	61f8      	str	r0, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <xTaskCreate+0x40>
 8002e5e:	227c      	movs	r2, #124	; 0x7c
 8002e60:	2100      	movs	r1, #0
 8002e62:	69f8      	ldr	r0, [r7, #28]
 8002e64:	f001 ffa8 	bl	8004db8 <memset>
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e6e:	e005      	b.n	8002e7c <xTaskCreate+0x4c>
 8002e70:	6978      	ldr	r0, [r7, #20]
 8002e72:	f001 fc25 	bl	80046c0 <vPortFree>
 8002e76:	e001      	b.n	8002e7c <xTaskCreate+0x4c>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d013      	beq.n	8002eaa <xTaskCreate+0x7a>
 8002e82:	2300      	movs	r3, #0
 8002e84:	9303      	str	r3, [sp, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f80e 	bl	8002eba <prvInitialiseNewTask>
 8002e9e:	69f8      	ldr	r0, [r7, #28]
 8002ea0:	f000 f89a 	bl	8002fd8 <prvAddNewTaskToReadyList>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	e002      	b.n	8002eb0 <xTaskCreate+0x80>
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <prvInitialiseNewTask>:
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b088      	sub	sp, #32
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	21a5      	movs	r1, #165	; 0xa5
 8002ed4:	f001 ff70 	bl	8004db8 <memset>
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	f023 0307 	bic.w	r3, r3, #7
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <prvInitialiseNewTask+0x58>
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	bf00      	nop
 8002f10:	e7fe      	b.n	8002f10 <prvInitialiseNewTask+0x56>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01e      	beq.n	8002f56 <prvInitialiseNewTask+0x9c>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	e012      	b.n	8002f44 <prvInitialiseNewTask+0x8a>
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	7819      	ldrb	r1, [r3, #0]
 8002f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3334      	adds	r3, #52	; 0x34
 8002f2e:	460a      	mov	r2, r1
 8002f30:	701a      	strb	r2, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	4413      	add	r3, r2
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <prvInitialiseNewTask+0x92>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b13      	cmp	r3, #19
 8002f48:	d9e9      	bls.n	8002f1e <prvInitialiseNewTask+0x64>
 8002f4a:	e000      	b.n	8002f4e <prvInitialiseNewTask+0x94>
 8002f4c:	bf00      	nop
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8002f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d90a      	bls.n	8002f72 <prvInitialiseNewTask+0xb8>
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <prvInitialiseNewTask+0xb6>
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d901      	bls.n	8002f7c <prvInitialiseNewTask+0xc2>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f86:	651a      	str	r2, [r3, #80]	; 0x50
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 fbc8 	bl	8004722 <vListInitialiseItem>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	3318      	adds	r3, #24
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 fbc3 	bl	8004722 <vListInitialiseItem>
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fa0:	611a      	str	r2, [r3, #16]
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	f1c3 0205 	rsb	r2, r3, #5
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	619a      	str	r2, [r3, #24]
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	69b8      	ldr	r0, [r7, #24]
 8002fb8:	f001 fc20 	bl	80047fc <pxPortInitialiseStack>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <prvInitialiseNewTask+0x114>
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	bf00      	nop
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <prvAddNewTaskToReadyList>:
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	f001 fcfe 	bl	80049e0 <vPortEnterCritical>
 8002fe4:	4b41      	ldr	r3, [pc, #260]	; (80030ec <prvAddNewTaskToReadyList+0x114>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	4a40      	ldr	r2, [pc, #256]	; (80030ec <prvAddNewTaskToReadyList+0x114>)
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	4b40      	ldr	r3, [pc, #256]	; (80030f0 <prvAddNewTaskToReadyList+0x118>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <prvAddNewTaskToReadyList+0x32>
 8002ff6:	4a3e      	ldr	r2, [pc, #248]	; (80030f0 <prvAddNewTaskToReadyList+0x118>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <prvAddNewTaskToReadyList+0x114>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d110      	bne.n	8003026 <prvAddNewTaskToReadyList+0x4e>
 8003004:	f000 ff0e 	bl	8003e24 <prvInitialiseTaskLists>
 8003008:	e00d      	b.n	8003026 <prvAddNewTaskToReadyList+0x4e>
 800300a:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <prvAddNewTaskToReadyList+0x11c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <prvAddNewTaskToReadyList+0x4e>
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <prvAddNewTaskToReadyList+0x118>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	429a      	cmp	r2, r3
 800301e:	d802      	bhi.n	8003026 <prvAddNewTaskToReadyList+0x4e>
 8003020:	4a33      	ldr	r2, [pc, #204]	; (80030f0 <prvAddNewTaskToReadyList+0x118>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <prvAddNewTaskToReadyList+0x120>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	4a32      	ldr	r2, [pc, #200]	; (80030f8 <prvAddNewTaskToReadyList+0x120>)
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <prvAddNewTaskToReadyList+0x120>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	649a      	str	r2, [r3, #72]	; 0x48
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <prvAddNewTaskToReadyList+0x124>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d903      	bls.n	800304c <prvAddNewTaskToReadyList+0x74>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <prvAddNewTaskToReadyList+0x124>)
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	492b      	ldr	r1, [pc, #172]	; (8003100 <prvAddNewTaskToReadyList+0x128>)
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3304      	adds	r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	3204      	adds	r2, #4
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	1d1a      	adds	r2, r3, #4
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <prvAddNewTaskToReadyList+0x128>)
 8003090:	441a      	add	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	615a      	str	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	4919      	ldr	r1, [pc, #100]	; (8003100 <prvAddNewTaskToReadyList+0x128>)
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	1c59      	adds	r1, r3, #1
 80030aa:	4815      	ldr	r0, [pc, #84]	; (8003100 <prvAddNewTaskToReadyList+0x128>)
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4403      	add	r3, r0
 80030b6:	6019      	str	r1, [r3, #0]
 80030b8:	f001 fcc2 	bl	8004a40 <vPortExitCritical>
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <prvAddNewTaskToReadyList+0x11c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <prvAddNewTaskToReadyList+0x10a>
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <prvAddNewTaskToReadyList+0x118>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d207      	bcs.n	80030e2 <prvAddNewTaskToReadyList+0x10a>
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <prvAddNewTaskToReadyList+0x12c>)
 80030d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	bf00      	nop
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000194 	.word	0x20000194
 80030f0:	200000bc 	.word	0x200000bc
 80030f4:	200001a0 	.word	0x200001a0
 80030f8:	200001b0 	.word	0x200001b0
 80030fc:	2000019c 	.word	0x2000019c
 8003100:	200000c0 	.word	0x200000c0
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <uxTaskPriorityGet>:
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	f001 fc66 	bl	80049e0 <vPortEnterCritical>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <uxTaskPriorityGet+0x18>
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <uxTaskPriorityGet+0x30>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e000      	b.n	8003122 <uxTaskPriorityGet+0x1a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	f001 fc89 	bl	8004a40 <vPortExitCritical>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200000bc 	.word	0x200000bc

0800313c <vTaskPrioritySet>:
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d90a      	bls.n	8003166 <vTaskPrioritySet+0x2a>
 8003150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	bf00      	nop
 8003164:	e7fe      	b.n	8003164 <vTaskPrioritySet+0x28>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b04      	cmp	r3, #4
 800316a:	d901      	bls.n	8003170 <vTaskPrioritySet+0x34>
 800316c:	2304      	movs	r3, #4
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	f001 fc36 	bl	80049e0 <vPortEnterCritical>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d102      	bne.n	8003180 <vTaskPrioritySet+0x44>
 800317a:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <vTaskPrioritySet+0x17c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	e000      	b.n	8003182 <vTaskPrioritySet+0x46>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	f000 808c 	beq.w	80032ac <vTaskPrioritySet+0x170>
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d90d      	bls.n	80031b8 <vTaskPrioritySet+0x7c>
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <vTaskPrioritySet+0x17c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d00f      	beq.n	80031c6 <vTaskPrioritySet+0x8a>
 80031a6:	4b44      	ldr	r3, [pc, #272]	; (80032b8 <vTaskPrioritySet+0x17c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d309      	bcc.n	80031c6 <vTaskPrioritySet+0x8a>
 80031b2:	2301      	movs	r3, #1
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	e006      	b.n	80031c6 <vTaskPrioritySet+0x8a>
 80031b8:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <vTaskPrioritySet+0x17c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d101      	bne.n	80031c6 <vTaskPrioritySet+0x8a>
 80031c2:	2301      	movs	r3, #1
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d102      	bne.n	80031de <vTaskPrioritySet+0xa2>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	651a      	str	r2, [r3, #80]	; 0x50
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	db04      	blt.n	80031f6 <vTaskPrioritySet+0xba>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f1c3 0205 	rsb	r2, r3, #5
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	619a      	str	r2, [r3, #24]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	6959      	ldr	r1, [r3, #20]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4a2d      	ldr	r2, [pc, #180]	; (80032bc <vTaskPrioritySet+0x180>)
 8003206:	4413      	add	r3, r2
 8003208:	4299      	cmp	r1, r3
 800320a:	d144      	bne.n	8003296 <vTaskPrioritySet+0x15a>
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	3304      	adds	r3, #4
 8003210:	4618      	mov	r0, r3
 8003212:	f001 faca 	bl	80047aa <uxListRemove>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321a:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <vTaskPrioritySet+0x184>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d903      	bls.n	800322a <vTaskPrioritySet+0xee>
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003226:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <vTaskPrioritySet+0x184>)
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322e:	4923      	ldr	r1, [pc, #140]	; (80032bc <vTaskPrioritySet+0x180>)
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	3304      	adds	r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	3204      	adds	r2, #4
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4a13      	ldr	r2, [pc, #76]	; (80032bc <vTaskPrioritySet+0x180>)
 800326e:	441a      	add	r2, r3
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	615a      	str	r2, [r3, #20]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4910      	ldr	r1, [pc, #64]	; (80032bc <vTaskPrioritySet+0x180>)
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	1c59      	adds	r1, r3, #1
 8003288:	480c      	ldr	r0, [pc, #48]	; (80032bc <vTaskPrioritySet+0x180>)
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4403      	add	r3, r0
 8003294:	6019      	str	r1, [r3, #0]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <vTaskPrioritySet+0x170>
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <vTaskPrioritySet+0x188>)
 800329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f001 fbc8 	bl	8004a40 <vPortExitCritical>
 80032b0:	bf00      	nop
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	200000bc 	.word	0x200000bc
 80032bc:	200000c0 	.word	0x200000c0
 80032c0:	2000019c 	.word	0x2000019c
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <vTaskStartScheduler>:
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <vTaskStartScheduler+0x88>)
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2300      	movs	r3, #0
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	491e      	ldr	r1, [pc, #120]	; (8003354 <vTaskStartScheduler+0x8c>)
 80032dc:	481e      	ldr	r0, [pc, #120]	; (8003358 <vTaskStartScheduler+0x90>)
 80032de:	f7ff fda7 	bl	8002e30 <xTaskCreate>
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <vTaskStartScheduler+0x28>
 80032ea:	f000 ff55 	bl	8004198 <xTimerCreateTimerTask>
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d116      	bne.n	8003324 <vTaskStartScheduler+0x5c>
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	bf00      	nop
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <vTaskStartScheduler+0x94>)
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <vTaskStartScheduler+0x98>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <vTaskStartScheduler+0x9c>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f001 faed 	bl	80048fc <xPortStartScheduler>
 8003322:	e00e      	b.n	8003342 <vTaskStartScheduler+0x7a>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d10a      	bne.n	8003342 <vTaskStartScheduler+0x7a>
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <vTaskStartScheduler+0x78>
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <vTaskStartScheduler+0xa0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200001b8 	.word	0x200001b8
 8003354:	08004f9c 	.word	0x08004f9c
 8003358:	08003d39 	.word	0x08003d39
 800335c:	200001b4 	.word	0x200001b4
 8003360:	200001a0 	.word	0x200001a0
 8003364:	20000198 	.word	0x20000198
 8003368:	2000000c 	.word	0x2000000c

0800336c <vTaskSuspendAll>:
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <vTaskSuspendAll+0x18>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	4a03      	ldr	r2, [pc, #12]	; (8003384 <vTaskSuspendAll+0x18>)
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	200001bc 	.word	0x200001bc

08003388 <prvGetExpectedIdleTime>:
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <prvGetExpectedIdleTime+0x58>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <prvGetExpectedIdleTime+0x16>
 800339a:	2301      	movs	r3, #1
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <prvGetExpectedIdleTime+0x5c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <prvGetExpectedIdleTime+0x26>
 80033a8:	2300      	movs	r3, #0
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	e012      	b.n	80033d4 <prvGetExpectedIdleTime+0x4c>
 80033ae:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <prvGetExpectedIdleTime+0x60>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d902      	bls.n	80033bc <prvGetExpectedIdleTime+0x34>
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	e00b      	b.n	80033d4 <prvGetExpectedIdleTime+0x4c>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <prvGetExpectedIdleTime+0x40>
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	e005      	b.n	80033d4 <prvGetExpectedIdleTime+0x4c>
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <prvGetExpectedIdleTime+0x64>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <prvGetExpectedIdleTime+0x68>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	2000019c 	.word	0x2000019c
 80033e4:	200000bc 	.word	0x200000bc
 80033e8:	200000c0 	.word	0x200000c0
 80033ec:	200001b4 	.word	0x200001b4
 80033f0:	20000198 	.word	0x20000198

080033f4 <xTaskResumeAll>:
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b088      	sub	sp, #32
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	4b71      	ldr	r3, [pc, #452]	; (80035c8 <xTaskResumeAll+0x1d4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <xTaskResumeAll+0x2c>
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <xTaskResumeAll+0x2a>
 8003420:	f001 fade 	bl	80049e0 <vPortEnterCritical>
 8003424:	4b68      	ldr	r3, [pc, #416]	; (80035c8 <xTaskResumeAll+0x1d4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3b01      	subs	r3, #1
 800342a:	4a67      	ldr	r2, [pc, #412]	; (80035c8 <xTaskResumeAll+0x1d4>)
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <xTaskResumeAll+0x1d4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 80c1 	bne.w	80035ba <xTaskResumeAll+0x1c6>
 8003438:	4b64      	ldr	r3, [pc, #400]	; (80035cc <xTaskResumeAll+0x1d8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80bc 	beq.w	80035ba <xTaskResumeAll+0x1c6>
 8003442:	e08b      	b.n	800355c <xTaskResumeAll+0x168>
 8003444:	4b62      	ldr	r3, [pc, #392]	; (80035d0 <xTaskResumeAll+0x1dc>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	6a12      	ldr	r2, [r2, #32]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	69d2      	ldr	r2, [r2, #28]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3318      	adds	r3, #24
 800346e:	429a      	cmp	r2, r3
 8003470:	d103      	bne.n	800347a <xTaskResumeAll+0x86>
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	2200      	movs	r2, #0
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1e5a      	subs	r2, r3, #1
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	68d2      	ldr	r2, [r2, #12]
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	6892      	ldr	r2, [r2, #8]
 80034a2:	605a      	str	r2, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	3304      	adds	r3, #4
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d103      	bne.n	80034b8 <xTaskResumeAll+0xc4>
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	68da      	ldr	r2, [r3, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2200      	movs	r2, #0
 80034bc:	615a      	str	r2, [r3, #20]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1e5a      	subs	r2, r3, #1
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034cc:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <xTaskResumeAll+0x1e0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d903      	bls.n	80034dc <xTaskResumeAll+0xe8>
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4a3e      	ldr	r2, [pc, #248]	; (80035d4 <xTaskResumeAll+0x1e0>)
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	493d      	ldr	r1, [pc, #244]	; (80035d8 <xTaskResumeAll+0x1e4>)
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3304      	adds	r3, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	60da      	str	r2, [r3, #12]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	3204      	adds	r2, #4
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	1d1a      	adds	r2, r3, #4
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	609a      	str	r2, [r3, #8]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4a2e      	ldr	r2, [pc, #184]	; (80035d8 <xTaskResumeAll+0x1e4>)
 8003520:	441a      	add	r2, r3
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	615a      	str	r2, [r3, #20]
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352a:	492b      	ldr	r1, [pc, #172]	; (80035d8 <xTaskResumeAll+0x1e4>)
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	1c59      	adds	r1, r3, #1
 800353a:	4827      	ldr	r0, [pc, #156]	; (80035d8 <xTaskResumeAll+0x1e4>)
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4403      	add	r3, r0
 8003546:	6019      	str	r1, [r3, #0]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <xTaskResumeAll+0x1e8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <xTaskResumeAll+0x168>
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <xTaskResumeAll+0x1ec>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	4b1c      	ldr	r3, [pc, #112]	; (80035d0 <xTaskResumeAll+0x1dc>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	f47f af6f 	bne.w	8003444 <xTaskResumeAll+0x50>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <xTaskResumeAll+0x17c>
 800356c:	f000 fcd8 	bl	8003f20 <prvResetNextTaskUnblockTime>
 8003570:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <xTaskResumeAll+0x1f0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <xTaskResumeAll+0x1aa>
 800357c:	f000 f89e 	bl	80036bc <xTaskIncrementTick>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <xTaskResumeAll+0x198>
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <xTaskResumeAll+0x1ec>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3b01      	subs	r3, #1
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f1      	bne.n	800357c <xTaskResumeAll+0x188>
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <xTaskResumeAll+0x1f0>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <xTaskResumeAll+0x1ec>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <xTaskResumeAll+0x1c6>
 80035a6:	2301      	movs	r3, #1
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <xTaskResumeAll+0x1f4>)
 80035ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f001 fa41 	bl	8004a40 <vPortExitCritical>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4618      	mov	r0, r3
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200001bc 	.word	0x200001bc
 80035cc:	20000194 	.word	0x20000194
 80035d0:	20000154 	.word	0x20000154
 80035d4:	2000019c 	.word	0x2000019c
 80035d8:	200000c0 	.word	0x200000c0
 80035dc:	200000bc 	.word	0x200000bc
 80035e0:	200001a8 	.word	0x200001a8
 80035e4:	200001a4 	.word	0x200001a4
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <xTaskGetTickCount>:
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <xTaskGetTickCount+0x18>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	20000198 	.word	0x20000198

08003608 <vTaskStepTick>:
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	4b26      	ldr	r3, [pc, #152]	; (80036ac <vTaskStepTick+0xa4>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	441a      	add	r2, r3
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <vTaskStepTick+0xa8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d90a      	bls.n	8003636 <vTaskStepTick+0x2e>
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	bf00      	nop
 8003634:	e7fe      	b.n	8003634 <vTaskStepTick+0x2c>
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <vTaskStepTick+0xa4>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	441a      	add	r2, r3
 800363e:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <vTaskStepTick+0xa8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d128      	bne.n	8003698 <vTaskStepTick+0x90>
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <vTaskStepTick+0xac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <vTaskStepTick+0x5c>
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	bf00      	nop
 8003662:	e7fe      	b.n	8003662 <vTaskStepTick+0x5a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <vTaskStepTick+0x78>
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <vTaskStepTick+0x76>
 8003680:	f001 f9ae 	bl	80049e0 <vPortEnterCritical>
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <vTaskStepTick+0xb0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3301      	adds	r3, #1
 800368a:	4a0b      	ldr	r2, [pc, #44]	; (80036b8 <vTaskStepTick+0xb0>)
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	f001 f9d7 	bl	8004a40 <vPortExitCritical>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3b01      	subs	r3, #1
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <vTaskStepTick+0xa4>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	4a02      	ldr	r2, [pc, #8]	; (80036ac <vTaskStepTick+0xa4>)
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	bf00      	nop
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000198 	.word	0x20000198
 80036b0:	200001b4 	.word	0x200001b4
 80036b4:	200001bc 	.word	0x200001bc
 80036b8:	200001a4 	.word	0x200001a4

080036bc <xTaskIncrementTick>:
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	2300      	movs	r3, #0
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	4b7e      	ldr	r3, [pc, #504]	; (80038c0 <xTaskIncrementTick+0x204>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 80ed 	bne.w	80038aa <xTaskIncrementTick+0x1ee>
 80036d0:	4b7c      	ldr	r3, [pc, #496]	; (80038c4 <xTaskIncrementTick+0x208>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	4a7a      	ldr	r2, [pc, #488]	; (80038c4 <xTaskIncrementTick+0x208>)
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d120      	bne.n	8003726 <xTaskIncrementTick+0x6a>
 80036e4:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <xTaskIncrementTick+0x20c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <xTaskIncrementTick+0x48>
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	607b      	str	r3, [r7, #4]
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <xTaskIncrementTick+0x46>
 8003704:	4b70      	ldr	r3, [pc, #448]	; (80038c8 <xTaskIncrementTick+0x20c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	4b70      	ldr	r3, [pc, #448]	; (80038cc <xTaskIncrementTick+0x210>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6e      	ldr	r2, [pc, #440]	; (80038c8 <xTaskIncrementTick+0x20c>)
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	4a6e      	ldr	r2, [pc, #440]	; (80038cc <xTaskIncrementTick+0x210>)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b6d      	ldr	r3, [pc, #436]	; (80038d0 <xTaskIncrementTick+0x214>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	4a6c      	ldr	r2, [pc, #432]	; (80038d0 <xTaskIncrementTick+0x214>)
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	f000 fbfd 	bl	8003f20 <prvResetNextTaskUnblockTime>
 8003726:	4b6b      	ldr	r3, [pc, #428]	; (80038d4 <xTaskIncrementTick+0x218>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a3a      	ldr	r2, [r7, #32]
 800372c:	429a      	cmp	r2, r3
 800372e:	f0c0 80a7 	bcc.w	8003880 <xTaskIncrementTick+0x1c4>
 8003732:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <xTaskIncrementTick+0x20c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <xTaskIncrementTick+0x8a>
 800373c:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <xTaskIncrementTick+0x218>)
 800373e:	f04f 32ff 	mov.w	r2, #4294967295
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e09c      	b.n	8003880 <xTaskIncrementTick+0x1c4>
 8003746:	4b60      	ldr	r3, [pc, #384]	; (80038c8 <xTaskIncrementTick+0x20c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	6a3a      	ldr	r2, [r7, #32]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	429a      	cmp	r2, r3
 800375c:	d203      	bcs.n	8003766 <xTaskIncrementTick+0xaa>
 800375e:	4a5d      	ldr	r2, [pc, #372]	; (80038d4 <xTaskIncrementTick+0x218>)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	e08c      	b.n	8003880 <xTaskIncrementTick+0x1c4>
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	68d2      	ldr	r2, [r2, #12]
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	6892      	ldr	r2, [r2, #8]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	3304      	adds	r3, #4
 8003788:	429a      	cmp	r2, r3
 800378a:	d103      	bne.n	8003794 <xTaskIncrementTick+0xd8>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2200      	movs	r2, #0
 8003798:	615a      	str	r2, [r3, #20]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	1e5a      	subs	r2, r3, #1
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01e      	beq.n	80037ea <xTaskIncrementTick+0x12e>
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	6a12      	ldr	r2, [r2, #32]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	69d2      	ldr	r2, [r2, #28]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	3318      	adds	r3, #24
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d103      	bne.n	80037da <xTaskIncrementTick+0x11e>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	6a1a      	ldr	r2, [r3, #32]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2200      	movs	r2, #0
 80037de:	629a      	str	r2, [r3, #40]	; 0x28
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1e5a      	subs	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ee:	4b3a      	ldr	r3, [pc, #232]	; (80038d8 <xTaskIncrementTick+0x21c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d903      	bls.n	80037fe <xTaskIncrementTick+0x142>
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	4a37      	ldr	r2, [pc, #220]	; (80038d8 <xTaskIncrementTick+0x21c>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	4936      	ldr	r1, [pc, #216]	; (80038dc <xTaskIncrementTick+0x220>)
 8003804:	4613      	mov	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3304      	adds	r3, #4
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	3204      	adds	r2, #4
 800382a:	605a      	str	r2, [r3, #4]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <xTaskIncrementTick+0x220>)
 8003842:	441a      	add	r2, r3
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	615a      	str	r2, [r3, #20]
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	4923      	ldr	r1, [pc, #140]	; (80038dc <xTaskIncrementTick+0x220>)
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	481f      	ldr	r0, [pc, #124]	; (80038dc <xTaskIncrementTick+0x220>)
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4403      	add	r3, r0
 8003868:	6019      	str	r1, [r3, #0]
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386e:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <xTaskIncrementTick+0x224>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	429a      	cmp	r2, r3
 8003876:	f67f af5c 	bls.w	8003732 <xTaskIncrementTick+0x76>
 800387a:	2301      	movs	r3, #1
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
 800387e:	e758      	b.n	8003732 <xTaskIncrementTick+0x76>
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <xTaskIncrementTick+0x224>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003886:	4915      	ldr	r1, [pc, #84]	; (80038dc <xTaskIncrementTick+0x220>)
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d901      	bls.n	800389c <xTaskIncrementTick+0x1e0>
 8003898:	2301      	movs	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <xTaskIncrementTick+0x228>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <xTaskIncrementTick+0x1f8>
 80038a4:	2301      	movs	r3, #1
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
 80038a8:	e004      	b.n	80038b4 <xTaskIncrementTick+0x1f8>
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <xTaskIncrementTick+0x22c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <xTaskIncrementTick+0x22c>)
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	4618      	mov	r0, r3
 80038b8:	3728      	adds	r7, #40	; 0x28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200001bc 	.word	0x200001bc
 80038c4:	20000198 	.word	0x20000198
 80038c8:	2000014c 	.word	0x2000014c
 80038cc:	20000150 	.word	0x20000150
 80038d0:	200001ac 	.word	0x200001ac
 80038d4:	200001b4 	.word	0x200001b4
 80038d8:	2000019c 	.word	0x2000019c
 80038dc:	200000c0 	.word	0x200000c0
 80038e0:	200000bc 	.word	0x200000bc
 80038e4:	200001a8 	.word	0x200001a8
 80038e8:	200001a4 	.word	0x200001a4

080038ec <vTaskSwitchContext>:
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <vTaskSwitchContext+0xa4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <vTaskSwitchContext+0x16>
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <vTaskSwitchContext+0xa8>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e041      	b.n	8003986 <vTaskSwitchContext+0x9a>
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <vTaskSwitchContext+0xa8>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <vTaskSwitchContext+0xac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	e010      	b.n	8003932 <vTaskSwitchContext+0x46>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <vTaskSwitchContext+0x40>
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	bf00      	nop
 800392a:	e7fe      	b.n	800392a <vTaskSwitchContext+0x3e>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	491a      	ldr	r1, [pc, #104]	; (800399c <vTaskSwitchContext+0xb0>)
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0e4      	beq.n	8003910 <vTaskSwitchContext+0x24>
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4a12      	ldr	r2, [pc, #72]	; (800399c <vTaskSwitchContext+0xb0>)
 8003952:	4413      	add	r3, r2
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3308      	adds	r3, #8
 8003968:	429a      	cmp	r2, r3
 800396a:	d104      	bne.n	8003976 <vTaskSwitchContext+0x8a>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <vTaskSwitchContext+0xb4>)
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4a05      	ldr	r2, [pc, #20]	; (8003998 <vTaskSwitchContext+0xac>)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	bf00      	nop
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr
 8003990:	200001bc 	.word	0x200001bc
 8003994:	200001a8 	.word	0x200001a8
 8003998:	2000019c 	.word	0x2000019c
 800399c:	200000c0 	.word	0x200000c0
 80039a0:	200000bc 	.word	0x200000bc

080039a4 <vTaskPlaceOnEventList>:
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <vTaskPlaceOnEventList+0x26>
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <vTaskPlaceOnEventList+0x24>
 80039ca:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <vTaskPlaceOnEventList+0x44>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3318      	adds	r3, #24
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 feb1 	bl	800473a <vListInsert>
 80039d8:	2101      	movs	r1, #1
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	f000 fb6e 	bl	80040bc <prvAddCurrentTaskToDelayedList>
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	200000bc 	.word	0x200000bc

080039ec <vTaskPlaceOnEventListRestricted>:
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <vTaskPlaceOnEventListRestricted+0x28>
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <vTaskPlaceOnEventListRestricted+0x26>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	4b16      	ldr	r3, [pc, #88]	; (8003a74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	61da      	str	r2, [r3, #28]
 8003a22:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6892      	ldr	r2, [r2, #8]
 8003a2a:	621a      	str	r2, [r3, #32]
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	3218      	adds	r2, #24
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f103 0218 	add.w	r2, r3, #24
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <vTaskPlaceOnEventListRestricted+0x88>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <vTaskPlaceOnEventListRestricted+0x76>
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	68b8      	ldr	r0, [r7, #8]
 8003a66:	f000 fb29 	bl	80040bc <prvAddCurrentTaskToDelayedList>
 8003a6a:	bf00      	nop
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200000bc 	.word	0x200000bc

08003a78 <xTaskRemoveFromEventList>:
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <xTaskRemoveFromEventList+0x2c>
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	bf00      	nop
 8003aa2:	e7fe      	b.n	8003aa2 <xTaskRemoveFromEventList+0x2a>
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	6a3a      	ldr	r2, [r7, #32]
 8003ab0:	6a12      	ldr	r2, [r2, #32]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	69d2      	ldr	r2, [r2, #28]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d103      	bne.n	8003ad2 <xTaskRemoveFromEventList+0x5a>
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1e5a      	subs	r2, r3, #1
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <xTaskRemoveFromEventList+0x198>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d161      	bne.n	8003bae <xTaskRemoveFromEventList+0x136>
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	6a3a      	ldr	r2, [r7, #32]
 8003af6:	68d2      	ldr	r2, [r2, #12]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	6a3a      	ldr	r2, [r7, #32]
 8003b00:	6892      	ldr	r2, [r2, #8]
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	3304      	adds	r3, #4
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d103      	bne.n	8003b18 <xTaskRemoveFromEventList+0xa0>
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	615a      	str	r2, [r3, #20]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1e5a      	subs	r2, r3, #1
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <xTaskRemoveFromEventList+0x19c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d903      	bls.n	8003b3c <xTaskRemoveFromEventList+0xc4>
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	4a36      	ldr	r2, [pc, #216]	; (8003c14 <xTaskRemoveFromEventList+0x19c>)
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b40:	4935      	ldr	r1, [pc, #212]	; (8003c18 <xTaskRemoveFromEventList+0x1a0>)
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	60da      	str	r2, [r3, #12]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	6a3a      	ldr	r2, [r7, #32]
 8003b66:	3204      	adds	r2, #4
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	1d1a      	adds	r2, r3, #4
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <xTaskRemoveFromEventList+0x1a0>)
 8003b80:	441a      	add	r2, r3
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	615a      	str	r2, [r3, #20]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	4923      	ldr	r1, [pc, #140]	; (8003c18 <xTaskRemoveFromEventList+0x1a0>)
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	1c59      	adds	r1, r3, #1
 8003b9a:	481f      	ldr	r0, [pc, #124]	; (8003c18 <xTaskRemoveFromEventList+0x1a0>)
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4403      	add	r3, r0
 8003ba6:	6019      	str	r1, [r3, #0]
 8003ba8:	f000 f9ba 	bl	8003f20 <prvResetNextTaskUnblockTime>
 8003bac:	e01b      	b.n	8003be6 <xTaskRemoveFromEventList+0x16e>
 8003bae:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <xTaskRemoveFromEventList+0x1a4>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	61da      	str	r2, [r3, #28]
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	621a      	str	r2, [r3, #32]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	6a3a      	ldr	r2, [r7, #32]
 8003bc8:	3218      	adds	r2, #24
 8003bca:	605a      	str	r2, [r3, #4]
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f103 0218 	add.w	r2, r3, #24
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <xTaskRemoveFromEventList+0x1a4>)
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <xTaskRemoveFromEventList+0x1a4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <xTaskRemoveFromEventList+0x1a4>)
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <xTaskRemoveFromEventList+0x1a8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d905      	bls.n	8003c00 <xTaskRemoveFromEventList+0x188>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <xTaskRemoveFromEventList+0x1ac>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	e001      	b.n	8003c04 <xTaskRemoveFromEventList+0x18c>
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	4618      	mov	r0, r3
 8003c08:	3728      	adds	r7, #40	; 0x28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200001bc 	.word	0x200001bc
 8003c14:	2000019c 	.word	0x2000019c
 8003c18:	200000c0 	.word	0x200000c0
 8003c1c:	20000154 	.word	0x20000154
 8003c20:	200000bc 	.word	0x200000bc
 8003c24:	200001a8 	.word	0x200001a8

08003c28 <vTaskInternalSetTimeOutState>:
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <vTaskInternalSetTimeOutState+0x24>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <vTaskInternalSetTimeOutState+0x28>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	200001ac 	.word	0x200001ac
 8003c50:	20000198 	.word	0x20000198

08003c54 <xTaskCheckForTimeOut>:
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xTaskCheckForTimeOut+0x26>
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xTaskCheckForTimeOut+0x24>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xTaskCheckForTimeOut+0x42>
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xTaskCheckForTimeOut+0x40>
 8003c96:	f000 fea3 	bl	80049e0 <vPortEnterCritical>
 8003c9a:	4b1f      	ldr	r3, [pc, #124]	; (8003d18 <xTaskCheckForTimeOut+0xc4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d102      	bne.n	8003cba <xTaskCheckForTimeOut+0x66>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	e026      	b.n	8003d08 <xTaskCheckForTimeOut+0xb4>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <xTaskCheckForTimeOut+0xc8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d00a      	beq.n	8003cdc <xTaskCheckForTimeOut+0x88>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d305      	bcc.n	8003cdc <xTaskCheckForTimeOut+0x88>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e015      	b.n	8003d08 <xTaskCheckForTimeOut+0xb4>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d20b      	bcs.n	8003cfe <xTaskCheckForTimeOut+0xaa>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	1ad2      	subs	r2, r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ff98 	bl	8003c28 <vTaskInternalSetTimeOutState>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	e004      	b.n	8003d08 <xTaskCheckForTimeOut+0xb4>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	2301      	movs	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	f000 fe9a 	bl	8004a40 <vPortExitCritical>
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000198 	.word	0x20000198
 8003d1c:	200001ac 	.word	0x200001ac

08003d20 <vTaskMissedYield>:
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <vTaskMissedYield+0x14>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	200001a8 	.word	0x200001a8

08003d38 <prvIdleTask>:
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	f000 f8b0 	bl	8003ea4 <prvCheckTasksWaitingTermination>
 8003d44:	4b18      	ldr	r3, [pc, #96]	; (8003da8 <prvIdleTask+0x70>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d907      	bls.n	8003d5c <prvIdleTask+0x24>
 8003d4c:	4b17      	ldr	r3, [pc, #92]	; (8003dac <prvIdleTask+0x74>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f7ff fb14 	bl	8003388 <prvGetExpectedIdleTime>
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d9eb      	bls.n	8003d40 <prvIdleTask+0x8>
 8003d68:	f7ff fb00 	bl	800336c <vTaskSuspendAll>
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <prvIdleTask+0x78>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <prvIdleTask+0x7c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d20a      	bcs.n	8003d8e <prvIdleTask+0x56>
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <prvIdleTask+0x54>
 8003d8e:	f7ff fafb 	bl	8003388 <prvGetExpectedIdleTime>
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d902      	bls.n	8003da0 <prvIdleTask+0x68>
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 febe 	bl	8004b1c <vPortSuppressTicksAndSleep>
 8003da0:	f7ff fb28 	bl	80033f4 <xTaskResumeAll>
 8003da4:	e7cc      	b.n	8003d40 <prvIdleTask+0x8>
 8003da6:	bf00      	nop
 8003da8:	200000c0 	.word	0x200000c0
 8003dac:	e000ed04 	.word	0xe000ed04
 8003db0:	200001b4 	.word	0x200001b4
 8003db4:	20000198 	.word	0x20000198

08003db8 <eTaskConfirmSleepModeStatus>:
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	71fb      	strb	r3, [r7, #7]
 8003dc6:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <eTaskConfirmSleepModeStatus+0x58>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <eTaskConfirmSleepModeStatus+0x1c>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	71fb      	strb	r3, [r7, #7]
 8003dd2:	e017      	b.n	8003e04 <eTaskConfirmSleepModeStatus+0x4c>
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <eTaskConfirmSleepModeStatus+0x5c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <eTaskConfirmSleepModeStatus+0x2a>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	71fb      	strb	r3, [r7, #7]
 8003de0:	e010      	b.n	8003e04 <eTaskConfirmSleepModeStatus+0x4c>
 8003de2:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <eTaskConfirmSleepModeStatus+0x60>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <eTaskConfirmSleepModeStatus+0x38>
 8003dea:	2300      	movs	r3, #0
 8003dec:	71fb      	strb	r3, [r7, #7]
 8003dee:	e009      	b.n	8003e04 <eTaskConfirmSleepModeStatus+0x4c>
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <eTaskConfirmSleepModeStatus+0x64>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <eTaskConfirmSleepModeStatus+0x68>)
 8003df6:	6819      	ldr	r1, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	1acb      	subs	r3, r1, r3
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d101      	bne.n	8003e04 <eTaskConfirmSleepModeStatus+0x4c>
 8003e00:	2302      	movs	r3, #2
 8003e02:	71fb      	strb	r3, [r7, #7]
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	20000154 	.word	0x20000154
 8003e14:	200001a8 	.word	0x200001a8
 8003e18:	200001a4 	.word	0x200001a4
 8003e1c:	20000180 	.word	0x20000180
 8003e20:	20000194 	.word	0x20000194

08003e24 <prvInitialiseTaskLists>:
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
 8003e2e:	e00c      	b.n	8003e4a <prvInitialiseTaskLists+0x26>
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <prvInitialiseTaskLists+0x60>)
 8003e3c:	4413      	add	r3, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fc50 	bl	80046e4 <vListInitialise>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3301      	adds	r3, #1
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d9ef      	bls.n	8003e30 <prvInitialiseTaskLists+0xc>
 8003e50:	480d      	ldr	r0, [pc, #52]	; (8003e88 <prvInitialiseTaskLists+0x64>)
 8003e52:	f000 fc47 	bl	80046e4 <vListInitialise>
 8003e56:	480d      	ldr	r0, [pc, #52]	; (8003e8c <prvInitialiseTaskLists+0x68>)
 8003e58:	f000 fc44 	bl	80046e4 <vListInitialise>
 8003e5c:	480c      	ldr	r0, [pc, #48]	; (8003e90 <prvInitialiseTaskLists+0x6c>)
 8003e5e:	f000 fc41 	bl	80046e4 <vListInitialise>
 8003e62:	480c      	ldr	r0, [pc, #48]	; (8003e94 <prvInitialiseTaskLists+0x70>)
 8003e64:	f000 fc3e 	bl	80046e4 <vListInitialise>
 8003e68:	480b      	ldr	r0, [pc, #44]	; (8003e98 <prvInitialiseTaskLists+0x74>)
 8003e6a:	f000 fc3b 	bl	80046e4 <vListInitialise>
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <prvInitialiseTaskLists+0x78>)
 8003e70:	4a05      	ldr	r2, [pc, #20]	; (8003e88 <prvInitialiseTaskLists+0x64>)
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <prvInitialiseTaskLists+0x7c>)
 8003e76:	4a05      	ldr	r2, [pc, #20]	; (8003e8c <prvInitialiseTaskLists+0x68>)
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200000c0 	.word	0x200000c0
 8003e88:	20000124 	.word	0x20000124
 8003e8c:	20000138 	.word	0x20000138
 8003e90:	20000154 	.word	0x20000154
 8003e94:	20000168 	.word	0x20000168
 8003e98:	20000180 	.word	0x20000180
 8003e9c:	2000014c 	.word	0x2000014c
 8003ea0:	20000150 	.word	0x20000150

08003ea4 <prvCheckTasksWaitingTermination>:
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	e019      	b.n	8003ee0 <prvCheckTasksWaitingTermination+0x3c>
 8003eac:	f000 fd98 	bl	80049e0 <vPortEnterCritical>
 8003eb0:	4b10      	ldr	r3, [pc, #64]	; (8003ef4 <prvCheckTasksWaitingTermination+0x50>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fc74 	bl	80047aa <uxListRemove>
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <prvCheckTasksWaitingTermination+0x54>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <prvCheckTasksWaitingTermination+0x54>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <prvCheckTasksWaitingTermination+0x58>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <prvCheckTasksWaitingTermination+0x58>)
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	f000 fdb3 	bl	8004a40 <vPortExitCritical>
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f810 	bl	8003f00 <prvDeleteTCB>
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <prvCheckTasksWaitingTermination+0x58>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e1      	bne.n	8003eac <prvCheckTasksWaitingTermination+0x8>
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000168 	.word	0x20000168
 8003ef8:	20000194 	.word	0x20000194
 8003efc:	2000017c 	.word	0x2000017c

08003f00 <prvDeleteTCB>:
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fbd7 	bl	80046c0 <vPortFree>
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fbd4 	bl	80046c0 <vPortFree>
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <prvResetNextTaskUnblockTime>:
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <prvResetNextTaskUnblockTime+0x2c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d104      	bne.n	8003f38 <prvResetNextTaskUnblockTime+0x18>
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <prvResetNextTaskUnblockTime+0x30>)
 8003f30:	f04f 32ff 	mov.w	r2, #4294967295
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e005      	b.n	8003f44 <prvResetNextTaskUnblockTime+0x24>
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <prvResetNextTaskUnblockTime+0x2c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a03      	ldr	r2, [pc, #12]	; (8003f50 <prvResetNextTaskUnblockTime+0x30>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr
 8003f4c:	2000014c 	.word	0x2000014c
 8003f50:	200001b4 	.word	0x200001b4

08003f54 <xTaskGetSchedulerState>:
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <xTaskGetSchedulerState+0x34>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <xTaskGetSchedulerState+0x14>
 8003f62:	2301      	movs	r3, #1
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	e008      	b.n	8003f7a <xTaskGetSchedulerState+0x26>
 8003f68:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <xTaskGetSchedulerState+0x38>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <xTaskGetSchedulerState+0x22>
 8003f70:	2302      	movs	r3, #2
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	e001      	b.n	8003f7a <xTaskGetSchedulerState+0x26>
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	200001a0 	.word	0x200001a0
 8003f8c:	200001bc 	.word	0x200001bc

08003f90 <xTaskPriorityDisinherit>:
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	61bb      	str	r3, [r7, #24]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d07e      	beq.n	80040a4 <xTaskPriorityDisinherit+0x114>
 8003fa6:	4b42      	ldr	r3, [pc, #264]	; (80040b0 <xTaskPriorityDisinherit+0x120>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d00a      	beq.n	8003fc6 <xTaskPriorityDisinherit+0x36>
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xTaskPriorityDisinherit+0x34>
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <xTaskPriorityDisinherit+0x54>
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <xTaskPriorityDisinherit+0x52>
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d054      	beq.n	80040a4 <xTaskPriorityDisinherit+0x114>
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d150      	bne.n	80040a4 <xTaskPriorityDisinherit+0x114>
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	3304      	adds	r3, #4
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fbcf 	bl	80047aa <uxListRemove>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	f1c3 0205 	rsb	r2, r3, #5
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	619a      	str	r2, [r3, #24]
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004024:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <xTaskPriorityDisinherit+0x124>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d903      	bls.n	8004034 <xTaskPriorityDisinherit+0xa4>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	4a20      	ldr	r2, [pc, #128]	; (80040b4 <xTaskPriorityDisinherit+0x124>)
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004038:	491f      	ldr	r1, [pc, #124]	; (80040b8 <xTaskPriorityDisinherit+0x128>)
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	3304      	adds	r3, #4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	3204      	adds	r2, #4
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	1d1a      	adds	r2, r3, #4
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	609a      	str	r2, [r3, #8]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4a10      	ldr	r2, [pc, #64]	; (80040b8 <xTaskPriorityDisinherit+0x128>)
 8004078:	441a      	add	r2, r3
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	615a      	str	r2, [r3, #20]
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	490d      	ldr	r1, [pc, #52]	; (80040b8 <xTaskPriorityDisinherit+0x128>)
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	1c59      	adds	r1, r3, #1
 8004092:	4809      	ldr	r0, [pc, #36]	; (80040b8 <xTaskPriorityDisinherit+0x128>)
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4403      	add	r3, r0
 800409e:	6019      	str	r1, [r3, #0]
 80040a0:	2301      	movs	r3, #1
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4618      	mov	r0, r3
 80040a8:	3720      	adds	r7, #32
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	200000bc 	.word	0x200000bc
 80040b4:	2000019c 	.word	0x2000019c
 80040b8:	200000c0 	.word	0x200000c0

080040bc <prvAddCurrentTaskToDelayedList>:
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
 80040c6:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <prvAddCurrentTaskToDelayedList+0xc4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb69 	bl	80047aa <uxListRemove>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d124      	bne.n	800412a <prvAddCurrentTaskToDelayedList+0x6e>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d021      	beq.n	800412a <prvAddCurrentTaskToDelayedList+0x6e>
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <prvAddCurrentTaskToDelayedList+0xcc>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	4b23      	ldr	r3, [pc, #140]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	6892      	ldr	r2, [r2, #8]
 80040fc:	60da      	str	r2, [r3, #12]
 80040fe:	4b21      	ldr	r3, [pc, #132]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	3204      	adds	r2, #4
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	1d1a      	adds	r2, r3, #4
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <prvAddCurrentTaskToDelayedList+0xcc>)
 800411a:	615a      	str	r2, [r3, #20]
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <prvAddCurrentTaskToDelayedList+0xcc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	4a19      	ldr	r2, [pc, #100]	; (8004188 <prvAddCurrentTaskToDelayedList+0xcc>)
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	bf00      	nop
 8004128:	e026      	b.n	8004178 <prvAddCurrentTaskToDelayedList+0xbc>
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b14      	ldr	r3, [pc, #80]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	429a      	cmp	r2, r3
 8004140:	d209      	bcs.n	8004156 <prvAddCurrentTaskToDelayedList+0x9a>
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <prvAddCurrentTaskToDelayedList+0xd0>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 faf3 	bl	800473a <vListInsert>
 8004154:	e010      	b.n	8004178 <prvAddCurrentTaskToDelayedList+0xbc>
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <prvAddCurrentTaskToDelayedList+0xc8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f000 fae9 	bl	800473a <vListInsert>
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <prvAddCurrentTaskToDelayedList+0xd8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	429a      	cmp	r2, r3
 8004170:	d202      	bcs.n	8004178 <prvAddCurrentTaskToDelayedList+0xbc>
 8004172:	4a08      	ldr	r2, [pc, #32]	; (8004194 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6013      	str	r3, [r2, #0]
 8004178:	bf00      	nop
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000198 	.word	0x20000198
 8004184:	200000bc 	.word	0x200000bc
 8004188:	20000180 	.word	0x20000180
 800418c:	20000150 	.word	0x20000150
 8004190:	2000014c 	.word	0x2000014c
 8004194:	200001b4 	.word	0x200001b4

08004198 <xTimerCreateTimerTask>:
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af02      	add	r7, sp, #8
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]
 80041a2:	f000 fa45 	bl	8004630 <prvCheckForValidListAndQueue>
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <xTimerCreateTimerTask+0x54>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <xTimerCreateTimerTask+0x2c>
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <xTimerCreateTimerTask+0x58>)
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2303      	movs	r3, #3
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2300      	movs	r3, #0
 80041b8:	2280      	movs	r2, #128	; 0x80
 80041ba:	490e      	ldr	r1, [pc, #56]	; (80041f4 <xTimerCreateTimerTask+0x5c>)
 80041bc:	480e      	ldr	r0, [pc, #56]	; (80041f8 <xTimerCreateTimerTask+0x60>)
 80041be:	f7fe fe37 	bl	8002e30 <xTaskCreate>
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <xTimerCreateTimerTask+0x48>
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	603b      	str	r3, [r7, #0]
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <xTimerCreateTimerTask+0x46>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200001f0 	.word	0x200001f0
 80041f0:	200001f4 	.word	0x200001f4
 80041f4:	08004fa4 	.word	0x08004fa4
 80041f8:	080042a1 	.word	0x080042a1

080041fc <prvReloadTimer>:
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	e008      	b.n	800421c <prvReloadTimer+0x20>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	4413      	add	r3, r2
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	4798      	blx	r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	18d1      	adds	r1, r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f8db 	bl	80043e4 <prvInsertTimerInActiveList>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ea      	bne.n	800420a <prvReloadTimer+0xe>
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <prvProcessExpiredTimer>:
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
 800424a:	4b14      	ldr	r3, [pc, #80]	; (800429c <prvProcessExpiredTimer+0x5c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3304      	adds	r3, #4
 8004258:	4618      	mov	r0, r3
 800425a:	f000 faa6 	bl	80047aa <uxListRemove>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <prvProcessExpiredTimer+0x38>
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7ff ffc3 	bl	80041fc <prvReloadTimer>
 8004276:	e008      	b.n	800428a <prvProcessExpiredTimer+0x4a>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	b2da      	uxtb	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	4798      	blx	r3
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	200001e8 	.word	0x200001e8

080042a0 <prvTimerTask>:
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	f107 0308 	add.w	r3, r7, #8
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f857 	bl	8004360 <prvGetNextExpireTime>
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4619      	mov	r1, r3
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f803 	bl	80042c4 <prvProcessTimerOrBlockTask>
 80042be:	f000 f8d3 	bl	8004468 <prvProcessReceivedCommands>
 80042c2:	e7f1      	b.n	80042a8 <prvTimerTask+0x8>

080042c4 <prvProcessTimerOrBlockTask>:
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	f7ff f84d 	bl	800336c <vTaskSuspendAll>
 80042d2:	f107 0308 	add.w	r3, r7, #8
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f864 	bl	80043a4 <prvSampleTimeNow>
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d130      	bne.n	8004346 <prvProcessTimerOrBlockTask+0x82>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <prvProcessTimerOrBlockTask+0x3c>
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d806      	bhi.n	8004300 <prvProcessTimerOrBlockTask+0x3c>
 80042f2:	f7ff f87f 	bl	80033f4 <xTaskResumeAll>
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ffa1 	bl	8004240 <prvProcessExpiredTimer>
 80042fe:	e024      	b.n	800434a <prvProcessTimerOrBlockTask+0x86>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <prvProcessTimerOrBlockTask+0x54>
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <prvProcessTimerOrBlockTask+0x90>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <prvProcessTimerOrBlockTask+0x50>
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <prvProcessTimerOrBlockTask+0x52>
 8004314:	2300      	movs	r3, #0
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <prvProcessTimerOrBlockTask+0x94>)
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	4619      	mov	r1, r3
 8004326:	f7fe fd4f 	bl	8002dc8 <vQueueWaitForMessageRestricted>
 800432a:	f7ff f863 	bl	80033f4 <xTaskResumeAll>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <prvProcessTimerOrBlockTask+0x86>
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <prvProcessTimerOrBlockTask+0x98>)
 8004336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	e001      	b.n	800434a <prvProcessTimerOrBlockTask+0x86>
 8004346:	f7ff f855 	bl	80033f4 <xTaskResumeAll>
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200001ec 	.word	0x200001ec
 8004358:	200001f0 	.word	0x200001f0
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <prvGetNextExpireTime>:
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <prvGetNextExpireTime+0x40>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <prvGetNextExpireTime+0x16>
 8004372:	2201      	movs	r2, #1
 8004374:	e000      	b.n	8004378 <prvGetNextExpireTime+0x18>
 8004376:	2200      	movs	r2, #0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d105      	bne.n	8004390 <prvGetNextExpireTime+0x30>
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <prvGetNextExpireTime+0x40>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e001      	b.n	8004394 <prvGetNextExpireTime+0x34>
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr
 80043a0:	200001e8 	.word	0x200001e8

080043a4 <prvSampleTimeNow>:
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	f7ff f91e 	bl	80035ec <xTaskGetTickCount>
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	4b0b      	ldr	r3, [pc, #44]	; (80043e0 <prvSampleTimeNow+0x3c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d205      	bcs.n	80043c8 <prvSampleTimeNow+0x24>
 80043bc:	f000 f912 	bl	80045e4 <prvSwitchTimerLists>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	e002      	b.n	80043ce <prvSampleTimeNow+0x2a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	4a04      	ldr	r2, [pc, #16]	; (80043e0 <prvSampleTimeNow+0x3c>)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200001f8 	.word	0x200001f8

080043e4 <prvInsertTimerInActiveList>:
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	605a      	str	r2, [r3, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	611a      	str	r2, [r3, #16]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	429a      	cmp	r2, r3
 8004408:	d812      	bhi.n	8004430 <prvInsertTimerInActiveList+0x4c>
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	1ad2      	subs	r2, r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <prvInsertTimerInActiveList+0x3a>
 8004418:	2301      	movs	r3, #1
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e01b      	b.n	8004456 <prvInsertTimerInActiveList+0x72>
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <prvInsertTimerInActiveList+0x7c>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f000 f986 	bl	800473a <vListInsert>
 800442e:	e012      	b.n	8004456 <prvInsertTimerInActiveList+0x72>
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d206      	bcs.n	8004446 <prvInsertTimerInActiveList+0x62>
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d302      	bcc.n	8004446 <prvInsertTimerInActiveList+0x62>
 8004440:	2301      	movs	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	e007      	b.n	8004456 <prvInsertTimerInActiveList+0x72>
 8004446:	4b07      	ldr	r3, [pc, #28]	; (8004464 <prvInsertTimerInActiveList+0x80>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3304      	adds	r3, #4
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f000 f972 	bl	800473a <vListInsert>
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	200001ec 	.word	0x200001ec
 8004464:	200001e8 	.word	0x200001e8

08004468 <prvProcessReceivedCommands>:
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	e0a6      	b.n	80045be <prvProcessReceivedCommands+0x156>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f2c0 80a2 	blt.w	80045bc <prvProcessReceivedCommands+0x154>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <prvProcessReceivedCommands+0x26>
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	3304      	adds	r3, #4
 8004488:	4618      	mov	r0, r3
 800448a:	f000 f98e 	bl	80047aa <uxListRemove>
 800448e:	1d3b      	adds	r3, r7, #4
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff ff87 	bl	80043a4 <prvSampleTimeNow>
 8004496:	61b8      	str	r0, [r7, #24]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	3b01      	subs	r3, #1
 800449c:	2b08      	cmp	r3, #8
 800449e:	f200 808e 	bhi.w	80045be <prvProcessReceivedCommands+0x156>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <prvProcessReceivedCommands+0x40>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	080044cd 	.word	0x080044cd
 80044b0:	08004535 	.word	0x08004535
 80044b4:	08004549 	.word	0x08004549
 80044b8:	08004593 	.word	0x08004593
 80044bc:	080044cd 	.word	0x080044cd
 80044c0:	080044cd 	.word	0x080044cd
 80044c4:	08004535 	.word	0x08004535
 80044c8:	08004549 	.word	0x08004549
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	18d1      	adds	r1, r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	69f8      	ldr	r0, [r7, #28]
 80044ec:	f7ff ff7a 	bl	80043e4 <prvInsertTimerInActiveList>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d063      	beq.n	80045be <prvProcessReceivedCommands+0x156>
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <prvProcessReceivedCommands+0xb0>
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	4413      	add	r3, r2
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4619      	mov	r1, r3
 8004510:	69f8      	ldr	r0, [r7, #28]
 8004512:	f7ff fe73 	bl	80041fc <prvReloadTimer>
 8004516:	e008      	b.n	800452a <prvProcessReceivedCommands+0xc2>
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	b2da      	uxtb	r2, r3
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	69f8      	ldr	r0, [r7, #28]
 8004530:	4798      	blx	r3
 8004532:	e044      	b.n	80045be <prvProcessReceivedCommands+0x156>
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004546:	e03a      	b.n	80045be <prvProcessReceivedCommands+0x156>
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	b2da      	uxtb	r2, r3
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	619a      	str	r2, [r3, #24]
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <prvProcessReceivedCommands+0x116>
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <prvProcessReceivedCommands+0x114>
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	18d1      	adds	r1, r2, r3
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	69f8      	ldr	r0, [r7, #28]
 800458c:	f7ff ff2a 	bl	80043e4 <prvInsertTimerInActiveList>
 8004590:	e015      	b.n	80045be <prvProcessReceivedCommands+0x156>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d103      	bne.n	80045a8 <prvProcessReceivedCommands+0x140>
 80045a0:	69f8      	ldr	r0, [r7, #28]
 80045a2:	f000 f88d 	bl	80046c0 <vPortFree>
 80045a6:	e00a      	b.n	80045be <prvProcessReceivedCommands+0x156>
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80045ba:	e000      	b.n	80045be <prvProcessReceivedCommands+0x156>
 80045bc:	bf00      	nop
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <prvProcessReceivedCommands+0x178>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f107 0108 	add.w	r1, r7, #8
 80045c6:	2200      	movs	r2, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe f8dd 	bl	8002788 <xQueueReceive>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f47f af4d 	bne.w	8004470 <prvProcessReceivedCommands+0x8>
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	200001f0 	.word	0x200001f0

080045e4 <prvSwitchTimerLists>:
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	e009      	b.n	8004600 <prvSwitchTimerLists+0x1c>
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <prvSwitchTimerLists+0x44>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	603b      	str	r3, [r7, #0]
 80045f6:	f04f 31ff 	mov.w	r1, #4294967295
 80045fa:	6838      	ldr	r0, [r7, #0]
 80045fc:	f7ff fe20 	bl	8004240 <prvProcessExpiredTimer>
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <prvSwitchTimerLists+0x44>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <prvSwitchTimerLists+0x8>
 800460a:	4b07      	ldr	r3, [pc, #28]	; (8004628 <prvSwitchTimerLists+0x44>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <prvSwitchTimerLists+0x48>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a04      	ldr	r2, [pc, #16]	; (8004628 <prvSwitchTimerLists+0x44>)
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4a04      	ldr	r2, [pc, #16]	; (800462c <prvSwitchTimerLists+0x48>)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	200001e8 	.word	0x200001e8
 800462c:	200001ec 	.word	0x200001ec

08004630 <prvCheckForValidListAndQueue>:
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
 8004634:	f000 f9d4 	bl	80049e0 <vPortEnterCritical>
 8004638:	4b12      	ldr	r3, [pc, #72]	; (8004684 <prvCheckForValidListAndQueue+0x54>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11d      	bne.n	800467c <prvCheckForValidListAndQueue+0x4c>
 8004640:	4811      	ldr	r0, [pc, #68]	; (8004688 <prvCheckForValidListAndQueue+0x58>)
 8004642:	f000 f84f 	bl	80046e4 <vListInitialise>
 8004646:	4811      	ldr	r0, [pc, #68]	; (800468c <prvCheckForValidListAndQueue+0x5c>)
 8004648:	f000 f84c 	bl	80046e4 <vListInitialise>
 800464c:	4b10      	ldr	r3, [pc, #64]	; (8004690 <prvCheckForValidListAndQueue+0x60>)
 800464e:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <prvCheckForValidListAndQueue+0x58>)
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <prvCheckForValidListAndQueue+0x64>)
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <prvCheckForValidListAndQueue+0x5c>)
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	210c      	movs	r1, #12
 800465c:	200a      	movs	r0, #10
 800465e:	f7fd ff23 	bl	80024a8 <xQueueGenericCreate>
 8004662:	4603      	mov	r3, r0
 8004664:	4a07      	ldr	r2, [pc, #28]	; (8004684 <prvCheckForValidListAndQueue+0x54>)
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <prvCheckForValidListAndQueue+0x54>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d005      	beq.n	800467c <prvCheckForValidListAndQueue+0x4c>
 8004670:	4b04      	ldr	r3, [pc, #16]	; (8004684 <prvCheckForValidListAndQueue+0x54>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4908      	ldr	r1, [pc, #32]	; (8004698 <prvCheckForValidListAndQueue+0x68>)
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe fb58 	bl	8002d2c <vQueueAddToRegistry>
 800467c:	f000 f9e0 	bl	8004a40 <vPortExitCritical>
 8004680:	bf00      	nop
 8004682:	bd80      	pop	{r7, pc}
 8004684:	200001f0 	.word	0x200001f0
 8004688:	200001c0 	.word	0x200001c0
 800468c:	200001d4 	.word	0x200001d4
 8004690:	200001e8 	.word	0x200001e8
 8004694:	200001ec 	.word	0x200001ec
 8004698:	08004fac 	.word	0x08004fac

0800469c <pvPortMalloc>:
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	f7fe fe62 	bl	800336c <vTaskSuspendAll>
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fb67 	bl	8004d7c <malloc>
 80046ae:	4603      	mov	r3, r0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	f7fe fe9f 	bl	80033f4 <xTaskResumeAll>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <vPortFree>:
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <vPortFree+0x1c>
 80046ce:	f7fe fe4d 	bl	800336c <vTaskSuspendAll>
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fb5a 	bl	8004d8c <free>
 80046d8:	f7fe fe8c 	bl	80033f4 <xTaskResumeAll>
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <vListInitialise>:
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f103 0208 	add.w	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f04f 32ff 	mov.w	r2, #4294967295
 80046fc:	609a      	str	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f103 0208 	add.w	r2, r3, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f103 0208 	add.w	r2, r3, #8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	611a      	str	r2, [r3, #16]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <vListInitialiseItem>:
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	611a      	str	r2, [r3, #16]
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <vListInsert>:
 800473a:	b480      	push	{r7}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d103      	bne.n	800475a <vListInsert+0x20>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e00c      	b.n	8004774 <vListInsert+0x3a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3308      	adds	r3, #8
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	e002      	b.n	8004768 <vListInsert+0x2e>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	429a      	cmp	r2, r3
 8004772:	d2f6      	bcs.n	8004762 <vListInsert+0x28>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	605a      	str	r2, [r3, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	609a      	str	r2, [r3, #8]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	605a      	str	r2, [r3, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr

080047aa <uxListRemove>:
 80047aa:	b480      	push	{r7}
 80047ac:	b085      	sub	sp, #20
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6892      	ldr	r2, [r2, #8]
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6852      	ldr	r2, [r2, #4]
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d103      	bne.n	80047de <uxListRemove+0x34>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	611a      	str	r2, [r3, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	1e5a      	subs	r2, r3, #1
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <pxPortInitialiseStack>:
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3b04      	subs	r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3b04      	subs	r3, #4
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f023 0201 	bic.w	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3b04      	subs	r3, #4
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	4a08      	ldr	r2, [pc, #32]	; (8004850 <pxPortInitialiseStack+0x54>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3b14      	subs	r3, #20
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	3b20      	subs	r3, #32
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	08004855 	.word	0x08004855

08004854 <prvTaskExitError>:
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	2300      	movs	r3, #0
 800485c:	607b      	str	r3, [r7, #4]
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <prvTaskExitError+0x54>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d00a      	beq.n	800487e <prvTaskExitError+0x2a>
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <prvTaskExitError+0x28>
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0fc      	beq.n	8004894 <prvTaskExitError+0x40>
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000010 	.word	0x20000010
 80048ac:	00000000 	.word	0x00000000

080048b0 <SVC_Handler>:
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <pxCurrentTCBConst2>)
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	6808      	ldr	r0, [r1, #0]
 80048b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80048ba:	f380 8809 	msr	PSP, r0
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f04f 0000 	mov.w	r0, #0
 80048c6:	f380 8811 	msr	BASEPRI, r0
 80048ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80048ce:	4770      	bx	lr

080048d0 <pxCurrentTCBConst2>:
 80048d0:	200000bc 	.word	0x200000bc
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop

080048d8 <prvPortStartFirstTask>:
 80048d8:	4806      	ldr	r0, [pc, #24]	; (80048f4 <prvPortStartFirstTask+0x1c>)
 80048da:	6800      	ldr	r0, [r0, #0]
 80048dc:	6800      	ldr	r0, [r0, #0]
 80048de:	f380 8808 	msr	MSP, r0
 80048e2:	b662      	cpsie	i
 80048e4:	b661      	cpsie	f
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	df00      	svc	0
 80048f0:	bf00      	nop
 80048f2:	0000      	.short	0x0000
 80048f4:	e000ed08 	.word	0xe000ed08
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop

080048fc <xPortStartScheduler>:
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	4b32      	ldr	r3, [pc, #200]	; (80049cc <xPortStartScheduler+0xd0>)
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	22ff      	movs	r2, #255	; 0xff
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	70fb      	strb	r3, [r7, #3]
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <xPortStartScheduler+0xd4>)
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	4b2a      	ldr	r3, [pc, #168]	; (80049d4 <xPortStartScheduler+0xd8>)
 800492c:	2207      	movs	r2, #7
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e009      	b.n	8004946 <xPortStartScheduler+0x4a>
 8004932:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <xPortStartScheduler+0xd8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <xPortStartScheduler+0xd8>)
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	b2db      	uxtb	r3, r3
 8004944:	70fb      	strb	r3, [r7, #3]
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d0ef      	beq.n	8004932 <xPortStartScheduler+0x36>
 8004952:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <xPortStartScheduler+0xd8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f1c3 0307 	rsb	r3, r3, #7
 800495a:	2b04      	cmp	r3, #4
 800495c:	d00a      	beq.n	8004974 <xPortStartScheduler+0x78>
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <xPortStartScheduler+0x76>
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <xPortStartScheduler+0xd8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <xPortStartScheduler+0xd8>)
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <xPortStartScheduler+0xd8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004986:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <xPortStartScheduler+0xd8>)
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <xPortStartScheduler+0xdc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <xPortStartScheduler+0xdc>)
 8004998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <xPortStartScheduler+0xdc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a0d      	ldr	r2, [pc, #52]	; (80049d8 <xPortStartScheduler+0xdc>)
 80049a4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	f000 f981 	bl	8004cb0 <vPortSetupTimerInterrupt>
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <xPortStartScheduler+0xe0>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f7ff ff90 	bl	80048d8 <prvPortStartFirstTask>
 80049b8:	f7fe ff98 	bl	80038ec <vTaskSwitchContext>
 80049bc:	f7ff ff4a 	bl	8004854 <prvTaskExitError>
 80049c0:	2300      	movs	r3, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	e000e400 	.word	0xe000e400
 80049d0:	20000208 	.word	0x20000208
 80049d4:	2000020c 	.word	0x2000020c
 80049d8:	e000ed20 	.word	0xe000ed20
 80049dc:	20000010 	.word	0x20000010

080049e0 <vPortEnterCritical>:
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	bf00      	nop
 80049fa:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <vPortEnterCritical+0x58>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	4a0d      	ldr	r2, [pc, #52]	; (8004a38 <vPortEnterCritical+0x58>)
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <vPortEnterCritical+0x58>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d10f      	bne.n	8004a2c <vPortEnterCritical+0x4c>
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <vPortEnterCritical+0x5c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <vPortEnterCritical+0x4c>
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <vPortEnterCritical+0x4a>
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000010 	.word	0x20000010
 8004a3c:	e000ed04 	.word	0xe000ed04

08004a40 <vPortExitCritical>:
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4b11      	ldr	r3, [pc, #68]	; (8004a8c <vPortExitCritical+0x4c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <vPortExitCritical+0x24>
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	607b      	str	r3, [r7, #4]
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <vPortExitCritical+0x22>
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <vPortExitCritical+0x4c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <vPortExitCritical+0x4c>)
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <vPortExitCritical+0x4c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <vPortExitCritical+0x42>
 8004a76:	2300      	movs	r3, #0
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	20000010 	.word	0x20000010

08004a90 <PendSV_Handler>:
 8004a90:	f3ef 8009 	mrs	r0, PSP
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <pxCurrentTCBConst>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004aa0:	6010      	str	r0, [r2, #0]
 8004aa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004aa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004aaa:	f380 8811 	msr	BASEPRI, r0
 8004aae:	f7fe ff1d 	bl	80038ec <vTaskSwitchContext>
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8811 	msr	BASEPRI, r0
 8004aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004abe:	6819      	ldr	r1, [r3, #0]
 8004ac0:	6808      	ldr	r0, [r1, #0]
 8004ac2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ac6:	f380 8809 	msr	PSP, r0
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	4770      	bx	lr

08004ad0 <pxCurrentTCBConst>:
 8004ad0:	200000bc 	.word	0x200000bc
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <SysTick_Handler>:
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	607b      	str	r3, [r7, #4]
 8004af0:	bf00      	nop
 8004af2:	f7fe fde3 	bl	80036bc <xTaskIncrementTick>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <SysTick_Handler+0x2c>
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <SysTick_Handler+0x40>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	2300      	movs	r3, #0
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <vPortSuppressTicksAndSleep>:
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <vPortSuppressTicksAndSleep+0x178>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d902      	bls.n	8004b34 <vPortSuppressTicksAndSleep+0x18>
 8004b2e:	4b59      	ldr	r3, [pc, #356]	; (8004c94 <vPortSuppressTicksAndSleep+0x178>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	b672      	cpsid	i
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f7ff f93b 	bl	8003db8 <eTaskConfirmSleepModeStatus>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <vPortSuppressTicksAndSleep+0x30>
 8004b48:	b662      	cpsie	i
 8004b4a:	e09e      	b.n	8004c8a <vPortSuppressTicksAndSleep+0x16e>
 8004b4c:	4b52      	ldr	r3, [pc, #328]	; (8004c98 <vPortSuppressTicksAndSleep+0x17c>)
 8004b4e:	2206      	movs	r2, #6
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	4b52      	ldr	r3, [pc, #328]	; (8004c9c <vPortSuppressTicksAndSleep+0x180>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d102      	bne.n	8004b64 <vPortSuppressTicksAndSleep+0x48>
 8004b5e:	4b50      	ldr	r3, [pc, #320]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	4a4d      	ldr	r2, [pc, #308]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4413      	add	r3, r2
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	4b4b      	ldr	r3, [pc, #300]	; (8004ca4 <vPortSuppressTicksAndSleep+0x188>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d008      	beq.n	8004b94 <vPortSuppressTicksAndSleep+0x78>
 8004b82:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <vPortSuppressTicksAndSleep+0x188>)
 8004b84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	4b45      	ldr	r3, [pc, #276]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	4b44      	ldr	r3, [pc, #272]	; (8004ca8 <vPortSuppressTicksAndSleep+0x18c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d904      	bls.n	8004ba8 <vPortSuppressTicksAndSleep+0x8c>
 8004b9e:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <vPortSuppressTicksAndSleep+0x18c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	4a40      	ldr	r2, [pc, #256]	; (8004cac <vPortSuppressTicksAndSleep+0x190>)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <vPortSuppressTicksAndSleep+0x180>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <vPortSuppressTicksAndSleep+0x17c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a37      	ldr	r2, [pc, #220]	; (8004c98 <vPortSuppressTicksAndSleep+0x17c>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d004      	beq.n	8004bd4 <vPortSuppressTicksAndSleep+0xb8>
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	bf30      	wfi
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	b662      	cpsie	i
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	b672      	cpsid	i
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <vPortSuppressTicksAndSleep+0x17c>)
 8004bea:	2206      	movs	r2, #6
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <vPortSuppressTicksAndSleep+0x17c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01d      	beq.n	8004c36 <vPortSuppressTicksAndSleep+0x11a>
 8004bfa:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <vPortSuppressTicksAndSleep+0x180>)
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	1acb      	subs	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <vPortSuppressTicksAndSleep+0x18c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d904      	bls.n	8004c20 <vPortSuppressTicksAndSleep+0x104>
 8004c16:	4b22      	ldr	r3, [pc, #136]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d903      	bls.n	8004c28 <vPortSuppressTicksAndSleep+0x10c>
 8004c20:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	4a20      	ldr	r2, [pc, #128]	; (8004cac <vPortSuppressTicksAndSleep+0x190>)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e01a      	b.n	8004c6c <vPortSuppressTicksAndSleep+0x150>
 8004c36:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <vPortSuppressTicksAndSleep+0x180>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	fb02 f203 	mul.w	r2, r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	fb02 f203 	mul.w	r2, r2, r3
 8004c64:	4911      	ldr	r1, [pc, #68]	; (8004cac <vPortSuppressTicksAndSleep+0x190>)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <vPortSuppressTicksAndSleep+0x180>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <vPortSuppressTicksAndSleep+0x17c>)
 8004c74:	2207      	movs	r2, #7
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <vPortSuppressTicksAndSleep+0x184>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a0b      	ldr	r2, [pc, #44]	; (8004cac <vPortSuppressTicksAndSleep+0x190>)
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	69b8      	ldr	r0, [r7, #24]
 8004c84:	f7fe fcc0 	bl	8003608 <vTaskStepTick>
 8004c88:	b662      	cpsie	i
 8004c8a:	bf00      	nop
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000200 	.word	0x20000200
 8004c98:	e000e010 	.word	0xe000e010
 8004c9c:	e000e018 	.word	0xe000e018
 8004ca0:	200001fc 	.word	0x200001fc
 8004ca4:	e000ed04 	.word	0xe000ed04
 8004ca8:	20000204 	.word	0x20000204
 8004cac:	e000e014 	.word	0xe000e014

08004cb0 <vPortSetupTimerInterrupt>:
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <vPortSetupTimerInterrupt+0x58>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <vPortSetupTimerInterrupt+0x5c>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <vPortSetupTimerInterrupt+0x60>)
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <vPortSetupTimerInterrupt+0x60>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	4a10      	ldr	r2, [pc, #64]	; (8004d14 <vPortSetupTimerInterrupt+0x64>)
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <vPortSetupTimerInterrupt+0x68>)
 8004cd6:	225e      	movs	r2, #94	; 0x5e
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <vPortSetupTimerInterrupt+0x6c>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <vPortSetupTimerInterrupt+0x70>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <vPortSetupTimerInterrupt+0x58>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a08      	ldr	r2, [pc, #32]	; (8004d0c <vPortSetupTimerInterrupt+0x5c>)
 8004cec:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf0:	099b      	lsrs	r3, r3, #6
 8004cf2:	4a0c      	ldr	r2, [pc, #48]	; (8004d24 <vPortSetupTimerInterrupt+0x74>)
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <vPortSetupTimerInterrupt+0x6c>)
 8004cfa:	2207      	movs	r2, #7
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	bf00      	nop
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000000 	.word	0x20000000
 8004d0c:	10624dd3 	.word	0x10624dd3
 8004d10:	200001fc 	.word	0x200001fc
 8004d14:	20000200 	.word	0x20000200
 8004d18:	20000204 	.word	0x20000204
 8004d1c:	e000e010 	.word	0xe000e010
 8004d20:	e000e018 	.word	0xe000e018
 8004d24:	e000e014 	.word	0xe000e014

08004d28 <__errno>:
 8004d28:	4b01      	ldr	r3, [pc, #4]	; (8004d30 <__errno+0x8>)
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000014 	.word	0x20000014

08004d34 <__libc_init_array>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	2600      	movs	r6, #0
 8004d38:	4d0c      	ldr	r5, [pc, #48]	; (8004d6c <__libc_init_array+0x38>)
 8004d3a:	4c0d      	ldr	r4, [pc, #52]	; (8004d70 <__libc_init_array+0x3c>)
 8004d3c:	1b64      	subs	r4, r4, r5
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	42a6      	cmp	r6, r4
 8004d42:	d109      	bne.n	8004d58 <__libc_init_array+0x24>
 8004d44:	f000 f904 	bl	8004f50 <_init>
 8004d48:	2600      	movs	r6, #0
 8004d4a:	4d0a      	ldr	r5, [pc, #40]	; (8004d74 <__libc_init_array+0x40>)
 8004d4c:	4c0a      	ldr	r4, [pc, #40]	; (8004d78 <__libc_init_array+0x44>)
 8004d4e:	1b64      	subs	r4, r4, r5
 8004d50:	10a4      	asrs	r4, r4, #2
 8004d52:	42a6      	cmp	r6, r4
 8004d54:	d105      	bne.n	8004d62 <__libc_init_array+0x2e>
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5c:	4798      	blx	r3
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7ee      	b.n	8004d40 <__libc_init_array+0xc>
 8004d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d66:	4798      	blx	r3
 8004d68:	3601      	adds	r6, #1
 8004d6a:	e7f2      	b.n	8004d52 <__libc_init_array+0x1e>
 8004d6c:	08004fe0 	.word	0x08004fe0
 8004d70:	08004fe0 	.word	0x08004fe0
 8004d74:	08004fe0 	.word	0x08004fe0
 8004d78:	08004fe4 	.word	0x08004fe4

08004d7c <malloc>:
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <malloc+0xc>)
 8004d7e:	4601      	mov	r1, r0
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	f000 b86d 	b.w	8004e60 <_malloc_r>
 8004d86:	bf00      	nop
 8004d88:	20000014 	.word	0x20000014

08004d8c <free>:
 8004d8c:	4b02      	ldr	r3, [pc, #8]	; (8004d98 <free+0xc>)
 8004d8e:	4601      	mov	r1, r0
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	f000 b819 	b.w	8004dc8 <_free_r>
 8004d96:	bf00      	nop
 8004d98:	20000014 	.word	0x20000014

08004d9c <memcpy>:
 8004d9c:	440a      	add	r2, r1
 8004d9e:	4291      	cmp	r1, r2
 8004da0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004da4:	d100      	bne.n	8004da8 <memcpy+0xc>
 8004da6:	4770      	bx	lr
 8004da8:	b510      	push	{r4, lr}
 8004daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dae:	4291      	cmp	r1, r2
 8004db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004db4:	d1f9      	bne.n	8004daa <memcpy+0xe>
 8004db6:	bd10      	pop	{r4, pc}

08004db8 <memset>:
 8004db8:	4603      	mov	r3, r0
 8004dba:	4402      	add	r2, r0
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d100      	bne.n	8004dc2 <memset+0xa>
 8004dc0:	4770      	bx	lr
 8004dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc6:	e7f9      	b.n	8004dbc <memset+0x4>

08004dc8 <_free_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4605      	mov	r5, r0
 8004dcc:	2900      	cmp	r1, #0
 8004dce:	d043      	beq.n	8004e58 <_free_r+0x90>
 8004dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd4:	1f0c      	subs	r4, r1, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bfb8      	it	lt
 8004dda:	18e4      	addlt	r4, r4, r3
 8004ddc:	f000 f8aa 	bl	8004f34 <__malloc_lock>
 8004de0:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <_free_r+0x94>)
 8004de2:	6813      	ldr	r3, [r2, #0]
 8004de4:	4610      	mov	r0, r2
 8004de6:	b933      	cbnz	r3, 8004df6 <_free_r+0x2e>
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	6014      	str	r4, [r2, #0]
 8004dec:	4628      	mov	r0, r5
 8004dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004df2:	f000 b8a5 	b.w	8004f40 <__malloc_unlock>
 8004df6:	42a3      	cmp	r3, r4
 8004df8:	d90a      	bls.n	8004e10 <_free_r+0x48>
 8004dfa:	6821      	ldr	r1, [r4, #0]
 8004dfc:	1862      	adds	r2, r4, r1
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	bf01      	itttt	eq
 8004e02:	681a      	ldreq	r2, [r3, #0]
 8004e04:	685b      	ldreq	r3, [r3, #4]
 8004e06:	1852      	addeq	r2, r2, r1
 8004e08:	6022      	streq	r2, [r4, #0]
 8004e0a:	6063      	str	r3, [r4, #4]
 8004e0c:	6004      	str	r4, [r0, #0]
 8004e0e:	e7ed      	b.n	8004dec <_free_r+0x24>
 8004e10:	461a      	mov	r2, r3
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	b10b      	cbz	r3, 8004e1a <_free_r+0x52>
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	d9fa      	bls.n	8004e10 <_free_r+0x48>
 8004e1a:	6811      	ldr	r1, [r2, #0]
 8004e1c:	1850      	adds	r0, r2, r1
 8004e1e:	42a0      	cmp	r0, r4
 8004e20:	d10b      	bne.n	8004e3a <_free_r+0x72>
 8004e22:	6820      	ldr	r0, [r4, #0]
 8004e24:	4401      	add	r1, r0
 8004e26:	1850      	adds	r0, r2, r1
 8004e28:	4283      	cmp	r3, r0
 8004e2a:	6011      	str	r1, [r2, #0]
 8004e2c:	d1de      	bne.n	8004dec <_free_r+0x24>
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	4401      	add	r1, r0
 8004e34:	6011      	str	r1, [r2, #0]
 8004e36:	6053      	str	r3, [r2, #4]
 8004e38:	e7d8      	b.n	8004dec <_free_r+0x24>
 8004e3a:	d902      	bls.n	8004e42 <_free_r+0x7a>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	e7d4      	b.n	8004dec <_free_r+0x24>
 8004e42:	6820      	ldr	r0, [r4, #0]
 8004e44:	1821      	adds	r1, r4, r0
 8004e46:	428b      	cmp	r3, r1
 8004e48:	bf01      	itttt	eq
 8004e4a:	6819      	ldreq	r1, [r3, #0]
 8004e4c:	685b      	ldreq	r3, [r3, #4]
 8004e4e:	1809      	addeq	r1, r1, r0
 8004e50:	6021      	streq	r1, [r4, #0]
 8004e52:	6063      	str	r3, [r4, #4]
 8004e54:	6054      	str	r4, [r2, #4]
 8004e56:	e7c9      	b.n	8004dec <_free_r+0x24>
 8004e58:	bd38      	pop	{r3, r4, r5, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000210 	.word	0x20000210

08004e60 <_malloc_r>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	1ccd      	adds	r5, r1, #3
 8004e64:	f025 0503 	bic.w	r5, r5, #3
 8004e68:	3508      	adds	r5, #8
 8004e6a:	2d0c      	cmp	r5, #12
 8004e6c:	bf38      	it	cc
 8004e6e:	250c      	movcc	r5, #12
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	4606      	mov	r6, r0
 8004e74:	db01      	blt.n	8004e7a <_malloc_r+0x1a>
 8004e76:	42a9      	cmp	r1, r5
 8004e78:	d903      	bls.n	8004e82 <_malloc_r+0x22>
 8004e7a:	230c      	movs	r3, #12
 8004e7c:	6033      	str	r3, [r6, #0]
 8004e7e:	2000      	movs	r0, #0
 8004e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e82:	f000 f857 	bl	8004f34 <__malloc_lock>
 8004e86:	4921      	ldr	r1, [pc, #132]	; (8004f0c <_malloc_r+0xac>)
 8004e88:	680a      	ldr	r2, [r1, #0]
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	b99c      	cbnz	r4, 8004eb6 <_malloc_r+0x56>
 8004e8e:	4f20      	ldr	r7, [pc, #128]	; (8004f10 <_malloc_r+0xb0>)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	b923      	cbnz	r3, 8004e9e <_malloc_r+0x3e>
 8004e94:	4621      	mov	r1, r4
 8004e96:	4630      	mov	r0, r6
 8004e98:	f000 f83c 	bl	8004f14 <_sbrk_r>
 8004e9c:	6038      	str	r0, [r7, #0]
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f000 f837 	bl	8004f14 <_sbrk_r>
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	d123      	bne.n	8004ef2 <_malloc_r+0x92>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	4630      	mov	r0, r6
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	f000 f846 	bl	8004f40 <__malloc_unlock>
 8004eb4:	e7e3      	b.n	8004e7e <_malloc_r+0x1e>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	1b5b      	subs	r3, r3, r5
 8004eba:	d417      	bmi.n	8004eec <_malloc_r+0x8c>
 8004ebc:	2b0b      	cmp	r3, #11
 8004ebe:	d903      	bls.n	8004ec8 <_malloc_r+0x68>
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	441c      	add	r4, r3
 8004ec4:	6025      	str	r5, [r4, #0]
 8004ec6:	e004      	b.n	8004ed2 <_malloc_r+0x72>
 8004ec8:	6863      	ldr	r3, [r4, #4]
 8004eca:	42a2      	cmp	r2, r4
 8004ecc:	bf0c      	ite	eq
 8004ece:	600b      	streq	r3, [r1, #0]
 8004ed0:	6053      	strne	r3, [r2, #4]
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	f000 f834 	bl	8004f40 <__malloc_unlock>
 8004ed8:	f104 000b 	add.w	r0, r4, #11
 8004edc:	1d23      	adds	r3, r4, #4
 8004ede:	f020 0007 	bic.w	r0, r0, #7
 8004ee2:	1ac2      	subs	r2, r0, r3
 8004ee4:	d0cc      	beq.n	8004e80 <_malloc_r+0x20>
 8004ee6:	1a1b      	subs	r3, r3, r0
 8004ee8:	50a3      	str	r3, [r4, r2]
 8004eea:	e7c9      	b.n	8004e80 <_malloc_r+0x20>
 8004eec:	4622      	mov	r2, r4
 8004eee:	6864      	ldr	r4, [r4, #4]
 8004ef0:	e7cc      	b.n	8004e8c <_malloc_r+0x2c>
 8004ef2:	1cc4      	adds	r4, r0, #3
 8004ef4:	f024 0403 	bic.w	r4, r4, #3
 8004ef8:	42a0      	cmp	r0, r4
 8004efa:	d0e3      	beq.n	8004ec4 <_malloc_r+0x64>
 8004efc:	1a21      	subs	r1, r4, r0
 8004efe:	4630      	mov	r0, r6
 8004f00:	f000 f808 	bl	8004f14 <_sbrk_r>
 8004f04:	3001      	adds	r0, #1
 8004f06:	d1dd      	bne.n	8004ec4 <_malloc_r+0x64>
 8004f08:	e7cf      	b.n	8004eaa <_malloc_r+0x4a>
 8004f0a:	bf00      	nop
 8004f0c:	20000210 	.word	0x20000210
 8004f10:	20000214 	.word	0x20000214

08004f14 <_sbrk_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	2300      	movs	r3, #0
 8004f18:	4d05      	ldr	r5, [pc, #20]	; (8004f30 <_sbrk_r+0x1c>)
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f7fb fe8c 	bl	8000c3c <_sbrk>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_sbrk_r+0x1a>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_sbrk_r+0x1a>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	200002f0 	.word	0x200002f0

08004f34 <__malloc_lock>:
 8004f34:	4801      	ldr	r0, [pc, #4]	; (8004f3c <__malloc_lock+0x8>)
 8004f36:	f000 b809 	b.w	8004f4c <__retarget_lock_acquire_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	200002f8 	.word	0x200002f8

08004f40 <__malloc_unlock>:
 8004f40:	4801      	ldr	r0, [pc, #4]	; (8004f48 <__malloc_unlock+0x8>)
 8004f42:	f000 b804 	b.w	8004f4e <__retarget_lock_release_recursive>
 8004f46:	bf00      	nop
 8004f48:	200002f8 	.word	0x200002f8

08004f4c <__retarget_lock_acquire_recursive>:
 8004f4c:	4770      	bx	lr

08004f4e <__retarget_lock_release_recursive>:
 8004f4e:	4770      	bx	lr

08004f50 <_init>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	bf00      	nop
 8004f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f56:	bc08      	pop	{r3}
 8004f58:	469e      	mov	lr, r3
 8004f5a:	4770      	bx	lr

08004f5c <_fini>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr
